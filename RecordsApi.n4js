/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services.
 * This specification documents all available endpoints in the latest version of the API.
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { ApiExecuterI, ApiError, checkRequiredParams } from "/ApiHelper"
import { Metadata } from 'Metadata';
import { RecordJobStatus } from 'RecordJobStatus';
import { RecordList } from 'RecordList';




/**
 * @summary Add new record or update subject/record data
 * @param fe Callback interface that runs the fetch query
 * @param studyKey Study key identifying the study context for the request
 * @param ~Object+ An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update).
 * @response 202 [RecordJobStatus] Accepted request for record creation. Returns a job identifier to check status.
 * @response 400 [~Object+] Bad request (malformed or invalid input)
 * @response 401 [~Object+] Authentication failed or was not provided
 * @response 403 [~Object+] Authenticated but not allowed to access the resource
 * @response 404 [~Object+] The requested resource was not found
 * @response 429 [~Object+] Too many requests (rate limit exceeded)
 * @response 500 [~Object+] Internal server error (unexpected condition encountered)
 */
export public async function RecordsApi__createRecords(fe : ApiExecuterI, studyKey: string, ~Object+: ~Object+[]) : Promise<RecordJobStatus, Object | ApiError<~Object+>> {
    checkRequiredParams('createRecords', { 'studyKey': studyKey, '~Object+': ~Object+ });

    const _pathParams = { 
        'studyKey': studyKey };
    const _queryParams = { };
    const _headerParams = { };
    const _body = ~Object+;

    return await fe.<RecordJobStatus, ~Object+>exec(
        'POST', '/api/v1/edc' + '/studies/{studyKey}/records',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}

/**
 * @summary List records (eCRF instances) in a study
 * @param fe Callback interface that runs the fetch query
 * @param studyKey Study key identifying the study context for the request
 * @param page Page index to retrieve (0-based)
 * @param size Number of items to return per page (max 500)
 * @param sort Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated.
 * @param filter Optional filter criteria to apply, in the format &#x60;attribute&#x3D;&#x3D;value&#x60; with support for &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, !&#x3D;. Multiple criteria can be combined with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR).
 * @param recordDataFilter Optional filter criteria to apply on recordData fields (question responses). Supports &#x3D;&#x3D;, !&#x3D;, &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;~ (contains) and can combine multiple criteria with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR).
 * @response 200 [RecordList] Successful response with list of records
 * @response 400 [~Object+] Bad request (malformed or invalid input)
 * @response 401 [~Object+] Authentication failed or was not provided
 * @response 403 [~Object+] Authenticated but not allowed to access the resource
 * @response 404 [~Object+] The requested resource was not found
 * @response 500 [~Object+] Internal server error (unexpected condition encountered)
 */
export public async function RecordsApi__listRecords(fe : ApiExecuterI, studyKey: string, page: int=, size: int=, sort: string=, filter: string=, recordDataFilter: string=) : Promise<RecordList, Object | ApiError<~Object+>> {
    checkRequiredParams('listRecords', { 'studyKey': studyKey,  });

    const _pathParams = { 
        'studyKey': studyKey };
    const _queryParams = { 
        'page': page, 
        'size': size, 
        'sort': sort, 
        'filter': filter, 
        'recordDataFilter': recordDataFilter };
    const _headerParams = { };
    const _body = undefined;

    return await fe.<RecordList, ~Object+>exec(
        'GET', '/api/v1/edc' + '/studies/{studyKey}/records',
        _pathParams, _queryParams, _headerParams,
        undefined,
        _body
    );
}
