--[[
  Mednet EDC API

  The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

  The version of the OpenAPI document: 1.3.6
  
  Generated by: https://openapi-generator.tech
]]

--package openapiclient

local http_request = require "http.request"
local http_util = require "http.util"
local dkjson = require "dkjson"
local basexx = require "basexx"

-- model import
local openapiclient_visit_list = require "openapiclient.model.visit_list"
local openapiclient_inline_object = require "openapiclient.model.inline_object"
local openapiclient_inline_object_1 = require "openapiclient.model.inline_object_1"
local openapiclient_inline_object_2 = require "openapiclient.model.inline_object_2"
local openapiclient_inline_object_3 = require "openapiclient.model.inline_object_3"
local openapiclient_inline_object_5 = require "openapiclient.model.inline_object_5"

local visits_api = {}
local visits_api_mt = {
	__name = "visits_api";
	__index = visits_api;
}

local function new_visits_api(authority, basePath, schemes)
	local schemes_map = {}
	for _,v in ipairs(schemes) do
		schemes_map[v] = v
	end
	local default_scheme = schemes_map.https or schemes_map.http
	local host, port = http_util.split_authority(authority, default_scheme)
	return setmetatable({
		host = host;
		port = port;
		basePath = basePath or "https://edc.prod.imednetapi.com/api/v1/edc";
		schemes = schemes_map;
		default_scheme = default_scheme;
		http_username = nil;
		http_password = nil;
		api_key = {};
		access_token = nil;
	}, visits_api_mt)
end

function visits_api:list_visits(study_key, page, size, sort, filter)
	local req = http_request.new_from_uri({
		scheme = self.default_scheme;
		host = self.host;
		port = self.port;
		path = string.format("%s/studies/%s/visits?page=%s&size=%s&sort=%s&filter=%s",
			self.basePath, study_key, http_util.encodeURIComponent(page), http_util.encodeURIComponent(size), http_util.encodeURIComponent(sort), http_util.encodeURIComponent(filter));
	})

	-- set HTTP verb
	req.headers:upsert(":method", "GET")
	-- TODO: create a function to select proper content-type
	--local var_accept = { "application/json" }
	req.headers:upsert("content-type", "application/json")

	-- api key in headers 'x-api-key'
	if self.api_key['x-api-key'] then
		req.headers:upsert("apiKeyAuth", self.api_key['x-api-key'])
	end
	-- api key in headers 'x-imn-security-key'
	if self.api_key['x-imn-security-key'] then
		req.headers:upsert("securityKeyAuth", self.api_key['x-imn-security-key'])
	end

	-- make the HTTP call
	local headers, stream, errno = req:go()
	if not headers then
		return nil, stream, errno
	end
	local http_status = headers:get(":status")
	if http_status:sub(1,1) == "2" then
		local body, err, errno2 = stream:get_body_as_string()
		-- exception when getting the HTTP body
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		local result, _, err3 = dkjson.decode(body)
		-- exception when decoding the HTTP body
		if result == nil then
			return nil, err3
		end
		return openapiclient_visit_list.cast(result), headers
	else
		local body, err, errno2 = stream:get_body_as_string()
		if not body then
			return nil, err, errno2
		end
		stream:shutdown()
		-- return the error message (http body)
		return nil, http_status, body
	end
end

return {
	new = new_visits_api;
}
