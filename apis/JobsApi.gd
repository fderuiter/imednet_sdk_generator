extends ApiBee
class_name JobsApi

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, © Public Domain, 2022

# API JobsApi
# Instantiate this object and use it to make requests to the API.

func _bzz_get_api_name() -> String:
	return "JobsApi"


# Operation getJobStatus → GET /studies/{studyKey}/jobs/{batchId}
# Retrieve job status by batch ID
func get_job_status(
	# studyKey: String   Eg: studyKey_example
	# Study key identifying the study context for the request
	studyKey: String,
	# batchId: String   Eg: batchId_example
	# Batch ID of the job to retrieve
	batchId: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v1/edc/studies/{studyKey}/jobs/{batchId}".replace("{" + "studyKey" + "}", _bzz_urlize_path_param(studyKey)).replace("{" + "batchId" + "}", _bzz_urlize_path_param(batchId))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = Job.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func get_job_status_threaded(
	# studyKey: String   Eg: studyKey_example
	# Study key identifying the study context for the request
	studyKey: String,
	# batchId: String   Eg: batchId_example
	# Batch ID of the job to retrieve
	batchId: String,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "get_job_status")
	bzz_callable.bind(
		studyKey,
		batchId,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


