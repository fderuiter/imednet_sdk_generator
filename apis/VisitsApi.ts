// tslint:disable
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    InlineObject,
    InlineObject1,
    InlineObject2,
    InlineObject3,
    InlineObject5,
    VisitList,
} from '../models';

export interface ListVisitsRequest {
    studyKey: string;
    page?: number;
    size?: number;
    sort?: string;
    filter?: string;
}

/**
 * no description
 */
export class VisitsApi extends BaseAPI {

    /**
     * List visits (subject visit instances) in a study
     */
    listVisits({ studyKey, page, size, sort, filter }: ListVisitsRequest): Observable<VisitList>
    listVisits({ studyKey, page, size, sort, filter }: ListVisitsRequest, opts?: OperationOpts): Observable<AjaxResponse<VisitList>>
    listVisits({ studyKey, page, size, sort, filter }: ListVisitsRequest, opts?: OperationOpts): Observable<VisitList | AjaxResponse<VisitList>> {
        throwIfNullOrUndefined(studyKey, 'studyKey', 'listVisits');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'x-api-key': this.configuration.apiKey('x-api-key') }), // apiKeyAuth authentication
            ...(this.configuration.apiKey && { 'x-imn-security-key': this.configuration.apiKey('x-imn-security-key') }), // securityKeyAuth authentication
        };

        const query: HttpQuery = {};

        if (page != null) { query['page'] = page; }
        if (size != null) { query['size'] = size; }
        if (sort != null) { query['sort'] = sort; }
        if (filter != null) { query['filter'] = filter; }

        return this.request<VisitList>({
            url: '/studies/{studyKey}/visits'.replace('{studyKey}', encodeURI(studyKey)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
