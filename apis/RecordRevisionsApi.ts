/* tslint:disable */
/* eslint-disable */
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  InlineObject,
  InlineObject1,
  InlineObject2,
  InlineObject3,
  InlineObject5,
  RecordRevisionList,
} from '../models/index';
import {
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject3FromJSON,
    InlineObject3ToJSON,
    InlineObject5FromJSON,
    InlineObject5ToJSON,
    RecordRevisionListFromJSON,
    RecordRevisionListToJSON,
} from '../models/index';

export interface ListRecordRevisionsRequest {
    studyKey: string;
    page?: number;
    size?: number;
    sort?: string;
    filter?: string;
}

/**
 * 
 */
export class RecordRevisionsApi extends runtime.BaseAPI {

    /**
     * List record revisions (audit trail entries) in a study
     */
    async listRecordRevisionsRaw(requestParameters: ListRecordRevisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RecordRevisionList>> {
        if (requestParameters['studyKey'] == null) {
            throw new runtime.RequiredError(
                'studyKey',
                'Required parameter "studyKey" was null or undefined when calling listRecordRevisions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-api-key"] = await this.configuration.apiKey("x-api-key"); // apiKeyAuth authentication
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-imn-security-key"] = await this.configuration.apiKey("x-imn-security-key"); // securityKeyAuth authentication
        }


        let urlPath = `/studies/{studyKey}/recordRevisions`;
        urlPath = urlPath.replace(`{${"studyKey"}}`, encodeURIComponent(String(requestParameters['studyKey'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RecordRevisionListFromJSON(jsonValue));
    }

    /**
     * List record revisions (audit trail entries) in a study
     */
    async listRecordRevisions(requestParameters: ListRecordRevisionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RecordRevisionList> {
        const response = await this.listRecordRevisionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
