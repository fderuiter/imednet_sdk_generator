extends ApiBee
class_name VisitsApi

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, © Public Domain, 2022

# API VisitsApi
# Instantiate this object and use it to make requests to the API.

func _bzz_get_api_name() -> String:
	return "VisitsApi"


# Operation listVisits → GET /studies/{studyKey}/visits
# List visits (subject visit instances) in a study
func list_visits(
	# studyKey: String   Eg: studyKey_example
	# Study key identifying the study context for the request
	studyKey: String,
	# page: int = 0   Eg: 0
	# Page index to retrieve (0-based)
	page = 0,
	# size: int = 25   Eg: 25
	# Number of items to return per page (max 500)
	size = 25,
	# sort: String   Eg: sort_example
	# Sorting criteria in the format `property,ASC` or `property,DESC`. Can be repeated.
	sort = null,
	# filter: String   Eg: filter_example
	# Optional filter criteria to apply, in the format `attribute==value` with support for >, >=, <, <=, !=. Multiple criteria can be combined with `;` (AND) or `,` (OR).
	filter = null,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
):

	# Validate param `page` constraints
	if page < 0:
		var error := ApiError.new()
		error.identifier = "list_visits.param.validation.minimum"
		error.message = "Invalid value for `page`, must be greater than or equal to 0."
		on_failure.call(error)
		return

	# Validate param `size` constraints
	if size > 500:
		var error := ApiError.new()
		error.identifier = "list_visits.param.validation.maximum"
		error.message = "Invalid value for `size`, must be smaller than or equal to 500."
		on_failure.call(error)
		return
	if size < 1:
		var error := ApiError.new()
		error.identifier = "list_visits.param.validation.minimum"
		error.message = "Invalid value for `size`, must be greater than or equal to 1."
		on_failure.call(error)
		return

	# Convert the String HTTP method to a Constant Godot understands
	var bzz_method := self._bzz_convert_http_method("GET")

	# Compute the URL path to the API resource
	var bzz_path := "/api/v1/edc/studies/{studyKey}/visits".replace("{" + "studyKey" + "}", _bzz_urlize_path_param(studyKey))

	# Collect the headers
	var bzz_headers := Dictionary()
	var bzz_mimes_produced_by_server := ['application/json']
	for bzz_mime in BZZ_CONSUMABLE_CONTENT_TYPES:
		if bzz_mime in bzz_mimes_produced_by_server:
			bzz_headers["Accept"] = bzz_mime
			break

	# Collect the query parameters
	# Note: we do not support multiple values for a single param (for now), nor arrays
	var bzz_query := Dictionary()
	bzz_query["page"] = page
	bzz_query["size"] = size
	bzz_query["sort"] = sort
	bzz_query["filter"] = filter

	var bzz_body = null

	self._bzz_request(
		bzz_method, bzz_path, bzz_headers, bzz_query, bzz_body,
		func(bzz_response):
			bzz_response.data = VisitList.bzz_denormalize_single(bzz_response.data)
			on_success.call(bzz_response)
			,
		func(bzz_error):
			on_failure.call(bzz_error)
			,  # ざわ‥
	)


func list_visits_threaded(
	# studyKey: String   Eg: studyKey_example
	# Study key identifying the study context for the request
	studyKey: String,
	# page: int = 0   Eg: 0
	# Page index to retrieve (0-based)
	page = 0,
	# size: int = 25   Eg: 25
	# Number of items to return per page (max 500)
	size = 25,
	# sort: String   Eg: sort_example
	# Sorting criteria in the format `property,ASC` or `property,DESC`. Can be repeated.
	sort = null,
	# filter: String   Eg: filter_example
	# Optional filter criteria to apply, in the format `attribute==value` with support for >, >=, <, <=, !=. Multiple criteria can be combined with `;` (AND) or `,` (OR).
	filter = null,
	on_success: Callable = Callable(),  # func(response: ApiResponse)
	on_failure: Callable = Callable(),  # func(error: ApiError)
) -> Thread:
	var bzz_thread := Thread.new()
	var bzz_callable := Callable(self, "list_visits")
	bzz_callable.bind(
		studyKey,
		page,
		size,
		sort,
		filter,
		on_success,
		on_failure,
	)
	bzz_thread.start(bzz_callable)
	return bzz_thread


