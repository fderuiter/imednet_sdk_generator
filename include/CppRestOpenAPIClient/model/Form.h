/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Form.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Form_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Form_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



class  Form
    : public ModelBase
{
public:
    Form();
    virtual ~Form();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Form members


    /// <summary>
    /// Unique study key
    /// </summary>
    utility::string_t getStudyKey() const;
    bool studyKeyIsSet() const;
    void unsetStudyKey();
    void setStudyKey(const utility::string_t& value);

    /// <summary>
    /// Mednet Form ID
    /// </summary>
    int32_t getFormId() const;
    bool formIdIsSet() const;
    void unsetFormId();
    void setFormId(int32_t value);

    /// <summary>
    /// User-defined form key
    /// </summary>
    utility::string_t getFormKey() const;
    bool formKeyIsSet() const;
    void unsetFormKey();
    void setFormKey(const utility::string_t& value);

    /// <summary>
    /// Name of the form (eCRF)
    /// </summary>
    utility::string_t getFormName() const;
    bool formNameIsSet() const;
    void unsetFormName();
    void setFormName(const utility::string_t& value);

    /// <summary>
    /// Type of the form (e.g., Subject or Site)
    /// </summary>
    utility::string_t getFormType() const;
    bool formTypeIsSet() const;
    void unsetFormType();
    void setFormType(const utility::string_t& value);

    /// <summary>
    /// Number of modifications (revisions) of the form metadata
    /// </summary>
    int32_t getRevision() const;
    bool revisionIsSet() const;
    void unsetRevision();
    void setRevision(int32_t value);

    /// <summary>
    /// Whether the form has an embedded log
    /// </summary>
    bool isEmbeddedLog() const;
    bool embeddedLogIsSet() const;
    void unsetEmbeddedLog();
    void setEmbeddedLog(bool value);

    /// <summary>
    /// Whether the form enforces record ownership
    /// </summary>
    bool isEnforceOwnership() const;
    bool enforceOwnershipIsSet() const;
    void unsetEnforceOwnership();
    void setEnforceOwnership(bool value);

    /// <summary>
    /// Whether the form requires a user agreement
    /// </summary>
    bool isUserAgreement() const;
    bool userAgreementIsSet() const;
    void unsetUserAgreement();
    void setUserAgreement(bool value);

    /// <summary>
    /// Whether the form is marked as a subject record report
    /// </summary>
    bool isSubjectRecordReport() const;
    bool subjectRecordReportIsSet() const;
    void unsetSubjectRecordReport();
    void setSubjectRecordReport(bool value);

    /// <summary>
    /// Whether the form is included in unscheduled visits
    /// </summary>
    bool isUnscheduledVisit() const;
    bool unscheduledVisitIsSet() const;
    void unsetUnscheduledVisit();
    void setUnscheduledVisit(bool value);

    /// <summary>
    /// Whether the form is included in Other Forms category
    /// </summary>
    bool isOtherForms() const;
    bool otherFormsIsSet() const;
    void unsetOtherForms();
    void setOtherForms(bool value);

    /// <summary>
    /// Whether the form is an ePRO (electronic patient reported outcome) form
    /// </summary>
    bool isEproForm() const;
    bool eproFormIsSet() const;
    void unsetEproForm();
    void setEproForm(bool value);

    /// <summary>
    /// Whether the form allows copying of data
    /// </summary>
    bool isAllowCopy() const;
    bool allowCopyIsSet() const;
    void unsetAllowCopy();
    void setAllowCopy(bool value);

    /// <summary>
    /// Whether the form is soft-deleted (disabled)
    /// </summary>
    bool isDisabled() const;
    bool disabledIsSet() const;
    void unsetDisabled();
    void setDisabled(bool value);

    /// <summary>
    /// Date when this form was created
    /// </summary>
    utility::string_t getDateCreated() const;
    bool dateCreatedIsSet() const;
    void unsetDateCreated();
    void setDateCreated(const utility::string_t& value);

    /// <summary>
    /// Date when this form was last modified
    /// </summary>
    utility::string_t getDateModified() const;
    bool dateModifiedIsSet() const;
    void unsetDateModified();
    void setDateModified(const utility::string_t& value);


protected:
    utility::string_t m_StudyKey;
    bool m_StudyKeyIsSet;

    int32_t m_FormId;
    bool m_FormIdIsSet;

    utility::string_t m_FormKey;
    bool m_FormKeyIsSet;

    utility::string_t m_FormName;
    bool m_FormNameIsSet;

    utility::string_t m_FormType;
    bool m_FormTypeIsSet;

    int32_t m_Revision;
    bool m_RevisionIsSet;

    bool m_EmbeddedLog;
    bool m_EmbeddedLogIsSet;

    bool m_EnforceOwnership;
    bool m_EnforceOwnershipIsSet;

    bool m_UserAgreement;
    bool m_UserAgreementIsSet;

    bool m_SubjectRecordReport;
    bool m_SubjectRecordReportIsSet;

    bool m_UnscheduledVisit;
    bool m_UnscheduledVisitIsSet;

    bool m_OtherForms;
    bool m_OtherFormsIsSet;

    bool m_EproForm;
    bool m_EproFormIsSet;

    bool m_AllowCopy;
    bool m_AllowCopyIsSet;

    bool m_Disabled;
    bool m_DisabledIsSet;

    utility::string_t m_DateCreated;
    bool m_DateCreatedIsSet;

    utility::string_t m_DateModified;
    bool m_DateModifiedIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Form_H_ */
