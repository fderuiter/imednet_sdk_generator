/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Components_schemas_RecordCreateRequest_item.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Components_schemas_RecordCreateRequest_item_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Components_schemas_RecordCreateRequest_item_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include "CppRestOpenAPIClient/AnyType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



class  Components_schemas_RecordCreateRequest_item
    : public ModelBase
{
public:
    Components_schemas_RecordCreateRequest_item();
    virtual ~Components_schemas_RecordCreateRequest_item();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Components_schemas_RecordCreateRequest_item members


    /// <summary>
    /// Form key identifying the eCRF to create or update
    /// </summary>
    utility::string_t getFormKey() const;
    bool formKeyIsSet() const;
    void unsetFormKey();
    void setFormKey(const utility::string_t& value);

    /// <summary>
    /// Form ID identifying the eCRF to create or update (alternative to formKey)
    /// </summary>
    int32_t getFormId() const;
    bool formIdIsSet() const;
    void unsetFormId();
    void setFormId(int32_t value);

    /// <summary>
    /// Name of the site where the record should be created (for new subject registration)
    /// </summary>
    utility::string_t getSiteName() const;
    bool siteNameIsSet() const;
    void unsetSiteName();
    void setSiteName(const utility::string_t& value);

    /// <summary>
    /// Site ID for the record (alternative to siteName)
    /// </summary>
    int32_t getSiteId() const;
    bool siteIdIsSet() const;
    void unsetSiteId();
    void setSiteId(int32_t value);

    /// <summary>
    /// Subject identifier (display ID) for which to create or update the record
    /// </summary>
    utility::string_t getSubjectKey() const;
    bool subjectKeyIsSet() const;
    void unsetSubjectKey();
    void setSubjectKey(const utility::string_t& value);

    /// <summary>
    /// Subject ID for which to create or update the record (alternative to subjectKey)
    /// </summary>
    int32_t getSubjectId() const;
    bool subjectIdIsSet() const;
    void unsetSubjectId();
    void setSubjectId(int32_t value);

    /// <summary>
    /// Subject OID for which to create or update the record (alternative to subjectKey)
    /// </summary>
    utility::string_t getSubjectOid() const;
    bool subjectOidIsSet() const;
    void unsetSubjectOid();
    void setSubjectOid(const utility::string_t& value);

    /// <summary>
    /// Name of the interval (visit) for a scheduled record update
    /// </summary>
    utility::string_t getIntervalName() const;
    bool intervalNameIsSet() const;
    void unsetIntervalName();
    void setIntervalName(const utility::string_t& value);

    /// <summary>
    /// Interval ID for a scheduled record update (alternative to intervalName)
    /// </summary>
    int32_t getIntervalId() const;
    bool intervalIdIsSet() const;
    void unsetIntervalId();
    void setIntervalId(int32_t value);

    /// <summary>
    /// Record ID for updating an existing unscheduled record (if applicable)
    /// </summary>
    int32_t getRecordId() const;
    bool recordIdIsSet() const;
    void unsetRecordId();
    void setRecordId(int32_t value);

    /// <summary>
    /// Record OID for updating an existing unscheduled record (if applicable)
    /// </summary>
    utility::string_t getRecordOid() const;
    bool recordOidIsSet() const;
    void unsetRecordOid();
    void setRecordOid(const utility::string_t& value);

    /// <summary>
    /// Key-value pairs of field names and values for the record data
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<AnyType>> getData() const;
    bool dataIsSet() const;
    void unsetData();
    void setData(const std::map<utility::string_t, std::shared_ptr<AnyType>>& value);


protected:
    utility::string_t m_FormKey;
    bool m_FormKeyIsSet;

    int32_t m_FormId;
    bool m_FormIdIsSet;

    utility::string_t m_SiteName;
    bool m_SiteNameIsSet;

    int32_t m_SiteId;
    bool m_SiteIdIsSet;

    utility::string_t m_SubjectKey;
    bool m_SubjectKeyIsSet;

    int32_t m_SubjectId;
    bool m_SubjectIdIsSet;

    utility::string_t m_SubjectOid;
    bool m_SubjectOidIsSet;

    utility::string_t m_IntervalName;
    bool m_IntervalNameIsSet;

    int32_t m_IntervalId;
    bool m_IntervalIdIsSet;

    int32_t m_RecordId;
    bool m_RecordIdIsSet;

    utility::string_t m_RecordOid;
    bool m_RecordOidIsSet;

    std::map<utility::string_t, std::shared_ptr<AnyType>> m_Data;
    bool m_DataIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Components_schemas_RecordCreateRequest_item_H_ */
