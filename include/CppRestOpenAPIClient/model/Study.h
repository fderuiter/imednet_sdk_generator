/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Study.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Study_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Study_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



class  Study
    : public ModelBase
{
public:
    Study();
    virtual ~Study();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Study members


    /// <summary>
    /// Sponsor key that this study belongs to
    /// </summary>
    utility::string_t getSponsorKey() const;
    bool sponsorKeyIsSet() const;
    void unsetSponsorKey();
    void setSponsorKey(const utility::string_t& value);

    /// <summary>
    /// Unique study key
    /// </summary>
    utility::string_t getStudyKey() const;
    bool studyKeyIsSet() const;
    void unsetStudyKey();
    void setStudyKey(const utility::string_t& value);

    /// <summary>
    /// Mednet study ID (internal numeric identifier)
    /// </summary>
    int32_t getStudyId() const;
    bool studyIdIsSet() const;
    void unsetStudyId();
    void setStudyId(int32_t value);

    /// <summary>
    /// Name of the study
    /// </summary>
    utility::string_t getStudyName() const;
    bool studyNameIsSet() const;
    void unsetStudyName();
    void setStudyName(const utility::string_t& value);

    /// <summary>
    /// Description of the study
    /// </summary>
    utility::string_t getStudyDescription() const;
    bool studyDescriptionIsSet() const;
    void unsetStudyDescription();
    void setStudyDescription(const utility::string_t& value);

    /// <summary>
    /// Type of study (e.g., STUDY)
    /// </summary>
    utility::string_t getStudyType() const;
    bool studyTypeIsSet() const;
    void unsetStudyType();
    void setStudyType(const utility::string_t& value);

    /// <summary>
    /// Date when the study record was created
    /// </summary>
    utility::string_t getDateCreated() const;
    bool dateCreatedIsSet() const;
    void unsetDateCreated();
    void setDateCreated(const utility::string_t& value);

    /// <summary>
    /// Date when the study record was last modified
    /// </summary>
    utility::string_t getDateModified() const;
    bool dateModifiedIsSet() const;
    void unsetDateModified();
    void setDateModified(const utility::string_t& value);


protected:
    utility::string_t m_SponsorKey;
    bool m_SponsorKeyIsSet;

    utility::string_t m_StudyKey;
    bool m_StudyKeyIsSet;

    int32_t m_StudyId;
    bool m_StudyIdIsSet;

    utility::string_t m_StudyName;
    bool m_StudyNameIsSet;

    utility::string_t m_StudyDescription;
    bool m_StudyDescriptionIsSet;

    utility::string_t m_StudyType;
    bool m_StudyTypeIsSet;

    utility::string_t m_DateCreated;
    bool m_DateCreatedIsSet;

    utility::string_t m_DateModified;
    bool m_DateModifiedIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Study_H_ */
