/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Visit.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Visit_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Visit_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



class  Visit
    : public ModelBase
{
public:
    Visit();
    virtual ~Visit();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Visit members


    /// <summary>
    /// Unique study key
    /// </summary>
    utility::string_t getStudyKey() const;
    bool studyKeyIsSet() const;
    void unsetStudyKey();
    void setStudyKey(const utility::string_t& value);

    /// <summary>
    /// Unique system identifier for the subject visit instance
    /// </summary>
    int32_t getVisitId() const;
    bool visitIdIsSet() const;
    void unsetVisitId();
    void setVisitId(int32_t value);

    /// <summary>
    /// Unique system identifier of the interval definition for this visit
    /// </summary>
    int32_t getIntervalId() const;
    bool intervalIdIsSet() const;
    void unsetIntervalId();
    void setIntervalId(int32_t value);

    /// <summary>
    /// Name of the interval (visit) for this visit instance
    /// </summary>
    utility::string_t getIntervalName() const;
    bool intervalNameIsSet() const;
    void unsetIntervalName();
    void setIntervalName(const utility::string_t& value);

    /// <summary>
    /// Mednet subject ID of the subject
    /// </summary>
    int32_t getSubjectId() const;
    bool subjectIdIsSet() const;
    void unsetSubjectId();
    void setSubjectId(int32_t value);

    /// <summary>
    /// Protocol-assigned subject identifier
    /// </summary>
    utility::string_t getSubjectKey() const;
    bool subjectKeyIsSet() const;
    void unsetSubjectKey();
    void setSubjectKey(const utility::string_t& value);

    /// <summary>
    /// Start date of the visit window (in YYYY-MM-DD format)
    /// </summary>
    utility::string_t getStartDate() const;
    bool startDateIsSet() const;
    void unsetStartDate();
    void setStartDate(const utility::string_t& value);

    /// <summary>
    /// End date of the visit window (in YYYY-MM-DD format)
    /// </summary>
    utility::string_t getEndDate() const;
    bool endDateIsSet() const;
    void unsetEndDate();
    void setEndDate(const utility::string_t& value);

    /// <summary>
    /// Due date of the visit (in YYYY-MM-DD format), if applicable
    /// </summary>
    utility::string_t getDueDate() const;
    bool dueDateIsSet() const;
    void unsetDueDate();
    void setDueDate(const utility::string_t& value);

    /// <summary>
    /// Actual date the visit took place (in YYYY-MM-DD format)
    /// </summary>
    utility::string_t getVisitDate() const;
    bool visitDateIsSet() const;
    void unsetVisitDate();
    void setVisitDate(const utility::string_t& value);

    /// <summary>
    /// Name of the form used to capture the actual visit date
    /// </summary>
    utility::string_t getVisitDateForm() const;
    bool visitDateFormIsSet() const;
    void unsetVisitDateForm();
    void setVisitDateForm(const utility::string_t& value);

    /// <summary>
    /// Variable name of the field capturing the actual visit date
    /// </summary>
    utility::string_t getVisitDateQuestion() const;
    bool visitDateQuestionIsSet() const;
    void unsetVisitDateQuestion();
    void setVisitDateQuestion(const utility::string_t& value);

    /// <summary>
    /// Whether the visit instance is marked as deleted
    /// </summary>
    bool isDeleted() const;
    bool deletedIsSet() const;
    void unsetDeleted();
    void setDeleted(bool value);

    /// <summary>
    /// Date when this visit record was created
    /// </summary>
    utility::string_t getDateCreated() const;
    bool dateCreatedIsSet() const;
    void unsetDateCreated();
    void setDateCreated(const utility::string_t& value);

    /// <summary>
    /// Date when this visit record was last modified
    /// </summary>
    utility::string_t getDateModified() const;
    bool dateModifiedIsSet() const;
    void unsetDateModified();
    void setDateModified(const utility::string_t& value);


protected:
    utility::string_t m_StudyKey;
    bool m_StudyKeyIsSet;

    int32_t m_VisitId;
    bool m_VisitIdIsSet;

    int32_t m_IntervalId;
    bool m_IntervalIdIsSet;

    utility::string_t m_IntervalName;
    bool m_IntervalNameIsSet;

    int32_t m_SubjectId;
    bool m_SubjectIdIsSet;

    utility::string_t m_SubjectKey;
    bool m_SubjectKeyIsSet;

    utility::string_t m_StartDate;
    bool m_StartDateIsSet;

    utility::string_t m_EndDate;
    bool m_EndDateIsSet;

    utility::string_t m_DueDate;
    bool m_DueDateIsSet;

    utility::string_t m_VisitDate;
    bool m_VisitDateIsSet;

    utility::string_t m_VisitDateForm;
    bool m_VisitDateFormIsSet;

    utility::string_t m_VisitDateQuestion;
    bool m_VisitDateQuestionIsSet;

    bool m_Deleted;
    bool m_DeletedIsSet;

    utility::string_t m_DateCreated;
    bool m_DateCreatedIsSet;

    utility::string_t m_DateModified;
    bool m_DateModifiedIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Visit_H_ */
