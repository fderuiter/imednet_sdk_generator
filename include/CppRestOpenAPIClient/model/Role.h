/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Role.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Role_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Role_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {



class  Role
    : public ModelBase
{
public:
    Role();
    virtual ~Role();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Role members


    /// <summary>
    /// Timestamp when the role assignment was created (as [year, month, day, hour, minute, second, nanosecond])
    /// </summary>
    std::vector<int32_t> getDateCreated() const;
    bool dateCreatedIsSet() const;
    void unsetDateCreated();
    void setDateCreated(std::vector<int32_t> value);

    /// <summary>
    /// Timestamp when the role assignment was last modified
    /// </summary>
    std::vector<int32_t> getDateModified() const;
    bool dateModifiedIsSet() const;
    void unsetDateModified();
    void setDateModified(std::vector<int32_t> value);

    /// <summary>
    /// Unique role ID (UUID)
    /// </summary>
    utility::string_t getRoleId() const;
    bool roleIdIsSet() const;
    void unsetRoleId();
    void setRoleId(const utility::string_t& value);

    /// <summary>
    /// Community ID or level associated with the role
    /// </summary>
    int32_t getCommunityId() const;
    bool communityIdIsSet() const;
    void unsetCommunityId();
    void setCommunityId(int32_t value);

    /// <summary>
    /// Name of the role
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();
    void setName(const utility::string_t& value);

    /// <summary>
    /// Description of the role
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();
    void setDescription(const utility::string_t& value);

    /// <summary>
    /// Role level or hierarchy
    /// </summary>
    int32_t getLevel() const;
    bool levelIsSet() const;
    void unsetLevel();
    void setLevel(int32_t value);

    /// <summary>
    /// Role type/category
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();
    void setType(const utility::string_t& value);

    /// <summary>
    /// Whether the role is inactive
    /// </summary>
    bool isInactive() const;
    bool inactiveIsSet() const;
    void unsetInactive();
    void setInactive(bool value);


protected:
    std::vector<int32_t> m_DateCreated;
    bool m_DateCreatedIsSet;

    std::vector<int32_t> m_DateModified;
    bool m_DateModifiedIsSet;

    utility::string_t m_RoleId;
    bool m_RoleIdIsSet;

    int32_t m_CommunityId;
    bool m_CommunityIdIsSet;

    utility::string_t m_Name;
    bool m_NameIsSet;

    utility::string_t m_Description;
    bool m_DescriptionIsSet;

    int32_t m_Level;
    bool m_LevelIsSet;

    utility::string_t m_Type;
    bool m_TypeIsSet;

    bool m_Inactive;
    bool m_InactiveIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Role_H_ */
