/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Record.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Record_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Record_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Keyword.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>
#include "CppRestOpenAPIClient/AnyType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Keyword;


class  Record
    : public ModelBase
{
public:
    Record();
    virtual ~Record();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Record members


    /// <summary>
    /// Unique study key
    /// </summary>
    utility::string_t getStudyKey() const;
    bool studyKeyIsSet() const;
    void unsetStudyKey();
    void setStudyKey(const utility::string_t& value);

    /// <summary>
    /// Interval ID (visit definition) that this record is associated with
    /// </summary>
    int32_t getIntervalId() const;
    bool intervalIdIsSet() const;
    void unsetIntervalId();
    void setIntervalId(int32_t value);

    /// <summary>
    /// Form ID of the form this record instance belongs to
    /// </summary>
    int32_t getFormId() const;
    bool formIdIsSet() const;
    void unsetFormId();
    void setFormId(int32_t value);

    /// <summary>
    /// Form key of the form for this record instance
    /// </summary>
    utility::string_t getFormKey() const;
    bool formKeyIsSet() const;
    void unsetFormKey();
    void setFormKey(const utility::string_t& value);

    /// <summary>
    /// Site ID associated with the record
    /// </summary>
    int32_t getSiteId() const;
    bool siteIdIsSet() const;
    void unsetSiteId();
    void setSiteId(int32_t value);

    /// <summary>
    /// Unique record ID
    /// </summary>
    int32_t getRecordId() const;
    bool recordIdIsSet() const;
    void unsetRecordId();
    void setRecordId(int32_t value);

    /// <summary>
    /// Client-assigned record OID
    /// </summary>
    utility::string_t getRecordOid() const;
    bool recordOidIsSet() const;
    void unsetRecordOid();
    void setRecordOid(const utility::string_t& value);

    /// <summary>
    /// Type of record (e.g., SUBJECT for subject-related forms)
    /// </summary>
    utility::string_t getRecordType() const;
    bool recordTypeIsSet() const;
    void unsetRecordType();
    void setRecordType(const utility::string_t& value);

    /// <summary>
    /// Current status of the record (e.g., Record Incomplete, Record Complete)
    /// </summary>
    utility::string_t getRecordStatus() const;
    bool recordStatusIsSet() const;
    void unsetRecordStatus();
    void setRecordStatus(const utility::string_t& value);

    /// <summary>
    /// Whether the record is marked as deleted
    /// </summary>
    bool isDeleted() const;
    bool deletedIsSet() const;
    void unsetDeleted();
    void setDeleted(bool value);

    /// <summary>
    /// Date when this record was created
    /// </summary>
    utility::string_t getDateCreated() const;
    bool dateCreatedIsSet() const;
    void unsetDateCreated();
    void setDateCreated(const utility::string_t& value);

    /// <summary>
    /// Date when this record was last modified
    /// </summary>
    utility::string_t getDateModified() const;
    bool dateModifiedIsSet() const;
    void unsetDateModified();
    void setDateModified(const utility::string_t& value);

    /// <summary>
    /// Mednet subject ID that this record is associated with
    /// </summary>
    int32_t getSubjectId() const;
    bool subjectIdIsSet() const;
    void unsetSubjectId();
    void setSubjectId(int32_t value);

    /// <summary>
    /// Client-assigned subject OID for the subject this record is associated with
    /// </summary>
    utility::string_t getSubjectOid() const;
    bool subjectOidIsSet() const;
    void unsetSubjectOid();
    void setSubjectOid(const utility::string_t& value);

    /// <summary>
    /// Subject display ID that this record is associated with
    /// </summary>
    utility::string_t getSubjectKey() const;
    bool subjectKeyIsSet() const;
    void unsetSubjectKey();
    void setSubjectKey(const utility::string_t& value);

    /// <summary>
    /// Visit instance ID that this record is associated with (if applicable)
    /// </summary>
    int32_t getVisitId() const;
    bool visitIdIsSet() const;
    void unsetVisitId();
    void setVisitId(int32_t value);

    /// <summary>
    /// Record ID of the parent record if this record is a subrecord (if applicable)
    /// </summary>
    int32_t getParentRecordId() const;
    bool parentRecordIdIsSet() const;
    void unsetParentRecordId();
    void setParentRecordId(int32_t value);

    /// <summary>
    /// List of keywords associated with the record
    /// </summary>
    std::vector<std::shared_ptr<Keyword>> getKeywords() const;
    bool keywordsIsSet() const;
    void unsetKeywords();
    void setKeywords(const std::vector<std::shared_ptr<Keyword>>& value);

    /// <summary>
    /// Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<AnyType>> getRecordData() const;
    bool recordDataIsSet() const;
    void unsetRecordData();
    void setRecordData(const std::map<utility::string_t, std::shared_ptr<AnyType>>& value);


protected:
    utility::string_t m_StudyKey;
    bool m_StudyKeyIsSet;

    int32_t m_IntervalId;
    bool m_IntervalIdIsSet;

    int32_t m_FormId;
    bool m_FormIdIsSet;

    utility::string_t m_FormKey;
    bool m_FormKeyIsSet;

    int32_t m_SiteId;
    bool m_SiteIdIsSet;

    int32_t m_RecordId;
    bool m_RecordIdIsSet;

    utility::string_t m_RecordOid;
    bool m_RecordOidIsSet;

    utility::string_t m_RecordType;
    bool m_RecordTypeIsSet;

    utility::string_t m_RecordStatus;
    bool m_RecordStatusIsSet;

    bool m_Deleted;
    bool m_DeletedIsSet;

    utility::string_t m_DateCreated;
    bool m_DateCreatedIsSet;

    utility::string_t m_DateModified;
    bool m_DateModifiedIsSet;

    int32_t m_SubjectId;
    bool m_SubjectIdIsSet;

    utility::string_t m_SubjectOid;
    bool m_SubjectOidIsSet;

    utility::string_t m_SubjectKey;
    bool m_SubjectKeyIsSet;

    int32_t m_VisitId;
    bool m_VisitIdIsSet;

    int32_t m_ParentRecordId;
    bool m_ParentRecordIdIsSet;

    std::vector<std::shared_ptr<Keyword>> m_Keywords;
    bool m_KeywordsIsSet;

    std::map<utility::string_t, std::shared_ptr<AnyType>> m_RecordData;
    bool m_RecordDataIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Record_H_ */
