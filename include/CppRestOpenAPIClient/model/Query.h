/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Query.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Query_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Query_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>
#include "CppRestOpenAPIClient/model/QueryComment.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class QueryComment;


class  Query
    : public ModelBase
{
public:
    Query();
    virtual ~Query();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Query members


    /// <summary>
    /// Unique study key
    /// </summary>
    utility::string_t getStudyKey() const;
    bool studyKeyIsSet() const;
    void unsetStudyKey();
    void setStudyKey(const utility::string_t& value);

    /// <summary>
    /// Mednet subject ID associated with the query (if applicable)
    /// </summary>
    int32_t getSubjectId() const;
    bool subjectIdIsSet() const;
    void unsetSubjectId();
    void setSubjectId(int32_t value);

    /// <summary>
    /// Client-assigned subject OID (if applicable)
    /// </summary>
    utility::string_t getSubjectOid() const;
    bool subjectOidIsSet() const;
    void unsetSubjectOid();
    void setSubjectOid(const utility::string_t& value);

    /// <summary>
    /// Category/type of the query (e.g., subject, record, question)
    /// </summary>
    utility::string_t getAnnotationType() const;
    bool annotationTypeIsSet() const;
    void unsetAnnotationType();
    void setAnnotationType(const utility::string_t& value);

    /// <summary>
    /// Unique system identifier for the query
    /// </summary>
    int32_t getAnnotationId() const;
    bool annotationIdIsSet() const;
    void unsetAnnotationId();
    void setAnnotationId(int32_t value);

    /// <summary>
    /// System text identifier for the query type/location (subject, record, question)
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();
    void setType(const utility::string_t& value);

    /// <summary>
    /// Description of the query (e.g., reason or context)
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();
    void setDescription(const utility::string_t& value);

    /// <summary>
    /// Record ID associated with the query (if applicable)
    /// </summary>
    int32_t getRecordId() const;
    bool recordIdIsSet() const;
    void unsetRecordId();
    void setRecordId(int32_t value);

    /// <summary>
    /// Variable name (field) associated with the query (if applicable)
    /// </summary>
    utility::string_t getVariable() const;
    bool variableIsSet() const;
    void unsetVariable();
    void setVariable(const utility::string_t& value);

    /// <summary>
    /// Subject display ID associated with the query (if applicable)
    /// </summary>
    utility::string_t getSubjectKey() const;
    bool subjectKeyIsSet() const;
    void unsetSubjectKey();
    void setSubjectKey(const utility::string_t& value);

    /// <summary>
    /// Date when the query was created
    /// </summary>
    utility::string_t getDateCreated() const;
    bool dateCreatedIsSet() const;
    void unsetDateCreated();
    void setDateCreated(const utility::string_t& value);

    /// <summary>
    /// Date when the query was last modified
    /// </summary>
    utility::string_t getDateModified() const;
    bool dateModifiedIsSet() const;
    void unsetDateModified();
    void setDateModified(const utility::string_t& value);

    /// <summary>
    /// History of comments/actions on the query
    /// </summary>
    std::vector<std::shared_ptr<QueryComment>> getQueryComments() const;
    bool queryCommentsIsSet() const;
    void unsetQueryComments();
    void setQueryComments(const std::vector<std::shared_ptr<QueryComment>>& value);


protected:
    utility::string_t m_StudyKey;
    bool m_StudyKeyIsSet;

    int32_t m_SubjectId;
    bool m_SubjectIdIsSet;

    utility::string_t m_SubjectOid;
    bool m_SubjectOidIsSet;

    utility::string_t m_AnnotationType;
    bool m_AnnotationTypeIsSet;

    int32_t m_AnnotationId;
    bool m_AnnotationIdIsSet;

    utility::string_t m_Type;
    bool m_TypeIsSet;

    utility::string_t m_Description;
    bool m_DescriptionIsSet;

    int32_t m_RecordId;
    bool m_RecordIdIsSet;

    utility::string_t m_Variable;
    bool m_VariableIsSet;

    utility::string_t m_SubjectKey;
    bool m_SubjectKeyIsSet;

    utility::string_t m_DateCreated;
    bool m_DateCreatedIsSet;

    utility::string_t m_DateModified;
    bool m_DateModifiedIsSet;

    std::vector<std::shared_ptr<QueryComment>> m_QueryComments;
    bool m_QueryCommentsIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Query_H_ */
