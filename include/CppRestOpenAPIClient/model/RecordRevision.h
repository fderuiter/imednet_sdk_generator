/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RecordRevision.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_RecordRevision_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_RecordRevision_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



class  RecordRevision
    : public ModelBase
{
public:
    RecordRevision();
    virtual ~RecordRevision();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// RecordRevision members


    /// <summary>
    /// Unique study key
    /// </summary>
    utility::string_t getStudyKey() const;
    bool studyKeyIsSet() const;
    void unsetStudyKey();
    void setStudyKey(const utility::string_t& value);

    /// <summary>
    /// Unique system identifier for the record revision
    /// </summary>
    int32_t getRecordRevisionId() const;
    bool recordRevisionIdIsSet() const;
    void unsetRecordRevisionId();
    void setRecordRevisionId(int32_t value);

    /// <summary>
    /// Unique system identifier of the related record
    /// </summary>
    int32_t getRecordId() const;
    bool recordIdIsSet() const;
    void unsetRecordId();
    void setRecordId(int32_t value);

    /// <summary>
    /// Client-assigned record OID (if any)
    /// </summary>
    utility::string_t getRecordOid() const;
    bool recordOidIsSet() const;
    void unsetRecordOid();
    void setRecordOid(const utility::string_t& value);

    /// <summary>
    /// Revision number of the record (version of the record status)
    /// </summary>
    int32_t getRecordRevision() const;
    bool recordRevisionIsSet() const;
    void unsetRecordRevision();
    void setRecordRevision(int32_t value);

    /// <summary>
    /// Revision number of the data within the record
    /// </summary>
    int32_t getDataRevision() const;
    bool dataRevisionIsSet() const;
    void unsetDataRevision();
    void setDataRevision(int32_t value);

    /// <summary>
    /// Status of the record at this revision (user-defined status label)
    /// </summary>
    utility::string_t getRecordStatus() const;
    bool recordStatusIsSet() const;
    void unsetRecordStatus();
    void setRecordStatus(const utility::string_t& value);

    /// <summary>
    /// Mednet subject ID related to the record
    /// </summary>
    int32_t getSubjectId() const;
    bool subjectIdIsSet() const;
    void unsetSubjectId();
    void setSubjectId(int32_t value);

    /// <summary>
    /// Client-assigned subject OID related to the record
    /// </summary>
    utility::string_t getSubjectOid() const;
    bool subjectOidIsSet() const;
    void unsetSubjectOid();
    void setSubjectOid(const utility::string_t& value);

    /// <summary>
    /// Subject display ID related to the record
    /// </summary>
    utility::string_t getSubjectKey() const;
    bool subjectKeyIsSet() const;
    void unsetSubjectKey();
    void setSubjectKey(const utility::string_t& value);

    /// <summary>
    /// Site ID related to the record
    /// </summary>
    int32_t getSiteId() const;
    bool siteIdIsSet() const;
    void unsetSiteId();
    void setSiteId(int32_t value);

    /// <summary>
    /// Form key of the form that the record belongs to
    /// </summary>
    utility::string_t getFormKey() const;
    bool formKeyIsSet() const;
    void unsetFormKey();
    void setFormKey(const utility::string_t& value);

    /// <summary>
    /// Interval ID (visit definition) related to the record
    /// </summary>
    int32_t getIntervalId() const;
    bool intervalIdIsSet() const;
    void unsetIntervalId();
    void setIntervalId(int32_t value);

    /// <summary>
    /// Role name of the user who saved the record revision
    /// </summary>
    utility::string_t getRole() const;
    bool roleIsSet() const;
    void unsetRole();
    void setRole(const utility::string_t& value);

    /// <summary>
    /// Username of the user who saved the record revision
    /// </summary>
    utility::string_t getUser() const;
    bool userIsSet() const;
    void unsetUser();
    void setUser(const utility::string_t& value);

    /// <summary>
    /// Reason for change, if provided (for audit trail)
    /// </summary>
    utility::string_t getReasonForChange() const;
    bool reasonForChangeIsSet() const;
    void unsetReasonForChange();
    void setReasonForChange(const utility::string_t& value);

    /// <summary>
    /// Whether the record was deleted in this revision
    /// </summary>
    bool isDeleted() const;
    bool deletedIsSet() const;
    void unsetDeleted();
    void setDeleted(bool value);

    /// <summary>
    /// Date when this record revision was created
    /// </summary>
    utility::string_t getDateCreated() const;
    bool dateCreatedIsSet() const;
    void unsetDateCreated();
    void setDateCreated(const utility::string_t& value);


protected:
    utility::string_t m_StudyKey;
    bool m_StudyKeyIsSet;

    int32_t m_RecordRevisionId;
    bool m_RecordRevisionIdIsSet;

    int32_t m_RecordId;
    bool m_RecordIdIsSet;

    utility::string_t m_RecordOid;
    bool m_RecordOidIsSet;

    int32_t m_RecordRevision;
    bool m_RecordRevisionIsSet;

    int32_t m_DataRevision;
    bool m_DataRevisionIsSet;

    utility::string_t m_RecordStatus;
    bool m_RecordStatusIsSet;

    int32_t m_SubjectId;
    bool m_SubjectIdIsSet;

    utility::string_t m_SubjectOid;
    bool m_SubjectOidIsSet;

    utility::string_t m_SubjectKey;
    bool m_SubjectKeyIsSet;

    int32_t m_SiteId;
    bool m_SiteIdIsSet;

    utility::string_t m_FormKey;
    bool m_FormKeyIsSet;

    int32_t m_IntervalId;
    bool m_IntervalIdIsSet;

    utility::string_t m_Role;
    bool m_RoleIsSet;

    utility::string_t m_User;
    bool m_UserIsSet;

    utility::string_t m_ReasonForChange;
    bool m_ReasonForChangeIsSet;

    bool m_Deleted;
    bool m_DeletedIsSet;

    utility::string_t m_DateCreated;
    bool m_DateCreatedIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_RecordRevision_H_ */
