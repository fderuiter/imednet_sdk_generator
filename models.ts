/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


export interface Coding {
  /**
   * Unique study key
   */
  studyKey?: string;
  /**
   * Name of the site associated with the coded data
   */
  siteName?: string;
  /**
   * Site ID associated with the coded data
   */
  siteId?: number;
  /**
   * Subject ID associated with the coded data
   */
  subjectId?: number;
  /**
   * Subject key (display ID) associated with the coded data
   */
  subjectKey?: string;
  /**
   * Form ID where the coded data originates
   */
  formId?: number;
  /**
   * Name of the form where the coded data originates
   */
  formName?: string;
  /**
   * Form key where the coded data originates
   */
  formKey?: string;
  /**
   * Revision number of the coding entry
   */
  revision?: number;
  /**
   * Record ID associated with the coded data
   */
  recordId?: number;
  /**
   * Variable name (field) that was coded
   */
  variable?: string;
  /**
   * Original value entered that required coding
   */
  value?: string;
  /**
   * Mednet coding ID
   */
  codingId?: number;
  /**
   * Standardized code assigned (e.g., dictionary term)
   */
  code?: string;
  /**
   * Name of the user who performed the coding
   */
  codedBy?: string;
  /**
   * Reason for coding or any notes on changes
   */
  reason?: string;
  /**
   * Name of the dictionary used (e.g., MedDRA)
   */
  dictionaryName?: string;
  /**
   * Version of the dictionary used
   */
  dictionaryVersion?: string;
  /**
   * Date when the coding was performed
   */
  dateCoded?: string;
}


export interface CodingList {
  metadata?: Metadata;
  pagination?: Pagination;
  data?: Array<Coding>;
}


export interface ComponentsSchemasIntervalFormsItem {
  /**
   * Form ID scheduled in the interval
   */
  formId?: number;
  /**
   * Form key scheduled in the interval
   */
  formKey?: string;
  /**
   * Form name scheduled in the interval
   */
  formName?: string;
}


/**
 * Error details if an error occurred
 */
export interface ComponentsSchemasMetadataError extends any {
  /**
   * Error message describing the issue
   */
  message?: string;
}


export interface ComponentsSchemasRecordCreateRequestItem {
  /**
   * Form key identifying the eCRF to create or update
   */
  formKey: string;
  /**
   * Form ID identifying the eCRF to create or update (alternative to formKey)
   */
  formId?: number;
  /**
   * Name of the site where the record should be created (for new subject registration)
   */
  siteName?: string;
  /**
   * Site ID for the record (alternative to siteName)
   */
  siteId?: number;
  /**
   * Subject identifier (display ID) for which to create or update the record
   */
  subjectKey?: string;
  /**
   * Subject ID for which to create or update the record (alternative to subjectKey)
   */
  subjectId?: number;
  /**
   * Subject OID for which to create or update the record (alternative to subjectKey)
   */
  subjectOid?: string;
  /**
   * Name of the interval (visit) for a scheduled record update
   */
  intervalName?: string;
  /**
   * Interval ID for a scheduled record update (alternative to intervalName)
   */
  intervalId?: number;
  /**
   * Record ID for updating an existing unscheduled record (if applicable)
   */
  recordId?: number;
  /**
   * Record OID for updating an existing unscheduled record (if applicable)
   */
  recordOid?: string;
  /**
   * Key-value pairs of field names and values for the record data
   */
  data: { [key: string]: any; };
}


export interface Form {
  /**
   * Unique study key
   */
  studyKey?: string;
  /**
   * Mednet Form ID
   */
  formId?: number;
  /**
   * User-defined form key
   */
  formKey?: string;
  /**
   * Name of the form (eCRF)
   */
  formName?: string;
  /**
   * Type of the form (e.g., Subject or Site)
   */
  formType?: string;
  /**
   * Number of modifications (revisions) of the form metadata
   */
  revision?: number;
  /**
   * Whether the form has an embedded log
   */
  embeddedLog?: boolean;
  /**
   * Whether the form enforces record ownership
   */
  enforceOwnership?: boolean;
  /**
   * Whether the form requires a user agreement
   */
  userAgreement?: boolean;
  /**
   * Whether the form is marked as a subject record report
   */
  subjectRecordReport?: boolean;
  /**
   * Whether the form is included in unscheduled visits
   */
  unscheduledVisit?: boolean;
  /**
   * Whether the form is included in Other Forms category
   */
  otherForms?: boolean;
  /**
   * Whether the form is an ePRO (electronic patient reported outcome) form
   */
  eproForm?: boolean;
  /**
   * Whether the form allows copying of data
   */
  allowCopy?: boolean;
  /**
   * Whether the form is soft-deleted (disabled)
   */
  disabled?: boolean;
  /**
   * Date when this form was created
   */
  dateCreated?: string;
  /**
   * Date when this form was last modified
   */
  dateModified?: string;
}


export interface FormList {
  metadata?: Metadata;
  pagination?: Pagination;
  data?: Array<Form>;
}


export interface InlineObject {
  metadata?: Metadata;
}


export interface InlineObject1 {
  metadata?: Metadata;
}


export interface InlineObject2 {
  metadata?: Metadata;
}


export interface InlineObject3 {
  metadata?: Metadata;
}


export interface InlineObject4 {
  metadata?: Metadata;
}


export interface InlineObject5 {
  metadata?: Metadata;
}


export interface Interval {
  /**
   * Unique study key
   */
  studyKey?: string;
  /**
   * Unique system identifier for the interval (visit definition)
   */
  intervalId?: number;
  /**
   * Name of the interval (visit) as defined in the study
   */
  intervalName?: string;
  /**
   * Description of the interval (visit)
   */
  intervalDescription?: string;
  /**
   * Sequence number of the interval in the schedule
   */
  intervalSequence?: number;
  /**
   * Identifier for the interval group (if intervals are grouped)
   */
  intervalGroupId?: number;
  /**
   * Name of the interval group
   */
  intervalGroupName?: string;
  /**
   * Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
   */
  timeline?: string;
  /**
   * Baseline interval used for calculating this intervalâ€™s dates
   */
  definedUsingInterval?: string;
  /**
   * Baseline form (name) from which the calculation date is taken
   */
  windowCalculationForm?: string;
  /**
   * Baseline field (variable name) from which the calculation date is taken
   */
  windowCalculationDate?: string;
  /**
   * Form used to capture the actual date for this interval
   */
  actualDateForm?: string;
  /**
   * Field (variable name) used to capture the actual date for this interval
   */
  actualDate?: string;
  /**
   * Number of days from the calculation date when the interval is due
   */
  dueDateWillBeIn?: number;
  /**
   * Number of days before the due date that are allowed (negative window)
   */
  negativeSlack?: number;
  /**
   * Number of days after the due date that are allowed (positive window)
   */
  positiveSlack?: number;
  /**
   * Number of days of grace period for ePRO completion after due date
   */
  eproGracePeriod?: number;
  /**
   * List of forms that are scheduled in this interval
   */
  forms?: Array<ComponentsSchemasIntervalFormsItem>;
  /**
   * Whether the interval is soft-deleted (disabled)
   */
  disabled?: boolean;
  /**
   * Date when this interval was created
   */
  dateCreated?: string;
  /**
   * Date when this interval was last modified
   */
  dateModified?: string;
}


export interface IntervalList {
  metadata?: Metadata;
  pagination?: Pagination;
  data?: Array<Interval>;
}


export interface Job {
  /**
   * Unique job identifier
   */
  jobId?: string;
  /**
   * Batch ID associated with the job (useful for linking with record creation requests)
   */
  batchId?: string;
  /**
   * State of the job (e.g., completed, pending)
   */
  state?: string;
  /**
   * Timestamp when the job was created
   */
  dateCreated?: string;
  /**
   * Timestamp when the job started processing
   */
  dateStarted?: string;
  /**
   * Timestamp when the job finished processing
   */
  dateFinished?: string;
}


export interface Keyword {
  /**
   * Name of the keyword
   */
  keywordName?: string;
  /**
   * Key of the keyword (short code)
   */
  keywordKey?: string;
  /**
   * Internal keyword ID
   */
  keywordId?: number;
  /**
   * Date when this keyword was added
   */
  dateAdded?: string;
}


export interface Metadata {
  /**
   * HTTP status of the response (e.g., OK or ERROR)
   */
  status?: string;
  /**
   * HTTP method of the request
   */
  method?: string;
  /**
   * Requested URI path
   */
  path?: string;
  /**
   * Timestamp when response was generated
   */
  timestamp?: string;
  error?: ComponentsSchemasMetadataError;
}


export interface Pagination {
  /**
   * Current index page returned
   */
  currentPage?: number;
  /**
   * Number of items per page returned
   */
  size?: number;
  /**
   * Total number of pages available
   */
  totalPages?: number;
  /**
   * Total number of elements (items) available
   */
  totalElements?: number;
  sort?: Array<Sort>;
}


export interface Query {
  /**
   * Unique study key
   */
  studyKey?: string;
  /**
   * Mednet subject ID associated with the query (if applicable)
   */
  subjectId?: number;
  /**
   * Client-assigned subject OID (if applicable)
   */
  subjectOid?: string;
  /**
   * Category/type of the query (e.g., subject, record, question)
   */
  annotationType?: string;
  /**
   * Unique system identifier for the query
   */
  annotationId?: number;
  /**
   * System text identifier for the query type/location (subject, record, question)
   */
  type?: string;
  /**
   * Description of the query (e.g., reason or context)
   */
  description?: string;
  /**
   * Record ID associated with the query (if applicable)
   */
  recordId?: number;
  /**
   * Variable name (field) associated with the query (if applicable)
   */
  variable?: string;
  /**
   * Subject display ID associated with the query (if applicable)
   */
  subjectKey?: string;
  /**
   * Date when the query was created
   */
  dateCreated?: string;
  /**
   * Date when the query was last modified
   */
  dateModified?: string;
  /**
   * History of comments/actions on the query
   */
  queryComments?: Array<QueryComment>;
}


export interface QueryComment {
  /**
   * Sequence number of the comment/action in the query history
   */
  sequence?: number;
  /**
   * Status of the query after this comment (e.g., Open, Closed)
   */
  annotationStatus?: string;
  /**
   * Username of the user who made the comment or action
   */
  user?: string;
  /**
   * Text of the comment
   */
  comment?: string;
  /**
   * Whether the query was marked closed at this step
   */
  closed?: boolean;
  /**
   * Date of the comment or action
   */
  date?: string;
}


export interface QueryList {
  metadata?: Metadata;
  pagination?: Pagination;
  data?: Array<Query>;
}


export interface Record {
  /**
   * Unique study key
   */
  studyKey?: string;
  /**
   * Interval ID (visit definition) that this record is associated with
   */
  intervalId?: number;
  /**
   * Form ID of the form this record instance belongs to
   */
  formId?: number;
  /**
   * Form key of the form for this record instance
   */
  formKey?: string;
  /**
   * Site ID associated with the record
   */
  siteId?: number;
  /**
   * Unique record ID
   */
  recordId?: number;
  /**
   * Client-assigned record OID
   */
  recordOid?: string;
  /**
   * Type of record (e.g., SUBJECT for subject-related forms)
   */
  recordType?: string;
  /**
   * Current status of the record (e.g., Record Incomplete, Record Complete)
   */
  recordStatus?: string;
  /**
   * Whether the record is marked as deleted
   */
  deleted?: boolean;
  /**
   * Date when this record was created
   */
  dateCreated?: string;
  /**
   * Date when this record was last modified
   */
  dateModified?: string;
  /**
   * Mednet subject ID that this record is associated with
   */
  subjectId?: number;
  /**
   * Client-assigned subject OID for the subject this record is associated with
   */
  subjectOid?: string;
  /**
   * Subject display ID that this record is associated with
   */
  subjectKey?: string;
  /**
   * Visit instance ID that this record is associated with (if applicable)
   */
  visitId?: number;
  /**
   * Record ID of the parent record if this record is a subrecord (if applicable)
   */
  parentRecordId?: number;
  /**
   * List of keywords associated with the record
   */
  keywords?: Array<Keyword>;
  /**
   * Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.
   */
  recordData?: { [key: string]: any; };
}


export interface RecordJobStatus {
  /**
   * Unique job identifier
   */
  jobId?: string;
  /**
   * Batch ID used to track the job (identical to jobId in most cases)
   */
  batchId?: string;
  /**
   * Current state of the job (e.g., created, completed)
   */
  state?: string;
}


export interface RecordList {
  metadata?: Metadata;
  pagination?: Pagination;
  data?: Array<Record>;
}


export interface RecordRevision {
  /**
   * Unique study key
   */
  studyKey?: string;
  /**
   * Unique system identifier for the record revision
   */
  recordRevisionId?: number;
  /**
   * Unique system identifier of the related record
   */
  recordId?: number;
  /**
   * Client-assigned record OID (if any)
   */
  recordOid?: string;
  /**
   * Revision number of the record (version of the record status)
   */
  recordRevision?: number;
  /**
   * Revision number of the data within the record
   */
  dataRevision?: number;
  /**
   * Status of the record at this revision (user-defined status label)
   */
  recordStatus?: string;
  /**
   * Mednet subject ID related to the record
   */
  subjectId?: number;
  /**
   * Client-assigned subject OID related to the record
   */
  subjectOid?: string;
  /**
   * Subject display ID related to the record
   */
  subjectKey?: string;
  /**
   * Site ID related to the record
   */
  siteId?: number;
  /**
   * Form key of the form that the record belongs to
   */
  formKey?: string;
  /**
   * Interval ID (visit definition) related to the record
   */
  intervalId?: number;
  /**
   * Role name of the user who saved the record revision
   */
  role?: string;
  /**
   * Username of the user who saved the record revision
   */
  user?: string;
  /**
   * Reason for change, if provided (for audit trail)
   */
  reasonForChange?: string;
  /**
   * Whether the record was deleted in this revision
   */
  deleted?: boolean;
  /**
   * Date when this record revision was created
   */
  dateCreated?: string;
}


export interface RecordRevisionList {
  metadata?: Metadata;
  pagination?: Pagination;
  data?: Array<RecordRevision>;
}


export interface Role {
  /**
   * Timestamp when the role assignment was created (as [year, month, day, hour, minute, second, nanosecond])
   */
  dateCreated?: Array<number>;
  /**
   * Timestamp when the role assignment was last modified
   */
  dateModified?: Array<number>;
  /**
   * Unique role ID (UUID)
   */
  roleId?: string;
  /**
   * Community ID or level associated with the role
   */
  communityId?: number;
  /**
   * Name of the role
   */
  name?: string;
  /**
   * Description of the role
   */
  description?: string;
  /**
   * Role level or hierarchy
   */
  level?: number;
  /**
   * Role type/category
   */
  type?: string;
  /**
   * Whether the role is inactive
   */
  inactive?: boolean;
}


export interface Site {
  /**
   * Unique study key
   */
  studyKey?: string;
  /**
   * Unique site ID
   */
  siteId?: number;
  /**
   * Name of the site
   */
  siteName?: string;
  /**
   * Enrollment status of the site
   */
  siteEnrollmentStatus?: string;
  /**
   * Date when this site was created
   */
  dateCreated?: string;
  /**
   * Date when this site was last modified
   */
  dateModified?: string;
}


export interface SiteList {
  metadata?: Metadata;
  pagination?: Pagination;
  data?: Array<Site>;
}


export interface Sort {
  /**
   * Name of the property by which the result is sorted
   */
  property?: string;
  /**
   * Sort direction (ASC or DESC)
   */
  direction?: SortDirectionEnum;
}

/**
 * Enum for the direction property.
 */
export type SortDirectionEnum = 'ASC' | 'DESC';


export interface Study {
  /**
   * Sponsor key that this study belongs to
   */
  sponsorKey?: string;
  /**
   * Unique study key
   */
  studyKey?: string;
  /**
   * Mednet study ID (internal numeric identifier)
   */
  studyId?: number;
  /**
   * Name of the study
   */
  studyName?: string;
  /**
   * Description of the study
   */
  studyDescription?: string;
  /**
   * Type of study (e.g., STUDY)
   */
  studyType?: string;
  /**
   * Date when the study record was created
   */
  dateCreated?: string;
  /**
   * Date when the study record was last modified
   */
  dateModified?: string;
}


export interface StudyList {
  metadata?: Metadata;
  pagination?: Pagination;
  data?: Array<Study>;
}


export interface Subject {
  /**
   * Unique study key
   */
  studyKey?: string;
  /**
   * Mednet subject ID (internal numeric ID)
   */
  subjectId?: number;
  /**
   * Client-assigned subject object identifier (OID)
   */
  subjectOid?: string;
  /**
   * Protocol-assigned subject identifier (display ID)
   */
  subjectKey?: string;
  /**
   * Current status of the subject (e.g., Enrolled)
   */
  subjectStatus?: string;
  /**
   * Mednet site ID the subject is associated with
   */
  siteId?: number;
  /**
   * Name of the site the subject is associated with
   */
  siteName?: string;
  /**
   * Whether the subject is marked as deleted
   */
  deleted?: boolean;
  /**
   * Subjectâ€™s enrollment start date
   */
  enrollmentStartDate?: string;
  /**
   * Date when this subject record was created
   */
  dateCreated?: string;
  /**
   * Date when this subject record was last modified
   */
  dateModified?: string;
  /**
   * List of keywords associated with the subject
   */
  keywords?: Array<Keyword>;
}


export interface SubjectList {
  metadata?: Metadata;
  pagination?: Pagination;
  data?: Array<Subject>;
}


export interface User {
  /**
   * Unique user ID (UUID)
   */
  userId?: string;
  /**
   * User login name
   */
  login?: string;
  /**
   * User first name
   */
  firstName?: string;
  /**
   * User last name
   */
  lastName?: string;
  /**
   * User email address
   */
  email?: string;
  /**
   * Whether the user is active in the given study
   */
  userActiveInStudy?: boolean;
  /**
   * Roles that the user has in the study
   */
  roles?: Array<Role>;
}


export interface UserList {
  metadata?: Metadata;
  pagination?: Pagination;
  data?: Array<User>;
}


export interface Variable {
  /**
   * Unique study key
   */
  studyKey?: string;
  /**
   * Mednet variable ID
   */
  variableId?: number;
  /**
   * Type of the variable (field type), e.g., RADIO, TEXT, etc.
   */
  variableType?: VariableVariableTypeEnum;
  /**
   * Name of the variable (question text or label)
   */
  variableName?: string;
  /**
   * Sequence of the variable on the form
   */
  sequence?: number;
  /**
   * Number of modifications of the variable (via form metadata revisions)
   */
  revision?: number;
  /**
   * Whether the variable is marked as disabled (deleted)
   */
  disabled?: boolean;
  /**
   * Date when this variable was created
   */
  dateCreated?: string;
  /**
   * Date when this variable was last modified
   */
  dateModified?: string;
  /**
   * ID of the form that this variable belongs to
   */
  formId?: number;
  /**
   * Client-assigned variable OID
   */
  variableOid?: string;
  /**
   * Whether the variable is marked as deleted
   */
  deleted?: boolean;
  /**
   * Form key of the form that this variable belongs to
   */
  formKey?: string;
  /**
   * Name of the form that this variable belongs to
   */
  formName?: string;
  /**
   * User-defined identifier (field name) for the variable
   */
  label?: string;
  /**
   * Whether the variable is flagged as blinded (hidden in certain contexts)
   */
  blinded?: boolean;
}

/**
 * Enum for the variableType property.
 */
export type VariableVariableTypeEnum = 'TEXT' | 'TEXTAREA' | 'RADIO' | 'CHECKBOX' | 'DROPDOWN' | 'DATE' | 'NUMBER';


export interface VariableList {
  metadata?: Metadata;
  pagination?: Pagination;
  data?: Array<Variable>;
}


export interface Visit {
  /**
   * Unique study key
   */
  studyKey?: string;
  /**
   * Unique system identifier for the subject visit instance
   */
  visitId?: number;
  /**
   * Unique system identifier of the interval definition for this visit
   */
  intervalId?: number;
  /**
   * Name of the interval (visit) for this visit instance
   */
  intervalName?: string;
  /**
   * Mednet subject ID of the subject
   */
  subjectId?: number;
  /**
   * Protocol-assigned subject identifier
   */
  subjectKey?: string;
  /**
   * Start date of the visit window (in YYYY-MM-DD format)
   */
  startDate?: string;
  /**
   * End date of the visit window (in YYYY-MM-DD format)
   */
  endDate?: string;
  /**
   * Due date of the visit (in YYYY-MM-DD format), if applicable
   */
  dueDate?: string;
  /**
   * Actual date the visit took place (in YYYY-MM-DD format)
   */
  visitDate?: string;
  /**
   * Name of the form used to capture the actual visit date
   */
  visitDateForm?: string;
  /**
   * Variable name of the field capturing the actual visit date
   */
  visitDateQuestion?: string;
  /**
   * Whether the visit instance is marked as deleted
   */
  deleted?: boolean;
  /**
   * Date when this visit record was created
   */
  dateCreated?: string;
  /**
   * Date when this visit record was last modified
   */
  dateModified?: string;
}


export interface VisitList {
  metadata?: Metadata;
  pagination?: Pagination;
  data?: Array<Visit>;
}

