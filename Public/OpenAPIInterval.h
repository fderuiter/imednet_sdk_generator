/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * OpenAPI spec version: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIComponentsSchemasIntervalFormsItem.h"

namespace OpenAPI
{

/*
 * OpenAPIInterval
 *
 * 
 */
class OPENAPI_API OpenAPIInterval : public Model
{
public:
    virtual ~OpenAPIInterval() {}
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;
	void WriteJson(JsonWriter& Writer) const final;

	/* Unique study key */
	TOptional<FString> StudyKey;
	/* Unique system identifier for the interval (visit definition) */
	TOptional<int32> IntervalId;
	/* Name of the interval (visit) as defined in the study */
	TOptional<FString> IntervalName;
	/* Description of the interval (visit) */
	TOptional<FString> IntervalDescription;
	/* Sequence number of the interval in the schedule */
	TOptional<int32> IntervalSequence;
	/* Identifier for the interval group (if intervals are grouped) */
	TOptional<int32> IntervalGroupId;
	/* Name of the interval group */
	TOptional<FString> IntervalGroupName;
	/* Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date) */
	TOptional<FString> Timeline;
	/* Baseline interval used for calculating this intervalâ€™s dates */
	TOptional<FString> DefinedUsingInterval;
	/* Baseline form (name) from which the calculation date is taken */
	TOptional<FString> WindowCalculationForm;
	/* Baseline field (variable name) from which the calculation date is taken */
	TOptional<FString> WindowCalculationDate;
	/* Form used to capture the actual date for this interval */
	TOptional<FString> ActualDateForm;
	/* Field (variable name) used to capture the actual date for this interval */
	TOptional<FString> ActualDate;
	/* Number of days from the calculation date when the interval is due */
	TOptional<int32> DueDateWillBeIn;
	/* Number of days before the due date that are allowed (negative window) */
	TOptional<int32> NegativeSlack;
	/* Number of days after the due date that are allowed (positive window) */
	TOptional<int32> PositiveSlack;
	/* Number of days of grace period for ePRO completion after due date */
	TOptional<int32> EproGracePeriod;
	/* List of forms that are scheduled in this interval */
	TOptional<TArray<OpenAPIComponentsSchemasIntervalFormsItem>> Forms;
	/* Whether the interval is soft-deleted (disabled) */
	TOptional<bool> Disabled;
	/* Date when this interval was created */
	TOptional<FString> DateCreated;
	/* Date when this interval was last modified */
	TOptional<FString> DateModified;
};

}
