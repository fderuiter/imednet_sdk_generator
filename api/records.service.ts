/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import type { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Observable, from, of, switchMap } from 'rxjs';
import { ComponentsSchemasRecordCreateRequestItem } from '../model/componentsSchemasRecordCreateRequestItem';
import { InlineObject } from '../model/inlineObject';
import { InlineObject1 } from '../model/inlineObject1';
import { InlineObject2 } from '../model/inlineObject2';
import { InlineObject3 } from '../model/inlineObject3';
import { InlineObject4 } from '../model/inlineObject4';
import { InlineObject5 } from '../model/inlineObject5';
import { RecordJobStatus } from '../model/recordJobStatus';
import { RecordList } from '../model/recordList';
import { Configuration } from '../configuration';
import { COLLECTION_FORMATS } from '../variables';


@Injectable()
export class RecordsService {

    protected basePath = 'https://edc.prod.imednetapi.com/api/v1/edc';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();
    protected httpClient: HttpService;

    constructor(httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
        this.httpClient = configuration?.httpClient || httpClient;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * Add new record or update subject/record data
     * 
     * @param studyKey Study key identifying the study context for the request
     * @param componentsSchemasRecordCreateRequestItem An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [createRecordsOpts.config] Override http request option.
     */
    public createRecords(studyKey: string, componentsSchemasRecordCreateRequestItem: Array<ComponentsSchemasRecordCreateRequestItem>, createRecordsOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<RecordJobStatus>>;
    public createRecords(studyKey: string, componentsSchemasRecordCreateRequestItem: Array<ComponentsSchemasRecordCreateRequestItem>, createRecordsOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (studyKey === null || studyKey === undefined) {
            throw new Error('Required parameter studyKey was null or undefined when calling createRecords.');
        }

        if (componentsSchemasRecordCreateRequestItem === null || componentsSchemasRecordCreateRequestItem === undefined) {
            throw new Error('Required parameter componentsSchemasRecordCreateRequestItem was null or undefined when calling createRecords.');
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys?.["x-api-key"]) {
            headers['x-api-key'] = this.configuration.apiKeys["x-api-key"];
        }

        // authentication (securityKeyAuth) required
        if (this.configuration.apiKeys?.["x-imn-security-key"]) {
            headers['x-imn-security-key'] = this.configuration.apiKeys["x-imn-security-key"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.post<RecordJobStatus>(`${this.basePath}/studies/${encodeURIComponent(String(studyKey))}/records`,
                    componentsSchemasRecordCreateRequestItem,
                    {
                        withCredentials: this.configuration.withCredentials,
                        ...createRecordsOpts?.config,
                        headers: {...headers, ...createRecordsOpts?.config?.headers},
                    }
                );
            })
        );
    }
    /**
     * List records (eCRF instances) in a study
     * 
     * @param studyKey Study key identifying the study context for the request
     * @param page Page index to retrieve (0-based)
     * @param size Number of items to return per page (max 500)
     * @param sort Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated.
     * @param filter Optional filter criteria to apply, in the format &#x60;attribute&#x3D;&#x3D;value&#x60; with support for &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, !&#x3D;. Multiple criteria can be combined with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR).
     * @param recordDataFilter Optional filter criteria to apply on recordData fields (question responses). Supports &#x3D;&#x3D;, !&#x3D;, &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;~ (contains) and can combine multiple criteria with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR).
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     * @param {*} [listRecordsOpts.config] Override http request option.
     */
    public listRecords(studyKey: string, page?: number, size?: number, sort?: string, filter?: string, recordDataFilter?: string, listRecordsOpts?: { config?: AxiosRequestConfig }): Observable<AxiosResponse<RecordList>>;
    public listRecords(studyKey: string, page?: number, size?: number, sort?: string, filter?: string, recordDataFilter?: string, listRecordsOpts?: { config?: AxiosRequestConfig }): Observable<any> {
        if (studyKey === null || studyKey === undefined) {
            throw new Error('Required parameter studyKey was null or undefined when calling listRecords.');
        }

        let queryParameters = new URLSearchParams();
        if (page !== undefined && page !== null) {
            queryParameters.append('page', <any>page);
        }
        if (size !== undefined && size !== null) {
            queryParameters.append('size', <any>size);
        }
        if (sort !== undefined && sort !== null) {
            queryParameters.append('sort', <any>sort);
        }
        if (filter !== undefined && filter !== null) {
            queryParameters.append('filter', <any>filter);
        }
        if (recordDataFilter !== undefined && recordDataFilter !== null) {
            queryParameters.append('recordDataFilter', <any>recordDataFilter);
        }

        let headers = {...this.defaultHeaders};

        let accessTokenObservable: Observable<any> = of(null);

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKeys?.["x-api-key"]) {
            headers['x-api-key'] = this.configuration.apiKeys["x-api-key"];
        }

        // authentication (securityKeyAuth) required
        if (this.configuration.apiKeys?.["x-imn-security-key"]) {
            headers['x-imn-security-key'] = this.configuration.apiKeys["x-imn-security-key"];
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return accessTokenObservable.pipe(
            switchMap((accessToken) => {
                if (accessToken) {
                    headers['Authorization'] = `Bearer ${accessToken}`;
                }

                return this.httpClient.get<RecordList>(`${this.basePath}/studies/${encodeURIComponent(String(studyKey))}/records`,
                    {
                        params: queryParameters,
                        withCredentials: this.configuration.withCredentials,
                        ...listRecordsOpts?.config,
                        headers: {...headers, ...listRecordsOpts?.config?.headers},
                    }
                );
            })
        );
    }
}
