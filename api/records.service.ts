/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { ComponentsSchemasRecordCreateRequestItem } from '../model/componentsSchemasRecordCreateRequestItem';
import { InlineObject } from '../model/inlineObject';
import { InlineObject1 } from '../model/inlineObject1';
import { InlineObject2 } from '../model/inlineObject2';
import { InlineObject3 } from '../model/inlineObject3';
import { InlineObject4 } from '../model/inlineObject4';
import { InlineObject5 } from '../model/inlineObject5';
import { RecordJobStatus } from '../model/recordJobStatus';
import { RecordList } from '../model/recordList';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class RecordsService {
    private basePath: string = 'https://edc.prod.imednetapi.com/api/v1/edc';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * Add new record or update subject/record data
     * 
     * @param studyKey Study key identifying the study context for the request
     * @param componentsSchemasRecordCreateRequestItem An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update).
     
     */
    public createRecords(studyKey: string, componentsSchemasRecordCreateRequestItem: Array<ComponentsSchemasRecordCreateRequestItem>, observe?: 'body', headers?: Headers): Observable<RecordJobStatus>;
    public createRecords(studyKey: string, componentsSchemasRecordCreateRequestItem: Array<ComponentsSchemasRecordCreateRequestItem>, observe?: 'response', headers?: Headers): Observable<HttpResponse<RecordJobStatus>>;
    public createRecords(studyKey: string, componentsSchemasRecordCreateRequestItem: Array<ComponentsSchemasRecordCreateRequestItem>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (studyKey === null || studyKey === undefined){
            throw new Error('Required parameter studyKey was null or undefined when calling createRecords.');
        }

        if (componentsSchemasRecordCreateRequestItem === null || componentsSchemasRecordCreateRequestItem === undefined){
            throw new Error('Required parameter componentsSchemasRecordCreateRequestItem was null or undefined when calling createRecords.');
        }

        // authentication (apiKeyAuth) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['x-api-key']) {
            headers['x-api-key'] = this.APIConfiguration.apiKeys['x-api-key'];
        }
        // authentication (securityKeyAuth) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['x-imn-security-key']) {
            headers['x-imn-security-key'] = this.APIConfiguration.apiKeys['x-imn-security-key'];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<RecordJobStatus>> = this.httpClient.post(`${this.basePath}/studies/${encodeURIComponent(String(studyKey))}/records`, componentsSchemasRecordCreateRequestItem , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RecordJobStatus>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * List records (eCRF instances) in a study
     * 
     * @param studyKey Study key identifying the study context for the request
     * @param page Page index to retrieve (0-based)
     * @param size Number of items to return per page (max 500)
     * @param sort Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated.
     * @param filter Optional filter criteria to apply, in the format &#x60;attribute&#x3D;&#x3D;value&#x60; with support for &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, !&#x3D;. Multiple criteria can be combined with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR).
     * @param recordDataFilter Optional filter criteria to apply on recordData fields (question responses). Supports &#x3D;&#x3D;, !&#x3D;, &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;~ (contains) and can combine multiple criteria with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR).
     
     */
    public listRecords(studyKey: string, page?: number, size?: number, sort?: string, filter?: string, recordDataFilter?: string, observe?: 'body', headers?: Headers): Observable<RecordList>;
    public listRecords(studyKey: string, page?: number, size?: number, sort?: string, filter?: string, recordDataFilter?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<RecordList>>;
    public listRecords(studyKey: string, page?: number, size?: number, sort?: string, filter?: string, recordDataFilter?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (studyKey === null || studyKey === undefined){
            throw new Error('Required parameter studyKey was null or undefined when calling listRecords.');
        }

        let queryParameters: string[] = [];
        if (page !== undefined) {
            queryParameters.push('page='+encodeURIComponent(String(page)));
        }
        if (size !== undefined) {
            queryParameters.push('size='+encodeURIComponent(String(size)));
        }
        if (sort !== undefined) {
            queryParameters.push('sort='+encodeURIComponent(String(sort)));
        }
        if (filter !== undefined) {
            queryParameters.push('filter='+encodeURIComponent(String(filter)));
        }
        if (recordDataFilter !== undefined) {
            queryParameters.push('recordDataFilter='+encodeURIComponent(String(recordDataFilter)));
        }

        // authentication (apiKeyAuth) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['x-api-key']) {
            headers['x-api-key'] = this.APIConfiguration.apiKeys['x-api-key'];
        }
        // authentication (securityKeyAuth) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['x-imn-security-key']) {
            headers['x-imn-security-key'] = this.APIConfiguration.apiKeys['x-imn-security-key'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<RecordList>> = this.httpClient.get(`${this.basePath}/studies/${encodeURIComponent(String(studyKey))}/records?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <RecordList>(httpResponse.response))
               );
        }
        return response;
    }

}
