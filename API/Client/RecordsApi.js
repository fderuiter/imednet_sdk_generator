/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.RecordsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 * Version: 1.3.6
* Generator version: 7.14.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.RecordsApi');

goog.require('API.Client.RecordJobStatus');
goog.require('API.Client.RecordList');
goog.require('API.Client.components_schemas_RecordCreateRequest_item');
goog.require('API.Client.inline_object');
goog.require('API.Client.inline_object_1');
goog.require('API.Client.inline_object_2');
goog.require('API.Client.inline_object_3');
goog.require('API.Client.inline_object_4');
goog.require('API.Client.inline_object_5');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.RecordsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('RecordsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('RecordsApiBasePath')) :
                   'https://edc.prod.imednetapi.com/api/v1/edc';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('RecordsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('RecordsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.RecordsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Add new record or update subject/record data
 * 
 * @param {!string} studyKey Study key identifying the study context for the request
 * @param {!Array<!API.Client.components_schemas_RecordCreateRequest_item>} componentsSchemasRecordCreateRequestItem An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update).
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.RecordJobStatus>}
 */
API.Client.RecordsApi.prototype.createRecords = function(studyKey, componentsSchemasRecordCreateRequestItem, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/studies/{studyKey}/records'
      .replace('{' + 'studyKey' + '}', String(studyKey));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'studyKey' is set
  if (!studyKey) {
    throw new Error('Missing required parameter studyKey when calling createRecords');
  }
  // verify required parameter 'componentsSchemasRecordCreateRequestItem' is set
  if (!componentsSchemasRecordCreateRequestItem) {
    throw new Error('Missing required parameter componentsSchemasRecordCreateRequestItem when calling createRecords');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: componentsSchemasRecordCreateRequestItem,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List records (eCRF instances) in a study
 * 
 * @param {!string} studyKey Study key identifying the study context for the request
 * @param {!number=} opt_page Page index to retrieve (0-based)
 * @param {!number=} opt_size Number of items to return per page (max 500)
 * @param {!string=} opt_sort Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated.
 * @param {!string=} opt_filter Optional filter criteria to apply, in the format &#x60;attribute&#x3D;&#x3D;value&#x60; with support for &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, !&#x3D;. Multiple criteria can be combined with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR).
 * @param {!string=} opt_recordDataFilter Optional filter criteria to apply on recordData fields (question responses). Supports &#x3D;&#x3D;, !&#x3D;, &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;~ (contains) and can combine multiple criteria with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR).
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.RecordList>}
 */
API.Client.RecordsApi.prototype.listRecords = function(studyKey, opt_page, opt_size, opt_sort, opt_filter, opt_recordDataFilter, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/studies/{studyKey}/records'
      .replace('{' + 'studyKey' + '}', String(studyKey));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'studyKey' is set
  if (!studyKey) {
    throw new Error('Missing required parameter studyKey when calling listRecords');
  }
  if (opt_page !== undefined) {
    queryParameters['page'] = opt_page;
  }

  if (opt_size !== undefined) {
    queryParameters['size'] = opt_size;
  }

  if (opt_sort !== undefined) {
    queryParameters['sort'] = opt_sort;
  }

  if (opt_filter !== undefined) {
    queryParameters['filter'] = opt_filter;
  }

  if (opt_recordDataFilter !== undefined) {
    queryParameters['recordDataFilter'] = opt_recordDataFilter;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
