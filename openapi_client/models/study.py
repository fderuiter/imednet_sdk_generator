# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class Study(BaseModel):
    """
    Study
    """
    sponsor_key: Optional[StrictStr] = Field(default=None, alias="sponsorKey", description="Sponsor key that this study belongs to")
    study_key: Optional[StrictStr] = Field(default=None, alias="studyKey", description="Unique study key")
    study_id: Optional[StrictInt] = Field(default=None, alias="studyId", description="Mednet study ID (internal numeric identifier)")
    study_name: Optional[StrictStr] = Field(default=None, alias="studyName", description="Name of the study")
    study_description: Optional[StrictStr] = Field(default=None, alias="studyDescription", description="Description of the study")
    study_type: Optional[StrictStr] = Field(default=None, alias="studyType", description="Type of study (e.g., STUDY)")
    date_created: Optional[StrictStr] = Field(default=None, alias="dateCreated", description="Date when the study record was created")
    date_modified: Optional[StrictStr] = Field(default=None, alias="dateModified", description="Date when the study record was last modified")
    __properties = ["sponsorKey", "studyKey", "studyId", "studyName", "studyDescription", "studyType", "dateCreated", "dateModified"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Study:
        """Create an instance of Study from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Study:
        """Create an instance of Study from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Study.parse_obj(obj)

        _obj = Study.parse_obj({
            "sponsor_key": obj.get("sponsorKey"),
            "study_key": obj.get("studyKey"),
            "study_id": obj.get("studyId"),
            "study_name": obj.get("studyName"),
            "study_description": obj.get("studyDescription"),
            "study_type": obj.get("studyType"),
            "date_created": obj.get("dateCreated"),
            "date_modified": obj.get("dateModified")
        })
        return _obj


