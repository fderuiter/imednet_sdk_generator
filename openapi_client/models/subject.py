# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from openapi_client.models.keyword import Keyword

class Subject(BaseModel):
    """
    Subject
    """
    study_key: Optional[StrictStr] = Field(default=None, alias="studyKey", description="Unique study key")
    subject_id: Optional[StrictInt] = Field(default=None, alias="subjectId", description="Mednet subject ID (internal numeric ID)")
    subject_oid: Optional[StrictStr] = Field(default=None, alias="subjectOid", description="Client-assigned subject object identifier (OID)")
    subject_key: Optional[StrictStr] = Field(default=None, alias="subjectKey", description="Protocol-assigned subject identifier (display ID)")
    subject_status: Optional[StrictStr] = Field(default=None, alias="subjectStatus", description="Current status of the subject (e.g., Enrolled)")
    site_id: Optional[StrictInt] = Field(default=None, alias="siteId", description="Mednet site ID the subject is associated with")
    site_name: Optional[StrictStr] = Field(default=None, alias="siteName", description="Name of the site the subject is associated with")
    deleted: Optional[StrictBool] = Field(default=None, description="Whether the subject is marked as deleted")
    enrollment_start_date: Optional[StrictStr] = Field(default=None, alias="enrollmentStartDate", description="Subjectâ€™s enrollment start date")
    date_created: Optional[StrictStr] = Field(default=None, alias="dateCreated", description="Date when this subject record was created")
    date_modified: Optional[StrictStr] = Field(default=None, alias="dateModified", description="Date when this subject record was last modified")
    keywords: Optional[conlist(Keyword)] = Field(default=None, description="List of keywords associated with the subject")
    __properties = ["studyKey", "subjectId", "subjectOid", "subjectKey", "subjectStatus", "siteId", "siteName", "deleted", "enrollmentStartDate", "dateCreated", "dateModified", "keywords"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Subject:
        """Create an instance of Subject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in keywords (list)
        _items = []
        if self.keywords:
            for _item in self.keywords:
                if _item:
                    _items.append(_item.to_dict())
            _dict['keywords'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Subject:
        """Create an instance of Subject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Subject.parse_obj(obj)

        _obj = Subject.parse_obj({
            "study_key": obj.get("studyKey"),
            "subject_id": obj.get("subjectId"),
            "subject_oid": obj.get("subjectOid"),
            "subject_key": obj.get("subjectKey"),
            "subject_status": obj.get("subjectStatus"),
            "site_id": obj.get("siteId"),
            "site_name": obj.get("siteName"),
            "deleted": obj.get("deleted"),
            "enrollment_start_date": obj.get("enrollmentStartDate"),
            "date_created": obj.get("dateCreated"),
            "date_modified": obj.get("dateModified"),
            "keywords": [Keyword.from_dict(_item) for _item in obj.get("keywords")] if obj.get("keywords") is not None else None
        })
        return _obj


