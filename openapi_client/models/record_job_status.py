# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class RecordJobStatus(BaseModel):
    """
    RecordJobStatus
    """
    job_id: Optional[StrictStr] = Field(default=None, alias="jobId", description="Unique job identifier")
    batch_id: Optional[StrictStr] = Field(default=None, alias="batchId", description="Batch ID used to track the job (identical to jobId in most cases)")
    state: Optional[StrictStr] = Field(default=None, description="Current state of the job (e.g., created, completed)")
    __properties = ["jobId", "batchId", "state"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RecordJobStatus:
        """Create an instance of RecordJobStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RecordJobStatus:
        """Create an instance of RecordJobStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RecordJobStatus.parse_obj(obj)

        _obj = RecordJobStatus.parse_obj({
            "job_id": obj.get("jobId"),
            "batch_id": obj.get("batchId"),
            "state": obj.get("state")
        })
        return _obj


