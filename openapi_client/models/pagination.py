# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, conlist
from openapi_client.models.sort import Sort

class Pagination(BaseModel):
    """
    Pagination
    """
    current_page: Optional[StrictInt] = Field(default=None, alias="currentPage", description="Current index page returned")
    size: Optional[StrictInt] = Field(default=None, description="Number of items per page returned")
    total_pages: Optional[StrictInt] = Field(default=None, alias="totalPages", description="Total number of pages available")
    total_elements: Optional[StrictInt] = Field(default=None, alias="totalElements", description="Total number of elements (items) available")
    sort: Optional[conlist(Sort)] = None
    __properties = ["currentPage", "size", "totalPages", "totalElements", "sort"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Pagination:
        """Create an instance of Pagination from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in sort (list)
        _items = []
        if self.sort:
            for _item in self.sort:
                if _item:
                    _items.append(_item.to_dict())
            _dict['sort'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Pagination:
        """Create an instance of Pagination from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Pagination.parse_obj(obj)

        _obj = Pagination.parse_obj({
            "current_page": obj.get("currentPage"),
            "size": obj.get("size"),
            "total_pages": obj.get("totalPages"),
            "total_elements": obj.get("totalElements"),
            "sort": [Sort.from_dict(_item) for _item in obj.get("sort")] if obj.get("sort") is not None else None
        })
        return _obj


