# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from openapi_client.models.components_schemas_interval_forms_item import ComponentsSchemasIntervalFormsItem

class Interval(BaseModel):
    """
    Interval
    """
    study_key: Optional[StrictStr] = Field(default=None, alias="studyKey", description="Unique study key")
    interval_id: Optional[StrictInt] = Field(default=None, alias="intervalId", description="Unique system identifier for the interval (visit definition)")
    interval_name: Optional[StrictStr] = Field(default=None, alias="intervalName", description="Name of the interval (visit) as defined in the study")
    interval_description: Optional[StrictStr] = Field(default=None, alias="intervalDescription", description="Description of the interval (visit)")
    interval_sequence: Optional[StrictInt] = Field(default=None, alias="intervalSequence", description="Sequence number of the interval in the schedule")
    interval_group_id: Optional[StrictInt] = Field(default=None, alias="intervalGroupId", description="Identifier for the interval group (if intervals are grouped)")
    interval_group_name: Optional[StrictStr] = Field(default=None, alias="intervalGroupName", description="Name of the interval group")
    timeline: Optional[StrictStr] = Field(default=None, description="Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)")
    defined_using_interval: Optional[StrictStr] = Field(default=None, alias="definedUsingInterval", description="Baseline interval used for calculating this intervalâ€™s dates")
    window_calculation_form: Optional[StrictStr] = Field(default=None, alias="windowCalculationForm", description="Baseline form (name) from which the calculation date is taken")
    window_calculation_date: Optional[StrictStr] = Field(default=None, alias="windowCalculationDate", description="Baseline field (variable name) from which the calculation date is taken")
    actual_date_form: Optional[StrictStr] = Field(default=None, alias="actualDateForm", description="Form used to capture the actual date for this interval")
    actual_date: Optional[StrictStr] = Field(default=None, alias="actualDate", description="Field (variable name) used to capture the actual date for this interval")
    due_date_will_be_in: Optional[StrictInt] = Field(default=None, alias="dueDateWillBeIn", description="Number of days from the calculation date when the interval is due")
    negative_slack: Optional[StrictInt] = Field(default=None, alias="negativeSlack", description="Number of days before the due date that are allowed (negative window)")
    positive_slack: Optional[StrictInt] = Field(default=None, alias="positiveSlack", description="Number of days after the due date that are allowed (positive window)")
    epro_grace_period: Optional[StrictInt] = Field(default=None, alias="eproGracePeriod", description="Number of days of grace period for ePRO completion after due date")
    forms: Optional[conlist(ComponentsSchemasIntervalFormsItem)] = Field(default=None, description="List of forms that are scheduled in this interval")
    disabled: Optional[StrictBool] = Field(default=None, description="Whether the interval is soft-deleted (disabled)")
    date_created: Optional[StrictStr] = Field(default=None, alias="dateCreated", description="Date when this interval was created")
    date_modified: Optional[StrictStr] = Field(default=None, alias="dateModified", description="Date when this interval was last modified")
    __properties = ["studyKey", "intervalId", "intervalName", "intervalDescription", "intervalSequence", "intervalGroupId", "intervalGroupName", "timeline", "definedUsingInterval", "windowCalculationForm", "windowCalculationDate", "actualDateForm", "actualDate", "dueDateWillBeIn", "negativeSlack", "positiveSlack", "eproGracePeriod", "forms", "disabled", "dateCreated", "dateModified"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Interval:
        """Create an instance of Interval from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in forms (list)
        _items = []
        if self.forms:
            for _item in self.forms:
                if _item:
                    _items.append(_item.to_dict())
            _dict['forms'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Interval:
        """Create an instance of Interval from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Interval.parse_obj(obj)

        _obj = Interval.parse_obj({
            "study_key": obj.get("studyKey"),
            "interval_id": obj.get("intervalId"),
            "interval_name": obj.get("intervalName"),
            "interval_description": obj.get("intervalDescription"),
            "interval_sequence": obj.get("intervalSequence"),
            "interval_group_id": obj.get("intervalGroupId"),
            "interval_group_name": obj.get("intervalGroupName"),
            "timeline": obj.get("timeline"),
            "defined_using_interval": obj.get("definedUsingInterval"),
            "window_calculation_form": obj.get("windowCalculationForm"),
            "window_calculation_date": obj.get("windowCalculationDate"),
            "actual_date_form": obj.get("actualDateForm"),
            "actual_date": obj.get("actualDate"),
            "due_date_will_be_in": obj.get("dueDateWillBeIn"),
            "negative_slack": obj.get("negativeSlack"),
            "positive_slack": obj.get("positiveSlack"),
            "epro_grace_period": obj.get("eproGracePeriod"),
            "forms": [ComponentsSchemasIntervalFormsItem.from_dict(_item) for _item in obj.get("forms")] if obj.get("forms") is not None else None,
            "disabled": obj.get("disabled"),
            "date_created": obj.get("dateCreated"),
            "date_modified": obj.get("dateModified")
        })
        return _obj


