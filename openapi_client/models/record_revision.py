# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class RecordRevision(BaseModel):
    """
    RecordRevision
    """
    study_key: Optional[StrictStr] = Field(default=None, alias="studyKey", description="Unique study key")
    record_revision_id: Optional[StrictInt] = Field(default=None, alias="recordRevisionId", description="Unique system identifier for the record revision")
    record_id: Optional[StrictInt] = Field(default=None, alias="recordId", description="Unique system identifier of the related record")
    record_oid: Optional[StrictStr] = Field(default=None, alias="recordOid", description="Client-assigned record OID (if any)")
    record_revision: Optional[StrictInt] = Field(default=None, alias="recordRevision", description="Revision number of the record (version of the record status)")
    data_revision: Optional[StrictInt] = Field(default=None, alias="dataRevision", description="Revision number of the data within the record")
    record_status: Optional[StrictStr] = Field(default=None, alias="recordStatus", description="Status of the record at this revision (user-defined status label)")
    subject_id: Optional[StrictInt] = Field(default=None, alias="subjectId", description="Mednet subject ID related to the record")
    subject_oid: Optional[StrictStr] = Field(default=None, alias="subjectOid", description="Client-assigned subject OID related to the record")
    subject_key: Optional[StrictStr] = Field(default=None, alias="subjectKey", description="Subject display ID related to the record")
    site_id: Optional[StrictInt] = Field(default=None, alias="siteId", description="Site ID related to the record")
    form_key: Optional[StrictStr] = Field(default=None, alias="formKey", description="Form key of the form that the record belongs to")
    interval_id: Optional[StrictInt] = Field(default=None, alias="intervalId", description="Interval ID (visit definition) related to the record")
    role: Optional[StrictStr] = Field(default=None, description="Role name of the user who saved the record revision")
    user: Optional[StrictStr] = Field(default=None, description="Username of the user who saved the record revision")
    reason_for_change: Optional[StrictStr] = Field(default=None, alias="reasonForChange", description="Reason for change, if provided (for audit trail)")
    deleted: Optional[StrictBool] = Field(default=None, description="Whether the record was deleted in this revision")
    date_created: Optional[StrictStr] = Field(default=None, alias="dateCreated", description="Date when this record revision was created")
    __properties = ["studyKey", "recordRevisionId", "recordId", "recordOid", "recordRevision", "dataRevision", "recordStatus", "subjectId", "subjectOid", "subjectKey", "siteId", "formKey", "intervalId", "role", "user", "reasonForChange", "deleted", "dateCreated"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RecordRevision:
        """Create an instance of RecordRevision from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RecordRevision:
        """Create an instance of RecordRevision from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RecordRevision.parse_obj(obj)

        _obj = RecordRevision.parse_obj({
            "study_key": obj.get("studyKey"),
            "record_revision_id": obj.get("recordRevisionId"),
            "record_id": obj.get("recordId"),
            "record_oid": obj.get("recordOid"),
            "record_revision": obj.get("recordRevision"),
            "data_revision": obj.get("dataRevision"),
            "record_status": obj.get("recordStatus"),
            "subject_id": obj.get("subjectId"),
            "subject_oid": obj.get("subjectOid"),
            "subject_key": obj.get("subjectKey"),
            "site_id": obj.get("siteId"),
            "form_key": obj.get("formKey"),
            "interval_id": obj.get("intervalId"),
            "role": obj.get("role"),
            "user": obj.get("user"),
            "reason_for_change": obj.get("reasonForChange"),
            "deleted": obj.get("deleted"),
            "date_created": obj.get("dateCreated")
        })
        return _obj


