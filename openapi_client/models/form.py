# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class Form(BaseModel):
    """
    Form
    """
    study_key: Optional[StrictStr] = Field(default=None, alias="studyKey", description="Unique study key")
    form_id: Optional[StrictInt] = Field(default=None, alias="formId", description="Mednet Form ID")
    form_key: Optional[StrictStr] = Field(default=None, alias="formKey", description="User-defined form key")
    form_name: Optional[StrictStr] = Field(default=None, alias="formName", description="Name of the form (eCRF)")
    form_type: Optional[StrictStr] = Field(default=None, alias="formType", description="Type of the form (e.g., Subject or Site)")
    revision: Optional[StrictInt] = Field(default=None, description="Number of modifications (revisions) of the form metadata")
    embedded_log: Optional[StrictBool] = Field(default=None, alias="embeddedLog", description="Whether the form has an embedded log")
    enforce_ownership: Optional[StrictBool] = Field(default=None, alias="enforceOwnership", description="Whether the form enforces record ownership")
    user_agreement: Optional[StrictBool] = Field(default=None, alias="userAgreement", description="Whether the form requires a user agreement")
    subject_record_report: Optional[StrictBool] = Field(default=None, alias="subjectRecordReport", description="Whether the form is marked as a subject record report")
    unscheduled_visit: Optional[StrictBool] = Field(default=None, alias="unscheduledVisit", description="Whether the form is included in unscheduled visits")
    other_forms: Optional[StrictBool] = Field(default=None, alias="otherForms", description="Whether the form is included in Other Forms category")
    epro_form: Optional[StrictBool] = Field(default=None, alias="eproForm", description="Whether the form is an ePRO (electronic patient reported outcome) form")
    allow_copy: Optional[StrictBool] = Field(default=None, alias="allowCopy", description="Whether the form allows copying of data")
    disabled: Optional[StrictBool] = Field(default=None, description="Whether the form is soft-deleted (disabled)")
    date_created: Optional[StrictStr] = Field(default=None, alias="dateCreated", description="Date when this form was created")
    date_modified: Optional[StrictStr] = Field(default=None, alias="dateModified", description="Date when this form was last modified")
    __properties = ["studyKey", "formId", "formKey", "formName", "formType", "revision", "embeddedLog", "enforceOwnership", "userAgreement", "subjectRecordReport", "unscheduledVisit", "otherForms", "eproForm", "allowCopy", "disabled", "dateCreated", "dateModified"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Form:
        """Create an instance of Form from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Form:
        """Create an instance of Form from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Form.parse_obj(obj)

        _obj = Form.parse_obj({
            "study_key": obj.get("studyKey"),
            "form_id": obj.get("formId"),
            "form_key": obj.get("formKey"),
            "form_name": obj.get("formName"),
            "form_type": obj.get("formType"),
            "revision": obj.get("revision"),
            "embedded_log": obj.get("embeddedLog"),
            "enforce_ownership": obj.get("enforceOwnership"),
            "user_agreement": obj.get("userAgreement"),
            "subject_record_report": obj.get("subjectRecordReport"),
            "unscheduled_visit": obj.get("unscheduledVisit"),
            "other_forms": obj.get("otherForms"),
            "epro_form": obj.get("eproForm"),
            "allow_copy": obj.get("allowCopy"),
            "disabled": obj.get("disabled"),
            "date_created": obj.get("dateCreated"),
            "date_modified": obj.get("dateModified")
        })
        return _obj


