# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class Coding(BaseModel):
    """
    Coding
    """
    study_key: Optional[StrictStr] = Field(default=None, alias="studyKey", description="Unique study key")
    site_name: Optional[StrictStr] = Field(default=None, alias="siteName", description="Name of the site associated with the coded data")
    site_id: Optional[StrictInt] = Field(default=None, alias="siteId", description="Site ID associated with the coded data")
    subject_id: Optional[StrictInt] = Field(default=None, alias="subjectId", description="Subject ID associated with the coded data")
    subject_key: Optional[StrictStr] = Field(default=None, alias="subjectKey", description="Subject key (display ID) associated with the coded data")
    form_id: Optional[StrictInt] = Field(default=None, alias="formId", description="Form ID where the coded data originates")
    form_name: Optional[StrictStr] = Field(default=None, alias="formName", description="Name of the form where the coded data originates")
    form_key: Optional[StrictStr] = Field(default=None, alias="formKey", description="Form key where the coded data originates")
    revision: Optional[StrictInt] = Field(default=None, description="Revision number of the coding entry")
    record_id: Optional[StrictInt] = Field(default=None, alias="recordId", description="Record ID associated with the coded data")
    variable: Optional[StrictStr] = Field(default=None, description="Variable name (field) that was coded")
    value: Optional[StrictStr] = Field(default=None, description="Original value entered that required coding")
    coding_id: Optional[StrictInt] = Field(default=None, alias="codingId", description="Mednet coding ID")
    code: Optional[StrictStr] = Field(default=None, description="Standardized code assigned (e.g., dictionary term)")
    coded_by: Optional[StrictStr] = Field(default=None, alias="codedBy", description="Name of the user who performed the coding")
    reason: Optional[StrictStr] = Field(default=None, description="Reason for coding or any notes on changes")
    dictionary_name: Optional[StrictStr] = Field(default=None, alias="dictionaryName", description="Name of the dictionary used (e.g., MedDRA)")
    dictionary_version: Optional[StrictStr] = Field(default=None, alias="dictionaryVersion", description="Version of the dictionary used")
    date_coded: Optional[StrictStr] = Field(default=None, alias="dateCoded", description="Date when the coding was performed")
    __properties = ["studyKey", "siteName", "siteId", "subjectId", "subjectKey", "formId", "formName", "formKey", "revision", "recordId", "variable", "value", "codingId", "code", "codedBy", "reason", "dictionaryName", "dictionaryVersion", "dateCoded"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Coding:
        """Create an instance of Coding from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Coding:
        """Create an instance of Coding from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Coding.parse_obj(obj)

        _obj = Coding.parse_obj({
            "study_key": obj.get("studyKey"),
            "site_name": obj.get("siteName"),
            "site_id": obj.get("siteId"),
            "subject_id": obj.get("subjectId"),
            "subject_key": obj.get("subjectKey"),
            "form_id": obj.get("formId"),
            "form_name": obj.get("formName"),
            "form_key": obj.get("formKey"),
            "revision": obj.get("revision"),
            "record_id": obj.get("recordId"),
            "variable": obj.get("variable"),
            "value": obj.get("value"),
            "coding_id": obj.get("codingId"),
            "code": obj.get("code"),
            "coded_by": obj.get("codedBy"),
            "reason": obj.get("reason"),
            "dictionary_name": obj.get("dictionaryName"),
            "dictionary_version": obj.get("dictionaryVersion"),
            "date_coded": obj.get("dateCoded")
        })
        return _obj


