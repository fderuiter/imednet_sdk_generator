=begin comment

Mednet EDC API

The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

The version of the OpenAPI document: 1.3.6

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::Object::Interval;

require 5.6.0;
use strict;
use warnings;
use utf8;
use JSON qw(decode_json);
use Data::Dumper;
use Module::Runtime qw(use_module);
use Log::Any qw($log);
use Date::Parse;
use DateTime;

use WWW::OpenAPIClient::Object::ComponentsSchemasIntervalFormsItem;

use base ("Class::Accessor", "Class::Data::Inheritable");

#
#
#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech). Do not edit the class manually.
# REF: https://openapi-generator.tech
#

=begin comment

Mednet EDC API

The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

The version of the OpenAPI document: 1.3.6

Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
__PACKAGE__->mk_classdata('attribute_map' => {});
__PACKAGE__->mk_classdata('openapi_types' => {});
__PACKAGE__->mk_classdata('method_documentation' => {});
__PACKAGE__->mk_classdata('class_documentation' => {});

# new plain object
sub new {
    my ($class, %args) = @_;

    my $self = bless {}, $class;

    $self->init(%args);

    return $self;
}

# initialize the object
sub init
{
    my ($self, %args) = @_;

    foreach my $attribute (keys %{$self->attribute_map}) {
        my $args_key = $self->attribute_map->{$attribute};
        $self->$attribute( $args{ $args_key } );
    }
}

# return perl hash
sub to_hash {
    my $self = shift;
    my $_hash = decode_json(JSON->new->convert_blessed->encode($self));

    return $_hash;
}

# used by JSON for serialization
sub TO_JSON {
    my $self = shift;
    my $_data = {};
    foreach my $_key (keys %{$self->attribute_map}) {
        if (defined $self->{$_key}) {
            my $_json_attribute = $self->attribute_map->{$_key};
            my $_type = $self->openapi_types->{$_key};
            my $_value = $self->{$_key};
            if ($_type =~ /^array\[(.+)\]$/i) { # array
                my $_subclass = $1;
                $_data->{$_json_attribute} =  [ map { $self->_to_json_primitives($_subclass, $_) } @$_value ];
            } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
                my $_subclass = $1;
                my %_hash = ();
                while (my($_key, $_element) = each %{$_value}) {
                    $_hash{$_key} = $self->_to_json_primitives($_subclass, $_element);
                }
                $_data->{$_json_attribute} = \%_hash;
            } elsif ( grep( /^$_type$/, ('int', 'double', 'string', 'boolean', 'DATE', 'DATE_TIME'))) {
                $_data->{$_json_attribute} = $self->_to_json_primitives($_type, $_value);
            } else {
                $_data->{$_json_attribute} = $_value;
            }
        }
    }

    return $_data;
}

# to_json non-array data
sub _to_json_primitives {
    my ($self, $type, $data) = @_;
    if ( grep( /^$type$/, ('int', 'double'))) {
        # https://metacpan.org/pod/JSON#simple-scalars
        # numify it, ensuring it will be dumped as a number
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        # https://metacpan.org/pod/JSON#simple-scalars
        # stringified
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        # https://metacpan.org/pod/JSON#JSON::true,-JSON::false,-JSON::null
        return $data ? \1 : \0;
    } elsif ($type eq 'DATE') {
        return undef unless defined $data;
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Eymd($optional_separator),-$dt-%3Emdy(...),-$dt-%3Edmy(...)
            return $data->ymd;
        }
        return $data .q();
    } elsif ($type eq 'DATE_TIME') {
        return undef unless defined $data;
        # the date-time notation as defined by RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z
        if (ref($data) eq 'DateTime') {
            # https://metacpan.org/pod/DateTime#$dt-%3Erfc3339
            return $data->rfc3339;
        }
        return $data .q();
    } else { # hash (model),  In this case, the TO_JSON of the $data object is executed
        return $data;
    }
}

# from Perl hashref
sub from_hash {
    my ($self, $hash) = @_;

    # loop through attributes and use openapi_types to deserialize the data
    while ( my ($_key, $_type) = each %{$self->openapi_types} ) {
        my $_json_attribute = $self->attribute_map->{$_key};
        if ($_type =~ /^array\[(.+)\]$/i) { # array
            my $_subclass = $1;
            my @_array = ();
            foreach my $_element (@{$hash->{$_json_attribute}}) {
                push @_array, $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \@_array;
        } elsif ($_type =~ /^hash\[string,(.+)\]$/i) { # hash
            my $_subclass = $1;
            my %_hash = ();
            while (my($_key, $_element) = each %{$hash->{$_json_attribute}}) {
                $_hash{$_key} = $self->_deserialize($_subclass, $_element);
            }
            $self->{$_key} = \%_hash;
        } elsif (exists $hash->{$_json_attribute}) { #hash(model), primitive, datetime
            $self->{$_key} = $self->_deserialize($_type, $hash->{$_json_attribute});
        } else {
            $log->debugf("Warning: %s (%s) does not exist in input hash\n", $_key, $_json_attribute);
        }
    }

    return $self;
}

# deserialize non-array data
sub _deserialize {
    my ($self, $type, $data) = @_;
    $log->debugf("deserializing %s with %s",Dumper($data), $type);

    if (grep( /^$type$/ , ('DATE_TIME', 'DATE'))) {
        return DateTime->from_epoch(epoch => str2time($data));
    } elsif ( grep( /^$type$/, ('int', 'double'))) {
        return undef unless defined $data;
        return $data + 0;
    } elsif ($type eq 'string') {
        return undef unless defined $data;
        return $data . q();
    } elsif ($type eq 'boolean') {
        return !!$data;
    } else { # hash(model)
        my $_instance = eval "WWW::OpenAPIClient::Object::$type->new()";
        return $_instance->from_hash($data);
    }
}


__PACKAGE__->class_documentation({description => '',
                                  class => 'Interval',
                                  required => [], # TODO
}                                 );

__PACKAGE__->method_documentation({
    'study_key' => {
        datatype => 'string',
        base_name => 'studyKey',
        description => 'Unique study key',
        format => '',
        read_only => '',
            },
    'interval_id' => {
        datatype => 'int',
        base_name => 'intervalId',
        description => 'Unique system identifier for the interval (visit definition)',
        format => '',
        read_only => '',
            },
    'interval_name' => {
        datatype => 'string',
        base_name => 'intervalName',
        description => 'Name of the interval (visit) as defined in the study',
        format => '',
        read_only => '',
            },
    'interval_description' => {
        datatype => 'string',
        base_name => 'intervalDescription',
        description => 'Description of the interval (visit)',
        format => '',
        read_only => '',
            },
    'interval_sequence' => {
        datatype => 'int',
        base_name => 'intervalSequence',
        description => 'Sequence number of the interval in the schedule',
        format => '',
        read_only => '',
            },
    'interval_group_id' => {
        datatype => 'int',
        base_name => 'intervalGroupId',
        description => 'Identifier for the interval group (if intervals are grouped)',
        format => '',
        read_only => '',
            },
    'interval_group_name' => {
        datatype => 'string',
        base_name => 'intervalGroupName',
        description => 'Name of the interval group',
        format => '',
        read_only => '',
            },
    'timeline' => {
        datatype => 'string',
        base_name => 'timeline',
        description => 'Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)',
        format => '',
        read_only => '',
            },
    'defined_using_interval' => {
        datatype => 'string',
        base_name => 'definedUsingInterval',
        description => 'Baseline interval used for calculating this intervalâ€™s dates',
        format => '',
        read_only => '',
            },
    'window_calculation_form' => {
        datatype => 'string',
        base_name => 'windowCalculationForm',
        description => 'Baseline form (name) from which the calculation date is taken',
        format => '',
        read_only => '',
            },
    'window_calculation_date' => {
        datatype => 'string',
        base_name => 'windowCalculationDate',
        description => 'Baseline field (variable name) from which the calculation date is taken',
        format => '',
        read_only => '',
            },
    'actual_date_form' => {
        datatype => 'string',
        base_name => 'actualDateForm',
        description => 'Form used to capture the actual date for this interval',
        format => '',
        read_only => '',
            },
    'actual_date' => {
        datatype => 'string',
        base_name => 'actualDate',
        description => 'Field (variable name) used to capture the actual date for this interval',
        format => '',
        read_only => '',
            },
    'due_date_will_be_in' => {
        datatype => 'int',
        base_name => 'dueDateWillBeIn',
        description => 'Number of days from the calculation date when the interval is due',
        format => '',
        read_only => '',
            },
    'negative_slack' => {
        datatype => 'int',
        base_name => 'negativeSlack',
        description => 'Number of days before the due date that are allowed (negative window)',
        format => '',
        read_only => '',
            },
    'positive_slack' => {
        datatype => 'int',
        base_name => 'positiveSlack',
        description => 'Number of days after the due date that are allowed (positive window)',
        format => '',
        read_only => '',
            },
    'epro_grace_period' => {
        datatype => 'int',
        base_name => 'eproGracePeriod',
        description => 'Number of days of grace period for ePRO completion after due date',
        format => '',
        read_only => '',
            },
    'forms' => {
        datatype => 'ARRAY[ComponentsSchemasIntervalFormsItem]',
        base_name => 'forms',
        description => 'List of forms that are scheduled in this interval',
        format => '',
        read_only => '',
            },
    'disabled' => {
        datatype => 'boolean',
        base_name => 'disabled',
        description => 'Whether the interval is soft-deleted (disabled)',
        format => '',
        read_only => '',
            },
    'date_created' => {
        datatype => 'string',
        base_name => 'dateCreated',
        description => 'Date when this interval was created',
        format => '',
        read_only => '',
            },
    'date_modified' => {
        datatype => 'string',
        base_name => 'dateModified',
        description => 'Date when this interval was last modified',
        format => '',
        read_only => '',
            },
});

__PACKAGE__->openapi_types( {
    'study_key' => 'string',
    'interval_id' => 'int',
    'interval_name' => 'string',
    'interval_description' => 'string',
    'interval_sequence' => 'int',
    'interval_group_id' => 'int',
    'interval_group_name' => 'string',
    'timeline' => 'string',
    'defined_using_interval' => 'string',
    'window_calculation_form' => 'string',
    'window_calculation_date' => 'string',
    'actual_date_form' => 'string',
    'actual_date' => 'string',
    'due_date_will_be_in' => 'int',
    'negative_slack' => 'int',
    'positive_slack' => 'int',
    'epro_grace_period' => 'int',
    'forms' => 'ARRAY[ComponentsSchemasIntervalFormsItem]',
    'disabled' => 'boolean',
    'date_created' => 'string',
    'date_modified' => 'string'
} );

__PACKAGE__->attribute_map( {
    'study_key' => 'studyKey',
    'interval_id' => 'intervalId',
    'interval_name' => 'intervalName',
    'interval_description' => 'intervalDescription',
    'interval_sequence' => 'intervalSequence',
    'interval_group_id' => 'intervalGroupId',
    'interval_group_name' => 'intervalGroupName',
    'timeline' => 'timeline',
    'defined_using_interval' => 'definedUsingInterval',
    'window_calculation_form' => 'windowCalculationForm',
    'window_calculation_date' => 'windowCalculationDate',
    'actual_date_form' => 'actualDateForm',
    'actual_date' => 'actualDate',
    'due_date_will_be_in' => 'dueDateWillBeIn',
    'negative_slack' => 'negativeSlack',
    'positive_slack' => 'positiveSlack',
    'epro_grace_period' => 'eproGracePeriod',
    'forms' => 'forms',
    'disabled' => 'disabled',
    'date_created' => 'dateCreated',
    'date_modified' => 'dateModified'
} );

__PACKAGE__->mk_accessors(keys %{__PACKAGE__->attribute_map});


1;
