{-
   Mednet EDC API

   The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

   OpenAPI Version: 3.1.0
   Mednet EDC API API version: 1.3.6
   Generated by OpenAPI Generator (https://openapi-generator.tech)
-}

{-|
Module : MednetEDC.API.Records
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module MednetEDC.API.Records where

import MednetEDC.Core
import MednetEDC.MimeTypes
import MednetEDC.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Records

-- *** createRecords

-- | @POST \/studies\/{studyKey}\/records@
-- 
-- Add new record or update subject/record data
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth', 'AuthApiKeySecurityKeyAuth'
-- 
createRecords
  :: (Consumes CreateRecords MimeJSON, MimeRender MimeJSON ComponentsSchemasRecordCreateRequestItem2)
  => ComponentsSchemasRecordCreateRequestItem2 -- ^ "componentsSchemasRecordCreateRequestItem" -  An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update).
  -> StudyKey -- ^ "studyKey" -  Study key identifying the study context for the request
  -> MednetEDCRequest CreateRecords MimeJSON RecordJobStatus MimeJSON
createRecords componentsSchemasRecordCreateRequestItem (StudyKey studyKey) =
  _mkRequest "POST" ["/studies/",toPath studyKey,"/records"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecurityKeyAuth)
    `setBodyParam` componentsSchemasRecordCreateRequestItem

data CreateRecords 

-- | /Body Param/ "ComponentsSchemasRecordCreateRequestItem" - An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update).
instance HasBodyParam CreateRecords ComponentsSchemasRecordCreateRequestItem2 

-- | @application/json@
instance Consumes CreateRecords MimeJSON

-- | @application/json@
instance Produces CreateRecords MimeJSON


-- *** listRecords

-- | @GET \/studies\/{studyKey}\/records@
-- 
-- List records (eCRF instances) in a study
-- 
-- AuthMethod: 'AuthApiKeyApiKeyAuth', 'AuthApiKeySecurityKeyAuth'
-- 
listRecords
  :: StudyKey -- ^ "studyKey" -  Study key identifying the study context for the request
  -> MednetEDCRequest ListRecords MimeNoContent RecordList MimeJSON
listRecords (StudyKey studyKey) =
  _mkRequest "GET" ["/studies/",toPath studyKey,"/records"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyApiKeyAuth)
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeySecurityKeyAuth)

data ListRecords  

-- | /Optional Param/ "page" - Page index to retrieve (0-based)
instance HasOptionalParam ListRecords Page where
  applyOptionalParam req (Page xs) =
    req `addQuery` toQuery ("page", Just xs)

-- | /Optional Param/ "size" - Number of items to return per page (max 500)
instance HasOptionalParam ListRecords Size where
  applyOptionalParam req (Size xs) =
    req `addQuery` toQuery ("size", Just xs)

-- | /Optional Param/ "sort" - Sorting criteria in the format `property,ASC` or `property,DESC`. Can be repeated.
instance HasOptionalParam ListRecords Sort2 where
  applyOptionalParam req (Sort2 xs) =
    req `addQuery` toQuery ("sort", Just xs)

-- | /Optional Param/ "filter" - Optional filter criteria to apply, in the format `attribute==value` with support for >, >=, <, <=, !=. Multiple criteria can be combined with `;` (AND) or `,` (OR).
instance HasOptionalParam ListRecords Filter where
  applyOptionalParam req (Filter xs) =
    req `addQuery` toQuery ("filter", Just xs)

-- | /Optional Param/ "recordDataFilter" - Optional filter criteria to apply on recordData fields (question responses). Supports ==, !=, <, <=, >, >=, =~ (contains) and can combine multiple criteria with `;` (AND) or `,` (OR).
instance HasOptionalParam ListRecords RecordDataFilter where
  applyOptionalParam req (RecordDataFilter xs) =
    req `addQuery` toQuery ("recordDataFilter", Just xs)
-- | @application/json@
instance Produces ListRecords MimeJSON

