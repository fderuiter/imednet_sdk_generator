<?php
/**
 * Coding
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API.
 *
 * The version of the OpenAPI document: 1.3.6
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Coding Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Coding implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Coding';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'study_key' => 'string',
        'site_name' => 'string',
        'site_id' => 'int',
        'subject_id' => 'int',
        'subject_key' => 'string',
        'form_id' => 'int',
        'form_name' => 'string',
        'form_key' => 'string',
        'revision' => 'int',
        'record_id' => 'int',
        'variable' => 'string',
        'value' => 'string',
        'coding_id' => 'int',
        'code' => 'string',
        'coded_by' => 'string',
        'reason' => 'string',
        'dictionary_name' => 'string',
        'dictionary_version' => 'string',
        'date_coded' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'study_key' => null,
        'site_name' => null,
        'site_id' => null,
        'subject_id' => null,
        'subject_key' => null,
        'form_id' => null,
        'form_name' => null,
        'form_key' => null,
        'revision' => null,
        'record_id' => null,
        'variable' => null,
        'value' => null,
        'coding_id' => null,
        'code' => null,
        'coded_by' => null,
        'reason' => null,
        'dictionary_name' => null,
        'dictionary_version' => null,
        'date_coded' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'study_key' => false,
        'site_name' => false,
        'site_id' => false,
        'subject_id' => false,
        'subject_key' => false,
        'form_id' => false,
        'form_name' => false,
        'form_key' => false,
        'revision' => false,
        'record_id' => false,
        'variable' => false,
        'value' => false,
        'coding_id' => false,
        'code' => false,
        'coded_by' => false,
        'reason' => false,
        'dictionary_name' => false,
        'dictionary_version' => false,
        'date_coded' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'study_key' => 'studyKey',
        'site_name' => 'siteName',
        'site_id' => 'siteId',
        'subject_id' => 'subjectId',
        'subject_key' => 'subjectKey',
        'form_id' => 'formId',
        'form_name' => 'formName',
        'form_key' => 'formKey',
        'revision' => 'revision',
        'record_id' => 'recordId',
        'variable' => 'variable',
        'value' => 'value',
        'coding_id' => 'codingId',
        'code' => 'code',
        'coded_by' => 'codedBy',
        'reason' => 'reason',
        'dictionary_name' => 'dictionaryName',
        'dictionary_version' => 'dictionaryVersion',
        'date_coded' => 'dateCoded'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'study_key' => 'setStudyKey',
        'site_name' => 'setSiteName',
        'site_id' => 'setSiteId',
        'subject_id' => 'setSubjectId',
        'subject_key' => 'setSubjectKey',
        'form_id' => 'setFormId',
        'form_name' => 'setFormName',
        'form_key' => 'setFormKey',
        'revision' => 'setRevision',
        'record_id' => 'setRecordId',
        'variable' => 'setVariable',
        'value' => 'setValue',
        'coding_id' => 'setCodingId',
        'code' => 'setCode',
        'coded_by' => 'setCodedBy',
        'reason' => 'setReason',
        'dictionary_name' => 'setDictionaryName',
        'dictionary_version' => 'setDictionaryVersion',
        'date_coded' => 'setDateCoded'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'study_key' => 'getStudyKey',
        'site_name' => 'getSiteName',
        'site_id' => 'getSiteId',
        'subject_id' => 'getSubjectId',
        'subject_key' => 'getSubjectKey',
        'form_id' => 'getFormId',
        'form_name' => 'getFormName',
        'form_key' => 'getFormKey',
        'revision' => 'getRevision',
        'record_id' => 'getRecordId',
        'variable' => 'getVariable',
        'value' => 'getValue',
        'coding_id' => 'getCodingId',
        'code' => 'getCode',
        'coded_by' => 'getCodedBy',
        'reason' => 'getReason',
        'dictionary_name' => 'getDictionaryName',
        'dictionary_version' => 'getDictionaryVersion',
        'date_coded' => 'getDateCoded'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('study_key', $data ?? [], null);
        $this->setIfExists('site_name', $data ?? [], null);
        $this->setIfExists('site_id', $data ?? [], null);
        $this->setIfExists('subject_id', $data ?? [], null);
        $this->setIfExists('subject_key', $data ?? [], null);
        $this->setIfExists('form_id', $data ?? [], null);
        $this->setIfExists('form_name', $data ?? [], null);
        $this->setIfExists('form_key', $data ?? [], null);
        $this->setIfExists('revision', $data ?? [], null);
        $this->setIfExists('record_id', $data ?? [], null);
        $this->setIfExists('variable', $data ?? [], null);
        $this->setIfExists('value', $data ?? [], null);
        $this->setIfExists('coding_id', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('coded_by', $data ?? [], null);
        $this->setIfExists('reason', $data ?? [], null);
        $this->setIfExists('dictionary_name', $data ?? [], null);
        $this->setIfExists('dictionary_version', $data ?? [], null);
        $this->setIfExists('date_coded', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets study_key
     *
     * @return string|null
     */
    public function getStudyKey()
    {
        return $this->container['study_key'];
    }

    /**
     * Sets study_key
     *
     * @param string|null $study_key Unique study key
     *
     * @return self
     */
    public function setStudyKey($study_key)
    {
        if (is_null($study_key)) {
            throw new \InvalidArgumentException('non-nullable study_key cannot be null');
        }
        $this->container['study_key'] = $study_key;

        return $this;
    }

    /**
     * Gets site_name
     *
     * @return string|null
     */
    public function getSiteName()
    {
        return $this->container['site_name'];
    }

    /**
     * Sets site_name
     *
     * @param string|null $site_name Name of the site associated with the coded data
     *
     * @return self
     */
    public function setSiteName($site_name)
    {
        if (is_null($site_name)) {
            throw new \InvalidArgumentException('non-nullable site_name cannot be null');
        }
        $this->container['site_name'] = $site_name;

        return $this;
    }

    /**
     * Gets site_id
     *
     * @return int|null
     */
    public function getSiteId()
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     *
     * @param int|null $site_id Site ID associated with the coded data
     *
     * @return self
     */
    public function setSiteId($site_id)
    {
        if (is_null($site_id)) {
            throw new \InvalidArgumentException('non-nullable site_id cannot be null');
        }
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets subject_id
     *
     * @return int|null
     */
    public function getSubjectId()
    {
        return $this->container['subject_id'];
    }

    /**
     * Sets subject_id
     *
     * @param int|null $subject_id Subject ID associated with the coded data
     *
     * @return self
     */
    public function setSubjectId($subject_id)
    {
        if (is_null($subject_id)) {
            throw new \InvalidArgumentException('non-nullable subject_id cannot be null');
        }
        $this->container['subject_id'] = $subject_id;

        return $this;
    }

    /**
     * Gets subject_key
     *
     * @return string|null
     */
    public function getSubjectKey()
    {
        return $this->container['subject_key'];
    }

    /**
     * Sets subject_key
     *
     * @param string|null $subject_key Subject key (display ID) associated with the coded data
     *
     * @return self
     */
    public function setSubjectKey($subject_key)
    {
        if (is_null($subject_key)) {
            throw new \InvalidArgumentException('non-nullable subject_key cannot be null');
        }
        $this->container['subject_key'] = $subject_key;

        return $this;
    }

    /**
     * Gets form_id
     *
     * @return int|null
     */
    public function getFormId()
    {
        return $this->container['form_id'];
    }

    /**
     * Sets form_id
     *
     * @param int|null $form_id Form ID where the coded data originates
     *
     * @return self
     */
    public function setFormId($form_id)
    {
        if (is_null($form_id)) {
            throw new \InvalidArgumentException('non-nullable form_id cannot be null');
        }
        $this->container['form_id'] = $form_id;

        return $this;
    }

    /**
     * Gets form_name
     *
     * @return string|null
     */
    public function getFormName()
    {
        return $this->container['form_name'];
    }

    /**
     * Sets form_name
     *
     * @param string|null $form_name Name of the form where the coded data originates
     *
     * @return self
     */
    public function setFormName($form_name)
    {
        if (is_null($form_name)) {
            throw new \InvalidArgumentException('non-nullable form_name cannot be null');
        }
        $this->container['form_name'] = $form_name;

        return $this;
    }

    /**
     * Gets form_key
     *
     * @return string|null
     */
    public function getFormKey()
    {
        return $this->container['form_key'];
    }

    /**
     * Sets form_key
     *
     * @param string|null $form_key Form key where the coded data originates
     *
     * @return self
     */
    public function setFormKey($form_key)
    {
        if (is_null($form_key)) {
            throw new \InvalidArgumentException('non-nullable form_key cannot be null');
        }
        $this->container['form_key'] = $form_key;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int|null
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int|null $revision Revision number of the coding entry
     *
     * @return self
     */
    public function setRevision($revision)
    {
        if (is_null($revision)) {
            throw new \InvalidArgumentException('non-nullable revision cannot be null');
        }
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets record_id
     *
     * @return int|null
     */
    public function getRecordId()
    {
        return $this->container['record_id'];
    }

    /**
     * Sets record_id
     *
     * @param int|null $record_id Record ID associated with the coded data
     *
     * @return self
     */
    public function setRecordId($record_id)
    {
        if (is_null($record_id)) {
            throw new \InvalidArgumentException('non-nullable record_id cannot be null');
        }
        $this->container['record_id'] = $record_id;

        return $this;
    }

    /**
     * Gets variable
     *
     * @return string|null
     */
    public function getVariable()
    {
        return $this->container['variable'];
    }

    /**
     * Sets variable
     *
     * @param string|null $variable Variable name (field) that was coded
     *
     * @return self
     */
    public function setVariable($variable)
    {
        if (is_null($variable)) {
            throw new \InvalidArgumentException('non-nullable variable cannot be null');
        }
        $this->container['variable'] = $variable;

        return $this;
    }

    /**
     * Gets value
     *
     * @return string|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param string|null $value Original value entered that required coding
     *
     * @return self
     */
    public function setValue($value)
    {
        if (is_null($value)) {
            throw new \InvalidArgumentException('non-nullable value cannot be null');
        }
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets coding_id
     *
     * @return int|null
     */
    public function getCodingId()
    {
        return $this->container['coding_id'];
    }

    /**
     * Sets coding_id
     *
     * @param int|null $coding_id Mednet coding ID
     *
     * @return self
     */
    public function setCodingId($coding_id)
    {
        if (is_null($coding_id)) {
            throw new \InvalidArgumentException('non-nullable coding_id cannot be null');
        }
        $this->container['coding_id'] = $coding_id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code Standardized code assigned (e.g., dictionary term)
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            throw new \InvalidArgumentException('non-nullable code cannot be null');
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets coded_by
     *
     * @return string|null
     */
    public function getCodedBy()
    {
        return $this->container['coded_by'];
    }

    /**
     * Sets coded_by
     *
     * @param string|null $coded_by Name of the user who performed the coding
     *
     * @return self
     */
    public function setCodedBy($coded_by)
    {
        if (is_null($coded_by)) {
            throw new \InvalidArgumentException('non-nullable coded_by cannot be null');
        }
        $this->container['coded_by'] = $coded_by;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string|null
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string|null $reason Reason for coding or any notes on changes
     *
     * @return self
     */
    public function setReason($reason)
    {
        if (is_null($reason)) {
            throw new \InvalidArgumentException('non-nullable reason cannot be null');
        }
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets dictionary_name
     *
     * @return string|null
     */
    public function getDictionaryName()
    {
        return $this->container['dictionary_name'];
    }

    /**
     * Sets dictionary_name
     *
     * @param string|null $dictionary_name Name of the dictionary used (e.g., MedDRA)
     *
     * @return self
     */
    public function setDictionaryName($dictionary_name)
    {
        if (is_null($dictionary_name)) {
            throw new \InvalidArgumentException('non-nullable dictionary_name cannot be null');
        }
        $this->container['dictionary_name'] = $dictionary_name;

        return $this;
    }

    /**
     * Gets dictionary_version
     *
     * @return string|null
     */
    public function getDictionaryVersion()
    {
        return $this->container['dictionary_version'];
    }

    /**
     * Sets dictionary_version
     *
     * @param string|null $dictionary_version Version of the dictionary used
     *
     * @return self
     */
    public function setDictionaryVersion($dictionary_version)
    {
        if (is_null($dictionary_version)) {
            throw new \InvalidArgumentException('non-nullable dictionary_version cannot be null');
        }
        $this->container['dictionary_version'] = $dictionary_version;

        return $this;
    }

    /**
     * Gets date_coded
     *
     * @return string|null
     */
    public function getDateCoded()
    {
        return $this->container['date_coded'];
    }

    /**
     * Sets date_coded
     *
     * @param string|null $date_coded Date when the coding was performed
     *
     * @return self
     */
    public function setDateCoded($date_coded)
    {
        if (is_null($date_coded)) {
            throw new \InvalidArgumentException('non-nullable date_coded cannot be null');
        }
        $this->container['date_coded'] = $date_coded;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


