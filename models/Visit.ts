/* tslint:disable */
/* eslint-disable */
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Visit
 */
export interface Visit {
    /**
     * Unique study key
     * @type {string}
     * @memberof Visit
     */
    studyKey?: string;
    /**
     * Unique system identifier for the subject visit instance
     * @type {number}
     * @memberof Visit
     */
    visitId?: number;
    /**
     * Unique system identifier of the interval definition for this visit
     * @type {number}
     * @memberof Visit
     */
    intervalId?: number;
    /**
     * Name of the interval (visit) for this visit instance
     * @type {string}
     * @memberof Visit
     */
    intervalName?: string;
    /**
     * Mednet subject ID of the subject
     * @type {number}
     * @memberof Visit
     */
    subjectId?: number;
    /**
     * Protocol-assigned subject identifier
     * @type {string}
     * @memberof Visit
     */
    subjectKey?: string;
    /**
     * Start date of the visit window (in YYYY-MM-DD format)
     * @type {string}
     * @memberof Visit
     */
    startDate?: string;
    /**
     * End date of the visit window (in YYYY-MM-DD format)
     * @type {string}
     * @memberof Visit
     */
    endDate?: string;
    /**
     * Due date of the visit (in YYYY-MM-DD format), if applicable
     * @type {string}
     * @memberof Visit
     */
    dueDate?: string;
    /**
     * Actual date the visit took place (in YYYY-MM-DD format)
     * @type {string}
     * @memberof Visit
     */
    visitDate?: string;
    /**
     * Name of the form used to capture the actual visit date
     * @type {string}
     * @memberof Visit
     */
    visitDateForm?: string;
    /**
     * Variable name of the field capturing the actual visit date
     * @type {string}
     * @memberof Visit
     */
    visitDateQuestion?: string;
    /**
     * Whether the visit instance is marked as deleted
     * @type {boolean}
     * @memberof Visit
     */
    deleted?: boolean;
    /**
     * Date when this visit record was created
     * @type {string}
     * @memberof Visit
     */
    dateCreated?: string;
    /**
     * Date when this visit record was last modified
     * @type {string}
     * @memberof Visit
     */
    dateModified?: string;
}

/**
 * Check if a given object implements the Visit interface.
 */
export function instanceOfVisit(value: object): value is Visit {
    return true;
}

export function VisitFromJSON(json: any): Visit {
    return VisitFromJSONTyped(json, false);
}

export function VisitFromJSONTyped(json: any, ignoreDiscriminator: boolean): Visit {
    if (json == null) {
        return json;
    }
    return {
        
        'studyKey': json['studyKey'] == null ? undefined : json['studyKey'],
        'visitId': json['visitId'] == null ? undefined : json['visitId'],
        'intervalId': json['intervalId'] == null ? undefined : json['intervalId'],
        'intervalName': json['intervalName'] == null ? undefined : json['intervalName'],
        'subjectId': json['subjectId'] == null ? undefined : json['subjectId'],
        'subjectKey': json['subjectKey'] == null ? undefined : json['subjectKey'],
        'startDate': json['startDate'] == null ? undefined : json['startDate'],
        'endDate': json['endDate'] == null ? undefined : json['endDate'],
        'dueDate': json['dueDate'] == null ? undefined : json['dueDate'],
        'visitDate': json['visitDate'] == null ? undefined : json['visitDate'],
        'visitDateForm': json['visitDateForm'] == null ? undefined : json['visitDateForm'],
        'visitDateQuestion': json['visitDateQuestion'] == null ? undefined : json['visitDateQuestion'],
        'deleted': json['deleted'] == null ? undefined : json['deleted'],
        'dateCreated': json['dateCreated'] == null ? undefined : json['dateCreated'],
        'dateModified': json['dateModified'] == null ? undefined : json['dateModified'],
    };
}

export function VisitToJSON(json: any): Visit {
    return VisitToJSONTyped(json, false);
}

export function VisitToJSONTyped(value?: Visit | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'studyKey': value['studyKey'],
        'visitId': value['visitId'],
        'intervalId': value['intervalId'],
        'intervalName': value['intervalName'],
        'subjectId': value['subjectId'],
        'subjectKey': value['subjectKey'],
        'startDate': value['startDate'],
        'endDate': value['endDate'],
        'dueDate': value['dueDate'],
        'visitDate': value['visitDate'],
        'visitDateForm': value['visitDateForm'],
        'visitDateQuestion': value['visitDateQuestion'],
        'deleted': value['deleted'],
        'dateCreated': value['dateCreated'],
        'dateModified': value['dateModified'],
    };
}

