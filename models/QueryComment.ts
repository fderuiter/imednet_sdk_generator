/* tslint:disable */
/* eslint-disable */
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface QueryComment
 */
export interface QueryComment {
    /**
     * Sequence number of the comment/action in the query history
     * @type {number}
     * @memberof QueryComment
     */
    sequence?: number;
    /**
     * Status of the query after this comment (e.g., Open, Closed)
     * @type {string}
     * @memberof QueryComment
     */
    annotationStatus?: string;
    /**
     * Username of the user who made the comment or action
     * @type {string}
     * @memberof QueryComment
     */
    user?: string;
    /**
     * Text of the comment
     * @type {string}
     * @memberof QueryComment
     */
    comment?: string;
    /**
     * Whether the query was marked closed at this step
     * @type {boolean}
     * @memberof QueryComment
     */
    closed?: boolean;
    /**
     * Date of the comment or action
     * @type {string}
     * @memberof QueryComment
     */
    date?: string;
}

/**
 * Check if a given object implements the QueryComment interface.
 */
export function instanceOfQueryComment(value: object): value is QueryComment {
    return true;
}

export function QueryCommentFromJSON(json: any): QueryComment {
    return QueryCommentFromJSONTyped(json, false);
}

export function QueryCommentFromJSONTyped(json: any, ignoreDiscriminator: boolean): QueryComment {
    if (json == null) {
        return json;
    }
    return {
        
        'sequence': json['sequence'] == null ? undefined : json['sequence'],
        'annotationStatus': json['annotationStatus'] == null ? undefined : json['annotationStatus'],
        'user': json['user'] == null ? undefined : json['user'],
        'comment': json['comment'] == null ? undefined : json['comment'],
        'closed': json['closed'] == null ? undefined : json['closed'],
        'date': json['date'] == null ? undefined : json['date'],
    };
}

export function QueryCommentToJSON(json: any): QueryComment {
    return QueryCommentToJSONTyped(json, false);
}

export function QueryCommentToJSONTyped(value?: QueryComment | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sequence': value['sequence'],
        'annotationStatus': value['annotationStatus'],
        'user': value['user'],
        'comment': value['comment'],
        'closed': value['closed'],
        'date': value['date'],
    };
}

