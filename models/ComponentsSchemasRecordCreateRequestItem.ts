/* tslint:disable */
/* eslint-disable */
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ComponentsSchemasRecordCreateRequestItem
 */
export interface ComponentsSchemasRecordCreateRequestItem {
    /**
     * Form key identifying the eCRF to create or update
     * @type {string}
     * @memberof ComponentsSchemasRecordCreateRequestItem
     */
    formKey: string;
    /**
     * Form ID identifying the eCRF to create or update (alternative to formKey)
     * @type {number}
     * @memberof ComponentsSchemasRecordCreateRequestItem
     */
    formId?: number;
    /**
     * Name of the site where the record should be created (for new subject registration)
     * @type {string}
     * @memberof ComponentsSchemasRecordCreateRequestItem
     */
    siteName?: string;
    /**
     * Site ID for the record (alternative to siteName)
     * @type {number}
     * @memberof ComponentsSchemasRecordCreateRequestItem
     */
    siteId?: number;
    /**
     * Subject identifier (display ID) for which to create or update the record
     * @type {string}
     * @memberof ComponentsSchemasRecordCreateRequestItem
     */
    subjectKey?: string;
    /**
     * Subject ID for which to create or update the record (alternative to subjectKey)
     * @type {number}
     * @memberof ComponentsSchemasRecordCreateRequestItem
     */
    subjectId?: number;
    /**
     * Subject OID for which to create or update the record (alternative to subjectKey)
     * @type {string}
     * @memberof ComponentsSchemasRecordCreateRequestItem
     */
    subjectOid?: string;
    /**
     * Name of the interval (visit) for a scheduled record update
     * @type {string}
     * @memberof ComponentsSchemasRecordCreateRequestItem
     */
    intervalName?: string;
    /**
     * Interval ID for a scheduled record update (alternative to intervalName)
     * @type {number}
     * @memberof ComponentsSchemasRecordCreateRequestItem
     */
    intervalId?: number;
    /**
     * Record ID for updating an existing unscheduled record (if applicable)
     * @type {number}
     * @memberof ComponentsSchemasRecordCreateRequestItem
     */
    recordId?: number;
    /**
     * Record OID for updating an existing unscheduled record (if applicable)
     * @type {string}
     * @memberof ComponentsSchemasRecordCreateRequestItem
     */
    recordOid?: string;
    /**
     * Key-value pairs of field names and values for the record data
     * @type {{ [key: string]: any; }}
     * @memberof ComponentsSchemasRecordCreateRequestItem
     */
    data: { [key: string]: any; };
}

/**
 * Check if a given object implements the ComponentsSchemasRecordCreateRequestItem interface.
 */
export function instanceOfComponentsSchemasRecordCreateRequestItem(value: object): value is ComponentsSchemasRecordCreateRequestItem {
    if (!('formKey' in value) || value['formKey'] === undefined) return false;
    if (!('data' in value) || value['data'] === undefined) return false;
    return true;
}

export function ComponentsSchemasRecordCreateRequestItemFromJSON(json: any): ComponentsSchemasRecordCreateRequestItem {
    return ComponentsSchemasRecordCreateRequestItemFromJSONTyped(json, false);
}

export function ComponentsSchemasRecordCreateRequestItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): ComponentsSchemasRecordCreateRequestItem {
    if (json == null) {
        return json;
    }
    return {
        
        'formKey': json['formKey'],
        'formId': json['formId'] == null ? undefined : json['formId'],
        'siteName': json['siteName'] == null ? undefined : json['siteName'],
        'siteId': json['siteId'] == null ? undefined : json['siteId'],
        'subjectKey': json['subjectKey'] == null ? undefined : json['subjectKey'],
        'subjectId': json['subjectId'] == null ? undefined : json['subjectId'],
        'subjectOid': json['subjectOid'] == null ? undefined : json['subjectOid'],
        'intervalName': json['intervalName'] == null ? undefined : json['intervalName'],
        'intervalId': json['intervalId'] == null ? undefined : json['intervalId'],
        'recordId': json['recordId'] == null ? undefined : json['recordId'],
        'recordOid': json['recordOid'] == null ? undefined : json['recordOid'],
        'data': json['data'],
    };
}

export function ComponentsSchemasRecordCreateRequestItemToJSON(json: any): ComponentsSchemasRecordCreateRequestItem {
    return ComponentsSchemasRecordCreateRequestItemToJSONTyped(json, false);
}

export function ComponentsSchemasRecordCreateRequestItemToJSONTyped(value?: ComponentsSchemasRecordCreateRequestItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'formKey': value['formKey'],
        'formId': value['formId'],
        'siteName': value['siteName'],
        'siteId': value['siteId'],
        'subjectKey': value['subjectKey'],
        'subjectId': value['subjectId'],
        'subjectOid': value['subjectOid'],
        'intervalName': value['intervalName'],
        'intervalId': value['intervalId'],
        'recordId': value['recordId'],
        'recordOid': value['recordOid'],
        'data': value['data'],
    };
}

