extends Resource
class_name Interval

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, © Public Domain, 2022

# Interval Model


# Unique study key
# Required: False
# isArray: false
@export var studyKey: String:
	set(value):
		__studyKey__was__set = true
		studyKey = value
var __studyKey__was__set := false

# Unique system identifier for the interval (visit definition)
# Required: False
# isArray: false
@export var intervalId: int:
	set(value):
		__intervalId__was__set = true
		intervalId = value
var __intervalId__was__set := false

# Name of the interval (visit) as defined in the study
# Required: False
# isArray: false
@export var intervalName: String:
	set(value):
		__intervalName__was__set = true
		intervalName = value
var __intervalName__was__set := false

# Description of the interval (visit)
# Required: False
# isArray: false
@export var intervalDescription: String:
	set(value):
		__intervalDescription__was__set = true
		intervalDescription = value
var __intervalDescription__was__set := false

# Sequence number of the interval in the schedule
# Required: False
# isArray: false
@export var intervalSequence: int:
	set(value):
		__intervalSequence__was__set = true
		intervalSequence = value
var __intervalSequence__was__set := false

# Identifier for the interval group (if intervals are grouped)
# Required: False
# isArray: false
@export var intervalGroupId: int:
	set(value):
		__intervalGroupId__was__set = true
		intervalGroupId = value
var __intervalGroupId__was__set := false

# Name of the interval group
# Required: False
# isArray: false
@export var intervalGroupName: String:
	set(value):
		__intervalGroupName__was__set = true
		intervalGroupName = value
var __intervalGroupName__was__set := false

# Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
# Required: False
# isArray: false
@export var timeline: String:
	set(value):
		__timeline__was__set = true
		timeline = value
var __timeline__was__set := false

# Baseline interval used for calculating this interval’s dates
# Required: False
# isArray: false
@export var definedUsingInterval: String:
	set(value):
		__definedUsingInterval__was__set = true
		definedUsingInterval = value
var __definedUsingInterval__was__set := false

# Baseline form (name) from which the calculation date is taken
# Required: False
# isArray: false
@export var windowCalculationForm: String:
	set(value):
		__windowCalculationForm__was__set = true
		windowCalculationForm = value
var __windowCalculationForm__was__set := false

# Baseline field (variable name) from which the calculation date is taken
# Required: False
# isArray: false
@export var windowCalculationDate: String:
	set(value):
		__windowCalculationDate__was__set = true
		windowCalculationDate = value
var __windowCalculationDate__was__set := false

# Form used to capture the actual date for this interval
# Required: False
# isArray: false
@export var actualDateForm: String:
	set(value):
		__actualDateForm__was__set = true
		actualDateForm = value
var __actualDateForm__was__set := false

# Field (variable name) used to capture the actual date for this interval
# Required: False
# isArray: false
@export var actualDate: String:
	set(value):
		__actualDate__was__set = true
		actualDate = value
var __actualDate__was__set := false

# Number of days from the calculation date when the interval is due
# Required: False
# isArray: false
@export var dueDateWillBeIn: int:
	set(value):
		__dueDateWillBeIn__was__set = true
		dueDateWillBeIn = value
var __dueDateWillBeIn__was__set := false

# Number of days before the due date that are allowed (negative window)
# Required: False
# isArray: false
@export var negativeSlack: int:
	set(value):
		__negativeSlack__was__set = true
		negativeSlack = value
var __negativeSlack__was__set := false

# Number of days after the due date that are allowed (positive window)
# Required: False
# isArray: false
@export var positiveSlack: int:
	set(value):
		__positiveSlack__was__set = true
		positiveSlack = value
var __positiveSlack__was__set := false

# Number of days of grace period for ePRO completion after due date
# Required: False
# isArray: false
@export var eproGracePeriod: int:
	set(value):
		__eproGracePeriod__was__set = true
		eproGracePeriod = value
var __eproGracePeriod__was__set := false

# List of forms that are scheduled in this interval
# Required: False
# isArray: true
@export var forms: Array:
	set(value):
		__forms__was__set = true
		forms = value
var __forms__was__set := false

# Whether the interval is soft-deleted (disabled)
# Required: False
# isArray: false
@export var disabled: bool:
	set(value):
		__disabled__was__set = true
		disabled = value
var __disabled__was__set := false

# Date when this interval was created
# Required: False
# isArray: false
@export var dateCreated: String:
	set(value):
		__dateCreated__was__set = true
		dateCreated = value
var __dateCreated__was__set := false

# Date when this interval was last modified
# Required: False
# isArray: false
@export var dateModified: String:
	set(value):
		__dateModified__was__set = true
		dateModified = value
var __dateModified__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__studyKey__was__set:
		bzz_dictionary["studyKey"] = self.studyKey
	if self.__intervalId__was__set:
		bzz_dictionary["intervalId"] = self.intervalId
	if self.__intervalName__was__set:
		bzz_dictionary["intervalName"] = self.intervalName
	if self.__intervalDescription__was__set:
		bzz_dictionary["intervalDescription"] = self.intervalDescription
	if self.__intervalSequence__was__set:
		bzz_dictionary["intervalSequence"] = self.intervalSequence
	if self.__intervalGroupId__was__set:
		bzz_dictionary["intervalGroupId"] = self.intervalGroupId
	if self.__intervalGroupName__was__set:
		bzz_dictionary["intervalGroupName"] = self.intervalGroupName
	if self.__timeline__was__set:
		bzz_dictionary["timeline"] = self.timeline
	if self.__definedUsingInterval__was__set:
		bzz_dictionary["definedUsingInterval"] = self.definedUsingInterval
	if self.__windowCalculationForm__was__set:
		bzz_dictionary["windowCalculationForm"] = self.windowCalculationForm
	if self.__windowCalculationDate__was__set:
		bzz_dictionary["windowCalculationDate"] = self.windowCalculationDate
	if self.__actualDateForm__was__set:
		bzz_dictionary["actualDateForm"] = self.actualDateForm
	if self.__actualDate__was__set:
		bzz_dictionary["actualDate"] = self.actualDate
	if self.__dueDateWillBeIn__was__set:
		bzz_dictionary["dueDateWillBeIn"] = self.dueDateWillBeIn
	if self.__negativeSlack__was__set:
		bzz_dictionary["negativeSlack"] = self.negativeSlack
	if self.__positiveSlack__was__set:
		bzz_dictionary["positiveSlack"] = self.positiveSlack
	if self.__eproGracePeriod__was__set:
		bzz_dictionary["eproGracePeriod"] = self.eproGracePeriod
	if self.__forms__was__set:
		bzz_dictionary["forms"] = self.forms
	if self.__disabled__was__set:
		bzz_dictionary["disabled"] = self.disabled
	if self.__dateCreated__was__set:
		bzz_dictionary["dateCreated"] = self.dateCreated
	if self.__dateModified__was__set:
		bzz_dictionary["dateModified"] = self.dateModified
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("studyKey"):
		me.studyKey = from_dict["studyKey"]
	if from_dict.has("intervalId"):
		me.intervalId = from_dict["intervalId"]
	if from_dict.has("intervalName"):
		me.intervalName = from_dict["intervalName"]
	if from_dict.has("intervalDescription"):
		me.intervalDescription = from_dict["intervalDescription"]
	if from_dict.has("intervalSequence"):
		me.intervalSequence = from_dict["intervalSequence"]
	if from_dict.has("intervalGroupId"):
		me.intervalGroupId = from_dict["intervalGroupId"]
	if from_dict.has("intervalGroupName"):
		me.intervalGroupName = from_dict["intervalGroupName"]
	if from_dict.has("timeline"):
		me.timeline = from_dict["timeline"]
	if from_dict.has("definedUsingInterval"):
		me.definedUsingInterval = from_dict["definedUsingInterval"]
	if from_dict.has("windowCalculationForm"):
		me.windowCalculationForm = from_dict["windowCalculationForm"]
	if from_dict.has("windowCalculationDate"):
		me.windowCalculationDate = from_dict["windowCalculationDate"]
	if from_dict.has("actualDateForm"):
		me.actualDateForm = from_dict["actualDateForm"]
	if from_dict.has("actualDate"):
		me.actualDate = from_dict["actualDate"]
	if from_dict.has("dueDateWillBeIn"):
		me.dueDateWillBeIn = from_dict["dueDateWillBeIn"]
	if from_dict.has("negativeSlack"):
		me.negativeSlack = from_dict["negativeSlack"]
	if from_dict.has("positiveSlack"):
		me.positiveSlack = from_dict["positiveSlack"]
	if from_dict.has("eproGracePeriod"):
		me.eproGracePeriod = from_dict["eproGracePeriod"]
	if from_dict.has("forms"):
		me.forms = components_schemas_Interval_forms_item.bzz_denormalize_multiple(from_dict["forms"])
	if from_dict.has("disabled"):
		me.disabled = from_dict["disabled"]
	if from_dict.has("dateCreated"):
		me.dateCreated = from_dict["dateCreated"]
	if from_dict.has("dateModified"):
		me.dateModified = from_dict["dateModified"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

