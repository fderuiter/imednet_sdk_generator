extends Resource
class_name Coding

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# Coding Model


# Unique study key
# Required: False
# isArray: false
@export var studyKey: String:
	set(value):
		__studyKey__was__set = true
		studyKey = value
var __studyKey__was__set := false

# Name of the site associated with the coded data
# Required: False
# isArray: false
@export var siteName: String:
	set(value):
		__siteName__was__set = true
		siteName = value
var __siteName__was__set := false

# Site ID associated with the coded data
# Required: False
# isArray: false
@export var siteId: int:
	set(value):
		__siteId__was__set = true
		siteId = value
var __siteId__was__set := false

# Subject ID associated with the coded data
# Required: False
# isArray: false
@export var subjectId: int:
	set(value):
		__subjectId__was__set = true
		subjectId = value
var __subjectId__was__set := false

# Subject key (display ID) associated with the coded data
# Required: False
# isArray: false
@export var subjectKey: String:
	set(value):
		__subjectKey__was__set = true
		subjectKey = value
var __subjectKey__was__set := false

# Form ID where the coded data originates
# Required: False
# isArray: false
@export var formId: int:
	set(value):
		__formId__was__set = true
		formId = value
var __formId__was__set := false

# Name of the form where the coded data originates
# Required: False
# isArray: false
@export var formName: String:
	set(value):
		__formName__was__set = true
		formName = value
var __formName__was__set := false

# Form key where the coded data originates
# Required: False
# isArray: false
@export var formKey: String:
	set(value):
		__formKey__was__set = true
		formKey = value
var __formKey__was__set := false

# Revision number of the coding entry
# Required: False
# isArray: false
@export var revision: int:
	set(value):
		__revision__was__set = true
		revision = value
var __revision__was__set := false

# Record ID associated with the coded data
# Required: False
# isArray: false
@export var recordId: int:
	set(value):
		__recordId__was__set = true
		recordId = value
var __recordId__was__set := false

# Variable name (field) that was coded
# Required: False
# isArray: false
@export var variable: String:
	set(value):
		__variable__was__set = true
		variable = value
var __variable__was__set := false

# Original value entered that required coding
# Required: False
# isArray: false
@export var value: String:
	set(value):
		__value__was__set = true
		value = value
var __value__was__set := false

# Mednet coding ID
# Required: False
# isArray: false
@export var codingId: int:
	set(value):
		__codingId__was__set = true
		codingId = value
var __codingId__was__set := false

# Standardized code assigned (e.g., dictionary term)
# Required: False
# isArray: false
@export var code: String:
	set(value):
		__code__was__set = true
		code = value
var __code__was__set := false

# Name of the user who performed the coding
# Required: False
# isArray: false
@export var codedBy: String:
	set(value):
		__codedBy__was__set = true
		codedBy = value
var __codedBy__was__set := false

# Reason for coding or any notes on changes
# Required: False
# isArray: false
@export var reason: String:
	set(value):
		__reason__was__set = true
		reason = value
var __reason__was__set := false

# Name of the dictionary used (e.g., MedDRA)
# Required: False
# isArray: false
@export var dictionaryName: String:
	set(value):
		__dictionaryName__was__set = true
		dictionaryName = value
var __dictionaryName__was__set := false

# Version of the dictionary used
# Required: False
# isArray: false
@export var dictionaryVersion: String:
	set(value):
		__dictionaryVersion__was__set = true
		dictionaryVersion = value
var __dictionaryVersion__was__set := false

# Date when the coding was performed
# Required: False
# isArray: false
@export var dateCoded: String:
	set(value):
		__dateCoded__was__set = true
		dateCoded = value
var __dateCoded__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__studyKey__was__set:
		bzz_dictionary["studyKey"] = self.studyKey
	if self.__siteName__was__set:
		bzz_dictionary["siteName"] = self.siteName
	if self.__siteId__was__set:
		bzz_dictionary["siteId"] = self.siteId
	if self.__subjectId__was__set:
		bzz_dictionary["subjectId"] = self.subjectId
	if self.__subjectKey__was__set:
		bzz_dictionary["subjectKey"] = self.subjectKey
	if self.__formId__was__set:
		bzz_dictionary["formId"] = self.formId
	if self.__formName__was__set:
		bzz_dictionary["formName"] = self.formName
	if self.__formKey__was__set:
		bzz_dictionary["formKey"] = self.formKey
	if self.__revision__was__set:
		bzz_dictionary["revision"] = self.revision
	if self.__recordId__was__set:
		bzz_dictionary["recordId"] = self.recordId
	if self.__variable__was__set:
		bzz_dictionary["variable"] = self.variable
	if self.__value__was__set:
		bzz_dictionary["value"] = self.value
	if self.__codingId__was__set:
		bzz_dictionary["codingId"] = self.codingId
	if self.__code__was__set:
		bzz_dictionary["code"] = self.code
	if self.__codedBy__was__set:
		bzz_dictionary["codedBy"] = self.codedBy
	if self.__reason__was__set:
		bzz_dictionary["reason"] = self.reason
	if self.__dictionaryName__was__set:
		bzz_dictionary["dictionaryName"] = self.dictionaryName
	if self.__dictionaryVersion__was__set:
		bzz_dictionary["dictionaryVersion"] = self.dictionaryVersion
	if self.__dateCoded__was__set:
		bzz_dictionary["dateCoded"] = self.dateCoded
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("studyKey"):
		me.studyKey = from_dict["studyKey"]
	if from_dict.has("siteName"):
		me.siteName = from_dict["siteName"]
	if from_dict.has("siteId"):
		me.siteId = from_dict["siteId"]
	if from_dict.has("subjectId"):
		me.subjectId = from_dict["subjectId"]
	if from_dict.has("subjectKey"):
		me.subjectKey = from_dict["subjectKey"]
	if from_dict.has("formId"):
		me.formId = from_dict["formId"]
	if from_dict.has("formName"):
		me.formName = from_dict["formName"]
	if from_dict.has("formKey"):
		me.formKey = from_dict["formKey"]
	if from_dict.has("revision"):
		me.revision = from_dict["revision"]
	if from_dict.has("recordId"):
		me.recordId = from_dict["recordId"]
	if from_dict.has("variable"):
		me.variable = from_dict["variable"]
	if from_dict.has("value"):
		me.value = from_dict["value"]
	if from_dict.has("codingId"):
		me.codingId = from_dict["codingId"]
	if from_dict.has("code"):
		me.code = from_dict["code"]
	if from_dict.has("codedBy"):
		me.codedBy = from_dict["codedBy"]
	if from_dict.has("reason"):
		me.reason = from_dict["reason"]
	if from_dict.has("dictionaryName"):
		me.dictionaryName = from_dict["dictionaryName"]
	if from_dict.has("dictionaryVersion"):
		me.dictionaryVersion = from_dict["dictionaryVersion"]
	if from_dict.has("dateCoded"):
		me.dateCoded = from_dict["dateCoded"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

