/* tslint:disable */
/* eslint-disable */
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Coding
 */
export interface Coding {
    /**
     * Unique study key
     * @type {string}
     * @memberof Coding
     */
    studyKey?: string;
    /**
     * Name of the site associated with the coded data
     * @type {string}
     * @memberof Coding
     */
    siteName?: string;
    /**
     * Site ID associated with the coded data
     * @type {number}
     * @memberof Coding
     */
    siteId?: number;
    /**
     * Subject ID associated with the coded data
     * @type {number}
     * @memberof Coding
     */
    subjectId?: number;
    /**
     * Subject key (display ID) associated with the coded data
     * @type {string}
     * @memberof Coding
     */
    subjectKey?: string;
    /**
     * Form ID where the coded data originates
     * @type {number}
     * @memberof Coding
     */
    formId?: number;
    /**
     * Name of the form where the coded data originates
     * @type {string}
     * @memberof Coding
     */
    formName?: string;
    /**
     * Form key where the coded data originates
     * @type {string}
     * @memberof Coding
     */
    formKey?: string;
    /**
     * Revision number of the coding entry
     * @type {number}
     * @memberof Coding
     */
    revision?: number;
    /**
     * Record ID associated with the coded data
     * @type {number}
     * @memberof Coding
     */
    recordId?: number;
    /**
     * Variable name (field) that was coded
     * @type {string}
     * @memberof Coding
     */
    variable?: string;
    /**
     * Original value entered that required coding
     * @type {string}
     * @memberof Coding
     */
    value?: string;
    /**
     * Mednet coding ID
     * @type {number}
     * @memberof Coding
     */
    codingId?: number;
    /**
     * Standardized code assigned (e.g., dictionary term)
     * @type {string}
     * @memberof Coding
     */
    code?: string;
    /**
     * Name of the user who performed the coding
     * @type {string}
     * @memberof Coding
     */
    codedBy?: string;
    /**
     * Reason for coding or any notes on changes
     * @type {string}
     * @memberof Coding
     */
    reason?: string;
    /**
     * Name of the dictionary used (e.g., MedDRA)
     * @type {string}
     * @memberof Coding
     */
    dictionaryName?: string;
    /**
     * Version of the dictionary used
     * @type {string}
     * @memberof Coding
     */
    dictionaryVersion?: string;
    /**
     * Date when the coding was performed
     * @type {string}
     * @memberof Coding
     */
    dateCoded?: string;
}

/**
 * Check if a given object implements the Coding interface.
 */
export function instanceOfCoding(value: object): value is Coding {
    return true;
}

export function CodingFromJSON(json: any): Coding {
    return CodingFromJSONTyped(json, false);
}

export function CodingFromJSONTyped(json: any, ignoreDiscriminator: boolean): Coding {
    if (json == null) {
        return json;
    }
    return {
        
        'studyKey': json['studyKey'] == null ? undefined : json['studyKey'],
        'siteName': json['siteName'] == null ? undefined : json['siteName'],
        'siteId': json['siteId'] == null ? undefined : json['siteId'],
        'subjectId': json['subjectId'] == null ? undefined : json['subjectId'],
        'subjectKey': json['subjectKey'] == null ? undefined : json['subjectKey'],
        'formId': json['formId'] == null ? undefined : json['formId'],
        'formName': json['formName'] == null ? undefined : json['formName'],
        'formKey': json['formKey'] == null ? undefined : json['formKey'],
        'revision': json['revision'] == null ? undefined : json['revision'],
        'recordId': json['recordId'] == null ? undefined : json['recordId'],
        'variable': json['variable'] == null ? undefined : json['variable'],
        'value': json['value'] == null ? undefined : json['value'],
        'codingId': json['codingId'] == null ? undefined : json['codingId'],
        'code': json['code'] == null ? undefined : json['code'],
        'codedBy': json['codedBy'] == null ? undefined : json['codedBy'],
        'reason': json['reason'] == null ? undefined : json['reason'],
        'dictionaryName': json['dictionaryName'] == null ? undefined : json['dictionaryName'],
        'dictionaryVersion': json['dictionaryVersion'] == null ? undefined : json['dictionaryVersion'],
        'dateCoded': json['dateCoded'] == null ? undefined : json['dateCoded'],
    };
}

export function CodingToJSON(json: any): Coding {
    return CodingToJSONTyped(json, false);
}

export function CodingToJSONTyped(value?: Coding | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'studyKey': value['studyKey'],
        'siteName': value['siteName'],
        'siteId': value['siteId'],
        'subjectId': value['subjectId'],
        'subjectKey': value['subjectKey'],
        'formId': value['formId'],
        'formName': value['formName'],
        'formKey': value['formKey'],
        'revision': value['revision'],
        'recordId': value['recordId'],
        'variable': value['variable'],
        'value': value['value'],
        'codingId': value['codingId'],
        'code': value['code'],
        'codedBy': value['codedBy'],
        'reason': value['reason'],
        'dictionaryName': value['dictionaryName'],
        'dictionaryVersion': value['dictionaryVersion'],
        'dateCoded': value['dateCoded'],
    };
}

