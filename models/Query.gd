extends Resource
class_name Query

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# Query Model


# Unique study key
# Required: False
# isArray: false
@export var studyKey: String:
	set(value):
		__studyKey__was__set = true
		studyKey = value
var __studyKey__was__set := false

# Mednet subject ID associated with the query (if applicable)
# Required: False
# isArray: false
@export var subjectId: int:
	set(value):
		__subjectId__was__set = true
		subjectId = value
var __subjectId__was__set := false

# Client-assigned subject OID (if applicable)
# Required: False
# isArray: false
@export var subjectOid: String:
	set(value):
		__subjectOid__was__set = true
		subjectOid = value
var __subjectOid__was__set := false

# Category/type of the query (e.g., subject, record, question)
# Required: False
# isArray: false
@export var annotationType: String:
	set(value):
		__annotationType__was__set = true
		annotationType = value
var __annotationType__was__set := false

# Unique system identifier for the query
# Required: False
# isArray: false
@export var annotationId: int:
	set(value):
		__annotationId__was__set = true
		annotationId = value
var __annotationId__was__set := false

# System text identifier for the query type/location (subject, record, question)
# Required: False
# isArray: false
@export var type: String:
	set(value):
		__type__was__set = true
		type = value
var __type__was__set := false

# Description of the query (e.g., reason or context)
# Required: False
# isArray: false
@export var description: String:
	set(value):
		__description__was__set = true
		description = value
var __description__was__set := false

# Record ID associated with the query (if applicable)
# Required: False
# isArray: false
@export var recordId: int:
	set(value):
		__recordId__was__set = true
		recordId = value
var __recordId__was__set := false

# Variable name (field) associated with the query (if applicable)
# Required: False
# isArray: false
@export var variable: String:
	set(value):
		__variable__was__set = true
		variable = value
var __variable__was__set := false

# Subject display ID associated with the query (if applicable)
# Required: False
# isArray: false
@export var subjectKey: String:
	set(value):
		__subjectKey__was__set = true
		subjectKey = value
var __subjectKey__was__set := false

# Date when the query was created
# Required: False
# isArray: false
@export var dateCreated: String:
	set(value):
		__dateCreated__was__set = true
		dateCreated = value
var __dateCreated__was__set := false

# Date when the query was last modified
# Required: False
# isArray: false
@export var dateModified: String:
	set(value):
		__dateModified__was__set = true
		dateModified = value
var __dateModified__was__set := false

# History of comments/actions on the query
# Required: False
# isArray: true
@export var queryComments: Array:
	set(value):
		__queryComments__was__set = true
		queryComments = value
var __queryComments__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__studyKey__was__set:
		bzz_dictionary["studyKey"] = self.studyKey
	if self.__subjectId__was__set:
		bzz_dictionary["subjectId"] = self.subjectId
	if self.__subjectOid__was__set:
		bzz_dictionary["subjectOid"] = self.subjectOid
	if self.__annotationType__was__set:
		bzz_dictionary["annotationType"] = self.annotationType
	if self.__annotationId__was__set:
		bzz_dictionary["annotationId"] = self.annotationId
	if self.__type__was__set:
		bzz_dictionary["type"] = self.type
	if self.__description__was__set:
		bzz_dictionary["description"] = self.description
	if self.__recordId__was__set:
		bzz_dictionary["recordId"] = self.recordId
	if self.__variable__was__set:
		bzz_dictionary["variable"] = self.variable
	if self.__subjectKey__was__set:
		bzz_dictionary["subjectKey"] = self.subjectKey
	if self.__dateCreated__was__set:
		bzz_dictionary["dateCreated"] = self.dateCreated
	if self.__dateModified__was__set:
		bzz_dictionary["dateModified"] = self.dateModified
	if self.__queryComments__was__set:
		bzz_dictionary["queryComments"] = self.queryComments
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("studyKey"):
		me.studyKey = from_dict["studyKey"]
	if from_dict.has("subjectId"):
		me.subjectId = from_dict["subjectId"]
	if from_dict.has("subjectOid"):
		me.subjectOid = from_dict["subjectOid"]
	if from_dict.has("annotationType"):
		me.annotationType = from_dict["annotationType"]
	if from_dict.has("annotationId"):
		me.annotationId = from_dict["annotationId"]
	if from_dict.has("type"):
		me.type = from_dict["type"]
	if from_dict.has("description"):
		me.description = from_dict["description"]
	if from_dict.has("recordId"):
		me.recordId = from_dict["recordId"]
	if from_dict.has("variable"):
		me.variable = from_dict["variable"]
	if from_dict.has("subjectKey"):
		me.subjectKey = from_dict["subjectKey"]
	if from_dict.has("dateCreated"):
		me.dateCreated = from_dict["dateCreated"]
	if from_dict.has("dateModified"):
		me.dateModified = from_dict["dateModified"]
	if from_dict.has("queryComments"):
		me.queryComments = QueryComment.bzz_denormalize_multiple(from_dict["queryComments"])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

