/* tslint:disable */
/* eslint-disable */
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { QueryComment } from './QueryComment';
import {
    QueryCommentFromJSON,
    QueryCommentFromJSONTyped,
    QueryCommentToJSON,
    QueryCommentToJSONTyped,
} from './QueryComment';

/**
 * 
 * @export
 * @interface Query
 */
export interface Query {
    /**
     * Unique study key
     * @type {string}
     * @memberof Query
     */
    studyKey?: string;
    /**
     * Mednet subject ID associated with the query (if applicable)
     * @type {number}
     * @memberof Query
     */
    subjectId?: number;
    /**
     * Client-assigned subject OID (if applicable)
     * @type {string}
     * @memberof Query
     */
    subjectOid?: string;
    /**
     * Category/type of the query (e.g., subject, record, question)
     * @type {string}
     * @memberof Query
     */
    annotationType?: string;
    /**
     * Unique system identifier for the query
     * @type {number}
     * @memberof Query
     */
    annotationId?: number;
    /**
     * System text identifier for the query type/location (subject, record, question)
     * @type {string}
     * @memberof Query
     */
    type?: string;
    /**
     * Description of the query (e.g., reason or context)
     * @type {string}
     * @memberof Query
     */
    description?: string;
    /**
     * Record ID associated with the query (if applicable)
     * @type {number}
     * @memberof Query
     */
    recordId?: number;
    /**
     * Variable name (field) associated with the query (if applicable)
     * @type {string}
     * @memberof Query
     */
    variable?: string;
    /**
     * Subject display ID associated with the query (if applicable)
     * @type {string}
     * @memberof Query
     */
    subjectKey?: string;
    /**
     * Date when the query was created
     * @type {string}
     * @memberof Query
     */
    dateCreated?: string;
    /**
     * Date when the query was last modified
     * @type {string}
     * @memberof Query
     */
    dateModified?: string;
    /**
     * History of comments/actions on the query
     * @type {Array<QueryComment>}
     * @memberof Query
     */
    queryComments?: Array<QueryComment>;
}

/**
 * Check if a given object implements the Query interface.
 */
export function instanceOfQuery(value: object): value is Query {
    return true;
}

export function QueryFromJSON(json: any): Query {
    return QueryFromJSONTyped(json, false);
}

export function QueryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Query {
    if (json == null) {
        return json;
    }
    return {
        
        'studyKey': json['studyKey'] == null ? undefined : json['studyKey'],
        'subjectId': json['subjectId'] == null ? undefined : json['subjectId'],
        'subjectOid': json['subjectOid'] == null ? undefined : json['subjectOid'],
        'annotationType': json['annotationType'] == null ? undefined : json['annotationType'],
        'annotationId': json['annotationId'] == null ? undefined : json['annotationId'],
        'type': json['type'] == null ? undefined : json['type'],
        'description': json['description'] == null ? undefined : json['description'],
        'recordId': json['recordId'] == null ? undefined : json['recordId'],
        'variable': json['variable'] == null ? undefined : json['variable'],
        'subjectKey': json['subjectKey'] == null ? undefined : json['subjectKey'],
        'dateCreated': json['dateCreated'] == null ? undefined : json['dateCreated'],
        'dateModified': json['dateModified'] == null ? undefined : json['dateModified'],
        'queryComments': json['queryComments'] == null ? undefined : ((json['queryComments'] as Array<any>).map(QueryCommentFromJSON)),
    };
}

export function QueryToJSON(json: any): Query {
    return QueryToJSONTyped(json, false);
}

export function QueryToJSONTyped(value?: Query | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'studyKey': value['studyKey'],
        'subjectId': value['subjectId'],
        'subjectOid': value['subjectOid'],
        'annotationType': value['annotationType'],
        'annotationId': value['annotationId'],
        'type': value['type'],
        'description': value['description'],
        'recordId': value['recordId'],
        'variable': value['variable'],
        'subjectKey': value['subjectKey'],
        'dateCreated': value['dateCreated'],
        'dateModified': value['dateModified'],
        'queryComments': value['queryComments'] == null ? undefined : ((value['queryComments'] as Array<any>).map(QueryCommentToJSON)),
    };
}

