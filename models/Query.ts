/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * OpenAPI spec version: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { QueryComment } from '../models/QueryComment';
import { HttpFile } from '../http/http';

export class Query {
    /**
    * Unique study key
    */
    'studyKey'?: string;
    /**
    * Mednet subject ID associated with the query (if applicable)
    */
    'subjectId'?: number;
    /**
    * Client-assigned subject OID (if applicable)
    */
    'subjectOid'?: string;
    /**
    * Category/type of the query (e.g., subject, record, question)
    */
    'annotationType'?: string;
    /**
    * Unique system identifier for the query
    */
    'annotationId'?: number;
    /**
    * System text identifier for the query type/location (subject, record, question)
    */
    'type'?: string;
    /**
    * Description of the query (e.g., reason or context)
    */
    'description'?: string;
    /**
    * Record ID associated with the query (if applicable)
    */
    'recordId'?: number;
    /**
    * Variable name (field) associated with the query (if applicable)
    */
    'variable'?: string;
    /**
    * Subject display ID associated with the query (if applicable)
    */
    'subjectKey'?: string;
    /**
    * Date when the query was created
    */
    'dateCreated'?: string;
    /**
    * Date when the query was last modified
    */
    'dateModified'?: string;
    /**
    * History of comments/actions on the query
    */
    'queryComments'?: Array<QueryComment>;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "studyKey",
            "baseName": "studyKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "subjectId",
            "baseName": "subjectId",
            "type": "number",
            "format": ""
        },
        {
            "name": "subjectOid",
            "baseName": "subjectOid",
            "type": "string",
            "format": ""
        },
        {
            "name": "annotationType",
            "baseName": "annotationType",
            "type": "string",
            "format": ""
        },
        {
            "name": "annotationId",
            "baseName": "annotationId",
            "type": "number",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "recordId",
            "baseName": "recordId",
            "type": "number",
            "format": ""
        },
        {
            "name": "variable",
            "baseName": "variable",
            "type": "string",
            "format": ""
        },
        {
            "name": "subjectKey",
            "baseName": "subjectKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "dateCreated",
            "baseName": "dateCreated",
            "type": "string",
            "format": ""
        },
        {
            "name": "dateModified",
            "baseName": "dateModified",
            "type": "string",
            "format": ""
        },
        {
            "name": "queryComments",
            "baseName": "queryComments",
            "type": "Array<QueryComment>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Query.attributeTypeMap;
    }

    public constructor() {
    }
}
