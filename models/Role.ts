/* tslint:disable */
/* eslint-disable */
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * Timestamp when the role assignment was created (as [year, month, day, hour, minute, second, nanosecond])
     * @type {Array<number>}
     * @memberof Role
     */
    dateCreated?: Array<number>;
    /**
     * Timestamp when the role assignment was last modified
     * @type {Array<number>}
     * @memberof Role
     */
    dateModified?: Array<number>;
    /**
     * Unique role ID (UUID)
     * @type {string}
     * @memberof Role
     */
    roleId?: string;
    /**
     * Community ID or level associated with the role
     * @type {number}
     * @memberof Role
     */
    communityId?: number;
    /**
     * Name of the role
     * @type {string}
     * @memberof Role
     */
    name?: string;
    /**
     * Description of the role
     * @type {string}
     * @memberof Role
     */
    description?: string;
    /**
     * Role level or hierarchy
     * @type {number}
     * @memberof Role
     */
    level?: number;
    /**
     * Role type/category
     * @type {string}
     * @memberof Role
     */
    type?: string;
    /**
     * Whether the role is inactive
     * @type {boolean}
     * @memberof Role
     */
    inactive?: boolean;
}

/**
 * Check if a given object implements the Role interface.
 */
export function instanceOfRole(value: object): value is Role {
    return true;
}

export function RoleFromJSON(json: any): Role {
    return RoleFromJSONTyped(json, false);
}

export function RoleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Role {
    if (json == null) {
        return json;
    }
    return {
        
        'dateCreated': json['dateCreated'] == null ? undefined : json['dateCreated'],
        'dateModified': json['dateModified'] == null ? undefined : json['dateModified'],
        'roleId': json['roleId'] == null ? undefined : json['roleId'],
        'communityId': json['communityId'] == null ? undefined : json['communityId'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'level': json['level'] == null ? undefined : json['level'],
        'type': json['type'] == null ? undefined : json['type'],
        'inactive': json['inactive'] == null ? undefined : json['inactive'],
    };
}

export function RoleToJSON(json: any): Role {
    return RoleToJSONTyped(json, false);
}

export function RoleToJSONTyped(value?: Role | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'dateCreated': value['dateCreated'],
        'dateModified': value['dateModified'],
        'roleId': value['roleId'],
        'communityId': value['communityId'],
        'name': value['name'],
        'description': value['description'],
        'level': value['level'],
        'type': value['type'],
        'inactive': value['inactive'],
    };
}

