extends Resource
class_name Sort

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# Sort Model


# Name of the property by which the result is sorted
# Required: False
# isArray: false
@export var property: String:
	set(value):
		__property__was__set = true
		property = value
var __property__was__set := false

# Sort direction (ASC or DESC)
# Required: False
# isArray: false
# Allowed values: "ASC", "DESC"
@export var direction: String:
	set(value):
		if str(value) != "" and not (str(value) in __direction__allowable__values):
			push_error("Sort: tried to set property `direction` to a value that is not allowed." +
				"  Allowed values: `ASC`, `DESC`")
			return
		__direction__was__set = true
		direction = value
var __direction__was__set := false
var __direction__allowable__values := ["ASC", "DESC"]


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__property__was__set:
		bzz_dictionary["property"] = self.property
	if self.__direction__was__set:
		bzz_dictionary["direction"] = self.direction
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("property"):
		me.property = from_dict["property"]
	if from_dict.has("direction"):
		me.direction = from_dict["direction"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

