/* tslint:disable */
/* eslint-disable */
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Role } from './Role';
import {
    RoleFromJSON,
    RoleFromJSONTyped,
    RoleToJSON,
    RoleToJSONTyped,
} from './Role';

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * Unique user ID (UUID)
     * @type {string}
     * @memberof User
     */
    userId?: string;
    /**
     * User login name
     * @type {string}
     * @memberof User
     */
    login?: string;
    /**
     * User first name
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * User last name
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * User email address
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * Whether the user is active in the given study
     * @type {boolean}
     * @memberof User
     */
    userActiveInStudy?: boolean;
    /**
     * Roles that the user has in the study
     * @type {Array<Role>}
     * @memberof User
     */
    roles?: Array<Role>;
}

/**
 * Check if a given object implements the User interface.
 */
export function instanceOfUser(value: object): value is User {
    return true;
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if (json == null) {
        return json;
    }
    return {
        
        'userId': json['userId'] == null ? undefined : json['userId'],
        'login': json['login'] == null ? undefined : json['login'],
        'firstName': json['firstName'] == null ? undefined : json['firstName'],
        'lastName': json['lastName'] == null ? undefined : json['lastName'],
        'email': json['email'] == null ? undefined : json['email'],
        'userActiveInStudy': json['userActiveInStudy'] == null ? undefined : json['userActiveInStudy'],
        'roles': json['roles'] == null ? undefined : ((json['roles'] as Array<any>).map(RoleFromJSON)),
    };
}

export function UserToJSON(json: any): User {
    return UserToJSONTyped(json, false);
}

export function UserToJSONTyped(value?: User | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'userId': value['userId'],
        'login': value['login'],
        'firstName': value['firstName'],
        'lastName': value['lastName'],
        'email': value['email'],
        'userActiveInStudy': value['userActiveInStudy'],
        'roles': value['roles'] == null ? undefined : ((value['roles'] as Array<any>).map(RoleToJSON)),
    };
}

