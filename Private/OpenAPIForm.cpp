/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * OpenAPI spec version: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIForm.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIForm::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (StudyKey.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("studyKey")); WriteJsonValue(Writer, StudyKey.GetValue());
	}
	if (FormId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("formId")); WriteJsonValue(Writer, FormId.GetValue());
	}
	if (FormKey.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("formKey")); WriteJsonValue(Writer, FormKey.GetValue());
	}
	if (FormName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("formName")); WriteJsonValue(Writer, FormName.GetValue());
	}
	if (FormType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("formType")); WriteJsonValue(Writer, FormType.GetValue());
	}
	if (Revision.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("revision")); WriteJsonValue(Writer, Revision.GetValue());
	}
	if (EmbeddedLog.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("embeddedLog")); WriteJsonValue(Writer, EmbeddedLog.GetValue());
	}
	if (EnforceOwnership.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("enforceOwnership")); WriteJsonValue(Writer, EnforceOwnership.GetValue());
	}
	if (UserAgreement.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("userAgreement")); WriteJsonValue(Writer, UserAgreement.GetValue());
	}
	if (SubjectRecordReport.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("subjectRecordReport")); WriteJsonValue(Writer, SubjectRecordReport.GetValue());
	}
	if (UnscheduledVisit.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("unscheduledVisit")); WriteJsonValue(Writer, UnscheduledVisit.GetValue());
	}
	if (OtherForms.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("otherForms")); WriteJsonValue(Writer, OtherForms.GetValue());
	}
	if (EproForm.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("eproForm")); WriteJsonValue(Writer, EproForm.GetValue());
	}
	if (AllowCopy.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("allowCopy")); WriteJsonValue(Writer, AllowCopy.GetValue());
	}
	if (Disabled.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("disabled")); WriteJsonValue(Writer, Disabled.GetValue());
	}
	if (DateCreated.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateCreated")); WriteJsonValue(Writer, DateCreated.GetValue());
	}
	if (DateModified.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateModified")); WriteJsonValue(Writer, DateModified.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIForm::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("studyKey"), StudyKey);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("formId"), FormId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("formKey"), FormKey);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("formName"), FormName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("formType"), FormType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("revision"), Revision);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("embeddedLog"), EmbeddedLog);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("enforceOwnership"), EnforceOwnership);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("userAgreement"), UserAgreement);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subjectRecordReport"), SubjectRecordReport);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("unscheduledVisit"), UnscheduledVisit);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("otherForms"), OtherForms);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("eproForm"), EproForm);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("allowCopy"), AllowCopy);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("disabled"), Disabled);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateCreated"), DateCreated);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateModified"), DateModified);

	return ParseSuccess;
}

}
