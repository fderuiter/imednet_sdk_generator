/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * OpenAPI spec version: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPISort.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPISort::DirectionEnum& Value)
{
	switch (Value)
	{
	case OpenAPISort::DirectionEnum::Asc:
		return TEXT("ASC");
	case OpenAPISort::DirectionEnum::Desc:
		return TEXT("DESC");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPISort::DirectionEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPISort::EnumToString(const OpenAPISort::DirectionEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPISort::DirectionEnum& Value)
{
	static TMap<FString, OpenAPISort::DirectionEnum> StringToEnum = { 
		{ TEXT("ASC"), OpenAPISort::DirectionEnum::Asc },
		{ TEXT("DESC"), OpenAPISort::DirectionEnum::Desc }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPISort::EnumFromString(const FString& EnumAsString, OpenAPISort::DirectionEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPISort::DirectionEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPISort::DirectionEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPISort::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Property.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("property")); WriteJsonValue(Writer, Property.GetValue());
	}
	if (Direction.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("direction")); WriteJsonValue(Writer, Direction.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPISort::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("property"), Property);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("direction"), Direction);

	return ParseSuccess;
}

}
