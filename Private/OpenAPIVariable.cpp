/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * OpenAPI spec version: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIVariable.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

inline FString ToString(const OpenAPIVariable::VariableTypeEnum& Value)
{
	switch (Value)
	{
	case OpenAPIVariable::VariableTypeEnum::Text:
		return TEXT("TEXT");
	case OpenAPIVariable::VariableTypeEnum::Textarea:
		return TEXT("TEXTAREA");
	case OpenAPIVariable::VariableTypeEnum::Radio:
		return TEXT("RADIO");
	case OpenAPIVariable::VariableTypeEnum::Checkbox:
		return TEXT("CHECKBOX");
	case OpenAPIVariable::VariableTypeEnum::Dropdown:
		return TEXT("DROPDOWN");
	case OpenAPIVariable::VariableTypeEnum::Date:
		return TEXT("DATE");
	case OpenAPIVariable::VariableTypeEnum::Number:
		return TEXT("NUMBER");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIVariable::VariableTypeEnum Value (%d)"), (int)Value);
	return TEXT("");
}

FString OpenAPIVariable::EnumToString(const OpenAPIVariable::VariableTypeEnum& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIVariable::VariableTypeEnum& Value)
{
	static TMap<FString, OpenAPIVariable::VariableTypeEnum> StringToEnum = { 
		{ TEXT("TEXT"), OpenAPIVariable::VariableTypeEnum::Text },
		{ TEXT("TEXTAREA"), OpenAPIVariable::VariableTypeEnum::Textarea },
		{ TEXT("RADIO"), OpenAPIVariable::VariableTypeEnum::Radio },
		{ TEXT("CHECKBOX"), OpenAPIVariable::VariableTypeEnum::Checkbox },
		{ TEXT("DROPDOWN"), OpenAPIVariable::VariableTypeEnum::Dropdown },
		{ TEXT("DATE"), OpenAPIVariable::VariableTypeEnum::Date },
		{ TEXT("NUMBER"), OpenAPIVariable::VariableTypeEnum::Number }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

bool OpenAPIVariable::EnumFromString(const FString& EnumAsString, OpenAPIVariable::VariableTypeEnum& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIVariable::VariableTypeEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIVariable::VariableTypeEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIVariable::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (StudyKey.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("studyKey")); WriteJsonValue(Writer, StudyKey.GetValue());
	}
	if (VariableId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("variableId")); WriteJsonValue(Writer, VariableId.GetValue());
	}
	if (VariableType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("variableType")); WriteJsonValue(Writer, VariableType.GetValue());
	}
	if (VariableName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("variableName")); WriteJsonValue(Writer, VariableName.GetValue());
	}
	if (Sequence.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("sequence")); WriteJsonValue(Writer, Sequence.GetValue());
	}
	if (Revision.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("revision")); WriteJsonValue(Writer, Revision.GetValue());
	}
	if (Disabled.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("disabled")); WriteJsonValue(Writer, Disabled.GetValue());
	}
	if (DateCreated.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateCreated")); WriteJsonValue(Writer, DateCreated.GetValue());
	}
	if (DateModified.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateModified")); WriteJsonValue(Writer, DateModified.GetValue());
	}
	if (FormId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("formId")); WriteJsonValue(Writer, FormId.GetValue());
	}
	if (VariableOid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("variableOid")); WriteJsonValue(Writer, VariableOid.GetValue());
	}
	if (Deleted.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("deleted")); WriteJsonValue(Writer, Deleted.GetValue());
	}
	if (FormKey.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("formKey")); WriteJsonValue(Writer, FormKey.GetValue());
	}
	if (FormName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("formName")); WriteJsonValue(Writer, FormName.GetValue());
	}
	if (Label.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("label")); WriteJsonValue(Writer, Label.GetValue());
	}
	if (Blinded.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("blinded")); WriteJsonValue(Writer, Blinded.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIVariable::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("studyKey"), StudyKey);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("variableId"), VariableId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("variableType"), VariableType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("variableName"), VariableName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("sequence"), Sequence);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("revision"), Revision);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("disabled"), Disabled);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateCreated"), DateCreated);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateModified"), DateModified);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("formId"), FormId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("variableOid"), VariableOid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("deleted"), Deleted);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("formKey"), FormKey);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("formName"), FormName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("label"), Label);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("blinded"), Blinded);

	return ParseSuccess;
}

}
