/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * OpenAPI spec version: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIStudy.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIStudy::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (SponsorKey.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("sponsorKey")); WriteJsonValue(Writer, SponsorKey.GetValue());
	}
	if (StudyKey.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("studyKey")); WriteJsonValue(Writer, StudyKey.GetValue());
	}
	if (StudyId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("studyId")); WriteJsonValue(Writer, StudyId.GetValue());
	}
	if (StudyName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("studyName")); WriteJsonValue(Writer, StudyName.GetValue());
	}
	if (StudyDescription.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("studyDescription")); WriteJsonValue(Writer, StudyDescription.GetValue());
	}
	if (StudyType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("studyType")); WriteJsonValue(Writer, StudyType.GetValue());
	}
	if (DateCreated.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateCreated")); WriteJsonValue(Writer, DateCreated.GetValue());
	}
	if (DateModified.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateModified")); WriteJsonValue(Writer, DateModified.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIStudy::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("sponsorKey"), SponsorKey);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("studyKey"), StudyKey);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("studyId"), StudyId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("studyName"), StudyName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("studyDescription"), StudyDescription);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("studyType"), StudyType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateCreated"), DateCreated);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateModified"), DateModified);

	return ParseSuccess;
}

}
