/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * OpenAPI spec version: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIInterval.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIInterval::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (StudyKey.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("studyKey")); WriteJsonValue(Writer, StudyKey.GetValue());
	}
	if (IntervalId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("intervalId")); WriteJsonValue(Writer, IntervalId.GetValue());
	}
	if (IntervalName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("intervalName")); WriteJsonValue(Writer, IntervalName.GetValue());
	}
	if (IntervalDescription.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("intervalDescription")); WriteJsonValue(Writer, IntervalDescription.GetValue());
	}
	if (IntervalSequence.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("intervalSequence")); WriteJsonValue(Writer, IntervalSequence.GetValue());
	}
	if (IntervalGroupId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("intervalGroupId")); WriteJsonValue(Writer, IntervalGroupId.GetValue());
	}
	if (IntervalGroupName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("intervalGroupName")); WriteJsonValue(Writer, IntervalGroupName.GetValue());
	}
	if (Timeline.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("timeline")); WriteJsonValue(Writer, Timeline.GetValue());
	}
	if (DefinedUsingInterval.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("definedUsingInterval")); WriteJsonValue(Writer, DefinedUsingInterval.GetValue());
	}
	if (WindowCalculationForm.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("windowCalculationForm")); WriteJsonValue(Writer, WindowCalculationForm.GetValue());
	}
	if (WindowCalculationDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("windowCalculationDate")); WriteJsonValue(Writer, WindowCalculationDate.GetValue());
	}
	if (ActualDateForm.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("actualDateForm")); WriteJsonValue(Writer, ActualDateForm.GetValue());
	}
	if (ActualDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("actualDate")); WriteJsonValue(Writer, ActualDate.GetValue());
	}
	if (DueDateWillBeIn.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dueDateWillBeIn")); WriteJsonValue(Writer, DueDateWillBeIn.GetValue());
	}
	if (NegativeSlack.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("negativeSlack")); WriteJsonValue(Writer, NegativeSlack.GetValue());
	}
	if (PositiveSlack.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("positiveSlack")); WriteJsonValue(Writer, PositiveSlack.GetValue());
	}
	if (EproGracePeriod.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("eproGracePeriod")); WriteJsonValue(Writer, EproGracePeriod.GetValue());
	}
	if (Forms.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("forms")); WriteJsonValue(Writer, Forms.GetValue());
	}
	if (Disabled.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("disabled")); WriteJsonValue(Writer, Disabled.GetValue());
	}
	if (DateCreated.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateCreated")); WriteJsonValue(Writer, DateCreated.GetValue());
	}
	if (DateModified.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateModified")); WriteJsonValue(Writer, DateModified.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIInterval::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("studyKey"), StudyKey);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("intervalId"), IntervalId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("intervalName"), IntervalName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("intervalDescription"), IntervalDescription);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("intervalSequence"), IntervalSequence);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("intervalGroupId"), IntervalGroupId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("intervalGroupName"), IntervalGroupName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("timeline"), Timeline);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("definedUsingInterval"), DefinedUsingInterval);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("windowCalculationForm"), WindowCalculationForm);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("windowCalculationDate"), WindowCalculationDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("actualDateForm"), ActualDateForm);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("actualDate"), ActualDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dueDateWillBeIn"), DueDateWillBeIn);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("negativeSlack"), NegativeSlack);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("positiveSlack"), PositiveSlack);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("eproGracePeriod"), EproGracePeriod);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("forms"), Forms);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("disabled"), Disabled);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateCreated"), DateCreated);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateModified"), DateModified);

	return ParseSuccess;
}

}
