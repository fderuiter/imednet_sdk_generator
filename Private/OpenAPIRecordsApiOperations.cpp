/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * OpenAPI spec version: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIRecordsApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

FString OpenAPIRecordsApi::CreateRecordsRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("studyKey"), FStringFormatArg(ToUrlString(StudyKey)) } };

	FString Path = FString::Format(TEXT("/studies/{studyKey}/records"), PathParams);

	return Path;
}

void OpenAPIRecordsApi::CreateRecordsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, OpenAPIComponentsSchemasRecordCreateRequestItem);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIComponentsSchemasRecordCreateRequestItem) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (OpenAPIComponentsSchemasRecordCreateRequestItem) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRecordsApi::CreateRecordsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 202:
		SetResponseString(TEXT("Accepted request for record creation. Returns a job identifier to check status."));
		break;
	case 400:
		SetResponseString(TEXT("Bad request (malformed or invalid input)"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed or was not provided"));
		break;
	case 403:
		SetResponseString(TEXT("Authenticated but not allowed to access the resource"));
		break;
	case 404:
		SetResponseString(TEXT("The requested resource was not found"));
		break;
	case 429:
		SetResponseString(TEXT("Too many requests (rate limit exceeded)"));
		break;
	case 500:
		SetResponseString(TEXT("Internal server error (unexpected condition encountered)"));
		break;
	}
}

bool OpenAPIRecordsApi::CreateRecordsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRecordsApi::ListRecordsRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("studyKey"), FStringFormatArg(ToUrlString(StudyKey)) } };

	FString Path = FString::Format(TEXT("/studies/{studyKey}/records"), PathParams);

	TArray<FString> QueryParams;
	if(Page.IsSet())
	{
		QueryParams.Add(FString(TEXT("page=")) + ToUrlString(Page.GetValue()));
	}
	if(Size.IsSet())
	{
		QueryParams.Add(FString(TEXT("size=")) + ToUrlString(Size.GetValue()));
	}
	if(Sort.IsSet())
	{
		QueryParams.Add(FString(TEXT("sort=")) + ToUrlString(Sort.GetValue()));
	}
	if(Filter.IsSet())
	{
		QueryParams.Add(FString(TEXT("filter=")) + ToUrlString(Filter.GetValue()));
	}
	if(RecordDataFilter.IsSet())
	{
		QueryParams.Add(FString(TEXT("recordDataFilter=")) + ToUrlString(RecordDataFilter.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIRecordsApi::ListRecordsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRecordsApi::ListRecordsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successful response with list of records"));
		break;
	case 400:
		SetResponseString(TEXT("Bad request (malformed or invalid input)"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed or was not provided"));
		break;
	case 403:
		SetResponseString(TEXT("Authenticated but not allowed to access the resource"));
		break;
	case 404:
		SetResponseString(TEXT("The requested resource was not found"));
		break;
	case 500:
		SetResponseString(TEXT("Internal server error (unexpected condition encountered)"));
		break;
	}
}

bool OpenAPIRecordsApi::ListRecordsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
