/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * OpenAPI spec version: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPISubject.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPISubject::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (StudyKey.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("studyKey")); WriteJsonValue(Writer, StudyKey.GetValue());
	}
	if (SubjectId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("subjectId")); WriteJsonValue(Writer, SubjectId.GetValue());
	}
	if (SubjectOid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("subjectOid")); WriteJsonValue(Writer, SubjectOid.GetValue());
	}
	if (SubjectKey.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("subjectKey")); WriteJsonValue(Writer, SubjectKey.GetValue());
	}
	if (SubjectStatus.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("subjectStatus")); WriteJsonValue(Writer, SubjectStatus.GetValue());
	}
	if (SiteId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("siteId")); WriteJsonValue(Writer, SiteId.GetValue());
	}
	if (SiteName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("siteName")); WriteJsonValue(Writer, SiteName.GetValue());
	}
	if (Deleted.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("deleted")); WriteJsonValue(Writer, Deleted.GetValue());
	}
	if (EnrollmentStartDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("enrollmentStartDate")); WriteJsonValue(Writer, EnrollmentStartDate.GetValue());
	}
	if (DateCreated.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateCreated")); WriteJsonValue(Writer, DateCreated.GetValue());
	}
	if (DateModified.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateModified")); WriteJsonValue(Writer, DateModified.GetValue());
	}
	if (Keywords.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("keywords")); WriteJsonValue(Writer, Keywords.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPISubject::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("studyKey"), StudyKey);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subjectId"), SubjectId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subjectOid"), SubjectOid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subjectKey"), SubjectKey);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subjectStatus"), SubjectStatus);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("siteId"), SiteId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("siteName"), SiteName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("deleted"), Deleted);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("enrollmentStartDate"), EnrollmentStartDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateCreated"), DateCreated);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateModified"), DateModified);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("keywords"), Keywords);

	return ParseSuccess;
}

}
