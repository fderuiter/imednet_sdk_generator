/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  UserList,
} from './models';

/**
 * listUsers - parameters interface
 */
export interface IListUsersParams {
  studyKey: string;
  page?: number;
  size?: number;
  sort?: string;
  includeInactive?: boolean;
}

/**
 * AdministrationApi - API class
 */
@autoinject()
export class AdministrationApi extends Api {

  /**
   * Creates a new AdministrationApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * List users and their roles in a study
   * @param params.studyKey Study key identifying the study context for the request
   * @param params.page Page index to retrieve (0-based)
   * @param params.size Number of items to return per page (max 500)
   * @param params.sort Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated.
   * @param params.includeInactive For user listing, whether to include inactive users
   */
  async listUsers(params: IListUsersParams): Promise<UserList> {
    // Verify required parameters are set
    this.ensureParamIsSet('listUsers', params, 'studyKey');

    // Create URL to call
    const url = `${this.basePath}/studies/{studyKey}/users`
      .replace(`{${'studyKey'}}`, encodeURIComponent(`${params['studyKey']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'page': params['page'],
        'size': params['size'],
        'sort': params['sort'],
        'includeInactive': params['includeInactive'],
      })

      // Authentication 'apiKeyAuth' required
      .withHeader('x-api-key', this.authStorage.getapiKeyAuth())
      // Authentication 'securityKeyAuth' required
      .withHeader('x-imn-security-key', this.authStorage.getsecurityKeyAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

