/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/User.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

User::User()
{
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_Login = utility::conversions::to_string_t("");
    m_LoginIsSet = false;
    m_FirstName = utility::conversions::to_string_t("");
    m_FirstNameIsSet = false;
    m_LastName = utility::conversions::to_string_t("");
    m_LastNameIsSet = false;
    m_Email = utility::conversions::to_string_t("");
    m_EmailIsSet = false;
    m_UserActiveInStudy = false;
    m_UserActiveInStudyIsSet = false;
    m_RolesIsSet = false;
}

User::~User()
{
}

void User::validate()
{
    // TODO: implement validation
}

web::json::value User::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_UserIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_LoginIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("login"))] = ModelBase::toJson(m_Login);
    }
    if(m_FirstNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("firstName"))] = ModelBase::toJson(m_FirstName);
    }
    if(m_LastNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("lastName"))] = ModelBase::toJson(m_LastName);
    }
    if(m_EmailIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("email"))] = ModelBase::toJson(m_Email);
    }
    if(m_UserActiveInStudyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("userActiveInStudy"))] = ModelBase::toJson(m_UserActiveInStudy);
    }
    if(m_RolesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("roles"))] = ModelBase::toJson(m_Roles);
    }

    return val;
}

bool User::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("login"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("login")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLogin;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogin);
            setLogin(refVal_setLogin);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("firstName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("firstName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFirstName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFirstName);
            setFirstName(refVal_setFirstName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("lastName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("lastName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastName);
            setLastName(refVal_setLastName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("email"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("email")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmail);
            setEmail(refVal_setEmail);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("userActiveInStudy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("userActiveInStudy")));
        if(!fieldValue.is_null())
        {
            bool refVal_setUserActiveInStudy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserActiveInStudy);
            setUserActiveInStudy(refVal_setUserActiveInStudy);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("roles"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("roles")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Role>> refVal_setRoles;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRoles);
            setRoles(refVal_setRoles);
            
        }
    }
    return ok;
}

void User::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("userId")), m_UserId));
    }
    if(m_LoginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("login")), m_Login));
    }
    if(m_FirstNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("firstName")), m_FirstName));
    }
    if(m_LastNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("lastName")), m_LastName));
    }
    if(m_EmailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("email")), m_Email));
    }
    if(m_UserActiveInStudyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("userActiveInStudy")), m_UserActiveInStudy));
    }
    if(m_RolesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("roles")), m_Roles));
    }
}

bool User::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("login"))))
    {
        utility::string_t refVal_setLogin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("login"))), refVal_setLogin );
        setLogin(refVal_setLogin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("firstName"))))
    {
        utility::string_t refVal_setFirstName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("firstName"))), refVal_setFirstName );
        setFirstName(refVal_setFirstName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("lastName"))))
    {
        utility::string_t refVal_setLastName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("lastName"))), refVal_setLastName );
        setLastName(refVal_setLastName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("email"))))
    {
        utility::string_t refVal_setEmail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("email"))), refVal_setEmail );
        setEmail(refVal_setEmail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("userActiveInStudy"))))
    {
        bool refVal_setUserActiveInStudy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("userActiveInStudy"))), refVal_setUserActiveInStudy );
        setUserActiveInStudy(refVal_setUserActiveInStudy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("roles"))))
    {
        std::vector<std::shared_ptr<Role>> refVal_setRoles;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("roles"))), refVal_setRoles );
        setRoles(refVal_setRoles);
    }
    return ok;
}


utility::string_t User::getUserId() const
{
    return m_UserId;
}


void User::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool User::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void User::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t User::getLogin() const
{
    return m_Login;
}


void User::setLogin(const utility::string_t& value)
{
    m_Login = value;
    m_LoginIsSet = true;
}

bool User::loginIsSet() const
{
    return m_LoginIsSet;
}

void User::unsetLogin()
{
    m_LoginIsSet = false;
}
utility::string_t User::getFirstName() const
{
    return m_FirstName;
}


void User::setFirstName(const utility::string_t& value)
{
    m_FirstName = value;
    m_FirstNameIsSet = true;
}

bool User::firstNameIsSet() const
{
    return m_FirstNameIsSet;
}

void User::unsetFirstName()
{
    m_FirstNameIsSet = false;
}
utility::string_t User::getLastName() const
{
    return m_LastName;
}


void User::setLastName(const utility::string_t& value)
{
    m_LastName = value;
    m_LastNameIsSet = true;
}

bool User::lastNameIsSet() const
{
    return m_LastNameIsSet;
}

void User::unsetLastName()
{
    m_LastNameIsSet = false;
}
utility::string_t User::getEmail() const
{
    return m_Email;
}


void User::setEmail(const utility::string_t& value)
{
    m_Email = value;
    m_EmailIsSet = true;
}

bool User::emailIsSet() const
{
    return m_EmailIsSet;
}

void User::unsetEmail()
{
    m_EmailIsSet = false;
}
bool User::isUserActiveInStudy() const
{
    return m_UserActiveInStudy;
}

void User::setUserActiveInStudy(bool value)
{
    m_UserActiveInStudy = value;
    m_UserActiveInStudyIsSet = true;
}

bool User::userActiveInStudyIsSet() const
{
    return m_UserActiveInStudyIsSet;
}

void User::unsetUserActiveInStudy()
{
    m_UserActiveInStudyIsSet = false;
}
std::vector<std::shared_ptr<Role>> User::getRoles() const
{
    return m_Roles;
}


void User::setRoles(const std::vector<std::shared_ptr<Role>>& value)
{
    m_Roles = value;
    m_RolesIsSet = true;
}

bool User::rolesIsSet() const
{
    return m_RolesIsSet;
}

void User::unsetRoles()
{
    m_RolesIsSet = false;
}

}
}
}
}


