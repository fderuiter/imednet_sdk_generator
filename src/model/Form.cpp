/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Form.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Form::Form()
{
    m_StudyKey = utility::conversions::to_string_t("");
    m_StudyKeyIsSet = false;
    m_FormId = 0;
    m_FormIdIsSet = false;
    m_FormKey = utility::conversions::to_string_t("");
    m_FormKeyIsSet = false;
    m_FormName = utility::conversions::to_string_t("");
    m_FormNameIsSet = false;
    m_FormType = utility::conversions::to_string_t("");
    m_FormTypeIsSet = false;
    m_Revision = 0;
    m_RevisionIsSet = false;
    m_EmbeddedLog = false;
    m_EmbeddedLogIsSet = false;
    m_EnforceOwnership = false;
    m_EnforceOwnershipIsSet = false;
    m_UserAgreement = false;
    m_UserAgreementIsSet = false;
    m_SubjectRecordReport = false;
    m_SubjectRecordReportIsSet = false;
    m_UnscheduledVisit = false;
    m_UnscheduledVisitIsSet = false;
    m_OtherForms = false;
    m_OtherFormsIsSet = false;
    m_EproForm = false;
    m_EproFormIsSet = false;
    m_AllowCopy = false;
    m_AllowCopyIsSet = false;
    m_Disabled = false;
    m_DisabledIsSet = false;
    m_DateCreated = utility::conversions::to_string_t("");
    m_DateCreatedIsSet = false;
    m_DateModified = utility::conversions::to_string_t("");
    m_DateModifiedIsSet = false;
}

Form::~Form()
{
}

void Form::validate()
{
    // TODO: implement validation
}

web::json::value Form::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_StudyKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("studyKey"))] = ModelBase::toJson(m_StudyKey);
    }
    if(m_FormIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("formId"))] = ModelBase::toJson(m_FormId);
    }
    if(m_FormKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("formKey"))] = ModelBase::toJson(m_FormKey);
    }
    if(m_FormNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("formName"))] = ModelBase::toJson(m_FormName);
    }
    if(m_FormTypeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("formType"))] = ModelBase::toJson(m_FormType);
    }
    if(m_RevisionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("revision"))] = ModelBase::toJson(m_Revision);
    }
    if(m_EmbeddedLogIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("embeddedLog"))] = ModelBase::toJson(m_EmbeddedLog);
    }
    if(m_EnforceOwnershipIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("enforceOwnership"))] = ModelBase::toJson(m_EnforceOwnership);
    }
    if(m_UserAgreementIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("userAgreement"))] = ModelBase::toJson(m_UserAgreement);
    }
    if(m_SubjectRecordReportIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectRecordReport"))] = ModelBase::toJson(m_SubjectRecordReport);
    }
    if(m_UnscheduledVisitIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("unscheduledVisit"))] = ModelBase::toJson(m_UnscheduledVisit);
    }
    if(m_OtherFormsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("otherForms"))] = ModelBase::toJson(m_OtherForms);
    }
    if(m_EproFormIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("eproForm"))] = ModelBase::toJson(m_EproForm);
    }
    if(m_AllowCopyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("allowCopy"))] = ModelBase::toJson(m_AllowCopy);
    }
    if(m_DisabledIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("disabled"))] = ModelBase::toJson(m_Disabled);
    }
    if(m_DateCreatedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateCreated"))] = ModelBase::toJson(m_DateCreated);
    }
    if(m_DateModifiedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateModified"))] = ModelBase::toJson(m_DateModified);
    }

    return val;
}

bool Form::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("studyKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStudyKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStudyKey);
            setStudyKey(refVal_setStudyKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("formId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("formId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFormId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormId);
            setFormId(refVal_setFormId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("formKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("formKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFormKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormKey);
            setFormKey(refVal_setFormKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("formName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("formName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFormName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormName);
            setFormName(refVal_setFormName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("formType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("formType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFormType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormType);
            setFormType(refVal_setFormType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("revision"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("revision")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRevision;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRevision);
            setRevision(refVal_setRevision);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("embeddedLog"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("embeddedLog")));
        if(!fieldValue.is_null())
        {
            bool refVal_setEmbeddedLog;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmbeddedLog);
            setEmbeddedLog(refVal_setEmbeddedLog);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("enforceOwnership"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("enforceOwnership")));
        if(!fieldValue.is_null())
        {
            bool refVal_setEnforceOwnership;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnforceOwnership);
            setEnforceOwnership(refVal_setEnforceOwnership);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("userAgreement"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("userAgreement")));
        if(!fieldValue.is_null())
        {
            bool refVal_setUserAgreement;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserAgreement);
            setUserAgreement(refVal_setUserAgreement);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectRecordReport"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectRecordReport")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSubjectRecordReport;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectRecordReport);
            setSubjectRecordReport(refVal_setSubjectRecordReport);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("unscheduledVisit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("unscheduledVisit")));
        if(!fieldValue.is_null())
        {
            bool refVal_setUnscheduledVisit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUnscheduledVisit);
            setUnscheduledVisit(refVal_setUnscheduledVisit);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("otherForms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("otherForms")));
        if(!fieldValue.is_null())
        {
            bool refVal_setOtherForms;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOtherForms);
            setOtherForms(refVal_setOtherForms);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("eproForm"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("eproForm")));
        if(!fieldValue.is_null())
        {
            bool refVal_setEproForm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEproForm);
            setEproForm(refVal_setEproForm);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("allowCopy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("allowCopy")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAllowCopy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAllowCopy);
            setAllowCopy(refVal_setAllowCopy);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("disabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("disabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDisabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDisabled);
            setDisabled(refVal_setDisabled);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateCreated")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateCreated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateCreated);
            setDateCreated(refVal_setDateCreated);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateModified")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateModified;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateModified);
            setDateModified(refVal_setDateModified);
            
        }
    }
    return ok;
}

void Form::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_StudyKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("studyKey")), m_StudyKey));
    }
    if(m_FormIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("formId")), m_FormId));
    }
    if(m_FormKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("formKey")), m_FormKey));
    }
    if(m_FormNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("formName")), m_FormName));
    }
    if(m_FormTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("formType")), m_FormType));
    }
    if(m_RevisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("revision")), m_Revision));
    }
    if(m_EmbeddedLogIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("embeddedLog")), m_EmbeddedLog));
    }
    if(m_EnforceOwnershipIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("enforceOwnership")), m_EnforceOwnership));
    }
    if(m_UserAgreementIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("userAgreement")), m_UserAgreement));
    }
    if(m_SubjectRecordReportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectRecordReport")), m_SubjectRecordReport));
    }
    if(m_UnscheduledVisitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("unscheduledVisit")), m_UnscheduledVisit));
    }
    if(m_OtherFormsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("otherForms")), m_OtherForms));
    }
    if(m_EproFormIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("eproForm")), m_EproForm));
    }
    if(m_AllowCopyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("allowCopy")), m_AllowCopy));
    }
    if(m_DisabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("disabled")), m_Disabled));
    }
    if(m_DateCreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateCreated")), m_DateCreated));
    }
    if(m_DateModifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateModified")), m_DateModified));
    }
}

bool Form::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        utility::string_t refVal_setStudyKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))), refVal_setStudyKey );
        setStudyKey(refVal_setStudyKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("formId"))))
    {
        int32_t refVal_setFormId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("formId"))), refVal_setFormId );
        setFormId(refVal_setFormId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("formKey"))))
    {
        utility::string_t refVal_setFormKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("formKey"))), refVal_setFormKey );
        setFormKey(refVal_setFormKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("formName"))))
    {
        utility::string_t refVal_setFormName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("formName"))), refVal_setFormName );
        setFormName(refVal_setFormName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("formType"))))
    {
        utility::string_t refVal_setFormType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("formType"))), refVal_setFormType );
        setFormType(refVal_setFormType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("revision"))))
    {
        int32_t refVal_setRevision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("revision"))), refVal_setRevision );
        setRevision(refVal_setRevision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("embeddedLog"))))
    {
        bool refVal_setEmbeddedLog;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("embeddedLog"))), refVal_setEmbeddedLog );
        setEmbeddedLog(refVal_setEmbeddedLog);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("enforceOwnership"))))
    {
        bool refVal_setEnforceOwnership;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("enforceOwnership"))), refVal_setEnforceOwnership );
        setEnforceOwnership(refVal_setEnforceOwnership);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("userAgreement"))))
    {
        bool refVal_setUserAgreement;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("userAgreement"))), refVal_setUserAgreement );
        setUserAgreement(refVal_setUserAgreement);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectRecordReport"))))
    {
        bool refVal_setSubjectRecordReport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectRecordReport"))), refVal_setSubjectRecordReport );
        setSubjectRecordReport(refVal_setSubjectRecordReport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("unscheduledVisit"))))
    {
        bool refVal_setUnscheduledVisit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("unscheduledVisit"))), refVal_setUnscheduledVisit );
        setUnscheduledVisit(refVal_setUnscheduledVisit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("otherForms"))))
    {
        bool refVal_setOtherForms;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("otherForms"))), refVal_setOtherForms );
        setOtherForms(refVal_setOtherForms);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("eproForm"))))
    {
        bool refVal_setEproForm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("eproForm"))), refVal_setEproForm );
        setEproForm(refVal_setEproForm);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("allowCopy"))))
    {
        bool refVal_setAllowCopy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("allowCopy"))), refVal_setAllowCopy );
        setAllowCopy(refVal_setAllowCopy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("disabled"))))
    {
        bool refVal_setDisabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("disabled"))), refVal_setDisabled );
        setDisabled(refVal_setDisabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        utility::string_t refVal_setDateCreated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))), refVal_setDateCreated );
        setDateCreated(refVal_setDateCreated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        utility::string_t refVal_setDateModified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))), refVal_setDateModified );
        setDateModified(refVal_setDateModified);
    }
    return ok;
}


utility::string_t Form::getStudyKey() const
{
    return m_StudyKey;
}


void Form::setStudyKey(const utility::string_t& value)
{
    m_StudyKey = value;
    m_StudyKeyIsSet = true;
}

bool Form::studyKeyIsSet() const
{
    return m_StudyKeyIsSet;
}

void Form::unsetStudyKey()
{
    m_StudyKeyIsSet = false;
}
int32_t Form::getFormId() const
{
    return m_FormId;
}

void Form::setFormId(int32_t value)
{
    m_FormId = value;
    m_FormIdIsSet = true;
}

bool Form::formIdIsSet() const
{
    return m_FormIdIsSet;
}

void Form::unsetFormId()
{
    m_FormIdIsSet = false;
}
utility::string_t Form::getFormKey() const
{
    return m_FormKey;
}


void Form::setFormKey(const utility::string_t& value)
{
    m_FormKey = value;
    m_FormKeyIsSet = true;
}

bool Form::formKeyIsSet() const
{
    return m_FormKeyIsSet;
}

void Form::unsetFormKey()
{
    m_FormKeyIsSet = false;
}
utility::string_t Form::getFormName() const
{
    return m_FormName;
}


void Form::setFormName(const utility::string_t& value)
{
    m_FormName = value;
    m_FormNameIsSet = true;
}

bool Form::formNameIsSet() const
{
    return m_FormNameIsSet;
}

void Form::unsetFormName()
{
    m_FormNameIsSet = false;
}
utility::string_t Form::getFormType() const
{
    return m_FormType;
}


void Form::setFormType(const utility::string_t& value)
{
    m_FormType = value;
    m_FormTypeIsSet = true;
}

bool Form::formTypeIsSet() const
{
    return m_FormTypeIsSet;
}

void Form::unsetFormType()
{
    m_FormTypeIsSet = false;
}
int32_t Form::getRevision() const
{
    return m_Revision;
}

void Form::setRevision(int32_t value)
{
    m_Revision = value;
    m_RevisionIsSet = true;
}

bool Form::revisionIsSet() const
{
    return m_RevisionIsSet;
}

void Form::unsetRevision()
{
    m_RevisionIsSet = false;
}
bool Form::isEmbeddedLog() const
{
    return m_EmbeddedLog;
}

void Form::setEmbeddedLog(bool value)
{
    m_EmbeddedLog = value;
    m_EmbeddedLogIsSet = true;
}

bool Form::embeddedLogIsSet() const
{
    return m_EmbeddedLogIsSet;
}

void Form::unsetEmbeddedLog()
{
    m_EmbeddedLogIsSet = false;
}
bool Form::isEnforceOwnership() const
{
    return m_EnforceOwnership;
}

void Form::setEnforceOwnership(bool value)
{
    m_EnforceOwnership = value;
    m_EnforceOwnershipIsSet = true;
}

bool Form::enforceOwnershipIsSet() const
{
    return m_EnforceOwnershipIsSet;
}

void Form::unsetEnforceOwnership()
{
    m_EnforceOwnershipIsSet = false;
}
bool Form::isUserAgreement() const
{
    return m_UserAgreement;
}

void Form::setUserAgreement(bool value)
{
    m_UserAgreement = value;
    m_UserAgreementIsSet = true;
}

bool Form::userAgreementIsSet() const
{
    return m_UserAgreementIsSet;
}

void Form::unsetUserAgreement()
{
    m_UserAgreementIsSet = false;
}
bool Form::isSubjectRecordReport() const
{
    return m_SubjectRecordReport;
}

void Form::setSubjectRecordReport(bool value)
{
    m_SubjectRecordReport = value;
    m_SubjectRecordReportIsSet = true;
}

bool Form::subjectRecordReportIsSet() const
{
    return m_SubjectRecordReportIsSet;
}

void Form::unsetSubjectRecordReport()
{
    m_SubjectRecordReportIsSet = false;
}
bool Form::isUnscheduledVisit() const
{
    return m_UnscheduledVisit;
}

void Form::setUnscheduledVisit(bool value)
{
    m_UnscheduledVisit = value;
    m_UnscheduledVisitIsSet = true;
}

bool Form::unscheduledVisitIsSet() const
{
    return m_UnscheduledVisitIsSet;
}

void Form::unsetUnscheduledVisit()
{
    m_UnscheduledVisitIsSet = false;
}
bool Form::isOtherForms() const
{
    return m_OtherForms;
}

void Form::setOtherForms(bool value)
{
    m_OtherForms = value;
    m_OtherFormsIsSet = true;
}

bool Form::otherFormsIsSet() const
{
    return m_OtherFormsIsSet;
}

void Form::unsetOtherForms()
{
    m_OtherFormsIsSet = false;
}
bool Form::isEproForm() const
{
    return m_EproForm;
}

void Form::setEproForm(bool value)
{
    m_EproForm = value;
    m_EproFormIsSet = true;
}

bool Form::eproFormIsSet() const
{
    return m_EproFormIsSet;
}

void Form::unsetEproForm()
{
    m_EproFormIsSet = false;
}
bool Form::isAllowCopy() const
{
    return m_AllowCopy;
}

void Form::setAllowCopy(bool value)
{
    m_AllowCopy = value;
    m_AllowCopyIsSet = true;
}

bool Form::allowCopyIsSet() const
{
    return m_AllowCopyIsSet;
}

void Form::unsetAllowCopy()
{
    m_AllowCopyIsSet = false;
}
bool Form::isDisabled() const
{
    return m_Disabled;
}

void Form::setDisabled(bool value)
{
    m_Disabled = value;
    m_DisabledIsSet = true;
}

bool Form::disabledIsSet() const
{
    return m_DisabledIsSet;
}

void Form::unsetDisabled()
{
    m_DisabledIsSet = false;
}
utility::string_t Form::getDateCreated() const
{
    return m_DateCreated;
}


void Form::setDateCreated(const utility::string_t& value)
{
    m_DateCreated = value;
    m_DateCreatedIsSet = true;
}

bool Form::dateCreatedIsSet() const
{
    return m_DateCreatedIsSet;
}

void Form::unsetDateCreated()
{
    m_DateCreatedIsSet = false;
}
utility::string_t Form::getDateModified() const
{
    return m_DateModified;
}


void Form::setDateModified(const utility::string_t& value)
{
    m_DateModified = value;
    m_DateModifiedIsSet = true;
}

bool Form::dateModifiedIsSet() const
{
    return m_DateModifiedIsSet;
}

void Form::unsetDateModified()
{
    m_DateModifiedIsSet = false;
}

}
}
}
}


