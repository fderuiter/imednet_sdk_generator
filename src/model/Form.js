/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Form model module.
 * @module model/Form
 * @version 1.3.6
 */
class Form {
    /**
     * @member {String} studyKey
     * @type {String}
     */
    studyKey;
    /**
     * @member {Number} formId
     * @type {Number}
     */
    formId;
    /**
     * @member {String} formKey
     * @type {String}
     */
    formKey;
    /**
     * @member {String} formName
     * @type {String}
     */
    formName;
    /**
     * @member {String} formType
     * @type {String}
     */
    formType;
    /**
     * @member {Number} revision
     * @type {Number}
     */
    revision;
    /**
     * @member {Boolean} embeddedLog
     * @type {Boolean}
     */
    embeddedLog;
    /**
     * @member {Boolean} enforceOwnership
     * @type {Boolean}
     */
    enforceOwnership;
    /**
     * @member {Boolean} userAgreement
     * @type {Boolean}
     */
    userAgreement;
    /**
     * @member {Boolean} subjectRecordReport
     * @type {Boolean}
     */
    subjectRecordReport;
    /**
     * @member {Boolean} unscheduledVisit
     * @type {Boolean}
     */
    unscheduledVisit;
    /**
     * @member {Boolean} otherForms
     * @type {Boolean}
     */
    otherForms;
    /**
     * @member {Boolean} eproForm
     * @type {Boolean}
     */
    eproForm;
    /**
     * @member {Boolean} allowCopy
     * @type {Boolean}
     */
    allowCopy;
    /**
     * @member {Boolean} disabled
     * @type {Boolean}
     */
    disabled;
    /**
     * @member {String} dateCreated
     * @type {String}
     */
    dateCreated;
    /**
     * @member {String} dateModified
     * @type {String}
     */
    dateModified;

    

    /**
     * Constructs a new <code>Form</code>.
     * @alias module:model/Form
     */
    constructor() { 
        
        Form.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Form</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Form} obj Optional instance to populate.
     * @return {module:model/Form} The populated <code>Form</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Form();

            if (data.hasOwnProperty('studyKey')) {
                obj['studyKey'] = ApiClient.convertToType(data['studyKey'], 'String');
            }
            if (data.hasOwnProperty('formId')) {
                obj['formId'] = ApiClient.convertToType(data['formId'], 'Number');
            }
            if (data.hasOwnProperty('formKey')) {
                obj['formKey'] = ApiClient.convertToType(data['formKey'], 'String');
            }
            if (data.hasOwnProperty('formName')) {
                obj['formName'] = ApiClient.convertToType(data['formName'], 'String');
            }
            if (data.hasOwnProperty('formType')) {
                obj['formType'] = ApiClient.convertToType(data['formType'], 'String');
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'Number');
            }
            if (data.hasOwnProperty('embeddedLog')) {
                obj['embeddedLog'] = ApiClient.convertToType(data['embeddedLog'], 'Boolean');
            }
            if (data.hasOwnProperty('enforceOwnership')) {
                obj['enforceOwnership'] = ApiClient.convertToType(data['enforceOwnership'], 'Boolean');
            }
            if (data.hasOwnProperty('userAgreement')) {
                obj['userAgreement'] = ApiClient.convertToType(data['userAgreement'], 'Boolean');
            }
            if (data.hasOwnProperty('subjectRecordReport')) {
                obj['subjectRecordReport'] = ApiClient.convertToType(data['subjectRecordReport'], 'Boolean');
            }
            if (data.hasOwnProperty('unscheduledVisit')) {
                obj['unscheduledVisit'] = ApiClient.convertToType(data['unscheduledVisit'], 'Boolean');
            }
            if (data.hasOwnProperty('otherForms')) {
                obj['otherForms'] = ApiClient.convertToType(data['otherForms'], 'Boolean');
            }
            if (data.hasOwnProperty('eproForm')) {
                obj['eproForm'] = ApiClient.convertToType(data['eproForm'], 'Boolean');
            }
            if (data.hasOwnProperty('allowCopy')) {
                obj['allowCopy'] = ApiClient.convertToType(data['allowCopy'], 'Boolean');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'String');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'String');
            }
        }
        return obj;
    }
}



export default Form;

