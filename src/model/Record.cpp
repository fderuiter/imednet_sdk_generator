/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Record.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Record::Record()
{
    m_StudyKey = utility::conversions::to_string_t("");
    m_StudyKeyIsSet = false;
    m_IntervalId = 0;
    m_IntervalIdIsSet = false;
    m_FormId = 0;
    m_FormIdIsSet = false;
    m_FormKey = utility::conversions::to_string_t("");
    m_FormKeyIsSet = false;
    m_SiteId = 0;
    m_SiteIdIsSet = false;
    m_RecordId = 0;
    m_RecordIdIsSet = false;
    m_RecordOid = utility::conversions::to_string_t("");
    m_RecordOidIsSet = false;
    m_RecordType = utility::conversions::to_string_t("");
    m_RecordTypeIsSet = false;
    m_RecordStatus = utility::conversions::to_string_t("");
    m_RecordStatusIsSet = false;
    m_Deleted = false;
    m_DeletedIsSet = false;
    m_DateCreated = utility::conversions::to_string_t("");
    m_DateCreatedIsSet = false;
    m_DateModified = utility::conversions::to_string_t("");
    m_DateModifiedIsSet = false;
    m_SubjectId = 0;
    m_SubjectIdIsSet = false;
    m_SubjectOid = utility::conversions::to_string_t("");
    m_SubjectOidIsSet = false;
    m_SubjectKey = utility::conversions::to_string_t("");
    m_SubjectKeyIsSet = false;
    m_VisitId = 0;
    m_VisitIdIsSet = false;
    m_ParentRecordId = 0;
    m_ParentRecordIdIsSet = false;
    m_KeywordsIsSet = false;
    m_RecordDataIsSet = false;
}

Record::~Record()
{
}

void Record::validate()
{
    // TODO: implement validation
}

web::json::value Record::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_StudyKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("studyKey"))] = ModelBase::toJson(m_StudyKey);
    }
    if(m_IntervalIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("intervalId"))] = ModelBase::toJson(m_IntervalId);
    }
    if(m_FormIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("formId"))] = ModelBase::toJson(m_FormId);
    }
    if(m_FormKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("formKey"))] = ModelBase::toJson(m_FormKey);
    }
    if(m_SiteIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("siteId"))] = ModelBase::toJson(m_SiteId);
    }
    if(m_RecordIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("recordId"))] = ModelBase::toJson(m_RecordId);
    }
    if(m_RecordOidIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("recordOid"))] = ModelBase::toJson(m_RecordOid);
    }
    if(m_RecordTypeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("recordType"))] = ModelBase::toJson(m_RecordType);
    }
    if(m_RecordStatusIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("recordStatus"))] = ModelBase::toJson(m_RecordStatus);
    }
    if(m_DeletedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("deleted"))] = ModelBase::toJson(m_Deleted);
    }
    if(m_DateCreatedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateCreated"))] = ModelBase::toJson(m_DateCreated);
    }
    if(m_DateModifiedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateModified"))] = ModelBase::toJson(m_DateModified);
    }
    if(m_SubjectIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectId"))] = ModelBase::toJson(m_SubjectId);
    }
    if(m_SubjectOidIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectOid"))] = ModelBase::toJson(m_SubjectOid);
    }
    if(m_SubjectKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectKey"))] = ModelBase::toJson(m_SubjectKey);
    }
    if(m_VisitIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("visitId"))] = ModelBase::toJson(m_VisitId);
    }
    if(m_ParentRecordIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("parentRecordId"))] = ModelBase::toJson(m_ParentRecordId);
    }
    if(m_KeywordsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("keywords"))] = ModelBase::toJson(m_Keywords);
    }
    if(m_RecordDataIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("recordData"))] = ModelBase::toJson(m_RecordData);
    }

    return val;
}

bool Record::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("studyKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStudyKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStudyKey);
            setStudyKey(refVal_setStudyKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("intervalId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("intervalId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setIntervalId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIntervalId);
            setIntervalId(refVal_setIntervalId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("formId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("formId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFormId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormId);
            setFormId(refVal_setFormId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("formKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("formKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFormKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormKey);
            setFormKey(refVal_setFormKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("siteId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("siteId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSiteId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSiteId);
            setSiteId(refVal_setSiteId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("recordId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("recordId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRecordId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordId);
            setRecordId(refVal_setRecordId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("recordOid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("recordOid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRecordOid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordOid);
            setRecordOid(refVal_setRecordOid);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("recordType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("recordType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRecordType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordType);
            setRecordType(refVal_setRecordType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("recordStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("recordStatus")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRecordStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordStatus);
            setRecordStatus(refVal_setRecordStatus);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("deleted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("deleted")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDeleted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeleted);
            setDeleted(refVal_setDeleted);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateCreated")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateCreated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateCreated);
            setDateCreated(refVal_setDateCreated);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateModified")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateModified;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateModified);
            setDateModified(refVal_setDateModified);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSubjectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectId);
            setSubjectId(refVal_setSubjectId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectOid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectOid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubjectOid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectOid);
            setSubjectOid(refVal_setSubjectOid);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubjectKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectKey);
            setSubjectKey(refVal_setSubjectKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("visitId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("visitId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setVisitId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVisitId);
            setVisitId(refVal_setVisitId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("parentRecordId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("parentRecordId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setParentRecordId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParentRecordId);
            setParentRecordId(refVal_setParentRecordId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("keywords"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("keywords")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Keyword>> refVal_setKeywords;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKeywords);
            setKeywords(refVal_setKeywords);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("recordData"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("recordData")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_setRecordData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordData);
            setRecordData(refVal_setRecordData);
            
        }
    }
    return ok;
}

void Record::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_StudyKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("studyKey")), m_StudyKey));
    }
    if(m_IntervalIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("intervalId")), m_IntervalId));
    }
    if(m_FormIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("formId")), m_FormId));
    }
    if(m_FormKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("formKey")), m_FormKey));
    }
    if(m_SiteIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("siteId")), m_SiteId));
    }
    if(m_RecordIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("recordId")), m_RecordId));
    }
    if(m_RecordOidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("recordOid")), m_RecordOid));
    }
    if(m_RecordTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("recordType")), m_RecordType));
    }
    if(m_RecordStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("recordStatus")), m_RecordStatus));
    }
    if(m_DeletedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("deleted")), m_Deleted));
    }
    if(m_DateCreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateCreated")), m_DateCreated));
    }
    if(m_DateModifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateModified")), m_DateModified));
    }
    if(m_SubjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectId")), m_SubjectId));
    }
    if(m_SubjectOidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectOid")), m_SubjectOid));
    }
    if(m_SubjectKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectKey")), m_SubjectKey));
    }
    if(m_VisitIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("visitId")), m_VisitId));
    }
    if(m_ParentRecordIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("parentRecordId")), m_ParentRecordId));
    }
    if(m_KeywordsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("keywords")), m_Keywords));
    }
    if(m_RecordDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("recordData")), m_RecordData));
    }
}

bool Record::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        utility::string_t refVal_setStudyKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))), refVal_setStudyKey );
        setStudyKey(refVal_setStudyKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("intervalId"))))
    {
        int32_t refVal_setIntervalId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("intervalId"))), refVal_setIntervalId );
        setIntervalId(refVal_setIntervalId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("formId"))))
    {
        int32_t refVal_setFormId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("formId"))), refVal_setFormId );
        setFormId(refVal_setFormId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("formKey"))))
    {
        utility::string_t refVal_setFormKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("formKey"))), refVal_setFormKey );
        setFormKey(refVal_setFormKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("siteId"))))
    {
        int32_t refVal_setSiteId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("siteId"))), refVal_setSiteId );
        setSiteId(refVal_setSiteId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("recordId"))))
    {
        int32_t refVal_setRecordId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("recordId"))), refVal_setRecordId );
        setRecordId(refVal_setRecordId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("recordOid"))))
    {
        utility::string_t refVal_setRecordOid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("recordOid"))), refVal_setRecordOid );
        setRecordOid(refVal_setRecordOid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("recordType"))))
    {
        utility::string_t refVal_setRecordType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("recordType"))), refVal_setRecordType );
        setRecordType(refVal_setRecordType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("recordStatus"))))
    {
        utility::string_t refVal_setRecordStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("recordStatus"))), refVal_setRecordStatus );
        setRecordStatus(refVal_setRecordStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("deleted"))))
    {
        bool refVal_setDeleted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("deleted"))), refVal_setDeleted );
        setDeleted(refVal_setDeleted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        utility::string_t refVal_setDateCreated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))), refVal_setDateCreated );
        setDateCreated(refVal_setDateCreated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        utility::string_t refVal_setDateModified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))), refVal_setDateModified );
        setDateModified(refVal_setDateModified);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectId"))))
    {
        int32_t refVal_setSubjectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectId"))), refVal_setSubjectId );
        setSubjectId(refVal_setSubjectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectOid"))))
    {
        utility::string_t refVal_setSubjectOid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectOid"))), refVal_setSubjectOid );
        setSubjectOid(refVal_setSubjectOid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))))
    {
        utility::string_t refVal_setSubjectKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))), refVal_setSubjectKey );
        setSubjectKey(refVal_setSubjectKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("visitId"))))
    {
        int32_t refVal_setVisitId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("visitId"))), refVal_setVisitId );
        setVisitId(refVal_setVisitId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("parentRecordId"))))
    {
        int32_t refVal_setParentRecordId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("parentRecordId"))), refVal_setParentRecordId );
        setParentRecordId(refVal_setParentRecordId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("keywords"))))
    {
        std::vector<std::shared_ptr<Keyword>> refVal_setKeywords;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("keywords"))), refVal_setKeywords );
        setKeywords(refVal_setKeywords);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("recordData"))))
    {
        std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_setRecordData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("recordData"))), refVal_setRecordData );
        setRecordData(refVal_setRecordData);
    }
    return ok;
}


utility::string_t Record::getStudyKey() const
{
    return m_StudyKey;
}


void Record::setStudyKey(const utility::string_t& value)
{
    m_StudyKey = value;
    m_StudyKeyIsSet = true;
}

bool Record::studyKeyIsSet() const
{
    return m_StudyKeyIsSet;
}

void Record::unsetStudyKey()
{
    m_StudyKeyIsSet = false;
}
int32_t Record::getIntervalId() const
{
    return m_IntervalId;
}

void Record::setIntervalId(int32_t value)
{
    m_IntervalId = value;
    m_IntervalIdIsSet = true;
}

bool Record::intervalIdIsSet() const
{
    return m_IntervalIdIsSet;
}

void Record::unsetIntervalId()
{
    m_IntervalIdIsSet = false;
}
int32_t Record::getFormId() const
{
    return m_FormId;
}

void Record::setFormId(int32_t value)
{
    m_FormId = value;
    m_FormIdIsSet = true;
}

bool Record::formIdIsSet() const
{
    return m_FormIdIsSet;
}

void Record::unsetFormId()
{
    m_FormIdIsSet = false;
}
utility::string_t Record::getFormKey() const
{
    return m_FormKey;
}


void Record::setFormKey(const utility::string_t& value)
{
    m_FormKey = value;
    m_FormKeyIsSet = true;
}

bool Record::formKeyIsSet() const
{
    return m_FormKeyIsSet;
}

void Record::unsetFormKey()
{
    m_FormKeyIsSet = false;
}
int32_t Record::getSiteId() const
{
    return m_SiteId;
}

void Record::setSiteId(int32_t value)
{
    m_SiteId = value;
    m_SiteIdIsSet = true;
}

bool Record::siteIdIsSet() const
{
    return m_SiteIdIsSet;
}

void Record::unsetSiteId()
{
    m_SiteIdIsSet = false;
}
int32_t Record::getRecordId() const
{
    return m_RecordId;
}

void Record::setRecordId(int32_t value)
{
    m_RecordId = value;
    m_RecordIdIsSet = true;
}

bool Record::recordIdIsSet() const
{
    return m_RecordIdIsSet;
}

void Record::unsetRecordId()
{
    m_RecordIdIsSet = false;
}
utility::string_t Record::getRecordOid() const
{
    return m_RecordOid;
}


void Record::setRecordOid(const utility::string_t& value)
{
    m_RecordOid = value;
    m_RecordOidIsSet = true;
}

bool Record::recordOidIsSet() const
{
    return m_RecordOidIsSet;
}

void Record::unsetRecordOid()
{
    m_RecordOidIsSet = false;
}
utility::string_t Record::getRecordType() const
{
    return m_RecordType;
}


void Record::setRecordType(const utility::string_t& value)
{
    m_RecordType = value;
    m_RecordTypeIsSet = true;
}

bool Record::recordTypeIsSet() const
{
    return m_RecordTypeIsSet;
}

void Record::unsetRecordType()
{
    m_RecordTypeIsSet = false;
}
utility::string_t Record::getRecordStatus() const
{
    return m_RecordStatus;
}


void Record::setRecordStatus(const utility::string_t& value)
{
    m_RecordStatus = value;
    m_RecordStatusIsSet = true;
}

bool Record::recordStatusIsSet() const
{
    return m_RecordStatusIsSet;
}

void Record::unsetRecordStatus()
{
    m_RecordStatusIsSet = false;
}
bool Record::isDeleted() const
{
    return m_Deleted;
}

void Record::setDeleted(bool value)
{
    m_Deleted = value;
    m_DeletedIsSet = true;
}

bool Record::deletedIsSet() const
{
    return m_DeletedIsSet;
}

void Record::unsetDeleted()
{
    m_DeletedIsSet = false;
}
utility::string_t Record::getDateCreated() const
{
    return m_DateCreated;
}


void Record::setDateCreated(const utility::string_t& value)
{
    m_DateCreated = value;
    m_DateCreatedIsSet = true;
}

bool Record::dateCreatedIsSet() const
{
    return m_DateCreatedIsSet;
}

void Record::unsetDateCreated()
{
    m_DateCreatedIsSet = false;
}
utility::string_t Record::getDateModified() const
{
    return m_DateModified;
}


void Record::setDateModified(const utility::string_t& value)
{
    m_DateModified = value;
    m_DateModifiedIsSet = true;
}

bool Record::dateModifiedIsSet() const
{
    return m_DateModifiedIsSet;
}

void Record::unsetDateModified()
{
    m_DateModifiedIsSet = false;
}
int32_t Record::getSubjectId() const
{
    return m_SubjectId;
}

void Record::setSubjectId(int32_t value)
{
    m_SubjectId = value;
    m_SubjectIdIsSet = true;
}

bool Record::subjectIdIsSet() const
{
    return m_SubjectIdIsSet;
}

void Record::unsetSubjectId()
{
    m_SubjectIdIsSet = false;
}
utility::string_t Record::getSubjectOid() const
{
    return m_SubjectOid;
}


void Record::setSubjectOid(const utility::string_t& value)
{
    m_SubjectOid = value;
    m_SubjectOidIsSet = true;
}

bool Record::subjectOidIsSet() const
{
    return m_SubjectOidIsSet;
}

void Record::unsetSubjectOid()
{
    m_SubjectOidIsSet = false;
}
utility::string_t Record::getSubjectKey() const
{
    return m_SubjectKey;
}


void Record::setSubjectKey(const utility::string_t& value)
{
    m_SubjectKey = value;
    m_SubjectKeyIsSet = true;
}

bool Record::subjectKeyIsSet() const
{
    return m_SubjectKeyIsSet;
}

void Record::unsetSubjectKey()
{
    m_SubjectKeyIsSet = false;
}
int32_t Record::getVisitId() const
{
    return m_VisitId;
}

void Record::setVisitId(int32_t value)
{
    m_VisitId = value;
    m_VisitIdIsSet = true;
}

bool Record::visitIdIsSet() const
{
    return m_VisitIdIsSet;
}

void Record::unsetVisitId()
{
    m_VisitIdIsSet = false;
}
int32_t Record::getParentRecordId() const
{
    return m_ParentRecordId;
}

void Record::setParentRecordId(int32_t value)
{
    m_ParentRecordId = value;
    m_ParentRecordIdIsSet = true;
}

bool Record::parentRecordIdIsSet() const
{
    return m_ParentRecordIdIsSet;
}

void Record::unsetParentRecordId()
{
    m_ParentRecordIdIsSet = false;
}
std::vector<std::shared_ptr<Keyword>> Record::getKeywords() const
{
    return m_Keywords;
}


void Record::setKeywords(const std::vector<std::shared_ptr<Keyword>>& value)
{
    m_Keywords = value;
    m_KeywordsIsSet = true;
}

bool Record::keywordsIsSet() const
{
    return m_KeywordsIsSet;
}

void Record::unsetKeywords()
{
    m_KeywordsIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<AnyType>> Record::getRecordData() const
{
    return m_RecordData;
}


void Record::setRecordData(const std::map<utility::string_t, std::shared_ptr<AnyType>>& value)
{
    m_RecordData = value;
    m_RecordDataIsSet = true;
}

bool Record::recordDataIsSet() const
{
    return m_RecordDataIsSet;
}

void Record::unsetRecordData()
{
    m_RecordDataIsSet = false;
}

}
}
}
}


