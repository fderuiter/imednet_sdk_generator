/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Components_schemas_Interval_forms_item.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Components_schemas_Interval_forms_item::Components_schemas_Interval_forms_item()
{
    m_FormId = 0;
    m_FormIdIsSet = false;
    m_FormKey = utility::conversions::to_string_t("");
    m_FormKeyIsSet = false;
    m_FormName = utility::conversions::to_string_t("");
    m_FormNameIsSet = false;
}

Components_schemas_Interval_forms_item::~Components_schemas_Interval_forms_item()
{
}

void Components_schemas_Interval_forms_item::validate()
{
    // TODO: implement validation
}

web::json::value Components_schemas_Interval_forms_item::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_FormIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("formId"))] = ModelBase::toJson(m_FormId);
    }
    if(m_FormKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("formKey"))] = ModelBase::toJson(m_FormKey);
    }
    if(m_FormNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("formName"))] = ModelBase::toJson(m_FormName);
    }

    return val;
}

bool Components_schemas_Interval_forms_item::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("formId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("formId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFormId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormId);
            setFormId(refVal_setFormId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("formKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("formKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFormKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormKey);
            setFormKey(refVal_setFormKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("formName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("formName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFormName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormName);
            setFormName(refVal_setFormName);
            
        }
    }
    return ok;
}

void Components_schemas_Interval_forms_item::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_FormIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("formId")), m_FormId));
    }
    if(m_FormKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("formKey")), m_FormKey));
    }
    if(m_FormNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("formName")), m_FormName));
    }
}

bool Components_schemas_Interval_forms_item::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("formId"))))
    {
        int32_t refVal_setFormId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("formId"))), refVal_setFormId );
        setFormId(refVal_setFormId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("formKey"))))
    {
        utility::string_t refVal_setFormKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("formKey"))), refVal_setFormKey );
        setFormKey(refVal_setFormKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("formName"))))
    {
        utility::string_t refVal_setFormName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("formName"))), refVal_setFormName );
        setFormName(refVal_setFormName);
    }
    return ok;
}


int32_t Components_schemas_Interval_forms_item::getFormId() const
{
    return m_FormId;
}

void Components_schemas_Interval_forms_item::setFormId(int32_t value)
{
    m_FormId = value;
    m_FormIdIsSet = true;
}

bool Components_schemas_Interval_forms_item::formIdIsSet() const
{
    return m_FormIdIsSet;
}

void Components_schemas_Interval_forms_item::unsetFormId()
{
    m_FormIdIsSet = false;
}
utility::string_t Components_schemas_Interval_forms_item::getFormKey() const
{
    return m_FormKey;
}


void Components_schemas_Interval_forms_item::setFormKey(const utility::string_t& value)
{
    m_FormKey = value;
    m_FormKeyIsSet = true;
}

bool Components_schemas_Interval_forms_item::formKeyIsSet() const
{
    return m_FormKeyIsSet;
}

void Components_schemas_Interval_forms_item::unsetFormKey()
{
    m_FormKeyIsSet = false;
}
utility::string_t Components_schemas_Interval_forms_item::getFormName() const
{
    return m_FormName;
}


void Components_schemas_Interval_forms_item::setFormName(const utility::string_t& value)
{
    m_FormName = value;
    m_FormNameIsSet = true;
}

bool Components_schemas_Interval_forms_item::formNameIsSet() const
{
    return m_FormNameIsSet;
}

void Components_schemas_Interval_forms_item::unsetFormName()
{
    m_FormNameIsSet = false;
}

}
}
}
}


