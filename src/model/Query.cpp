/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Query.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Query::Query()
{
    m_StudyKey = utility::conversions::to_string_t("");
    m_StudyKeyIsSet = false;
    m_SubjectId = 0;
    m_SubjectIdIsSet = false;
    m_SubjectOid = utility::conversions::to_string_t("");
    m_SubjectOidIsSet = false;
    m_AnnotationType = utility::conversions::to_string_t("");
    m_AnnotationTypeIsSet = false;
    m_AnnotationId = 0;
    m_AnnotationIdIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_RecordId = 0;
    m_RecordIdIsSet = false;
    m_Variable = utility::conversions::to_string_t("");
    m_VariableIsSet = false;
    m_SubjectKey = utility::conversions::to_string_t("");
    m_SubjectKeyIsSet = false;
    m_DateCreated = utility::conversions::to_string_t("");
    m_DateCreatedIsSet = false;
    m_DateModified = utility::conversions::to_string_t("");
    m_DateModifiedIsSet = false;
    m_QueryCommentsIsSet = false;
}

Query::~Query()
{
}

void Query::validate()
{
    // TODO: implement validation
}

web::json::value Query::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_StudyKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("studyKey"))] = ModelBase::toJson(m_StudyKey);
    }
    if(m_SubjectIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectId"))] = ModelBase::toJson(m_SubjectId);
    }
    if(m_SubjectOidIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectOid"))] = ModelBase::toJson(m_SubjectOid);
    }
    if(m_AnnotationTypeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("annotationType"))] = ModelBase::toJson(m_AnnotationType);
    }
    if(m_AnnotationIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("annotationId"))] = ModelBase::toJson(m_AnnotationId);
    }
    if(m_TypeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_DescriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_RecordIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("recordId"))] = ModelBase::toJson(m_RecordId);
    }
    if(m_VariableIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("variable"))] = ModelBase::toJson(m_Variable);
    }
    if(m_SubjectKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectKey"))] = ModelBase::toJson(m_SubjectKey);
    }
    if(m_DateCreatedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateCreated"))] = ModelBase::toJson(m_DateCreated);
    }
    if(m_DateModifiedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateModified"))] = ModelBase::toJson(m_DateModified);
    }
    if(m_QueryCommentsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("queryComments"))] = ModelBase::toJson(m_QueryComments);
    }

    return val;
}

bool Query::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("studyKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStudyKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStudyKey);
            setStudyKey(refVal_setStudyKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSubjectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectId);
            setSubjectId(refVal_setSubjectId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectOid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectOid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubjectOid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectOid);
            setSubjectOid(refVal_setSubjectOid);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("annotationType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("annotationType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAnnotationType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAnnotationType);
            setAnnotationType(refVal_setAnnotationType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("annotationId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("annotationId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAnnotationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAnnotationId);
            setAnnotationId(refVal_setAnnotationId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("recordId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("recordId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRecordId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordId);
            setRecordId(refVal_setRecordId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("variable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("variable")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVariable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariable);
            setVariable(refVal_setVariable);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubjectKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectKey);
            setSubjectKey(refVal_setSubjectKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateCreated")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateCreated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateCreated);
            setDateCreated(refVal_setDateCreated);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateModified")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateModified;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateModified);
            setDateModified(refVal_setDateModified);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("queryComments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("queryComments")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<QueryComment>> refVal_setQueryComments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQueryComments);
            setQueryComments(refVal_setQueryComments);
            
        }
    }
    return ok;
}

void Query::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_StudyKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("studyKey")), m_StudyKey));
    }
    if(m_SubjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectId")), m_SubjectId));
    }
    if(m_SubjectOidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectOid")), m_SubjectOid));
    }
    if(m_AnnotationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("annotationType")), m_AnnotationType));
    }
    if(m_AnnotationIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("annotationId")), m_AnnotationId));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("type")), m_Type));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("description")), m_Description));
    }
    if(m_RecordIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("recordId")), m_RecordId));
    }
    if(m_VariableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("variable")), m_Variable));
    }
    if(m_SubjectKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectKey")), m_SubjectKey));
    }
    if(m_DateCreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateCreated")), m_DateCreated));
    }
    if(m_DateModifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateModified")), m_DateModified));
    }
    if(m_QueryCommentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("queryComments")), m_QueryComments));
    }
}

bool Query::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        utility::string_t refVal_setStudyKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))), refVal_setStudyKey );
        setStudyKey(refVal_setStudyKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectId"))))
    {
        int32_t refVal_setSubjectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectId"))), refVal_setSubjectId );
        setSubjectId(refVal_setSubjectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectOid"))))
    {
        utility::string_t refVal_setSubjectOid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectOid"))), refVal_setSubjectOid );
        setSubjectOid(refVal_setSubjectOid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("annotationType"))))
    {
        utility::string_t refVal_setAnnotationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("annotationType"))), refVal_setAnnotationType );
        setAnnotationType(refVal_setAnnotationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("annotationId"))))
    {
        int32_t refVal_setAnnotationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("annotationId"))), refVal_setAnnotationId );
        setAnnotationId(refVal_setAnnotationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("recordId"))))
    {
        int32_t refVal_setRecordId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("recordId"))), refVal_setRecordId );
        setRecordId(refVal_setRecordId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("variable"))))
    {
        utility::string_t refVal_setVariable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("variable"))), refVal_setVariable );
        setVariable(refVal_setVariable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))))
    {
        utility::string_t refVal_setSubjectKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))), refVal_setSubjectKey );
        setSubjectKey(refVal_setSubjectKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        utility::string_t refVal_setDateCreated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))), refVal_setDateCreated );
        setDateCreated(refVal_setDateCreated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        utility::string_t refVal_setDateModified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))), refVal_setDateModified );
        setDateModified(refVal_setDateModified);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("queryComments"))))
    {
        std::vector<std::shared_ptr<QueryComment>> refVal_setQueryComments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("queryComments"))), refVal_setQueryComments );
        setQueryComments(refVal_setQueryComments);
    }
    return ok;
}


utility::string_t Query::getStudyKey() const
{
    return m_StudyKey;
}


void Query::setStudyKey(const utility::string_t& value)
{
    m_StudyKey = value;
    m_StudyKeyIsSet = true;
}

bool Query::studyKeyIsSet() const
{
    return m_StudyKeyIsSet;
}

void Query::unsetStudyKey()
{
    m_StudyKeyIsSet = false;
}
int32_t Query::getSubjectId() const
{
    return m_SubjectId;
}

void Query::setSubjectId(int32_t value)
{
    m_SubjectId = value;
    m_SubjectIdIsSet = true;
}

bool Query::subjectIdIsSet() const
{
    return m_SubjectIdIsSet;
}

void Query::unsetSubjectId()
{
    m_SubjectIdIsSet = false;
}
utility::string_t Query::getSubjectOid() const
{
    return m_SubjectOid;
}


void Query::setSubjectOid(const utility::string_t& value)
{
    m_SubjectOid = value;
    m_SubjectOidIsSet = true;
}

bool Query::subjectOidIsSet() const
{
    return m_SubjectOidIsSet;
}

void Query::unsetSubjectOid()
{
    m_SubjectOidIsSet = false;
}
utility::string_t Query::getAnnotationType() const
{
    return m_AnnotationType;
}


void Query::setAnnotationType(const utility::string_t& value)
{
    m_AnnotationType = value;
    m_AnnotationTypeIsSet = true;
}

bool Query::annotationTypeIsSet() const
{
    return m_AnnotationTypeIsSet;
}

void Query::unsetAnnotationType()
{
    m_AnnotationTypeIsSet = false;
}
int32_t Query::getAnnotationId() const
{
    return m_AnnotationId;
}

void Query::setAnnotationId(int32_t value)
{
    m_AnnotationId = value;
    m_AnnotationIdIsSet = true;
}

bool Query::annotationIdIsSet() const
{
    return m_AnnotationIdIsSet;
}

void Query::unsetAnnotationId()
{
    m_AnnotationIdIsSet = false;
}
utility::string_t Query::getType() const
{
    return m_Type;
}


void Query::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool Query::typeIsSet() const
{
    return m_TypeIsSet;
}

void Query::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t Query::getDescription() const
{
    return m_Description;
}


void Query::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Query::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Query::unsetDescription()
{
    m_DescriptionIsSet = false;
}
int32_t Query::getRecordId() const
{
    return m_RecordId;
}

void Query::setRecordId(int32_t value)
{
    m_RecordId = value;
    m_RecordIdIsSet = true;
}

bool Query::recordIdIsSet() const
{
    return m_RecordIdIsSet;
}

void Query::unsetRecordId()
{
    m_RecordIdIsSet = false;
}
utility::string_t Query::getVariable() const
{
    return m_Variable;
}


void Query::setVariable(const utility::string_t& value)
{
    m_Variable = value;
    m_VariableIsSet = true;
}

bool Query::variableIsSet() const
{
    return m_VariableIsSet;
}

void Query::unsetVariable()
{
    m_VariableIsSet = false;
}
utility::string_t Query::getSubjectKey() const
{
    return m_SubjectKey;
}


void Query::setSubjectKey(const utility::string_t& value)
{
    m_SubjectKey = value;
    m_SubjectKeyIsSet = true;
}

bool Query::subjectKeyIsSet() const
{
    return m_SubjectKeyIsSet;
}

void Query::unsetSubjectKey()
{
    m_SubjectKeyIsSet = false;
}
utility::string_t Query::getDateCreated() const
{
    return m_DateCreated;
}


void Query::setDateCreated(const utility::string_t& value)
{
    m_DateCreated = value;
    m_DateCreatedIsSet = true;
}

bool Query::dateCreatedIsSet() const
{
    return m_DateCreatedIsSet;
}

void Query::unsetDateCreated()
{
    m_DateCreatedIsSet = false;
}
utility::string_t Query::getDateModified() const
{
    return m_DateModified;
}


void Query::setDateModified(const utility::string_t& value)
{
    m_DateModified = value;
    m_DateModifiedIsSet = true;
}

bool Query::dateModifiedIsSet() const
{
    return m_DateModifiedIsSet;
}

void Query::unsetDateModified()
{
    m_DateModifiedIsSet = false;
}
std::vector<std::shared_ptr<QueryComment>> Query::getQueryComments() const
{
    return m_QueryComments;
}


void Query::setQueryComments(const std::vector<std::shared_ptr<QueryComment>>& value)
{
    m_QueryComments = value;
    m_QueryCommentsIsSet = true;
}

bool Query::queryCommentsIsSet() const
{
    return m_QueryCommentsIsSet;
}

void Query::unsetQueryComments()
{
    m_QueryCommentsIsSet = false;
}

}
}
}
}


