/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Sort.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Sort::Sort()
{
    m_Property = utility::conversions::to_string_t("");
    m_PropertyIsSet = false;
    m_DirectionIsSet = false;
}

Sort::~Sort()
{
}

void Sort::validate()
{
    // TODO: implement validation
}

web::json::value Sort::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_PropertyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("property"))] = ModelBase::toJson(m_Property);
    }
    if(m_DirectionIsSet)
    {   
        
        utility::string_t refVal = fromDirectionEnum(m_Direction);
        val[utility::conversions::to_string_t(_XPLATSTR("direction"))] = ModelBase::toJson(refVal);
        
    }

    return val;
}

bool Sort::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("property"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("property")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProperty;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProperty);
            setProperty(refVal_setProperty);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("direction"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("direction")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDirection;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDirection);
            
            setDirection(toDirectionEnum(refVal_setDirection));
            
        }
    }
    return ok;
}

void Sort::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_PropertyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("property")), m_Property));
    }
    if(m_DirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("direction")), fromDirectionEnum(m_Direction)));
    }
}

bool Sort::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("property"))))
    {
        utility::string_t refVal_setProperty;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("property"))), refVal_setProperty );
        setProperty(refVal_setProperty);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("direction"))))
    {
        utility::string_t refVal_setDirection;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("direction"))), refVal_setDirection );
        setDirection(toDirectionEnum(refVal_setDirection));
    }
    return ok;
}

Sort::DirectionEnum Sort::toDirectionEnum(const utility::string_t& value) const
{
    
    if (value == utility::conversions::to_string_t("ASC")) {
        return DirectionEnum::ASC;
    }
    
    if (value == utility::conversions::to_string_t("DESC")) {
        return DirectionEnum::DESC;
    }
    
    throw std::invalid_argument("Invalid value for conversion to DirectionEnum");
}


const utility::string_t Sort::fromDirectionEnum(const DirectionEnum value) const
{
    switch(value)
    {
        
        case DirectionEnum::ASC: return utility::conversions::to_string_t("ASC");
        
        case DirectionEnum::DESC: return utility::conversions::to_string_t("DESC");
        
    }
}


utility::string_t Sort::getProperty() const
{
    return m_Property;
}


void Sort::setProperty(const utility::string_t& value)
{
    m_Property = value;
    m_PropertyIsSet = true;
}

bool Sort::propertyIsSet() const
{
    return m_PropertyIsSet;
}

void Sort::unsetProperty()
{
    m_PropertyIsSet = false;
}
Sort::DirectionEnum Sort::getDirection() const
{
    return m_Direction;
}


void Sort::setDirection(const DirectionEnum value)
{
    m_Direction = value;
    m_DirectionIsSet = true;
}

bool Sort::directionIsSet() const
{
    return m_DirectionIsSet;
}

void Sort::unsetDirection()
{
    m_DirectionIsSet = false;
}

}
}
}
}


