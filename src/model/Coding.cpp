/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Coding.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Coding::Coding()
{
    m_StudyKey = utility::conversions::to_string_t("");
    m_StudyKeyIsSet = false;
    m_SiteName = utility::conversions::to_string_t("");
    m_SiteNameIsSet = false;
    m_SiteId = 0;
    m_SiteIdIsSet = false;
    m_SubjectId = 0;
    m_SubjectIdIsSet = false;
    m_SubjectKey = utility::conversions::to_string_t("");
    m_SubjectKeyIsSet = false;
    m_FormId = 0;
    m_FormIdIsSet = false;
    m_FormName = utility::conversions::to_string_t("");
    m_FormNameIsSet = false;
    m_FormKey = utility::conversions::to_string_t("");
    m_FormKeyIsSet = false;
    m_Revision = 0;
    m_RevisionIsSet = false;
    m_RecordId = 0;
    m_RecordIdIsSet = false;
    m_Variable = utility::conversions::to_string_t("");
    m_VariableIsSet = false;
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
    m_CodingId = 0;
    m_CodingIdIsSet = false;
    m_Code = utility::conversions::to_string_t("");
    m_CodeIsSet = false;
    m_CodedBy = utility::conversions::to_string_t("");
    m_CodedByIsSet = false;
    m_Reason = utility::conversions::to_string_t("");
    m_ReasonIsSet = false;
    m_DictionaryName = utility::conversions::to_string_t("");
    m_DictionaryNameIsSet = false;
    m_DictionaryVersion = utility::conversions::to_string_t("");
    m_DictionaryVersionIsSet = false;
    m_DateCoded = utility::conversions::to_string_t("");
    m_DateCodedIsSet = false;
}

Coding::~Coding()
{
}

void Coding::validate()
{
    // TODO: implement validation
}

web::json::value Coding::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_StudyKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("studyKey"))] = ModelBase::toJson(m_StudyKey);
    }
    if(m_SiteNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("siteName"))] = ModelBase::toJson(m_SiteName);
    }
    if(m_SiteIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("siteId"))] = ModelBase::toJson(m_SiteId);
    }
    if(m_SubjectIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectId"))] = ModelBase::toJson(m_SubjectId);
    }
    if(m_SubjectKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectKey"))] = ModelBase::toJson(m_SubjectKey);
    }
    if(m_FormIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("formId"))] = ModelBase::toJson(m_FormId);
    }
    if(m_FormNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("formName"))] = ModelBase::toJson(m_FormName);
    }
    if(m_FormKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("formKey"))] = ModelBase::toJson(m_FormKey);
    }
    if(m_RevisionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("revision"))] = ModelBase::toJson(m_Revision);
    }
    if(m_RecordIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("recordId"))] = ModelBase::toJson(m_RecordId);
    }
    if(m_VariableIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("variable"))] = ModelBase::toJson(m_Variable);
    }
    if(m_ValueIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("value"))] = ModelBase::toJson(m_Value);
    }
    if(m_CodingIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("codingId"))] = ModelBase::toJson(m_CodingId);
    }
    if(m_CodeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("code"))] = ModelBase::toJson(m_Code);
    }
    if(m_CodedByIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("codedBy"))] = ModelBase::toJson(m_CodedBy);
    }
    if(m_ReasonIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("reason"))] = ModelBase::toJson(m_Reason);
    }
    if(m_DictionaryNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dictionaryName"))] = ModelBase::toJson(m_DictionaryName);
    }
    if(m_DictionaryVersionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dictionaryVersion"))] = ModelBase::toJson(m_DictionaryVersion);
    }
    if(m_DateCodedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateCoded"))] = ModelBase::toJson(m_DateCoded);
    }

    return val;
}

bool Coding::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("studyKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStudyKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStudyKey);
            setStudyKey(refVal_setStudyKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("siteName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("siteName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSiteName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSiteName);
            setSiteName(refVal_setSiteName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("siteId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("siteId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSiteId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSiteId);
            setSiteId(refVal_setSiteId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSubjectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectId);
            setSubjectId(refVal_setSubjectId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubjectKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectKey);
            setSubjectKey(refVal_setSubjectKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("formId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("formId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFormId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormId);
            setFormId(refVal_setFormId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("formName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("formName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFormName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormName);
            setFormName(refVal_setFormName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("formKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("formKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFormKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormKey);
            setFormKey(refVal_setFormKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("revision"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("revision")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRevision;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRevision);
            setRevision(refVal_setRevision);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("recordId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("recordId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRecordId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordId);
            setRecordId(refVal_setRecordId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("variable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("variable")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVariable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariable);
            setVariable(refVal_setVariable);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("value")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("codingId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("codingId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCodingId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCodingId);
            setCodingId(refVal_setCodingId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCode);
            setCode(refVal_setCode);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("codedBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("codedBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCodedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCodedBy);
            setCodedBy(refVal_setCodedBy);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("reason"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("reason")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReason;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReason);
            setReason(refVal_setReason);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dictionaryName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dictionaryName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDictionaryName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDictionaryName);
            setDictionaryName(refVal_setDictionaryName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dictionaryVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dictionaryVersion")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDictionaryVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDictionaryVersion);
            setDictionaryVersion(refVal_setDictionaryVersion);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateCoded"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateCoded")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateCoded;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateCoded);
            setDateCoded(refVal_setDateCoded);
            
        }
    }
    return ok;
}

void Coding::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_StudyKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("studyKey")), m_StudyKey));
    }
    if(m_SiteNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("siteName")), m_SiteName));
    }
    if(m_SiteIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("siteId")), m_SiteId));
    }
    if(m_SubjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectId")), m_SubjectId));
    }
    if(m_SubjectKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectKey")), m_SubjectKey));
    }
    if(m_FormIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("formId")), m_FormId));
    }
    if(m_FormNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("formName")), m_FormName));
    }
    if(m_FormKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("formKey")), m_FormKey));
    }
    if(m_RevisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("revision")), m_Revision));
    }
    if(m_RecordIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("recordId")), m_RecordId));
    }
    if(m_VariableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("variable")), m_Variable));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("value")), m_Value));
    }
    if(m_CodingIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("codingId")), m_CodingId));
    }
    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("code")), m_Code));
    }
    if(m_CodedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("codedBy")), m_CodedBy));
    }
    if(m_ReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("reason")), m_Reason));
    }
    if(m_DictionaryNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dictionaryName")), m_DictionaryName));
    }
    if(m_DictionaryVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dictionaryVersion")), m_DictionaryVersion));
    }
    if(m_DateCodedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateCoded")), m_DateCoded));
    }
}

bool Coding::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        utility::string_t refVal_setStudyKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))), refVal_setStudyKey );
        setStudyKey(refVal_setStudyKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("siteName"))))
    {
        utility::string_t refVal_setSiteName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("siteName"))), refVal_setSiteName );
        setSiteName(refVal_setSiteName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("siteId"))))
    {
        int32_t refVal_setSiteId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("siteId"))), refVal_setSiteId );
        setSiteId(refVal_setSiteId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectId"))))
    {
        int32_t refVal_setSubjectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectId"))), refVal_setSubjectId );
        setSubjectId(refVal_setSubjectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))))
    {
        utility::string_t refVal_setSubjectKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))), refVal_setSubjectKey );
        setSubjectKey(refVal_setSubjectKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("formId"))))
    {
        int32_t refVal_setFormId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("formId"))), refVal_setFormId );
        setFormId(refVal_setFormId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("formName"))))
    {
        utility::string_t refVal_setFormName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("formName"))), refVal_setFormName );
        setFormName(refVal_setFormName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("formKey"))))
    {
        utility::string_t refVal_setFormKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("formKey"))), refVal_setFormKey );
        setFormKey(refVal_setFormKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("revision"))))
    {
        int32_t refVal_setRevision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("revision"))), refVal_setRevision );
        setRevision(refVal_setRevision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("recordId"))))
    {
        int32_t refVal_setRecordId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("recordId"))), refVal_setRecordId );
        setRecordId(refVal_setRecordId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("variable"))))
    {
        utility::string_t refVal_setVariable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("variable"))), refVal_setVariable );
        setVariable(refVal_setVariable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("value"))))
    {
        utility::string_t refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("codingId"))))
    {
        int32_t refVal_setCodingId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("codingId"))), refVal_setCodingId );
        setCodingId(refVal_setCodingId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("code"))))
    {
        utility::string_t refVal_setCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("code"))), refVal_setCode );
        setCode(refVal_setCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("codedBy"))))
    {
        utility::string_t refVal_setCodedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("codedBy"))), refVal_setCodedBy );
        setCodedBy(refVal_setCodedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("reason"))))
    {
        utility::string_t refVal_setReason;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("reason"))), refVal_setReason );
        setReason(refVal_setReason);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dictionaryName"))))
    {
        utility::string_t refVal_setDictionaryName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dictionaryName"))), refVal_setDictionaryName );
        setDictionaryName(refVal_setDictionaryName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dictionaryVersion"))))
    {
        utility::string_t refVal_setDictionaryVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dictionaryVersion"))), refVal_setDictionaryVersion );
        setDictionaryVersion(refVal_setDictionaryVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateCoded"))))
    {
        utility::string_t refVal_setDateCoded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateCoded"))), refVal_setDateCoded );
        setDateCoded(refVal_setDateCoded);
    }
    return ok;
}


utility::string_t Coding::getStudyKey() const
{
    return m_StudyKey;
}


void Coding::setStudyKey(const utility::string_t& value)
{
    m_StudyKey = value;
    m_StudyKeyIsSet = true;
}

bool Coding::studyKeyIsSet() const
{
    return m_StudyKeyIsSet;
}

void Coding::unsetStudyKey()
{
    m_StudyKeyIsSet = false;
}
utility::string_t Coding::getSiteName() const
{
    return m_SiteName;
}


void Coding::setSiteName(const utility::string_t& value)
{
    m_SiteName = value;
    m_SiteNameIsSet = true;
}

bool Coding::siteNameIsSet() const
{
    return m_SiteNameIsSet;
}

void Coding::unsetSiteName()
{
    m_SiteNameIsSet = false;
}
int32_t Coding::getSiteId() const
{
    return m_SiteId;
}

void Coding::setSiteId(int32_t value)
{
    m_SiteId = value;
    m_SiteIdIsSet = true;
}

bool Coding::siteIdIsSet() const
{
    return m_SiteIdIsSet;
}

void Coding::unsetSiteId()
{
    m_SiteIdIsSet = false;
}
int32_t Coding::getSubjectId() const
{
    return m_SubjectId;
}

void Coding::setSubjectId(int32_t value)
{
    m_SubjectId = value;
    m_SubjectIdIsSet = true;
}

bool Coding::subjectIdIsSet() const
{
    return m_SubjectIdIsSet;
}

void Coding::unsetSubjectId()
{
    m_SubjectIdIsSet = false;
}
utility::string_t Coding::getSubjectKey() const
{
    return m_SubjectKey;
}


void Coding::setSubjectKey(const utility::string_t& value)
{
    m_SubjectKey = value;
    m_SubjectKeyIsSet = true;
}

bool Coding::subjectKeyIsSet() const
{
    return m_SubjectKeyIsSet;
}

void Coding::unsetSubjectKey()
{
    m_SubjectKeyIsSet = false;
}
int32_t Coding::getFormId() const
{
    return m_FormId;
}

void Coding::setFormId(int32_t value)
{
    m_FormId = value;
    m_FormIdIsSet = true;
}

bool Coding::formIdIsSet() const
{
    return m_FormIdIsSet;
}

void Coding::unsetFormId()
{
    m_FormIdIsSet = false;
}
utility::string_t Coding::getFormName() const
{
    return m_FormName;
}


void Coding::setFormName(const utility::string_t& value)
{
    m_FormName = value;
    m_FormNameIsSet = true;
}

bool Coding::formNameIsSet() const
{
    return m_FormNameIsSet;
}

void Coding::unsetFormName()
{
    m_FormNameIsSet = false;
}
utility::string_t Coding::getFormKey() const
{
    return m_FormKey;
}


void Coding::setFormKey(const utility::string_t& value)
{
    m_FormKey = value;
    m_FormKeyIsSet = true;
}

bool Coding::formKeyIsSet() const
{
    return m_FormKeyIsSet;
}

void Coding::unsetFormKey()
{
    m_FormKeyIsSet = false;
}
int32_t Coding::getRevision() const
{
    return m_Revision;
}

void Coding::setRevision(int32_t value)
{
    m_Revision = value;
    m_RevisionIsSet = true;
}

bool Coding::revisionIsSet() const
{
    return m_RevisionIsSet;
}

void Coding::unsetRevision()
{
    m_RevisionIsSet = false;
}
int32_t Coding::getRecordId() const
{
    return m_RecordId;
}

void Coding::setRecordId(int32_t value)
{
    m_RecordId = value;
    m_RecordIdIsSet = true;
}

bool Coding::recordIdIsSet() const
{
    return m_RecordIdIsSet;
}

void Coding::unsetRecordId()
{
    m_RecordIdIsSet = false;
}
utility::string_t Coding::getVariable() const
{
    return m_Variable;
}


void Coding::setVariable(const utility::string_t& value)
{
    m_Variable = value;
    m_VariableIsSet = true;
}

bool Coding::variableIsSet() const
{
    return m_VariableIsSet;
}

void Coding::unsetVariable()
{
    m_VariableIsSet = false;
}
utility::string_t Coding::getValue() const
{
    return m_Value;
}


void Coding::setValue(const utility::string_t& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool Coding::valueIsSet() const
{
    return m_ValueIsSet;
}

void Coding::unsetValue()
{
    m_ValueIsSet = false;
}
int32_t Coding::getCodingId() const
{
    return m_CodingId;
}

void Coding::setCodingId(int32_t value)
{
    m_CodingId = value;
    m_CodingIdIsSet = true;
}

bool Coding::codingIdIsSet() const
{
    return m_CodingIdIsSet;
}

void Coding::unsetCodingId()
{
    m_CodingIdIsSet = false;
}
utility::string_t Coding::getCode() const
{
    return m_Code;
}


void Coding::setCode(const utility::string_t& value)
{
    m_Code = value;
    m_CodeIsSet = true;
}

bool Coding::codeIsSet() const
{
    return m_CodeIsSet;
}

void Coding::unsetCode()
{
    m_CodeIsSet = false;
}
utility::string_t Coding::getCodedBy() const
{
    return m_CodedBy;
}


void Coding::setCodedBy(const utility::string_t& value)
{
    m_CodedBy = value;
    m_CodedByIsSet = true;
}

bool Coding::codedByIsSet() const
{
    return m_CodedByIsSet;
}

void Coding::unsetCodedBy()
{
    m_CodedByIsSet = false;
}
utility::string_t Coding::getReason() const
{
    return m_Reason;
}


void Coding::setReason(const utility::string_t& value)
{
    m_Reason = value;
    m_ReasonIsSet = true;
}

bool Coding::reasonIsSet() const
{
    return m_ReasonIsSet;
}

void Coding::unsetReason()
{
    m_ReasonIsSet = false;
}
utility::string_t Coding::getDictionaryName() const
{
    return m_DictionaryName;
}


void Coding::setDictionaryName(const utility::string_t& value)
{
    m_DictionaryName = value;
    m_DictionaryNameIsSet = true;
}

bool Coding::dictionaryNameIsSet() const
{
    return m_DictionaryNameIsSet;
}

void Coding::unsetDictionaryName()
{
    m_DictionaryNameIsSet = false;
}
utility::string_t Coding::getDictionaryVersion() const
{
    return m_DictionaryVersion;
}


void Coding::setDictionaryVersion(const utility::string_t& value)
{
    m_DictionaryVersion = value;
    m_DictionaryVersionIsSet = true;
}

bool Coding::dictionaryVersionIsSet() const
{
    return m_DictionaryVersionIsSet;
}

void Coding::unsetDictionaryVersion()
{
    m_DictionaryVersionIsSet = false;
}
utility::string_t Coding::getDateCoded() const
{
    return m_DateCoded;
}


void Coding::setDateCoded(const utility::string_t& value)
{
    m_DateCoded = value;
    m_DateCodedIsSet = true;
}

bool Coding::dateCodedIsSet() const
{
    return m_DateCodedIsSet;
}

void Coding::unsetDateCoded()
{
    m_DateCodedIsSet = false;
}

}
}
}
}


