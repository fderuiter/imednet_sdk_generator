/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Interval.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Interval::Interval()
{
    m_StudyKey = utility::conversions::to_string_t("");
    m_StudyKeyIsSet = false;
    m_IntervalId = 0;
    m_IntervalIdIsSet = false;
    m_IntervalName = utility::conversions::to_string_t("");
    m_IntervalNameIsSet = false;
    m_IntervalDescription = utility::conversions::to_string_t("");
    m_IntervalDescriptionIsSet = false;
    m_IntervalSequence = 0;
    m_IntervalSequenceIsSet = false;
    m_IntervalGroupId = 0;
    m_IntervalGroupIdIsSet = false;
    m_IntervalGroupName = utility::conversions::to_string_t("");
    m_IntervalGroupNameIsSet = false;
    m_Timeline = utility::conversions::to_string_t("");
    m_TimelineIsSet = false;
    m_DefinedUsingInterval = utility::conversions::to_string_t("");
    m_DefinedUsingIntervalIsSet = false;
    m_WindowCalculationForm = utility::conversions::to_string_t("");
    m_WindowCalculationFormIsSet = false;
    m_WindowCalculationDate = utility::conversions::to_string_t("");
    m_WindowCalculationDateIsSet = false;
    m_ActualDateForm = utility::conversions::to_string_t("");
    m_ActualDateFormIsSet = false;
    m_ActualDate = utility::conversions::to_string_t("");
    m_ActualDateIsSet = false;
    m_DueDateWillBeIn = 0;
    m_DueDateWillBeInIsSet = false;
    m_NegativeSlack = 0;
    m_NegativeSlackIsSet = false;
    m_PositiveSlack = 0;
    m_PositiveSlackIsSet = false;
    m_EproGracePeriod = 0;
    m_EproGracePeriodIsSet = false;
    m_FormsIsSet = false;
    m_Disabled = false;
    m_DisabledIsSet = false;
    m_DateCreated = utility::conversions::to_string_t("");
    m_DateCreatedIsSet = false;
    m_DateModified = utility::conversions::to_string_t("");
    m_DateModifiedIsSet = false;
}

Interval::~Interval()
{
}

void Interval::validate()
{
    // TODO: implement validation
}

web::json::value Interval::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_StudyKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("studyKey"))] = ModelBase::toJson(m_StudyKey);
    }
    if(m_IntervalIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("intervalId"))] = ModelBase::toJson(m_IntervalId);
    }
    if(m_IntervalNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("intervalName"))] = ModelBase::toJson(m_IntervalName);
    }
    if(m_IntervalDescriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("intervalDescription"))] = ModelBase::toJson(m_IntervalDescription);
    }
    if(m_IntervalSequenceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("intervalSequence"))] = ModelBase::toJson(m_IntervalSequence);
    }
    if(m_IntervalGroupIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("intervalGroupId"))] = ModelBase::toJson(m_IntervalGroupId);
    }
    if(m_IntervalGroupNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("intervalGroupName"))] = ModelBase::toJson(m_IntervalGroupName);
    }
    if(m_TimelineIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timeline"))] = ModelBase::toJson(m_Timeline);
    }
    if(m_DefinedUsingIntervalIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("definedUsingInterval"))] = ModelBase::toJson(m_DefinedUsingInterval);
    }
    if(m_WindowCalculationFormIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("windowCalculationForm"))] = ModelBase::toJson(m_WindowCalculationForm);
    }
    if(m_WindowCalculationDateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("windowCalculationDate"))] = ModelBase::toJson(m_WindowCalculationDate);
    }
    if(m_ActualDateFormIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("actualDateForm"))] = ModelBase::toJson(m_ActualDateForm);
    }
    if(m_ActualDateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("actualDate"))] = ModelBase::toJson(m_ActualDate);
    }
    if(m_DueDateWillBeInIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dueDateWillBeIn"))] = ModelBase::toJson(m_DueDateWillBeIn);
    }
    if(m_NegativeSlackIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("negativeSlack"))] = ModelBase::toJson(m_NegativeSlack);
    }
    if(m_PositiveSlackIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("positiveSlack"))] = ModelBase::toJson(m_PositiveSlack);
    }
    if(m_EproGracePeriodIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("eproGracePeriod"))] = ModelBase::toJson(m_EproGracePeriod);
    }
    if(m_FormsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("forms"))] = ModelBase::toJson(m_Forms);
    }
    if(m_DisabledIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("disabled"))] = ModelBase::toJson(m_Disabled);
    }
    if(m_DateCreatedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateCreated"))] = ModelBase::toJson(m_DateCreated);
    }
    if(m_DateModifiedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateModified"))] = ModelBase::toJson(m_DateModified);
    }

    return val;
}

bool Interval::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("studyKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStudyKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStudyKey);
            setStudyKey(refVal_setStudyKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("intervalId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("intervalId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setIntervalId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIntervalId);
            setIntervalId(refVal_setIntervalId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("intervalName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("intervalName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIntervalName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIntervalName);
            setIntervalName(refVal_setIntervalName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("intervalDescription"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("intervalDescription")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIntervalDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIntervalDescription);
            setIntervalDescription(refVal_setIntervalDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("intervalSequence"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("intervalSequence")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setIntervalSequence;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIntervalSequence);
            setIntervalSequence(refVal_setIntervalSequence);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("intervalGroupId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("intervalGroupId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setIntervalGroupId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIntervalGroupId);
            setIntervalGroupId(refVal_setIntervalGroupId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("intervalGroupName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("intervalGroupName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIntervalGroupName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIntervalGroupName);
            setIntervalGroupName(refVal_setIntervalGroupName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timeline"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timeline")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTimeline;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeline);
            setTimeline(refVal_setTimeline);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("definedUsingInterval"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("definedUsingInterval")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDefinedUsingInterval;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDefinedUsingInterval);
            setDefinedUsingInterval(refVal_setDefinedUsingInterval);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("windowCalculationForm"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("windowCalculationForm")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWindowCalculationForm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWindowCalculationForm);
            setWindowCalculationForm(refVal_setWindowCalculationForm);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("windowCalculationDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("windowCalculationDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWindowCalculationDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWindowCalculationDate);
            setWindowCalculationDate(refVal_setWindowCalculationDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("actualDateForm"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("actualDateForm")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setActualDateForm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActualDateForm);
            setActualDateForm(refVal_setActualDateForm);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("actualDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("actualDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setActualDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActualDate);
            setActualDate(refVal_setActualDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dueDateWillBeIn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dueDateWillBeIn")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDueDateWillBeIn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDueDateWillBeIn);
            setDueDateWillBeIn(refVal_setDueDateWillBeIn);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("negativeSlack"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("negativeSlack")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNegativeSlack;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNegativeSlack);
            setNegativeSlack(refVal_setNegativeSlack);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("positiveSlack"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("positiveSlack")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPositiveSlack;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPositiveSlack);
            setPositiveSlack(refVal_setPositiveSlack);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("eproGracePeriod"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("eproGracePeriod")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setEproGracePeriod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEproGracePeriod);
            setEproGracePeriod(refVal_setEproGracePeriod);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("forms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("forms")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Components_schemas_Interval_forms_item>> refVal_setForms;
            ok &= ModelBase::fromJson(fieldValue, refVal_setForms);
            setForms(refVal_setForms);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("disabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("disabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDisabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDisabled);
            setDisabled(refVal_setDisabled);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateCreated")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateCreated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateCreated);
            setDateCreated(refVal_setDateCreated);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateModified")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateModified;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateModified);
            setDateModified(refVal_setDateModified);
            
        }
    }
    return ok;
}

void Interval::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_StudyKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("studyKey")), m_StudyKey));
    }
    if(m_IntervalIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("intervalId")), m_IntervalId));
    }
    if(m_IntervalNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("intervalName")), m_IntervalName));
    }
    if(m_IntervalDescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("intervalDescription")), m_IntervalDescription));
    }
    if(m_IntervalSequenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("intervalSequence")), m_IntervalSequence));
    }
    if(m_IntervalGroupIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("intervalGroupId")), m_IntervalGroupId));
    }
    if(m_IntervalGroupNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("intervalGroupName")), m_IntervalGroupName));
    }
    if(m_TimelineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timeline")), m_Timeline));
    }
    if(m_DefinedUsingIntervalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("definedUsingInterval")), m_DefinedUsingInterval));
    }
    if(m_WindowCalculationFormIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("windowCalculationForm")), m_WindowCalculationForm));
    }
    if(m_WindowCalculationDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("windowCalculationDate")), m_WindowCalculationDate));
    }
    if(m_ActualDateFormIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("actualDateForm")), m_ActualDateForm));
    }
    if(m_ActualDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("actualDate")), m_ActualDate));
    }
    if(m_DueDateWillBeInIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dueDateWillBeIn")), m_DueDateWillBeIn));
    }
    if(m_NegativeSlackIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("negativeSlack")), m_NegativeSlack));
    }
    if(m_PositiveSlackIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("positiveSlack")), m_PositiveSlack));
    }
    if(m_EproGracePeriodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("eproGracePeriod")), m_EproGracePeriod));
    }
    if(m_FormsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("forms")), m_Forms));
    }
    if(m_DisabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("disabled")), m_Disabled));
    }
    if(m_DateCreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateCreated")), m_DateCreated));
    }
    if(m_DateModifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateModified")), m_DateModified));
    }
}

bool Interval::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        utility::string_t refVal_setStudyKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))), refVal_setStudyKey );
        setStudyKey(refVal_setStudyKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("intervalId"))))
    {
        int32_t refVal_setIntervalId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("intervalId"))), refVal_setIntervalId );
        setIntervalId(refVal_setIntervalId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("intervalName"))))
    {
        utility::string_t refVal_setIntervalName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("intervalName"))), refVal_setIntervalName );
        setIntervalName(refVal_setIntervalName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("intervalDescription"))))
    {
        utility::string_t refVal_setIntervalDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("intervalDescription"))), refVal_setIntervalDescription );
        setIntervalDescription(refVal_setIntervalDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("intervalSequence"))))
    {
        int32_t refVal_setIntervalSequence;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("intervalSequence"))), refVal_setIntervalSequence );
        setIntervalSequence(refVal_setIntervalSequence);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("intervalGroupId"))))
    {
        int32_t refVal_setIntervalGroupId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("intervalGroupId"))), refVal_setIntervalGroupId );
        setIntervalGroupId(refVal_setIntervalGroupId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("intervalGroupName"))))
    {
        utility::string_t refVal_setIntervalGroupName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("intervalGroupName"))), refVal_setIntervalGroupName );
        setIntervalGroupName(refVal_setIntervalGroupName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timeline"))))
    {
        utility::string_t refVal_setTimeline;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timeline"))), refVal_setTimeline );
        setTimeline(refVal_setTimeline);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("definedUsingInterval"))))
    {
        utility::string_t refVal_setDefinedUsingInterval;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("definedUsingInterval"))), refVal_setDefinedUsingInterval );
        setDefinedUsingInterval(refVal_setDefinedUsingInterval);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("windowCalculationForm"))))
    {
        utility::string_t refVal_setWindowCalculationForm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("windowCalculationForm"))), refVal_setWindowCalculationForm );
        setWindowCalculationForm(refVal_setWindowCalculationForm);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("windowCalculationDate"))))
    {
        utility::string_t refVal_setWindowCalculationDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("windowCalculationDate"))), refVal_setWindowCalculationDate );
        setWindowCalculationDate(refVal_setWindowCalculationDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("actualDateForm"))))
    {
        utility::string_t refVal_setActualDateForm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("actualDateForm"))), refVal_setActualDateForm );
        setActualDateForm(refVal_setActualDateForm);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("actualDate"))))
    {
        utility::string_t refVal_setActualDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("actualDate"))), refVal_setActualDate );
        setActualDate(refVal_setActualDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dueDateWillBeIn"))))
    {
        int32_t refVal_setDueDateWillBeIn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dueDateWillBeIn"))), refVal_setDueDateWillBeIn );
        setDueDateWillBeIn(refVal_setDueDateWillBeIn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("negativeSlack"))))
    {
        int32_t refVal_setNegativeSlack;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("negativeSlack"))), refVal_setNegativeSlack );
        setNegativeSlack(refVal_setNegativeSlack);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("positiveSlack"))))
    {
        int32_t refVal_setPositiveSlack;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("positiveSlack"))), refVal_setPositiveSlack );
        setPositiveSlack(refVal_setPositiveSlack);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("eproGracePeriod"))))
    {
        int32_t refVal_setEproGracePeriod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("eproGracePeriod"))), refVal_setEproGracePeriod );
        setEproGracePeriod(refVal_setEproGracePeriod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("forms"))))
    {
        std::vector<std::shared_ptr<Components_schemas_Interval_forms_item>> refVal_setForms;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("forms"))), refVal_setForms );
        setForms(refVal_setForms);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("disabled"))))
    {
        bool refVal_setDisabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("disabled"))), refVal_setDisabled );
        setDisabled(refVal_setDisabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        utility::string_t refVal_setDateCreated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))), refVal_setDateCreated );
        setDateCreated(refVal_setDateCreated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        utility::string_t refVal_setDateModified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))), refVal_setDateModified );
        setDateModified(refVal_setDateModified);
    }
    return ok;
}


utility::string_t Interval::getStudyKey() const
{
    return m_StudyKey;
}


void Interval::setStudyKey(const utility::string_t& value)
{
    m_StudyKey = value;
    m_StudyKeyIsSet = true;
}

bool Interval::studyKeyIsSet() const
{
    return m_StudyKeyIsSet;
}

void Interval::unsetStudyKey()
{
    m_StudyKeyIsSet = false;
}
int32_t Interval::getIntervalId() const
{
    return m_IntervalId;
}

void Interval::setIntervalId(int32_t value)
{
    m_IntervalId = value;
    m_IntervalIdIsSet = true;
}

bool Interval::intervalIdIsSet() const
{
    return m_IntervalIdIsSet;
}

void Interval::unsetIntervalId()
{
    m_IntervalIdIsSet = false;
}
utility::string_t Interval::getIntervalName() const
{
    return m_IntervalName;
}


void Interval::setIntervalName(const utility::string_t& value)
{
    m_IntervalName = value;
    m_IntervalNameIsSet = true;
}

bool Interval::intervalNameIsSet() const
{
    return m_IntervalNameIsSet;
}

void Interval::unsetIntervalName()
{
    m_IntervalNameIsSet = false;
}
utility::string_t Interval::getIntervalDescription() const
{
    return m_IntervalDescription;
}


void Interval::setIntervalDescription(const utility::string_t& value)
{
    m_IntervalDescription = value;
    m_IntervalDescriptionIsSet = true;
}

bool Interval::intervalDescriptionIsSet() const
{
    return m_IntervalDescriptionIsSet;
}

void Interval::unsetIntervalDescription()
{
    m_IntervalDescriptionIsSet = false;
}
int32_t Interval::getIntervalSequence() const
{
    return m_IntervalSequence;
}

void Interval::setIntervalSequence(int32_t value)
{
    m_IntervalSequence = value;
    m_IntervalSequenceIsSet = true;
}

bool Interval::intervalSequenceIsSet() const
{
    return m_IntervalSequenceIsSet;
}

void Interval::unsetIntervalSequence()
{
    m_IntervalSequenceIsSet = false;
}
int32_t Interval::getIntervalGroupId() const
{
    return m_IntervalGroupId;
}

void Interval::setIntervalGroupId(int32_t value)
{
    m_IntervalGroupId = value;
    m_IntervalGroupIdIsSet = true;
}

bool Interval::intervalGroupIdIsSet() const
{
    return m_IntervalGroupIdIsSet;
}

void Interval::unsetIntervalGroupId()
{
    m_IntervalGroupIdIsSet = false;
}
utility::string_t Interval::getIntervalGroupName() const
{
    return m_IntervalGroupName;
}


void Interval::setIntervalGroupName(const utility::string_t& value)
{
    m_IntervalGroupName = value;
    m_IntervalGroupNameIsSet = true;
}

bool Interval::intervalGroupNameIsSet() const
{
    return m_IntervalGroupNameIsSet;
}

void Interval::unsetIntervalGroupName()
{
    m_IntervalGroupNameIsSet = false;
}
utility::string_t Interval::getTimeline() const
{
    return m_Timeline;
}


void Interval::setTimeline(const utility::string_t& value)
{
    m_Timeline = value;
    m_TimelineIsSet = true;
}

bool Interval::timelineIsSet() const
{
    return m_TimelineIsSet;
}

void Interval::unsetTimeline()
{
    m_TimelineIsSet = false;
}
utility::string_t Interval::getDefinedUsingInterval() const
{
    return m_DefinedUsingInterval;
}


void Interval::setDefinedUsingInterval(const utility::string_t& value)
{
    m_DefinedUsingInterval = value;
    m_DefinedUsingIntervalIsSet = true;
}

bool Interval::definedUsingIntervalIsSet() const
{
    return m_DefinedUsingIntervalIsSet;
}

void Interval::unsetDefinedUsingInterval()
{
    m_DefinedUsingIntervalIsSet = false;
}
utility::string_t Interval::getWindowCalculationForm() const
{
    return m_WindowCalculationForm;
}


void Interval::setWindowCalculationForm(const utility::string_t& value)
{
    m_WindowCalculationForm = value;
    m_WindowCalculationFormIsSet = true;
}

bool Interval::windowCalculationFormIsSet() const
{
    return m_WindowCalculationFormIsSet;
}

void Interval::unsetWindowCalculationForm()
{
    m_WindowCalculationFormIsSet = false;
}
utility::string_t Interval::getWindowCalculationDate() const
{
    return m_WindowCalculationDate;
}


void Interval::setWindowCalculationDate(const utility::string_t& value)
{
    m_WindowCalculationDate = value;
    m_WindowCalculationDateIsSet = true;
}

bool Interval::windowCalculationDateIsSet() const
{
    return m_WindowCalculationDateIsSet;
}

void Interval::unsetWindowCalculationDate()
{
    m_WindowCalculationDateIsSet = false;
}
utility::string_t Interval::getActualDateForm() const
{
    return m_ActualDateForm;
}


void Interval::setActualDateForm(const utility::string_t& value)
{
    m_ActualDateForm = value;
    m_ActualDateFormIsSet = true;
}

bool Interval::actualDateFormIsSet() const
{
    return m_ActualDateFormIsSet;
}

void Interval::unsetActualDateForm()
{
    m_ActualDateFormIsSet = false;
}
utility::string_t Interval::getActualDate() const
{
    return m_ActualDate;
}


void Interval::setActualDate(const utility::string_t& value)
{
    m_ActualDate = value;
    m_ActualDateIsSet = true;
}

bool Interval::actualDateIsSet() const
{
    return m_ActualDateIsSet;
}

void Interval::unsetActualDate()
{
    m_ActualDateIsSet = false;
}
int32_t Interval::getDueDateWillBeIn() const
{
    return m_DueDateWillBeIn;
}

void Interval::setDueDateWillBeIn(int32_t value)
{
    m_DueDateWillBeIn = value;
    m_DueDateWillBeInIsSet = true;
}

bool Interval::dueDateWillBeInIsSet() const
{
    return m_DueDateWillBeInIsSet;
}

void Interval::unsetDueDateWillBeIn()
{
    m_DueDateWillBeInIsSet = false;
}
int32_t Interval::getNegativeSlack() const
{
    return m_NegativeSlack;
}

void Interval::setNegativeSlack(int32_t value)
{
    m_NegativeSlack = value;
    m_NegativeSlackIsSet = true;
}

bool Interval::negativeSlackIsSet() const
{
    return m_NegativeSlackIsSet;
}

void Interval::unsetNegativeSlack()
{
    m_NegativeSlackIsSet = false;
}
int32_t Interval::getPositiveSlack() const
{
    return m_PositiveSlack;
}

void Interval::setPositiveSlack(int32_t value)
{
    m_PositiveSlack = value;
    m_PositiveSlackIsSet = true;
}

bool Interval::positiveSlackIsSet() const
{
    return m_PositiveSlackIsSet;
}

void Interval::unsetPositiveSlack()
{
    m_PositiveSlackIsSet = false;
}
int32_t Interval::getEproGracePeriod() const
{
    return m_EproGracePeriod;
}

void Interval::setEproGracePeriod(int32_t value)
{
    m_EproGracePeriod = value;
    m_EproGracePeriodIsSet = true;
}

bool Interval::eproGracePeriodIsSet() const
{
    return m_EproGracePeriodIsSet;
}

void Interval::unsetEproGracePeriod()
{
    m_EproGracePeriodIsSet = false;
}
std::vector<std::shared_ptr<Components_schemas_Interval_forms_item>> Interval::getForms() const
{
    return m_Forms;
}


void Interval::setForms(const std::vector<std::shared_ptr<Components_schemas_Interval_forms_item>>& value)
{
    m_Forms = value;
    m_FormsIsSet = true;
}

bool Interval::formsIsSet() const
{
    return m_FormsIsSet;
}

void Interval::unsetForms()
{
    m_FormsIsSet = false;
}
bool Interval::isDisabled() const
{
    return m_Disabled;
}

void Interval::setDisabled(bool value)
{
    m_Disabled = value;
    m_DisabledIsSet = true;
}

bool Interval::disabledIsSet() const
{
    return m_DisabledIsSet;
}

void Interval::unsetDisabled()
{
    m_DisabledIsSet = false;
}
utility::string_t Interval::getDateCreated() const
{
    return m_DateCreated;
}


void Interval::setDateCreated(const utility::string_t& value)
{
    m_DateCreated = value;
    m_DateCreatedIsSet = true;
}

bool Interval::dateCreatedIsSet() const
{
    return m_DateCreatedIsSet;
}

void Interval::unsetDateCreated()
{
    m_DateCreatedIsSet = false;
}
utility::string_t Interval::getDateModified() const
{
    return m_DateModified;
}


void Interval::setDateModified(const utility::string_t& value)
{
    m_DateModified = value;
    m_DateModifiedIsSet = true;
}

bool Interval::dateModifiedIsSet() const
{
    return m_DateModifiedIsSet;
}

void Interval::unsetDateModified()
{
    m_DateModifiedIsSet = false;
}

}
}
}
}


