/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Variable.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Variable::Variable()
{
    m_StudyKey = utility::conversions::to_string_t("");
    m_StudyKeyIsSet = false;
    m_VariableId = 0;
    m_VariableIdIsSet = false;
    m_VariableTypeIsSet = false;
    m_VariableName = utility::conversions::to_string_t("");
    m_VariableNameIsSet = false;
    m_Sequence = 0;
    m_SequenceIsSet = false;
    m_Revision = 0;
    m_RevisionIsSet = false;
    m_Disabled = false;
    m_DisabledIsSet = false;
    m_DateCreated = utility::conversions::to_string_t("");
    m_DateCreatedIsSet = false;
    m_DateModified = utility::conversions::to_string_t("");
    m_DateModifiedIsSet = false;
    m_FormId = 0;
    m_FormIdIsSet = false;
    m_VariableOid = utility::conversions::to_string_t("");
    m_VariableOidIsSet = false;
    m_Deleted = false;
    m_DeletedIsSet = false;
    m_FormKey = utility::conversions::to_string_t("");
    m_FormKeyIsSet = false;
    m_FormName = utility::conversions::to_string_t("");
    m_FormNameIsSet = false;
    m_Label = utility::conversions::to_string_t("");
    m_LabelIsSet = false;
    m_Blinded = false;
    m_BlindedIsSet = false;
}

Variable::~Variable()
{
}

void Variable::validate()
{
    // TODO: implement validation
}

web::json::value Variable::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_StudyKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("studyKey"))] = ModelBase::toJson(m_StudyKey);
    }
    if(m_VariableIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("variableId"))] = ModelBase::toJson(m_VariableId);
    }
    if(m_VariableTypeIsSet)
    {   
        
        utility::string_t refVal = fromVariableTypeEnum(m_VariableType);
        val[utility::conversions::to_string_t(_XPLATSTR("variableType"))] = ModelBase::toJson(refVal);
        
    }
    if(m_VariableNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("variableName"))] = ModelBase::toJson(m_VariableName);
    }
    if(m_SequenceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("sequence"))] = ModelBase::toJson(m_Sequence);
    }
    if(m_RevisionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("revision"))] = ModelBase::toJson(m_Revision);
    }
    if(m_DisabledIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("disabled"))] = ModelBase::toJson(m_Disabled);
    }
    if(m_DateCreatedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateCreated"))] = ModelBase::toJson(m_DateCreated);
    }
    if(m_DateModifiedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateModified"))] = ModelBase::toJson(m_DateModified);
    }
    if(m_FormIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("formId"))] = ModelBase::toJson(m_FormId);
    }
    if(m_VariableOidIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("variableOid"))] = ModelBase::toJson(m_VariableOid);
    }
    if(m_DeletedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("deleted"))] = ModelBase::toJson(m_Deleted);
    }
    if(m_FormKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("formKey"))] = ModelBase::toJson(m_FormKey);
    }
    if(m_FormNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("formName"))] = ModelBase::toJson(m_FormName);
    }
    if(m_LabelIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("label"))] = ModelBase::toJson(m_Label);
    }
    if(m_BlindedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("blinded"))] = ModelBase::toJson(m_Blinded);
    }

    return val;
}

bool Variable::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("studyKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStudyKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStudyKey);
            setStudyKey(refVal_setStudyKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("variableId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("variableId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setVariableId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariableId);
            setVariableId(refVal_setVariableId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("variableType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("variableType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVariableType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariableType);
            
            setVariableType(toVariableTypeEnum(refVal_setVariableType));
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("variableName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("variableName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVariableName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariableName);
            setVariableName(refVal_setVariableName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("sequence"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("sequence")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSequence;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSequence);
            setSequence(refVal_setSequence);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("revision"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("revision")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRevision;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRevision);
            setRevision(refVal_setRevision);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("disabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("disabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDisabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDisabled);
            setDisabled(refVal_setDisabled);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateCreated")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateCreated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateCreated);
            setDateCreated(refVal_setDateCreated);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateModified")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateModified;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateModified);
            setDateModified(refVal_setDateModified);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("formId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("formId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFormId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormId);
            setFormId(refVal_setFormId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("variableOid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("variableOid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVariableOid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVariableOid);
            setVariableOid(refVal_setVariableOid);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("deleted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("deleted")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDeleted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeleted);
            setDeleted(refVal_setDeleted);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("formKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("formKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFormKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormKey);
            setFormKey(refVal_setFormKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("formName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("formName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFormName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormName);
            setFormName(refVal_setFormName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLabel);
            setLabel(refVal_setLabel);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("blinded"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("blinded")));
        if(!fieldValue.is_null())
        {
            bool refVal_setBlinded;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlinded);
            setBlinded(refVal_setBlinded);
            
        }
    }
    return ok;
}

void Variable::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_StudyKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("studyKey")), m_StudyKey));
    }
    if(m_VariableIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("variableId")), m_VariableId));
    }
    if(m_VariableTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("variableType")), fromVariableTypeEnum(m_VariableType)));
    }
    if(m_VariableNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("variableName")), m_VariableName));
    }
    if(m_SequenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("sequence")), m_Sequence));
    }
    if(m_RevisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("revision")), m_Revision));
    }
    if(m_DisabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("disabled")), m_Disabled));
    }
    if(m_DateCreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateCreated")), m_DateCreated));
    }
    if(m_DateModifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateModified")), m_DateModified));
    }
    if(m_FormIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("formId")), m_FormId));
    }
    if(m_VariableOidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("variableOid")), m_VariableOid));
    }
    if(m_DeletedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("deleted")), m_Deleted));
    }
    if(m_FormKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("formKey")), m_FormKey));
    }
    if(m_FormNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("formName")), m_FormName));
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("label")), m_Label));
    }
    if(m_BlindedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("blinded")), m_Blinded));
    }
}

bool Variable::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        utility::string_t refVal_setStudyKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))), refVal_setStudyKey );
        setStudyKey(refVal_setStudyKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("variableId"))))
    {
        int32_t refVal_setVariableId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("variableId"))), refVal_setVariableId );
        setVariableId(refVal_setVariableId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("variableType"))))
    {
        utility::string_t refVal_setVariableType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("variableType"))), refVal_setVariableType );
        setVariableType(toVariableTypeEnum(refVal_setVariableType));
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("variableName"))))
    {
        utility::string_t refVal_setVariableName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("variableName"))), refVal_setVariableName );
        setVariableName(refVal_setVariableName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("sequence"))))
    {
        int32_t refVal_setSequence;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("sequence"))), refVal_setSequence );
        setSequence(refVal_setSequence);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("revision"))))
    {
        int32_t refVal_setRevision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("revision"))), refVal_setRevision );
        setRevision(refVal_setRevision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("disabled"))))
    {
        bool refVal_setDisabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("disabled"))), refVal_setDisabled );
        setDisabled(refVal_setDisabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        utility::string_t refVal_setDateCreated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))), refVal_setDateCreated );
        setDateCreated(refVal_setDateCreated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        utility::string_t refVal_setDateModified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))), refVal_setDateModified );
        setDateModified(refVal_setDateModified);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("formId"))))
    {
        int32_t refVal_setFormId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("formId"))), refVal_setFormId );
        setFormId(refVal_setFormId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("variableOid"))))
    {
        utility::string_t refVal_setVariableOid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("variableOid"))), refVal_setVariableOid );
        setVariableOid(refVal_setVariableOid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("deleted"))))
    {
        bool refVal_setDeleted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("deleted"))), refVal_setDeleted );
        setDeleted(refVal_setDeleted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("formKey"))))
    {
        utility::string_t refVal_setFormKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("formKey"))), refVal_setFormKey );
        setFormKey(refVal_setFormKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("formName"))))
    {
        utility::string_t refVal_setFormName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("formName"))), refVal_setFormName );
        setFormName(refVal_setFormName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("label"))))
    {
        utility::string_t refVal_setLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("label"))), refVal_setLabel );
        setLabel(refVal_setLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("blinded"))))
    {
        bool refVal_setBlinded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("blinded"))), refVal_setBlinded );
        setBlinded(refVal_setBlinded);
    }
    return ok;
}

Variable::VariableTypeEnum Variable::toVariableTypeEnum(const utility::string_t& value) const
{
    
    if (value == utility::conversions::to_string_t("TEXT")) {
        return VariableTypeEnum::TEXT;
    }
    
    if (value == utility::conversions::to_string_t("TEXTAREA")) {
        return VariableTypeEnum::TEXTAREA;
    }
    
    if (value == utility::conversions::to_string_t("RADIO")) {
        return VariableTypeEnum::RADIO;
    }
    
    if (value == utility::conversions::to_string_t("CHECKBOX")) {
        return VariableTypeEnum::CHECKBOX;
    }
    
    if (value == utility::conversions::to_string_t("DROPDOWN")) {
        return VariableTypeEnum::DROPDOWN;
    }
    
    if (value == utility::conversions::to_string_t("DATE")) {
        return VariableTypeEnum::DATE;
    }
    
    if (value == utility::conversions::to_string_t("NUMBER")) {
        return VariableTypeEnum::NUMBER;
    }
    
    throw std::invalid_argument("Invalid value for conversion to VariableTypeEnum");
}


const utility::string_t Variable::fromVariableTypeEnum(const VariableTypeEnum value) const
{
    switch(value)
    {
        
        case VariableTypeEnum::TEXT: return utility::conversions::to_string_t("TEXT");
        
        case VariableTypeEnum::TEXTAREA: return utility::conversions::to_string_t("TEXTAREA");
        
        case VariableTypeEnum::RADIO: return utility::conversions::to_string_t("RADIO");
        
        case VariableTypeEnum::CHECKBOX: return utility::conversions::to_string_t("CHECKBOX");
        
        case VariableTypeEnum::DROPDOWN: return utility::conversions::to_string_t("DROPDOWN");
        
        case VariableTypeEnum::DATE: return utility::conversions::to_string_t("DATE");
        
        case VariableTypeEnum::NUMBER: return utility::conversions::to_string_t("NUMBER");
        
    }
}


utility::string_t Variable::getStudyKey() const
{
    return m_StudyKey;
}


void Variable::setStudyKey(const utility::string_t& value)
{
    m_StudyKey = value;
    m_StudyKeyIsSet = true;
}

bool Variable::studyKeyIsSet() const
{
    return m_StudyKeyIsSet;
}

void Variable::unsetStudyKey()
{
    m_StudyKeyIsSet = false;
}
int32_t Variable::getVariableId() const
{
    return m_VariableId;
}

void Variable::setVariableId(int32_t value)
{
    m_VariableId = value;
    m_VariableIdIsSet = true;
}

bool Variable::variableIdIsSet() const
{
    return m_VariableIdIsSet;
}

void Variable::unsetVariableId()
{
    m_VariableIdIsSet = false;
}
Variable::VariableTypeEnum Variable::getVariableType() const
{
    return m_VariableType;
}


void Variable::setVariableType(const VariableTypeEnum value)
{
    m_VariableType = value;
    m_VariableTypeIsSet = true;
}

bool Variable::variableTypeIsSet() const
{
    return m_VariableTypeIsSet;
}

void Variable::unsetVariableType()
{
    m_VariableTypeIsSet = false;
}
utility::string_t Variable::getVariableName() const
{
    return m_VariableName;
}


void Variable::setVariableName(const utility::string_t& value)
{
    m_VariableName = value;
    m_VariableNameIsSet = true;
}

bool Variable::variableNameIsSet() const
{
    return m_VariableNameIsSet;
}

void Variable::unsetVariableName()
{
    m_VariableNameIsSet = false;
}
int32_t Variable::getSequence() const
{
    return m_Sequence;
}

void Variable::setSequence(int32_t value)
{
    m_Sequence = value;
    m_SequenceIsSet = true;
}

bool Variable::sequenceIsSet() const
{
    return m_SequenceIsSet;
}

void Variable::unsetSequence()
{
    m_SequenceIsSet = false;
}
int32_t Variable::getRevision() const
{
    return m_Revision;
}

void Variable::setRevision(int32_t value)
{
    m_Revision = value;
    m_RevisionIsSet = true;
}

bool Variable::revisionIsSet() const
{
    return m_RevisionIsSet;
}

void Variable::unsetRevision()
{
    m_RevisionIsSet = false;
}
bool Variable::isDisabled() const
{
    return m_Disabled;
}

void Variable::setDisabled(bool value)
{
    m_Disabled = value;
    m_DisabledIsSet = true;
}

bool Variable::disabledIsSet() const
{
    return m_DisabledIsSet;
}

void Variable::unsetDisabled()
{
    m_DisabledIsSet = false;
}
utility::string_t Variable::getDateCreated() const
{
    return m_DateCreated;
}


void Variable::setDateCreated(const utility::string_t& value)
{
    m_DateCreated = value;
    m_DateCreatedIsSet = true;
}

bool Variable::dateCreatedIsSet() const
{
    return m_DateCreatedIsSet;
}

void Variable::unsetDateCreated()
{
    m_DateCreatedIsSet = false;
}
utility::string_t Variable::getDateModified() const
{
    return m_DateModified;
}


void Variable::setDateModified(const utility::string_t& value)
{
    m_DateModified = value;
    m_DateModifiedIsSet = true;
}

bool Variable::dateModifiedIsSet() const
{
    return m_DateModifiedIsSet;
}

void Variable::unsetDateModified()
{
    m_DateModifiedIsSet = false;
}
int32_t Variable::getFormId() const
{
    return m_FormId;
}

void Variable::setFormId(int32_t value)
{
    m_FormId = value;
    m_FormIdIsSet = true;
}

bool Variable::formIdIsSet() const
{
    return m_FormIdIsSet;
}

void Variable::unsetFormId()
{
    m_FormIdIsSet = false;
}
utility::string_t Variable::getVariableOid() const
{
    return m_VariableOid;
}


void Variable::setVariableOid(const utility::string_t& value)
{
    m_VariableOid = value;
    m_VariableOidIsSet = true;
}

bool Variable::variableOidIsSet() const
{
    return m_VariableOidIsSet;
}

void Variable::unsetVariableOid()
{
    m_VariableOidIsSet = false;
}
bool Variable::isDeleted() const
{
    return m_Deleted;
}

void Variable::setDeleted(bool value)
{
    m_Deleted = value;
    m_DeletedIsSet = true;
}

bool Variable::deletedIsSet() const
{
    return m_DeletedIsSet;
}

void Variable::unsetDeleted()
{
    m_DeletedIsSet = false;
}
utility::string_t Variable::getFormKey() const
{
    return m_FormKey;
}


void Variable::setFormKey(const utility::string_t& value)
{
    m_FormKey = value;
    m_FormKeyIsSet = true;
}

bool Variable::formKeyIsSet() const
{
    return m_FormKeyIsSet;
}

void Variable::unsetFormKey()
{
    m_FormKeyIsSet = false;
}
utility::string_t Variable::getFormName() const
{
    return m_FormName;
}


void Variable::setFormName(const utility::string_t& value)
{
    m_FormName = value;
    m_FormNameIsSet = true;
}

bool Variable::formNameIsSet() const
{
    return m_FormNameIsSet;
}

void Variable::unsetFormName()
{
    m_FormNameIsSet = false;
}
utility::string_t Variable::getLabel() const
{
    return m_Label;
}


void Variable::setLabel(const utility::string_t& value)
{
    m_Label = value;
    m_LabelIsSet = true;
}

bool Variable::labelIsSet() const
{
    return m_LabelIsSet;
}

void Variable::unsetLabel()
{
    m_LabelIsSet = false;
}
bool Variable::isBlinded() const
{
    return m_Blinded;
}

void Variable::setBlinded(bool value)
{
    m_Blinded = value;
    m_BlindedIsSet = true;
}

bool Variable::blindedIsSet() const
{
    return m_BlindedIsSet;
}

void Variable::unsetBlinded()
{
    m_BlindedIsSet = false;
}

}
}
}
}


