/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Job.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Job::Job()
{
    m_JobId = utility::conversions::to_string_t("");
    m_JobIdIsSet = false;
    m_BatchId = utility::conversions::to_string_t("");
    m_BatchIdIsSet = false;
    m_State = utility::conversions::to_string_t("");
    m_StateIsSet = false;
    m_DateCreated = utility::conversions::to_string_t("");
    m_DateCreatedIsSet = false;
    m_DateStarted = utility::conversions::to_string_t("");
    m_DateStartedIsSet = false;
    m_DateFinished = utility::conversions::to_string_t("");
    m_DateFinishedIsSet = false;
}

Job::~Job()
{
}

void Job::validate()
{
    // TODO: implement validation
}

web::json::value Job::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_JobIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("jobId"))] = ModelBase::toJson(m_JobId);
    }
    if(m_BatchIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("batchId"))] = ModelBase::toJson(m_BatchId);
    }
    if(m_StateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("state"))] = ModelBase::toJson(m_State);
    }
    if(m_DateCreatedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateCreated"))] = ModelBase::toJson(m_DateCreated);
    }
    if(m_DateStartedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateStarted"))] = ModelBase::toJson(m_DateStarted);
    }
    if(m_DateFinishedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateFinished"))] = ModelBase::toJson(m_DateFinished);
    }

    return val;
}

bool Job::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("jobId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("jobId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setJobId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobId);
            setJobId(refVal_setJobId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("batchId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("batchId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBatchId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBatchId);
            setBatchId(refVal_setBatchId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("state"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("state")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setState;
            ok &= ModelBase::fromJson(fieldValue, refVal_setState);
            setState(refVal_setState);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateCreated")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateCreated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateCreated);
            setDateCreated(refVal_setDateCreated);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateStarted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateStarted")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateStarted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateStarted);
            setDateStarted(refVal_setDateStarted);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateFinished"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateFinished")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateFinished;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateFinished);
            setDateFinished(refVal_setDateFinished);
            
        }
    }
    return ok;
}

void Job::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_JobIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("jobId")), m_JobId));
    }
    if(m_BatchIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("batchId")), m_BatchId));
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("state")), m_State));
    }
    if(m_DateCreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateCreated")), m_DateCreated));
    }
    if(m_DateStartedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateStarted")), m_DateStarted));
    }
    if(m_DateFinishedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateFinished")), m_DateFinished));
    }
}

bool Job::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("jobId"))))
    {
        utility::string_t refVal_setJobId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("jobId"))), refVal_setJobId );
        setJobId(refVal_setJobId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("batchId"))))
    {
        utility::string_t refVal_setBatchId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("batchId"))), refVal_setBatchId );
        setBatchId(refVal_setBatchId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("state"))))
    {
        utility::string_t refVal_setState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("state"))), refVal_setState );
        setState(refVal_setState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        utility::string_t refVal_setDateCreated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))), refVal_setDateCreated );
        setDateCreated(refVal_setDateCreated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateStarted"))))
    {
        utility::string_t refVal_setDateStarted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateStarted"))), refVal_setDateStarted );
        setDateStarted(refVal_setDateStarted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateFinished"))))
    {
        utility::string_t refVal_setDateFinished;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateFinished"))), refVal_setDateFinished );
        setDateFinished(refVal_setDateFinished);
    }
    return ok;
}


utility::string_t Job::getJobId() const
{
    return m_JobId;
}


void Job::setJobId(const utility::string_t& value)
{
    m_JobId = value;
    m_JobIdIsSet = true;
}

bool Job::jobIdIsSet() const
{
    return m_JobIdIsSet;
}

void Job::unsetJobId()
{
    m_JobIdIsSet = false;
}
utility::string_t Job::getBatchId() const
{
    return m_BatchId;
}


void Job::setBatchId(const utility::string_t& value)
{
    m_BatchId = value;
    m_BatchIdIsSet = true;
}

bool Job::batchIdIsSet() const
{
    return m_BatchIdIsSet;
}

void Job::unsetBatchId()
{
    m_BatchIdIsSet = false;
}
utility::string_t Job::getState() const
{
    return m_State;
}


void Job::setState(const utility::string_t& value)
{
    m_State = value;
    m_StateIsSet = true;
}

bool Job::stateIsSet() const
{
    return m_StateIsSet;
}

void Job::unsetState()
{
    m_StateIsSet = false;
}
utility::string_t Job::getDateCreated() const
{
    return m_DateCreated;
}


void Job::setDateCreated(const utility::string_t& value)
{
    m_DateCreated = value;
    m_DateCreatedIsSet = true;
}

bool Job::dateCreatedIsSet() const
{
    return m_DateCreatedIsSet;
}

void Job::unsetDateCreated()
{
    m_DateCreatedIsSet = false;
}
utility::string_t Job::getDateStarted() const
{
    return m_DateStarted;
}


void Job::setDateStarted(const utility::string_t& value)
{
    m_DateStarted = value;
    m_DateStartedIsSet = true;
}

bool Job::dateStartedIsSet() const
{
    return m_DateStartedIsSet;
}

void Job::unsetDateStarted()
{
    m_DateStartedIsSet = false;
}
utility::string_t Job::getDateFinished() const
{
    return m_DateFinished;
}


void Job::setDateFinished(const utility::string_t& value)
{
    m_DateFinished = value;
    m_DateFinishedIsSet = true;
}

bool Job::dateFinishedIsSet() const
{
    return m_DateFinishedIsSet;
}

void Job::unsetDateFinished()
{
    m_DateFinishedIsSet = false;
}

}
}
}
}


