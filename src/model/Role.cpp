/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Role.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Role::Role()
{
    m_DateCreatedIsSet = false;
    m_DateModifiedIsSet = false;
    m_RoleId = utility::conversions::to_string_t("");
    m_RoleIdIsSet = false;
    m_CommunityId = 0;
    m_CommunityIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Level = 0;
    m_LevelIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Inactive = false;
    m_InactiveIsSet = false;
}

Role::~Role()
{
}

void Role::validate()
{
    // TODO: implement validation
}

web::json::value Role::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_DateCreatedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateCreated"))] = ModelBase::toJson(m_DateCreated);
    }
    if(m_DateModifiedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateModified"))] = ModelBase::toJson(m_DateModified);
    }
    if(m_RoleIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("roleId"))] = ModelBase::toJson(m_RoleId);
    }
    if(m_CommunityIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("communityId"))] = ModelBase::toJson(m_CommunityId);
    }
    if(m_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_LevelIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("level"))] = ModelBase::toJson(m_Level);
    }
    if(m_TypeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_InactiveIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("inactive"))] = ModelBase::toJson(m_Inactive);
    }

    return val;
}

bool Role::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateCreated")));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_setDateCreated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateCreated);
            setDateCreated(refVal_setDateCreated);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateModified")));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_setDateModified;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateModified);
            setDateModified(refVal_setDateModified);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("roleId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("roleId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRoleId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRoleId);
            setRoleId(refVal_setRoleId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("communityId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("communityId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCommunityId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCommunityId);
            setCommunityId(refVal_setCommunityId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("level"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("level")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLevel);
            setLevel(refVal_setLevel);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("inactive"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("inactive")));
        if(!fieldValue.is_null())
        {
            bool refVal_setInactive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInactive);
            setInactive(refVal_setInactive);
            
        }
    }
    return ok;
}

void Role::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_DateCreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateCreated")), m_DateCreated));
    }
    if(m_DateModifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateModified")), m_DateModified));
    }
    if(m_RoleIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("roleId")), m_RoleId));
    }
    if(m_CommunityIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("communityId")), m_CommunityId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("name")), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("description")), m_Description));
    }
    if(m_LevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("level")), m_Level));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("type")), m_Type));
    }
    if(m_InactiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("inactive")), m_Inactive));
    }
}

bool Role::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        std::vector<int32_t> refVal_setDateCreated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))), refVal_setDateCreated );
        setDateCreated(refVal_setDateCreated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        std::vector<int32_t> refVal_setDateModified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))), refVal_setDateModified );
        setDateModified(refVal_setDateModified);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("roleId"))))
    {
        utility::string_t refVal_setRoleId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("roleId"))), refVal_setRoleId );
        setRoleId(refVal_setRoleId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("communityId"))))
    {
        int32_t refVal_setCommunityId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("communityId"))), refVal_setCommunityId );
        setCommunityId(refVal_setCommunityId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("level"))))
    {
        int32_t refVal_setLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("level"))), refVal_setLevel );
        setLevel(refVal_setLevel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("inactive"))))
    {
        bool refVal_setInactive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("inactive"))), refVal_setInactive );
        setInactive(refVal_setInactive);
    }
    return ok;
}


std::vector<int32_t> Role::getDateCreated() const
{
    return m_DateCreated;
}

void Role::setDateCreated(std::vector<int32_t> value)
{
    m_DateCreated = value;
    m_DateCreatedIsSet = true;
}

bool Role::dateCreatedIsSet() const
{
    return m_DateCreatedIsSet;
}

void Role::unsetDateCreated()
{
    m_DateCreatedIsSet = false;
}
std::vector<int32_t> Role::getDateModified() const
{
    return m_DateModified;
}

void Role::setDateModified(std::vector<int32_t> value)
{
    m_DateModified = value;
    m_DateModifiedIsSet = true;
}

bool Role::dateModifiedIsSet() const
{
    return m_DateModifiedIsSet;
}

void Role::unsetDateModified()
{
    m_DateModifiedIsSet = false;
}
utility::string_t Role::getRoleId() const
{
    return m_RoleId;
}


void Role::setRoleId(const utility::string_t& value)
{
    m_RoleId = value;
    m_RoleIdIsSet = true;
}

bool Role::roleIdIsSet() const
{
    return m_RoleIdIsSet;
}

void Role::unsetRoleId()
{
    m_RoleIdIsSet = false;
}
int32_t Role::getCommunityId() const
{
    return m_CommunityId;
}

void Role::setCommunityId(int32_t value)
{
    m_CommunityId = value;
    m_CommunityIdIsSet = true;
}

bool Role::communityIdIsSet() const
{
    return m_CommunityIdIsSet;
}

void Role::unsetCommunityId()
{
    m_CommunityIdIsSet = false;
}
utility::string_t Role::getName() const
{
    return m_Name;
}


void Role::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Role::nameIsSet() const
{
    return m_NameIsSet;
}

void Role::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Role::getDescription() const
{
    return m_Description;
}


void Role::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Role::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Role::unsetDescription()
{
    m_DescriptionIsSet = false;
}
int32_t Role::getLevel() const
{
    return m_Level;
}

void Role::setLevel(int32_t value)
{
    m_Level = value;
    m_LevelIsSet = true;
}

bool Role::levelIsSet() const
{
    return m_LevelIsSet;
}

void Role::unsetLevel()
{
    m_LevelIsSet = false;
}
utility::string_t Role::getType() const
{
    return m_Type;
}


void Role::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool Role::typeIsSet() const
{
    return m_TypeIsSet;
}

void Role::unsetType()
{
    m_TypeIsSet = false;
}
bool Role::isInactive() const
{
    return m_Inactive;
}

void Role::setInactive(bool value)
{
    m_Inactive = value;
    m_InactiveIsSet = true;
}

bool Role::inactiveIsSet() const
{
    return m_InactiveIsSet;
}

void Role::unsetInactive()
{
    m_InactiveIsSet = false;
}

}
}
}
}


