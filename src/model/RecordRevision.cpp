/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/RecordRevision.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

RecordRevision::RecordRevision()
{
    m_StudyKey = utility::conversions::to_string_t("");
    m_StudyKeyIsSet = false;
    m_RecordRevisionId = 0;
    m_RecordRevisionIdIsSet = false;
    m_RecordId = 0;
    m_RecordIdIsSet = false;
    m_RecordOid = utility::conversions::to_string_t("");
    m_RecordOidIsSet = false;
    m_RecordRevision = 0;
    m_RecordRevisionIsSet = false;
    m_DataRevision = 0;
    m_DataRevisionIsSet = false;
    m_RecordStatus = utility::conversions::to_string_t("");
    m_RecordStatusIsSet = false;
    m_SubjectId = 0;
    m_SubjectIdIsSet = false;
    m_SubjectOid = utility::conversions::to_string_t("");
    m_SubjectOidIsSet = false;
    m_SubjectKey = utility::conversions::to_string_t("");
    m_SubjectKeyIsSet = false;
    m_SiteId = 0;
    m_SiteIdIsSet = false;
    m_FormKey = utility::conversions::to_string_t("");
    m_FormKeyIsSet = false;
    m_IntervalId = 0;
    m_IntervalIdIsSet = false;
    m_Role = utility::conversions::to_string_t("");
    m_RoleIsSet = false;
    m_User = utility::conversions::to_string_t("");
    m_UserIsSet = false;
    m_ReasonForChange = utility::conversions::to_string_t("");
    m_ReasonForChangeIsSet = false;
    m_Deleted = false;
    m_DeletedIsSet = false;
    m_DateCreated = utility::conversions::to_string_t("");
    m_DateCreatedIsSet = false;
}

RecordRevision::~RecordRevision()
{
}

void RecordRevision::validate()
{
    // TODO: implement validation
}

web::json::value RecordRevision::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_StudyKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("studyKey"))] = ModelBase::toJson(m_StudyKey);
    }
    if(m_RecordRevisionIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("recordRevisionId"))] = ModelBase::toJson(m_RecordRevisionId);
    }
    if(m_RecordIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("recordId"))] = ModelBase::toJson(m_RecordId);
    }
    if(m_RecordOidIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("recordOid"))] = ModelBase::toJson(m_RecordOid);
    }
    if(m_RecordRevisionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("recordRevision"))] = ModelBase::toJson(m_RecordRevision);
    }
    if(m_DataRevisionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dataRevision"))] = ModelBase::toJson(m_DataRevision);
    }
    if(m_RecordStatusIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("recordStatus"))] = ModelBase::toJson(m_RecordStatus);
    }
    if(m_SubjectIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectId"))] = ModelBase::toJson(m_SubjectId);
    }
    if(m_SubjectOidIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectOid"))] = ModelBase::toJson(m_SubjectOid);
    }
    if(m_SubjectKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectKey"))] = ModelBase::toJson(m_SubjectKey);
    }
    if(m_SiteIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("siteId"))] = ModelBase::toJson(m_SiteId);
    }
    if(m_FormKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("formKey"))] = ModelBase::toJson(m_FormKey);
    }
    if(m_IntervalIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("intervalId"))] = ModelBase::toJson(m_IntervalId);
    }
    if(m_RoleIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("role"))] = ModelBase::toJson(m_Role);
    }
    if(m_UserIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("user"))] = ModelBase::toJson(m_User);
    }
    if(m_ReasonForChangeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("reasonForChange"))] = ModelBase::toJson(m_ReasonForChange);
    }
    if(m_DeletedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("deleted"))] = ModelBase::toJson(m_Deleted);
    }
    if(m_DateCreatedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateCreated"))] = ModelBase::toJson(m_DateCreated);
    }

    return val;
}

bool RecordRevision::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("studyKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStudyKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStudyKey);
            setStudyKey(refVal_setStudyKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("recordRevisionId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("recordRevisionId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRecordRevisionId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordRevisionId);
            setRecordRevisionId(refVal_setRecordRevisionId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("recordId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("recordId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRecordId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordId);
            setRecordId(refVal_setRecordId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("recordOid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("recordOid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRecordOid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordOid);
            setRecordOid(refVal_setRecordOid);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("recordRevision"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("recordRevision")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRecordRevision;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordRevision);
            setRecordRevision(refVal_setRecordRevision);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dataRevision"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dataRevision")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDataRevision;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDataRevision);
            setDataRevision(refVal_setDataRevision);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("recordStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("recordStatus")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRecordStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordStatus);
            setRecordStatus(refVal_setRecordStatus);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSubjectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectId);
            setSubjectId(refVal_setSubjectId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectOid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectOid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubjectOid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectOid);
            setSubjectOid(refVal_setSubjectOid);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubjectKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectKey);
            setSubjectKey(refVal_setSubjectKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("siteId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("siteId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSiteId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSiteId);
            setSiteId(refVal_setSiteId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("formKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("formKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFormKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormKey);
            setFormKey(refVal_setFormKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("intervalId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("intervalId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setIntervalId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIntervalId);
            setIntervalId(refVal_setIntervalId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("role"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("role")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRole;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRole);
            setRole(refVal_setRole);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("user")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUser);
            setUser(refVal_setUser);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("reasonForChange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("reasonForChange")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReasonForChange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReasonForChange);
            setReasonForChange(refVal_setReasonForChange);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("deleted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("deleted")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDeleted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeleted);
            setDeleted(refVal_setDeleted);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateCreated")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateCreated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateCreated);
            setDateCreated(refVal_setDateCreated);
            
        }
    }
    return ok;
}

void RecordRevision::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_StudyKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("studyKey")), m_StudyKey));
    }
    if(m_RecordRevisionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("recordRevisionId")), m_RecordRevisionId));
    }
    if(m_RecordIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("recordId")), m_RecordId));
    }
    if(m_RecordOidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("recordOid")), m_RecordOid));
    }
    if(m_RecordRevisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("recordRevision")), m_RecordRevision));
    }
    if(m_DataRevisionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dataRevision")), m_DataRevision));
    }
    if(m_RecordStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("recordStatus")), m_RecordStatus));
    }
    if(m_SubjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectId")), m_SubjectId));
    }
    if(m_SubjectOidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectOid")), m_SubjectOid));
    }
    if(m_SubjectKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectKey")), m_SubjectKey));
    }
    if(m_SiteIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("siteId")), m_SiteId));
    }
    if(m_FormKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("formKey")), m_FormKey));
    }
    if(m_IntervalIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("intervalId")), m_IntervalId));
    }
    if(m_RoleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("role")), m_Role));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("user")), m_User));
    }
    if(m_ReasonForChangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("reasonForChange")), m_ReasonForChange));
    }
    if(m_DeletedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("deleted")), m_Deleted));
    }
    if(m_DateCreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateCreated")), m_DateCreated));
    }
}

bool RecordRevision::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        utility::string_t refVal_setStudyKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))), refVal_setStudyKey );
        setStudyKey(refVal_setStudyKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("recordRevisionId"))))
    {
        int32_t refVal_setRecordRevisionId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("recordRevisionId"))), refVal_setRecordRevisionId );
        setRecordRevisionId(refVal_setRecordRevisionId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("recordId"))))
    {
        int32_t refVal_setRecordId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("recordId"))), refVal_setRecordId );
        setRecordId(refVal_setRecordId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("recordOid"))))
    {
        utility::string_t refVal_setRecordOid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("recordOid"))), refVal_setRecordOid );
        setRecordOid(refVal_setRecordOid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("recordRevision"))))
    {
        int32_t refVal_setRecordRevision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("recordRevision"))), refVal_setRecordRevision );
        setRecordRevision(refVal_setRecordRevision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dataRevision"))))
    {
        int32_t refVal_setDataRevision;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dataRevision"))), refVal_setDataRevision );
        setDataRevision(refVal_setDataRevision);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("recordStatus"))))
    {
        utility::string_t refVal_setRecordStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("recordStatus"))), refVal_setRecordStatus );
        setRecordStatus(refVal_setRecordStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectId"))))
    {
        int32_t refVal_setSubjectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectId"))), refVal_setSubjectId );
        setSubjectId(refVal_setSubjectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectOid"))))
    {
        utility::string_t refVal_setSubjectOid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectOid"))), refVal_setSubjectOid );
        setSubjectOid(refVal_setSubjectOid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))))
    {
        utility::string_t refVal_setSubjectKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))), refVal_setSubjectKey );
        setSubjectKey(refVal_setSubjectKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("siteId"))))
    {
        int32_t refVal_setSiteId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("siteId"))), refVal_setSiteId );
        setSiteId(refVal_setSiteId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("formKey"))))
    {
        utility::string_t refVal_setFormKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("formKey"))), refVal_setFormKey );
        setFormKey(refVal_setFormKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("intervalId"))))
    {
        int32_t refVal_setIntervalId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("intervalId"))), refVal_setIntervalId );
        setIntervalId(refVal_setIntervalId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("role"))))
    {
        utility::string_t refVal_setRole;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("role"))), refVal_setRole );
        setRole(refVal_setRole);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("user"))))
    {
        utility::string_t refVal_setUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("user"))), refVal_setUser );
        setUser(refVal_setUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("reasonForChange"))))
    {
        utility::string_t refVal_setReasonForChange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("reasonForChange"))), refVal_setReasonForChange );
        setReasonForChange(refVal_setReasonForChange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("deleted"))))
    {
        bool refVal_setDeleted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("deleted"))), refVal_setDeleted );
        setDeleted(refVal_setDeleted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        utility::string_t refVal_setDateCreated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))), refVal_setDateCreated );
        setDateCreated(refVal_setDateCreated);
    }
    return ok;
}


utility::string_t RecordRevision::getStudyKey() const
{
    return m_StudyKey;
}


void RecordRevision::setStudyKey(const utility::string_t& value)
{
    m_StudyKey = value;
    m_StudyKeyIsSet = true;
}

bool RecordRevision::studyKeyIsSet() const
{
    return m_StudyKeyIsSet;
}

void RecordRevision::unsetStudyKey()
{
    m_StudyKeyIsSet = false;
}
int32_t RecordRevision::getRecordRevisionId() const
{
    return m_RecordRevisionId;
}

void RecordRevision::setRecordRevisionId(int32_t value)
{
    m_RecordRevisionId = value;
    m_RecordRevisionIdIsSet = true;
}

bool RecordRevision::recordRevisionIdIsSet() const
{
    return m_RecordRevisionIdIsSet;
}

void RecordRevision::unsetRecordRevisionId()
{
    m_RecordRevisionIdIsSet = false;
}
int32_t RecordRevision::getRecordId() const
{
    return m_RecordId;
}

void RecordRevision::setRecordId(int32_t value)
{
    m_RecordId = value;
    m_RecordIdIsSet = true;
}

bool RecordRevision::recordIdIsSet() const
{
    return m_RecordIdIsSet;
}

void RecordRevision::unsetRecordId()
{
    m_RecordIdIsSet = false;
}
utility::string_t RecordRevision::getRecordOid() const
{
    return m_RecordOid;
}


void RecordRevision::setRecordOid(const utility::string_t& value)
{
    m_RecordOid = value;
    m_RecordOidIsSet = true;
}

bool RecordRevision::recordOidIsSet() const
{
    return m_RecordOidIsSet;
}

void RecordRevision::unsetRecordOid()
{
    m_RecordOidIsSet = false;
}
int32_t RecordRevision::getRecordRevision() const
{
    return m_RecordRevision;
}

void RecordRevision::setRecordRevision(int32_t value)
{
    m_RecordRevision = value;
    m_RecordRevisionIsSet = true;
}

bool RecordRevision::recordRevisionIsSet() const
{
    return m_RecordRevisionIsSet;
}

void RecordRevision::unsetRecordRevision()
{
    m_RecordRevisionIsSet = false;
}
int32_t RecordRevision::getDataRevision() const
{
    return m_DataRevision;
}

void RecordRevision::setDataRevision(int32_t value)
{
    m_DataRevision = value;
    m_DataRevisionIsSet = true;
}

bool RecordRevision::dataRevisionIsSet() const
{
    return m_DataRevisionIsSet;
}

void RecordRevision::unsetDataRevision()
{
    m_DataRevisionIsSet = false;
}
utility::string_t RecordRevision::getRecordStatus() const
{
    return m_RecordStatus;
}


void RecordRevision::setRecordStatus(const utility::string_t& value)
{
    m_RecordStatus = value;
    m_RecordStatusIsSet = true;
}

bool RecordRevision::recordStatusIsSet() const
{
    return m_RecordStatusIsSet;
}

void RecordRevision::unsetRecordStatus()
{
    m_RecordStatusIsSet = false;
}
int32_t RecordRevision::getSubjectId() const
{
    return m_SubjectId;
}

void RecordRevision::setSubjectId(int32_t value)
{
    m_SubjectId = value;
    m_SubjectIdIsSet = true;
}

bool RecordRevision::subjectIdIsSet() const
{
    return m_SubjectIdIsSet;
}

void RecordRevision::unsetSubjectId()
{
    m_SubjectIdIsSet = false;
}
utility::string_t RecordRevision::getSubjectOid() const
{
    return m_SubjectOid;
}


void RecordRevision::setSubjectOid(const utility::string_t& value)
{
    m_SubjectOid = value;
    m_SubjectOidIsSet = true;
}

bool RecordRevision::subjectOidIsSet() const
{
    return m_SubjectOidIsSet;
}

void RecordRevision::unsetSubjectOid()
{
    m_SubjectOidIsSet = false;
}
utility::string_t RecordRevision::getSubjectKey() const
{
    return m_SubjectKey;
}


void RecordRevision::setSubjectKey(const utility::string_t& value)
{
    m_SubjectKey = value;
    m_SubjectKeyIsSet = true;
}

bool RecordRevision::subjectKeyIsSet() const
{
    return m_SubjectKeyIsSet;
}

void RecordRevision::unsetSubjectKey()
{
    m_SubjectKeyIsSet = false;
}
int32_t RecordRevision::getSiteId() const
{
    return m_SiteId;
}

void RecordRevision::setSiteId(int32_t value)
{
    m_SiteId = value;
    m_SiteIdIsSet = true;
}

bool RecordRevision::siteIdIsSet() const
{
    return m_SiteIdIsSet;
}

void RecordRevision::unsetSiteId()
{
    m_SiteIdIsSet = false;
}
utility::string_t RecordRevision::getFormKey() const
{
    return m_FormKey;
}


void RecordRevision::setFormKey(const utility::string_t& value)
{
    m_FormKey = value;
    m_FormKeyIsSet = true;
}

bool RecordRevision::formKeyIsSet() const
{
    return m_FormKeyIsSet;
}

void RecordRevision::unsetFormKey()
{
    m_FormKeyIsSet = false;
}
int32_t RecordRevision::getIntervalId() const
{
    return m_IntervalId;
}

void RecordRevision::setIntervalId(int32_t value)
{
    m_IntervalId = value;
    m_IntervalIdIsSet = true;
}

bool RecordRevision::intervalIdIsSet() const
{
    return m_IntervalIdIsSet;
}

void RecordRevision::unsetIntervalId()
{
    m_IntervalIdIsSet = false;
}
utility::string_t RecordRevision::getRole() const
{
    return m_Role;
}


void RecordRevision::setRole(const utility::string_t& value)
{
    m_Role = value;
    m_RoleIsSet = true;
}

bool RecordRevision::roleIsSet() const
{
    return m_RoleIsSet;
}

void RecordRevision::unsetRole()
{
    m_RoleIsSet = false;
}
utility::string_t RecordRevision::getUser() const
{
    return m_User;
}


void RecordRevision::setUser(const utility::string_t& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool RecordRevision::userIsSet() const
{
    return m_UserIsSet;
}

void RecordRevision::unsetUser()
{
    m_UserIsSet = false;
}
utility::string_t RecordRevision::getReasonForChange() const
{
    return m_ReasonForChange;
}


void RecordRevision::setReasonForChange(const utility::string_t& value)
{
    m_ReasonForChange = value;
    m_ReasonForChangeIsSet = true;
}

bool RecordRevision::reasonForChangeIsSet() const
{
    return m_ReasonForChangeIsSet;
}

void RecordRevision::unsetReasonForChange()
{
    m_ReasonForChangeIsSet = false;
}
bool RecordRevision::isDeleted() const
{
    return m_Deleted;
}

void RecordRevision::setDeleted(bool value)
{
    m_Deleted = value;
    m_DeletedIsSet = true;
}

bool RecordRevision::deletedIsSet() const
{
    return m_DeletedIsSet;
}

void RecordRevision::unsetDeleted()
{
    m_DeletedIsSet = false;
}
utility::string_t RecordRevision::getDateCreated() const
{
    return m_DateCreated;
}


void RecordRevision::setDateCreated(const utility::string_t& value)
{
    m_DateCreated = value;
    m_DateCreatedIsSet = true;
}

bool RecordRevision::dateCreatedIsSet() const
{
    return m_DateCreatedIsSet;
}

void RecordRevision::unsetDateCreated()
{
    m_DateCreatedIsSet = false;
}

}
}
}
}


