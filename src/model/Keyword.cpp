/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Keyword.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Keyword::Keyword()
{
    m_KeywordName = utility::conversions::to_string_t("");
    m_KeywordNameIsSet = false;
    m_KeywordKey = utility::conversions::to_string_t("");
    m_KeywordKeyIsSet = false;
    m_KeywordId = 0;
    m_KeywordIdIsSet = false;
    m_DateAdded = utility::conversions::to_string_t("");
    m_DateAddedIsSet = false;
}

Keyword::~Keyword()
{
}

void Keyword::validate()
{
    // TODO: implement validation
}

web::json::value Keyword::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_KeywordNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("keywordName"))] = ModelBase::toJson(m_KeywordName);
    }
    if(m_KeywordKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("keywordKey"))] = ModelBase::toJson(m_KeywordKey);
    }
    if(m_KeywordIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("keywordId"))] = ModelBase::toJson(m_KeywordId);
    }
    if(m_DateAddedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateAdded"))] = ModelBase::toJson(m_DateAdded);
    }

    return val;
}

bool Keyword::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("keywordName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("keywordName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setKeywordName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKeywordName);
            setKeywordName(refVal_setKeywordName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("keywordKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("keywordKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setKeywordKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKeywordKey);
            setKeywordKey(refVal_setKeywordKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("keywordId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("keywordId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setKeywordId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKeywordId);
            setKeywordId(refVal_setKeywordId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateAdded"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateAdded")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateAdded;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateAdded);
            setDateAdded(refVal_setDateAdded);
            
        }
    }
    return ok;
}

void Keyword::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_KeywordNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("keywordName")), m_KeywordName));
    }
    if(m_KeywordKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("keywordKey")), m_KeywordKey));
    }
    if(m_KeywordIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("keywordId")), m_KeywordId));
    }
    if(m_DateAddedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateAdded")), m_DateAdded));
    }
}

bool Keyword::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("keywordName"))))
    {
        utility::string_t refVal_setKeywordName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("keywordName"))), refVal_setKeywordName );
        setKeywordName(refVal_setKeywordName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("keywordKey"))))
    {
        utility::string_t refVal_setKeywordKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("keywordKey"))), refVal_setKeywordKey );
        setKeywordKey(refVal_setKeywordKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("keywordId"))))
    {
        int32_t refVal_setKeywordId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("keywordId"))), refVal_setKeywordId );
        setKeywordId(refVal_setKeywordId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateAdded"))))
    {
        utility::string_t refVal_setDateAdded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateAdded"))), refVal_setDateAdded );
        setDateAdded(refVal_setDateAdded);
    }
    return ok;
}


utility::string_t Keyword::getKeywordName() const
{
    return m_KeywordName;
}


void Keyword::setKeywordName(const utility::string_t& value)
{
    m_KeywordName = value;
    m_KeywordNameIsSet = true;
}

bool Keyword::keywordNameIsSet() const
{
    return m_KeywordNameIsSet;
}

void Keyword::unsetKeywordName()
{
    m_KeywordNameIsSet = false;
}
utility::string_t Keyword::getKeywordKey() const
{
    return m_KeywordKey;
}


void Keyword::setKeywordKey(const utility::string_t& value)
{
    m_KeywordKey = value;
    m_KeywordKeyIsSet = true;
}

bool Keyword::keywordKeyIsSet() const
{
    return m_KeywordKeyIsSet;
}

void Keyword::unsetKeywordKey()
{
    m_KeywordKeyIsSet = false;
}
int32_t Keyword::getKeywordId() const
{
    return m_KeywordId;
}

void Keyword::setKeywordId(int32_t value)
{
    m_KeywordId = value;
    m_KeywordIdIsSet = true;
}

bool Keyword::keywordIdIsSet() const
{
    return m_KeywordIdIsSet;
}

void Keyword::unsetKeywordId()
{
    m_KeywordIdIsSet = false;
}
utility::string_t Keyword::getDateAdded() const
{
    return m_DateAdded;
}


void Keyword::setDateAdded(const utility::string_t& value)
{
    m_DateAdded = value;
    m_DateAddedIsSet = true;
}

bool Keyword::dateAddedIsSet() const
{
    return m_DateAddedIsSet;
}

void Keyword::unsetDateAdded()
{
    m_DateAddedIsSet = false;
}

}
}
}
}


