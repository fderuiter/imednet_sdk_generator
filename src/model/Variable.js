/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Variable model module.
 * @module model/Variable
 * @version 1.3.6
 */
class Variable {
    /**
     * @member {String} studyKey
     * @type {String}
     */
    studyKey;
    /**
     * @member {Number} variableId
     * @type {Number}
     */
    variableId;
    /**
     * @member {module:model/Variable.VariableTypeEnum} variableType
     * @type {module:model/Variable.VariableTypeEnum}
     */
    variableType;
    /**
     * @member {String} variableName
     * @type {String}
     */
    variableName;
    /**
     * @member {Number} sequence
     * @type {Number}
     */
    sequence;
    /**
     * @member {Number} revision
     * @type {Number}
     */
    revision;
    /**
     * @member {Boolean} disabled
     * @type {Boolean}
     */
    disabled;
    /**
     * @member {String} dateCreated
     * @type {String}
     */
    dateCreated;
    /**
     * @member {String} dateModified
     * @type {String}
     */
    dateModified;
    /**
     * @member {Number} formId
     * @type {Number}
     */
    formId;
    /**
     * @member {String} variableOid
     * @type {String}
     */
    variableOid;
    /**
     * @member {Boolean} deleted
     * @type {Boolean}
     */
    deleted;
    /**
     * @member {String} formKey
     * @type {String}
     */
    formKey;
    /**
     * @member {String} formName
     * @type {String}
     */
    formName;
    /**
     * @member {String} label
     * @type {String}
     */
    label;
    /**
     * @member {Boolean} blinded
     * @type {Boolean}
     */
    blinded;

    

    /**
     * Constructs a new <code>Variable</code>.
     * @alias module:model/Variable
     */
    constructor() { 
        
        Variable.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Variable</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Variable} obj Optional instance to populate.
     * @return {module:model/Variable} The populated <code>Variable</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Variable();

            if (data.hasOwnProperty('studyKey')) {
                obj['studyKey'] = ApiClient.convertToType(data['studyKey'], 'String');
            }
            if (data.hasOwnProperty('variableId')) {
                obj['variableId'] = ApiClient.convertToType(data['variableId'], 'Number');
            }
            if (data.hasOwnProperty('variableType')) {
                obj['variableType'] = ApiClient.convertToType(data['variableType'], 'String');
            }
            if (data.hasOwnProperty('variableName')) {
                obj['variableName'] = ApiClient.convertToType(data['variableName'], 'String');
            }
            if (data.hasOwnProperty('sequence')) {
                obj['sequence'] = ApiClient.convertToType(data['sequence'], 'Number');
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'Number');
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'String');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'String');
            }
            if (data.hasOwnProperty('formId')) {
                obj['formId'] = ApiClient.convertToType(data['formId'], 'Number');
            }
            if (data.hasOwnProperty('variableOid')) {
                obj['variableOid'] = ApiClient.convertToType(data['variableOid'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('formKey')) {
                obj['formKey'] = ApiClient.convertToType(data['formKey'], 'String');
            }
            if (data.hasOwnProperty('formName')) {
                obj['formName'] = ApiClient.convertToType(data['formName'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('blinded')) {
                obj['blinded'] = ApiClient.convertToType(data['blinded'], 'Boolean');
            }
        }
        return obj;
    }
}


/**
 * Allowed values for the <code>variableType</code> property.
 * @enum {String}
 * @readonly
 */
Variable['VariableTypeEnum'] = {

    /**
     * value: "TEXT"
     * @const
     */
    "TEXT": "TEXT",

    /**
     * value: "TEXTAREA"
     * @const
     */
    "TEXTAREA": "TEXTAREA",

    /**
     * value: "RADIO"
     * @const
     */
    "RADIO": "RADIO",

    /**
     * value: "CHECKBOX"
     * @const
     */
    "CHECKBOX": "CHECKBOX",

    /**
     * value: "DROPDOWN"
     * @const
     */
    "DROPDOWN": "DROPDOWN",

    /**
     * value: "DATE"
     * @const
     */
    "DATE": "DATE",

    /**
     * value: "NUMBER"
     * @const
     */
    "NUMBER": "NUMBER"
};



export default Variable;

