/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UserList.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

UserList::UserList()
{
    m_MetadataIsSet = false;
    m_PaginationIsSet = false;
    m_DataIsSet = false;
}

UserList::~UserList()
{
}

void UserList::validate()
{
    // TODO: implement validation
}

web::json::value UserList::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_MetadataIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("metadata"))] = ModelBase::toJson(m_Metadata);
    }
    if(m_PaginationIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("pagination"))] = ModelBase::toJson(m_Pagination);
    }
    if(m_DataIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data"))] = ModelBase::toJson(m_Data);
    }

    return val;
}

bool UserList::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("metadata"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("metadata")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Metadata> refVal_setMetadata;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMetadata);
            setMetadata(refVal_setMetadata);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("pagination"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("pagination")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Pagination> refVal_setPagination;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPagination);
            setPagination(refVal_setPagination);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<User>> refVal_setData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setData);
            setData(refVal_setData);
            
        }
    }
    return ok;
}

void UserList::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_MetadataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("metadata")), m_Metadata));
    }
    if(m_PaginationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("pagination")), m_Pagination));
    }
    if(m_DataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data")), m_Data));
    }
}

bool UserList::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("metadata"))))
    {
        std::shared_ptr<Metadata> refVal_setMetadata;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("metadata"))), refVal_setMetadata );
        setMetadata(refVal_setMetadata);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("pagination"))))
    {
        std::shared_ptr<Pagination> refVal_setPagination;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("pagination"))), refVal_setPagination );
        setPagination(refVal_setPagination);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data"))))
    {
        std::vector<std::shared_ptr<User>> refVal_setData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data"))), refVal_setData );
        setData(refVal_setData);
    }
    return ok;
}


std::shared_ptr<Metadata> UserList::getMetadata() const
{
    return m_Metadata;
}


void UserList::setMetadata(const std::shared_ptr<Metadata>& value)
{
    m_Metadata = value;
    m_MetadataIsSet = true;
}

bool UserList::metadataIsSet() const
{
    return m_MetadataIsSet;
}

void UserList::unsetMetadata()
{
    m_MetadataIsSet = false;
}
std::shared_ptr<Pagination> UserList::getPagination() const
{
    return m_Pagination;
}


void UserList::setPagination(const std::shared_ptr<Pagination>& value)
{
    m_Pagination = value;
    m_PaginationIsSet = true;
}

bool UserList::paginationIsSet() const
{
    return m_PaginationIsSet;
}

void UserList::unsetPagination()
{
    m_PaginationIsSet = false;
}
std::vector<std::shared_ptr<User>> UserList::getData() const
{
    return m_Data;
}


void UserList::setData(const std::vector<std::shared_ptr<User>>& value)
{
    m_Data = value;
    m_DataIsSet = true;
}

bool UserList::dataIsSet() const
{
    return m_DataIsSet;
}

void UserList::unsetData()
{
    m_DataIsSet = false;
}

}
}
}
}


