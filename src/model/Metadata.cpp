/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Metadata.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Metadata::Metadata()
{
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Method = utility::conversions::to_string_t("");
    m_MethodIsSet = false;
    m_Path = utility::conversions::to_string_t("");
    m_PathIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_ErrorIsSet = false;
}

Metadata::~Metadata()
{
}

void Metadata::validate()
{
    // TODO: implement validation
}

web::json::value Metadata::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_StatusIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_MethodIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("method"))] = ModelBase::toJson(m_Method);
    }
    if(m_PathIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("path"))] = ModelBase::toJson(m_Path);
    }
    if(m_TimestampIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_ErrorIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("error"))] = ModelBase::toJson(m_Error);
    }

    return val;
}

bool Metadata::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("method"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("method")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMethod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMethod);
            setMethod(refVal_setMethod);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("path"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("path")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPath;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPath);
            setPath(refVal_setPath);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("error")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Components_schemas_Metadata_error> refVal_setError;
            ok &= ModelBase::fromJson(fieldValue, refVal_setError);
            setError(refVal_setError);
            
        }
    }
    return ok;
}

void Metadata::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("status")), m_Status));
    }
    if(m_MethodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("method")), m_Method));
    }
    if(m_PathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("path")), m_Path));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("timestamp")), m_Timestamp));
    }
    if(m_ErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("error")), m_Error));
    }
}

bool Metadata::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("method"))))
    {
        utility::string_t refVal_setMethod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("method"))), refVal_setMethod );
        setMethod(refVal_setMethod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("path"))))
    {
        utility::string_t refVal_setPath;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("path"))), refVal_setPath );
        setPath(refVal_setPath);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("error"))))
    {
        std::shared_ptr<Components_schemas_Metadata_error> refVal_setError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("error"))), refVal_setError );
        setError(refVal_setError);
    }
    return ok;
}


utility::string_t Metadata::getStatus() const
{
    return m_Status;
}


void Metadata::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Metadata::statusIsSet() const
{
    return m_StatusIsSet;
}

void Metadata::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t Metadata::getMethod() const
{
    return m_Method;
}


void Metadata::setMethod(const utility::string_t& value)
{
    m_Method = value;
    m_MethodIsSet = true;
}

bool Metadata::methodIsSet() const
{
    return m_MethodIsSet;
}

void Metadata::unsetMethod()
{
    m_MethodIsSet = false;
}
utility::string_t Metadata::getPath() const
{
    return m_Path;
}


void Metadata::setPath(const utility::string_t& value)
{
    m_Path = value;
    m_PathIsSet = true;
}

bool Metadata::pathIsSet() const
{
    return m_PathIsSet;
}

void Metadata::unsetPath()
{
    m_PathIsSet = false;
}
utility::datetime Metadata::getTimestamp() const
{
    return m_Timestamp;
}


void Metadata::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool Metadata::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void Metadata::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
std::shared_ptr<Components_schemas_Metadata_error> Metadata::getError() const
{
    return m_Error;
}


void Metadata::setError(const std::shared_ptr<Components_schemas_Metadata_error>& value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}

bool Metadata::errorIsSet() const
{
    return m_ErrorIsSet;
}

void Metadata::unsetError()
{
    m_ErrorIsSet = false;
}

}
}
}
}


