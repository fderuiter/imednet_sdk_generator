/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Pagination.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Pagination::Pagination()
{
    m_CurrentPage = 0;
    m_CurrentPageIsSet = false;
    m_Size = 0;
    m_SizeIsSet = false;
    m_TotalPages = 0;
    m_TotalPagesIsSet = false;
    m_TotalElements = 0;
    m_TotalElementsIsSet = false;
    m_SortIsSet = false;
}

Pagination::~Pagination()
{
}

void Pagination::validate()
{
    // TODO: implement validation
}

web::json::value Pagination::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_CurrentPageIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("currentPage"))] = ModelBase::toJson(m_CurrentPage);
    }
    if(m_SizeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("size"))] = ModelBase::toJson(m_Size);
    }
    if(m_TotalPagesIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("totalPages"))] = ModelBase::toJson(m_TotalPages);
    }
    if(m_TotalElementsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("totalElements"))] = ModelBase::toJson(m_TotalElements);
    }
    if(m_SortIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("sort"))] = ModelBase::toJson(m_Sort);
    }

    return val;
}

bool Pagination::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("currentPage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("currentPage")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCurrentPage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrentPage);
            setCurrentPage(refVal_setCurrentPage);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSize);
            setSize(refVal_setSize);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("totalPages"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("totalPages")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotalPages;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalPages);
            setTotalPages(refVal_setTotalPages);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("totalElements"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("totalElements")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotalElements;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalElements);
            setTotalElements(refVal_setTotalElements);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("sort"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("sort")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Sort>> refVal_setSort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSort);
            setSort(refVal_setSort);
            
        }
    }
    return ok;
}

void Pagination::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_CurrentPageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("currentPage")), m_CurrentPage));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("size")), m_Size));
    }
    if(m_TotalPagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("totalPages")), m_TotalPages));
    }
    if(m_TotalElementsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("totalElements")), m_TotalElements));
    }
    if(m_SortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("sort")), m_Sort));
    }
}

bool Pagination::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("currentPage"))))
    {
        int32_t refVal_setCurrentPage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("currentPage"))), refVal_setCurrentPage );
        setCurrentPage(refVal_setCurrentPage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("size"))))
    {
        int32_t refVal_setSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("size"))), refVal_setSize );
        setSize(refVal_setSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("totalPages"))))
    {
        int32_t refVal_setTotalPages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("totalPages"))), refVal_setTotalPages );
        setTotalPages(refVal_setTotalPages);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("totalElements"))))
    {
        int32_t refVal_setTotalElements;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("totalElements"))), refVal_setTotalElements );
        setTotalElements(refVal_setTotalElements);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("sort"))))
    {
        std::vector<std::shared_ptr<Sort>> refVal_setSort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("sort"))), refVal_setSort );
        setSort(refVal_setSort);
    }
    return ok;
}


int32_t Pagination::getCurrentPage() const
{
    return m_CurrentPage;
}

void Pagination::setCurrentPage(int32_t value)
{
    m_CurrentPage = value;
    m_CurrentPageIsSet = true;
}

bool Pagination::currentPageIsSet() const
{
    return m_CurrentPageIsSet;
}

void Pagination::unsetCurrentPage()
{
    m_CurrentPageIsSet = false;
}
int32_t Pagination::getSize() const
{
    return m_Size;
}

void Pagination::setSize(int32_t value)
{
    m_Size = value;
    m_SizeIsSet = true;
}

bool Pagination::sizeIsSet() const
{
    return m_SizeIsSet;
}

void Pagination::unsetSize()
{
    m_SizeIsSet = false;
}
int32_t Pagination::getTotalPages() const
{
    return m_TotalPages;
}

void Pagination::setTotalPages(int32_t value)
{
    m_TotalPages = value;
    m_TotalPagesIsSet = true;
}

bool Pagination::totalPagesIsSet() const
{
    return m_TotalPagesIsSet;
}

void Pagination::unsetTotalPages()
{
    m_TotalPagesIsSet = false;
}
int32_t Pagination::getTotalElements() const
{
    return m_TotalElements;
}

void Pagination::setTotalElements(int32_t value)
{
    m_TotalElements = value;
    m_TotalElementsIsSet = true;
}

bool Pagination::totalElementsIsSet() const
{
    return m_TotalElementsIsSet;
}

void Pagination::unsetTotalElements()
{
    m_TotalElementsIsSet = false;
}
std::vector<std::shared_ptr<Sort>> Pagination::getSort() const
{
    return m_Sort;
}


void Pagination::setSort(const std::vector<std::shared_ptr<Sort>>& value)
{
    m_Sort = value;
    m_SortIsSet = true;
}

bool Pagination::sortIsSet() const
{
    return m_SortIsSet;
}

void Pagination::unsetSort()
{
    m_SortIsSet = false;
}

}
}
}
}


