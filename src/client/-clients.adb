--  Mednet EDC API
--  The Mednet EDC (Electronic Data Capture) REST API provides a single_point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
--
--  The version of the OpenAPI document: 1.3.6
--
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.14.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with Swagger.Streams;
package body .Clients is
   pragma Style_Checks ("-bmrIu");

   Media_List_1 : constant Swagger.Mime_List := (
     1 => Swagger.Mime_Json   );


   --  List users and their roles in a study
   procedure List_Users
      (Client : in out Client_Type;
       Study_Key : in Swagger.UString;
       Page : in Swagger.Nullable_Integer;
       Size : in Swagger.Nullable_Integer;
       Sort : in Swagger.Nullable_UString;
       Include_Inactive : in Swagger.Nullable_Boolean;
       Result : out .Models.UserList_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("page", Page);
      URI.Add_Param ("size", Size);
      URI.Add_Param ("sort", Sort);
      URI.Add_Param ("includeInactive", Include_Inactive);
      URI.Set_Path ("/studies/{studyKey}/users");
      URI.Set_Path_Param ("studyKey", Study_Key);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end List_Users;

   --  List coding activities in a study
   procedure List_Codings
      (Client : in out Client_Type;
       Study_Key : in Swagger.UString;
       Page : in Swagger.Nullable_Integer;
       Size : in Swagger.Nullable_Integer;
       Sort : in Swagger.Nullable_UString;
       Filter : in Swagger.Nullable_UString;
       Result : out .Models.CodingList_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("page", Page);
      URI.Add_Param ("size", Size);
      URI.Add_Param ("sort", Sort);
      URI.Add_Param ("filter", Filter);
      URI.Set_Path ("/studies/{studyKey}/codings");
      URI.Set_Path_Param ("studyKey", Study_Key);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end List_Codings;

   --  List forms in a study
   procedure List_Forms
      (Client : in out Client_Type;
       Study_Key : in Swagger.UString;
       Page : in Swagger.Nullable_Integer;
       Size : in Swagger.Nullable_Integer;
       Sort : in Swagger.Nullable_UString;
       Filter : in Swagger.Nullable_UString;
       Result : out .Models.FormList_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("page", Page);
      URI.Add_Param ("size", Size);
      URI.Add_Param ("sort", Sort);
      URI.Add_Param ("filter", Filter);
      URI.Set_Path ("/studies/{studyKey}/forms");
      URI.Set_Path_Param ("studyKey", Study_Key);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end List_Forms;

   --  List intervals (visit definitions) in a study
   procedure List_Intervals
      (Client : in out Client_Type;
       Study_Key : in Swagger.UString;
       Page : in Swagger.Nullable_Integer;
       Size : in Swagger.Nullable_Integer;
       Sort : in Swagger.Nullable_UString;
       Filter : in Swagger.Nullable_UString;
       Result : out .Models.IntervalList_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("page", Page);
      URI.Add_Param ("size", Size);
      URI.Add_Param ("sort", Sort);
      URI.Add_Param ("filter", Filter);
      URI.Set_Path ("/studies/{studyKey}/intervals");
      URI.Set_Path_Param ("studyKey", Study_Key);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end List_Intervals;

   --  Retrieve job status by batch ID
   procedure Get_Job_Status
      (Client : in out Client_Type;
       Study_Key : in Swagger.UString;
       Batch_Id : in Swagger.UString;
       Result : out .Models.Job_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Set_Path ("/studies/{studyKey}/jobs/{batchId}");
      URI.Set_Path_Param ("studyKey", Study_Key);
      URI.Set_Path_Param ("batchId", Batch_Id);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Get_Job_Status;

   --  List data queries in a study
   procedure List_Queries
      (Client : in out Client_Type;
       Study_Key : in Swagger.UString;
       Page : in Swagger.Nullable_Integer;
       Size : in Swagger.Nullable_Integer;
       Sort : in Swagger.Nullable_UString;
       Filter : in Swagger.Nullable_UString;
       Result : out .Models.QueryList_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("page", Page);
      URI.Add_Param ("size", Size);
      URI.Add_Param ("sort", Sort);
      URI.Add_Param ("filter", Filter);
      URI.Set_Path ("/studies/{studyKey}/queries");
      URI.Set_Path_Param ("studyKey", Study_Key);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end List_Queries;

   --  List record revisions (audit trail entries) in a study
   procedure List_Record_Revisions
      (Client : in out Client_Type;
       Study_Key : in Swagger.UString;
       Page : in Swagger.Nullable_Integer;
       Size : in Swagger.Nullable_Integer;
       Sort : in Swagger.Nullable_UString;
       Filter : in Swagger.Nullable_UString;
       Result : out .Models.RecordRevisionList_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("page", Page);
      URI.Add_Param ("size", Size);
      URI.Add_Param ("sort", Sort);
      URI.Add_Param ("filter", Filter);
      URI.Set_Path ("/studies/{studyKey}/recordRevisions");
      URI.Set_Path_Param ("studyKey", Study_Key);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end List_Record_Revisions;

   --  Add new record or update subject/record data
   procedure Create_Records
      (Client : in out Client_Type;
       Study_Key : in Swagger.UString;
       Components_Schemas_Record_Create_Request_Item : in .Models.ComponentsSchemasRecordCreateRequestItem_Type_Vectors.Vector;
       Result : out .Models.RecordJobStatus_Type) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);
      Client.Initialize (Req, Media_List_1);
      .Models.Serialize (Req.Stream, "", Components_Schemas_Record_Create_Request_Item);

      URI.Set_Path ("/studies/{studyKey}/records");
      URI.Set_Path_Param ("studyKey", Study_Key);
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Create_Records;

   --  List records (eCRF instances) in a study
   procedure List_Records
      (Client : in out Client_Type;
       Study_Key : in Swagger.UString;
       Page : in Swagger.Nullable_Integer;
       Size : in Swagger.Nullable_Integer;
       Sort : in Swagger.Nullable_UString;
       Filter : in Swagger.Nullable_UString;
       Record_Data_Filter : in Swagger.Nullable_UString;
       Result : out .Models.RecordList_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("page", Page);
      URI.Add_Param ("size", Size);
      URI.Add_Param ("sort", Sort);
      URI.Add_Param ("filter", Filter);
      URI.Add_Param ("recordDataFilter", Record_Data_Filter);
      URI.Set_Path ("/studies/{studyKey}/records");
      URI.Set_Path_Param ("studyKey", Study_Key);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end List_Records;

   --  List sites for a study
   procedure List_Sites
      (Client : in out Client_Type;
       Study_Key : in Swagger.UString;
       Page : in Swagger.Nullable_Integer;
       Size : in Swagger.Nullable_Integer;
       Sort : in Swagger.Nullable_UString;
       Filter : in Swagger.Nullable_UString;
       Result : out .Models.SiteList_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("page", Page);
      URI.Add_Param ("size", Size);
      URI.Add_Param ("sort", Sort);
      URI.Add_Param ("filter", Filter);
      URI.Set_Path ("/studies/{studyKey}/sites");
      URI.Set_Path_Param ("studyKey", Study_Key);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end List_Sites;

   --  List studies accessible by API key
   procedure List_Studies
      (Client : in out Client_Type;
       Page : in Swagger.Nullable_Integer;
       Size : in Swagger.Nullable_Integer;
       Sort : in Swagger.Nullable_UString;
       Filter : in Swagger.Nullable_UString;
       Result : out .Models.StudyList_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("page", Page);
      URI.Add_Param ("size", Size);
      URI.Add_Param ("sort", Sort);
      URI.Add_Param ("filter", Filter);
      URI.Set_Path ("/studies");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end List_Studies;

   --  List subjects in a study
   procedure List_Subjects
      (Client : in out Client_Type;
       Study_Key : in Swagger.UString;
       Page : in Swagger.Nullable_Integer;
       Size : in Swagger.Nullable_Integer;
       Sort : in Swagger.Nullable_UString;
       Filter : in Swagger.Nullable_UString;
       Result : out .Models.SubjectList_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("page", Page);
      URI.Add_Param ("size", Size);
      URI.Add_Param ("sort", Sort);
      URI.Add_Param ("filter", Filter);
      URI.Set_Path ("/studies/{studyKey}/subjects");
      URI.Set_Path_Param ("studyKey", Study_Key);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end List_Subjects;

   --  List variables (fields) in a study
   procedure List_Variables
      (Client : in out Client_Type;
       Study_Key : in Swagger.UString;
       Page : in Swagger.Nullable_Integer;
       Size : in Swagger.Nullable_Integer;
       Sort : in Swagger.Nullable_UString;
       Filter : in Swagger.Nullable_UString;
       Result : out .Models.VariableList_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("page", Page);
      URI.Add_Param ("size", Size);
      URI.Add_Param ("sort", Sort);
      URI.Add_Param ("filter", Filter);
      URI.Set_Path ("/studies/{studyKey}/variables");
      URI.Set_Path_Param ("studyKey", Study_Key);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end List_Variables;

   --  List visits (subject visit instances) in a study
   procedure List_Visits
      (Client : in out Client_Type;
       Study_Key : in Swagger.UString;
       Page : in Swagger.Nullable_Integer;
       Size : in Swagger.Nullable_Integer;
       Sort : in Swagger.Nullable_UString;
       Filter : in Swagger.Nullable_UString;
       Result : out .Models.VisitList_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept (Media_List_1);


      URI.Add_Param ("page", Page);
      URI.Add_Param ("size", Size);
      URI.Add_Param ("sort", Sort);
      URI.Add_Param ("filter", Filter);
      URI.Set_Path ("/studies/{studyKey}/visits");
      URI.Set_Path_Param ("studyKey", Study_Key);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end List_Visits;
end .Clients;
