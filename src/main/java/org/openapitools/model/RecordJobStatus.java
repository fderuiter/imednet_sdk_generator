/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * RecordJobStatus
 */
@JsonPropertyOrder({
  RecordJobStatus.JSON_PROPERTY_JOB_ID,
  RecordJobStatus.JSON_PROPERTY_BATCH_ID,
  RecordJobStatus.JSON_PROPERTY_STATE
})
@JsonTypeName("RecordJobStatus")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2025-07-14T13:50:33.483639736Z[Etc/UTC]", comments = "Generator version: 7.14.0")
@Introspected
public class RecordJobStatus {
    public static final String JSON_PROPERTY_JOB_ID = "jobId";
    private String jobId;

    public static final String JSON_PROPERTY_BATCH_ID = "batchId";
    private String batchId;

    public static final String JSON_PROPERTY_STATE = "state";
    private String state;

    public RecordJobStatus() {
    }

    public RecordJobStatus jobId(String jobId) {
        this.jobId = jobId;
        return this;
    }

    /**
     * Unique job identifier
     * @return jobId
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_JOB_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getJobId() {
        return jobId;
    }

    @JsonProperty(JSON_PROPERTY_JOB_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setJobId(String jobId) {
        this.jobId = jobId;
    }

    public RecordJobStatus batchId(String batchId) {
        this.batchId = batchId;
        return this;
    }

    /**
     * Batch ID used to track the job (identical to jobId in most cases)
     * @return batchId
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_BATCH_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getBatchId() {
        return batchId;
    }

    @JsonProperty(JSON_PROPERTY_BATCH_ID)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setBatchId(String batchId) {
        this.batchId = batchId;
    }

    public RecordJobStatus state(String state) {
        this.state = state;
        return this;
    }

    /**
     * Current state of the job (e.g., created, completed)
     * @return state
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_STATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getState() {
        return state;
    }

    @JsonProperty(JSON_PROPERTY_STATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setState(String state) {
        this.state = state;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RecordJobStatus recordJobStatus = (RecordJobStatus) o;
        return Objects.equals(this.jobId, recordJobStatus.jobId) &&
            Objects.equals(this.batchId, recordJobStatus.batchId) &&
            Objects.equals(this.state, recordJobStatus.state);
    }

    @Override
    public int hashCode() {
        return Objects.hash(jobId, batchId, state);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class RecordJobStatus {\n");
        sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
        sb.append("    batchId: ").append(toIndentedString(batchId)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

