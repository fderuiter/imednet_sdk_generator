/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.model.Sort;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Pagination
 */
@JsonPropertyOrder({
  Pagination.JSON_PROPERTY_CURRENT_PAGE,
  Pagination.JSON_PROPERTY_SIZE,
  Pagination.JSON_PROPERTY_TOTAL_PAGES,
  Pagination.JSON_PROPERTY_TOTAL_ELEMENTS,
  Pagination.JSON_PROPERTY_SORT
})
@JsonTypeName("Pagination")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2025-07-14T13:50:33.483639736Z[Etc/UTC]", comments = "Generator version: 7.14.0")
@Introspected
public class Pagination {
    public static final String JSON_PROPERTY_CURRENT_PAGE = "currentPage";
    private Integer currentPage;

    public static final String JSON_PROPERTY_SIZE = "size";
    private Integer size;

    public static final String JSON_PROPERTY_TOTAL_PAGES = "totalPages";
    private Integer totalPages;

    public static final String JSON_PROPERTY_TOTAL_ELEMENTS = "totalElements";
    private Integer totalElements;

    public static final String JSON_PROPERTY_SORT = "sort";
    private List<@Valid Sort> sort = null;

    public Pagination() {
    }

    public Pagination currentPage(Integer currentPage) {
        this.currentPage = currentPage;
        return this;
    }

    /**
     * Current index page returned
     * @return currentPage
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_CURRENT_PAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getCurrentPage() {
        return currentPage;
    }

    @JsonProperty(JSON_PROPERTY_CURRENT_PAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setCurrentPage(Integer currentPage) {
        this.currentPage = currentPage;
    }

    public Pagination size(Integer size) {
        this.size = size;
        return this;
    }

    /**
     * Number of items per page returned
     * @return size
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_SIZE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getSize() {
        return size;
    }

    @JsonProperty(JSON_PROPERTY_SIZE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSize(Integer size) {
        this.size = size;
    }

    public Pagination totalPages(Integer totalPages) {
        this.totalPages = totalPages;
        return this;
    }

    /**
     * Total number of pages available
     * @return totalPages
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_TOTAL_PAGES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getTotalPages() {
        return totalPages;
    }

    @JsonProperty(JSON_PROPERTY_TOTAL_PAGES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTotalPages(Integer totalPages) {
        this.totalPages = totalPages;
    }

    public Pagination totalElements(Integer totalElements) {
        this.totalElements = totalElements;
        return this;
    }

    /**
     * Total number of elements (items) available
     * @return totalElements
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_TOTAL_ELEMENTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getTotalElements() {
        return totalElements;
    }

    @JsonProperty(JSON_PROPERTY_TOTAL_ELEMENTS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTotalElements(Integer totalElements) {
        this.totalElements = totalElements;
    }

    public Pagination sort(List<@Valid Sort> sort) {
        this.sort = sort;
        return this;
    }

    public Pagination addSortItem(Sort sortItem) {
        if (this.sort == null) {
            this.sort = new ArrayList<>();
        }
        this.sort.add(sortItem);
        return this;
    }

    /**
     * Get sort
     * @return sort
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_SORT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public List<@Valid Sort> getSort() {
        return sort;
    }

    @JsonProperty(JSON_PROPERTY_SORT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSort(List<@Valid Sort> sort) {
        this.sort = sort;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Pagination pagination = (Pagination) o;
        return Objects.equals(this.currentPage, pagination.currentPage) &&
            Objects.equals(this.size, pagination.size) &&
            Objects.equals(this.totalPages, pagination.totalPages) &&
            Objects.equals(this.totalElements, pagination.totalElements) &&
            Objects.equals(this.sort, pagination.sort);
    }

    @Override
    public int hashCode() {
        return Objects.hash(currentPage, size, totalPages, totalElements, sort);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Pagination {\n");
        sb.append("    currentPage: ").append(toIndentedString(currentPage)).append("\n");
        sb.append("    size: ").append(toIndentedString(size)).append("\n");
        sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
        sb.append("    totalElements: ").append(toIndentedString(totalElements)).append("\n");
        sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

