/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import org.openapitools.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Coding".equalsIgnoreCase(className)) {
      return new TypeToken<List<Coding>>(){}.getType();
    }
    
    if ("CodingList".equalsIgnoreCase(className)) {
      return new TypeToken<List<CodingList>>(){}.getType();
    }
    
    if ("ComponentsSchemasIntervalFormsItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<ComponentsSchemasIntervalFormsItem>>(){}.getType();
    }
    
    if ("ComponentsSchemasMetadataError".equalsIgnoreCase(className)) {
      return new TypeToken<List<ComponentsSchemasMetadataError>>(){}.getType();
    }
    
    if ("ComponentsSchemasRecordCreateRequestItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<ComponentsSchemasRecordCreateRequestItem>>(){}.getType();
    }
    
    if ("Form".equalsIgnoreCase(className)) {
      return new TypeToken<List<Form>>(){}.getType();
    }
    
    if ("FormList".equalsIgnoreCase(className)) {
      return new TypeToken<List<FormList>>(){}.getType();
    }
    
    if ("InlineObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineObject>>(){}.getType();
    }
    
    if ("InlineObject1".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineObject1>>(){}.getType();
    }
    
    if ("InlineObject2".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineObject2>>(){}.getType();
    }
    
    if ("InlineObject3".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineObject3>>(){}.getType();
    }
    
    if ("InlineObject4".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineObject4>>(){}.getType();
    }
    
    if ("InlineObject5".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineObject5>>(){}.getType();
    }
    
    if ("Interval".equalsIgnoreCase(className)) {
      return new TypeToken<List<Interval>>(){}.getType();
    }
    
    if ("IntervalList".equalsIgnoreCase(className)) {
      return new TypeToken<List<IntervalList>>(){}.getType();
    }
    
    if ("Job".equalsIgnoreCase(className)) {
      return new TypeToken<List<Job>>(){}.getType();
    }
    
    if ("Keyword".equalsIgnoreCase(className)) {
      return new TypeToken<List<Keyword>>(){}.getType();
    }
    
    if ("Metadata".equalsIgnoreCase(className)) {
      return new TypeToken<List<Metadata>>(){}.getType();
    }
    
    if ("Pagination".equalsIgnoreCase(className)) {
      return new TypeToken<List<Pagination>>(){}.getType();
    }
    
    if ("Query".equalsIgnoreCase(className)) {
      return new TypeToken<List<Query>>(){}.getType();
    }
    
    if ("QueryComment".equalsIgnoreCase(className)) {
      return new TypeToken<List<QueryComment>>(){}.getType();
    }
    
    if ("QueryList".equalsIgnoreCase(className)) {
      return new TypeToken<List<QueryList>>(){}.getType();
    }
    
    if ("Record".equalsIgnoreCase(className)) {
      return new TypeToken<List<Record>>(){}.getType();
    }
    
    if ("RecordJobStatus".equalsIgnoreCase(className)) {
      return new TypeToken<List<RecordJobStatus>>(){}.getType();
    }
    
    if ("RecordList".equalsIgnoreCase(className)) {
      return new TypeToken<List<RecordList>>(){}.getType();
    }
    
    if ("RecordRevision".equalsIgnoreCase(className)) {
      return new TypeToken<List<RecordRevision>>(){}.getType();
    }
    
    if ("RecordRevisionList".equalsIgnoreCase(className)) {
      return new TypeToken<List<RecordRevisionList>>(){}.getType();
    }
    
    if ("Role".equalsIgnoreCase(className)) {
      return new TypeToken<List<Role>>(){}.getType();
    }
    
    if ("Site".equalsIgnoreCase(className)) {
      return new TypeToken<List<Site>>(){}.getType();
    }
    
    if ("SiteList".equalsIgnoreCase(className)) {
      return new TypeToken<List<SiteList>>(){}.getType();
    }
    
    if ("Sort".equalsIgnoreCase(className)) {
      return new TypeToken<List<Sort>>(){}.getType();
    }
    
    if ("Study".equalsIgnoreCase(className)) {
      return new TypeToken<List<Study>>(){}.getType();
    }
    
    if ("StudyList".equalsIgnoreCase(className)) {
      return new TypeToken<List<StudyList>>(){}.getType();
    }
    
    if ("Subject".equalsIgnoreCase(className)) {
      return new TypeToken<List<Subject>>(){}.getType();
    }
    
    if ("SubjectList".equalsIgnoreCase(className)) {
      return new TypeToken<List<SubjectList>>(){}.getType();
    }
    
    if ("User".equalsIgnoreCase(className)) {
      return new TypeToken<List<User>>(){}.getType();
    }
    
    if ("UserList".equalsIgnoreCase(className)) {
      return new TypeToken<List<UserList>>(){}.getType();
    }
    
    if ("Variable".equalsIgnoreCase(className)) {
      return new TypeToken<List<Variable>>(){}.getType();
    }
    
    if ("VariableList".equalsIgnoreCase(className)) {
      return new TypeToken<List<VariableList>>(){}.getType();
    }
    
    if ("Visit".equalsIgnoreCase(className)) {
      return new TypeToken<List<Visit>>(){}.getType();
    }
    
    if ("VisitList".equalsIgnoreCase(className)) {
      return new TypeToken<List<VisitList>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("Coding".equalsIgnoreCase(className)) {
      return new TypeToken<Coding>(){}.getType();
    }
    
    if ("CodingList".equalsIgnoreCase(className)) {
      return new TypeToken<CodingList>(){}.getType();
    }
    
    if ("ComponentsSchemasIntervalFormsItem".equalsIgnoreCase(className)) {
      return new TypeToken<ComponentsSchemasIntervalFormsItem>(){}.getType();
    }
    
    if ("ComponentsSchemasMetadataError".equalsIgnoreCase(className)) {
      return new TypeToken<ComponentsSchemasMetadataError>(){}.getType();
    }
    
    if ("ComponentsSchemasRecordCreateRequestItem".equalsIgnoreCase(className)) {
      return new TypeToken<ComponentsSchemasRecordCreateRequestItem>(){}.getType();
    }
    
    if ("Form".equalsIgnoreCase(className)) {
      return new TypeToken<Form>(){}.getType();
    }
    
    if ("FormList".equalsIgnoreCase(className)) {
      return new TypeToken<FormList>(){}.getType();
    }
    
    if ("InlineObject".equalsIgnoreCase(className)) {
      return new TypeToken<InlineObject>(){}.getType();
    }
    
    if ("InlineObject1".equalsIgnoreCase(className)) {
      return new TypeToken<InlineObject1>(){}.getType();
    }
    
    if ("InlineObject2".equalsIgnoreCase(className)) {
      return new TypeToken<InlineObject2>(){}.getType();
    }
    
    if ("InlineObject3".equalsIgnoreCase(className)) {
      return new TypeToken<InlineObject3>(){}.getType();
    }
    
    if ("InlineObject4".equalsIgnoreCase(className)) {
      return new TypeToken<InlineObject4>(){}.getType();
    }
    
    if ("InlineObject5".equalsIgnoreCase(className)) {
      return new TypeToken<InlineObject5>(){}.getType();
    }
    
    if ("Interval".equalsIgnoreCase(className)) {
      return new TypeToken<Interval>(){}.getType();
    }
    
    if ("IntervalList".equalsIgnoreCase(className)) {
      return new TypeToken<IntervalList>(){}.getType();
    }
    
    if ("Job".equalsIgnoreCase(className)) {
      return new TypeToken<Job>(){}.getType();
    }
    
    if ("Keyword".equalsIgnoreCase(className)) {
      return new TypeToken<Keyword>(){}.getType();
    }
    
    if ("Metadata".equalsIgnoreCase(className)) {
      return new TypeToken<Metadata>(){}.getType();
    }
    
    if ("Pagination".equalsIgnoreCase(className)) {
      return new TypeToken<Pagination>(){}.getType();
    }
    
    if ("Query".equalsIgnoreCase(className)) {
      return new TypeToken<Query>(){}.getType();
    }
    
    if ("QueryComment".equalsIgnoreCase(className)) {
      return new TypeToken<QueryComment>(){}.getType();
    }
    
    if ("QueryList".equalsIgnoreCase(className)) {
      return new TypeToken<QueryList>(){}.getType();
    }
    
    if ("Record".equalsIgnoreCase(className)) {
      return new TypeToken<Record>(){}.getType();
    }
    
    if ("RecordJobStatus".equalsIgnoreCase(className)) {
      return new TypeToken<RecordJobStatus>(){}.getType();
    }
    
    if ("RecordList".equalsIgnoreCase(className)) {
      return new TypeToken<RecordList>(){}.getType();
    }
    
    if ("RecordRevision".equalsIgnoreCase(className)) {
      return new TypeToken<RecordRevision>(){}.getType();
    }
    
    if ("RecordRevisionList".equalsIgnoreCase(className)) {
      return new TypeToken<RecordRevisionList>(){}.getType();
    }
    
    if ("Role".equalsIgnoreCase(className)) {
      return new TypeToken<Role>(){}.getType();
    }
    
    if ("Site".equalsIgnoreCase(className)) {
      return new TypeToken<Site>(){}.getType();
    }
    
    if ("SiteList".equalsIgnoreCase(className)) {
      return new TypeToken<SiteList>(){}.getType();
    }
    
    if ("Sort".equalsIgnoreCase(className)) {
      return new TypeToken<Sort>(){}.getType();
    }
    
    if ("Study".equalsIgnoreCase(className)) {
      return new TypeToken<Study>(){}.getType();
    }
    
    if ("StudyList".equalsIgnoreCase(className)) {
      return new TypeToken<StudyList>(){}.getType();
    }
    
    if ("Subject".equalsIgnoreCase(className)) {
      return new TypeToken<Subject>(){}.getType();
    }
    
    if ("SubjectList".equalsIgnoreCase(className)) {
      return new TypeToken<SubjectList>(){}.getType();
    }
    
    if ("User".equalsIgnoreCase(className)) {
      return new TypeToken<User>(){}.getType();
    }
    
    if ("UserList".equalsIgnoreCase(className)) {
      return new TypeToken<UserList>(){}.getType();
    }
    
    if ("Variable".equalsIgnoreCase(className)) {
      return new TypeToken<Variable>(){}.getType();
    }
    
    if ("VariableList".equalsIgnoreCase(className)) {
      return new TypeToken<VariableList>(){}.getType();
    }
    
    if ("Visit".equalsIgnoreCase(className)) {
      return new TypeToken<Visit>(){}.getType();
    }
    
    if ("VisitList".equalsIgnoreCase(className)) {
      return new TypeToken<VisitList>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
