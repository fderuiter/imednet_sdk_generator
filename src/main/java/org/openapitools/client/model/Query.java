/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.QueryComment;




public class Query  {
  
 /**
   * Unique study key
  **/
  private String studyKey;

 /**
   * Mednet subject ID associated with the query (if applicable)
  **/
  private Integer subjectId;

 /**
   * Client-assigned subject OID (if applicable)
  **/
  private String subjectOid;

 /**
   * Category/type of the query (e.g., subject, record, question)
  **/
  private String annotationType;

 /**
   * Unique system identifier for the query
  **/
  private Integer annotationId;

 /**
   * System text identifier for the query type/location (subject, record, question)
  **/
  private String type;

 /**
   * Description of the query (e.g., reason or context)
  **/
  private String description;

 /**
   * Record ID associated with the query (if applicable)
  **/
  private Integer recordId;

 /**
   * Variable name (field) associated with the query (if applicable)
  **/
  private String variable;

 /**
   * Subject display ID associated with the query (if applicable)
  **/
  private String subjectKey;

 /**
   * Date when the query was created
  **/
  private String dateCreated;

 /**
   * Date when the query was last modified
  **/
  private String dateModified;

 /**
   * History of comments/actions on the query
  **/
  private List<QueryComment> queryComments = null;

 /**
   * Unique study key
   * @return studyKey
  **/
  public String getStudyKey() {
    return studyKey;
  }

  /**
    * Set studyKey
  **/
  public void setStudyKey(String studyKey) {
    this.studyKey = studyKey;
  }

  public Query studyKey(String studyKey) {
    this.studyKey = studyKey;
    return this;
  }

 /**
   * Mednet subject ID associated with the query (if applicable)
   * @return subjectId
  **/
  public Integer getSubjectId() {
    return subjectId;
  }

  /**
    * Set subjectId
  **/
  public void setSubjectId(Integer subjectId) {
    this.subjectId = subjectId;
  }

  public Query subjectId(Integer subjectId) {
    this.subjectId = subjectId;
    return this;
  }

 /**
   * Client-assigned subject OID (if applicable)
   * @return subjectOid
  **/
  public String getSubjectOid() {
    return subjectOid;
  }

  /**
    * Set subjectOid
  **/
  public void setSubjectOid(String subjectOid) {
    this.subjectOid = subjectOid;
  }

  public Query subjectOid(String subjectOid) {
    this.subjectOid = subjectOid;
    return this;
  }

 /**
   * Category/type of the query (e.g., subject, record, question)
   * @return annotationType
  **/
  public String getAnnotationType() {
    return annotationType;
  }

  /**
    * Set annotationType
  **/
  public void setAnnotationType(String annotationType) {
    this.annotationType = annotationType;
  }

  public Query annotationType(String annotationType) {
    this.annotationType = annotationType;
    return this;
  }

 /**
   * Unique system identifier for the query
   * @return annotationId
  **/
  public Integer getAnnotationId() {
    return annotationId;
  }

  /**
    * Set annotationId
  **/
  public void setAnnotationId(Integer annotationId) {
    this.annotationId = annotationId;
  }

  public Query annotationId(Integer annotationId) {
    this.annotationId = annotationId;
    return this;
  }

 /**
   * System text identifier for the query type/location (subject, record, question)
   * @return type
  **/
  public String getType() {
    return type;
  }

  /**
    * Set type
  **/
  public void setType(String type) {
    this.type = type;
  }

  public Query type(String type) {
    this.type = type;
    return this;
  }

 /**
   * Description of the query (e.g., reason or context)
   * @return description
  **/
  public String getDescription() {
    return description;
  }

  /**
    * Set description
  **/
  public void setDescription(String description) {
    this.description = description;
  }

  public Query description(String description) {
    this.description = description;
    return this;
  }

 /**
   * Record ID associated with the query (if applicable)
   * @return recordId
  **/
  public Integer getRecordId() {
    return recordId;
  }

  /**
    * Set recordId
  **/
  public void setRecordId(Integer recordId) {
    this.recordId = recordId;
  }

  public Query recordId(Integer recordId) {
    this.recordId = recordId;
    return this;
  }

 /**
   * Variable name (field) associated with the query (if applicable)
   * @return variable
  **/
  public String getVariable() {
    return variable;
  }

  /**
    * Set variable
  **/
  public void setVariable(String variable) {
    this.variable = variable;
  }

  public Query variable(String variable) {
    this.variable = variable;
    return this;
  }

 /**
   * Subject display ID associated with the query (if applicable)
   * @return subjectKey
  **/
  public String getSubjectKey() {
    return subjectKey;
  }

  /**
    * Set subjectKey
  **/
  public void setSubjectKey(String subjectKey) {
    this.subjectKey = subjectKey;
  }

  public Query subjectKey(String subjectKey) {
    this.subjectKey = subjectKey;
    return this;
  }

 /**
   * Date when the query was created
   * @return dateCreated
  **/
  public String getDateCreated() {
    return dateCreated;
  }

  /**
    * Set dateCreated
  **/
  public void setDateCreated(String dateCreated) {
    this.dateCreated = dateCreated;
  }

  public Query dateCreated(String dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

 /**
   * Date when the query was last modified
   * @return dateModified
  **/
  public String getDateModified() {
    return dateModified;
  }

  /**
    * Set dateModified
  **/
  public void setDateModified(String dateModified) {
    this.dateModified = dateModified;
  }

  public Query dateModified(String dateModified) {
    this.dateModified = dateModified;
    return this;
  }

 /**
   * History of comments/actions on the query
   * @return queryComments
  **/
  public List<QueryComment> getQueryComments() {
    return queryComments;
  }

  /**
    * Set queryComments
  **/
  public void setQueryComments(List<QueryComment> queryComments) {
    this.queryComments = queryComments;
  }

  public Query queryComments(List<QueryComment> queryComments) {
    this.queryComments = queryComments;
    return this;
  }

  public Query addQueryCommentsItem(QueryComment queryCommentsItem) {
    this.queryComments.add(queryCommentsItem);
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Query {\n");
    
    sb.append("    studyKey: ").append(toIndentedString(studyKey)).append("\n");
    sb.append("    subjectId: ").append(toIndentedString(subjectId)).append("\n");
    sb.append("    subjectOid: ").append(toIndentedString(subjectOid)).append("\n");
    sb.append("    annotationType: ").append(toIndentedString(annotationType)).append("\n");
    sb.append("    annotationId: ").append(toIndentedString(annotationId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    recordId: ").append(toIndentedString(recordId)).append("\n");
    sb.append("    variable: ").append(toIndentedString(variable)).append("\n");
    sb.append("    subjectKey: ").append(toIndentedString(subjectKey)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    queryComments: ").append(toIndentedString(queryComments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

