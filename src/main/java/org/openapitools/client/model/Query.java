/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.*;
import org.openapitools.client.model.QueryComment;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class Query {
  
  @SerializedName("studyKey")
  private String studyKey = null;
  @SerializedName("subjectId")
  private Integer subjectId = null;
  @SerializedName("subjectOid")
  private String subjectOid = null;
  @SerializedName("annotationType")
  private String annotationType = null;
  @SerializedName("annotationId")
  private Integer annotationId = null;
  @SerializedName("type")
  private String type = null;
  @SerializedName("description")
  private String description = null;
  @SerializedName("recordId")
  private Integer recordId = null;
  @SerializedName("variable")
  private String variable = null;
  @SerializedName("subjectKey")
  private String subjectKey = null;
  @SerializedName("dateCreated")
  private String dateCreated = null;
  @SerializedName("dateModified")
  private String dateModified = null;
  @SerializedName("queryComments")
  private List<QueryComment> queryComments = null;

  /**
   * Unique study key
   **/
  @ApiModelProperty(value = "Unique study key")
  public String getStudyKey() {
    return studyKey;
  }
  public void setStudyKey(String studyKey) {
    this.studyKey = studyKey;
  }

  /**
   * Mednet subject ID associated with the query (if applicable)
   **/
  @ApiModelProperty(value = "Mednet subject ID associated with the query (if applicable)")
  public Integer getSubjectId() {
    return subjectId;
  }
  public void setSubjectId(Integer subjectId) {
    this.subjectId = subjectId;
  }

  /**
   * Client-assigned subject OID (if applicable)
   **/
  @ApiModelProperty(value = "Client-assigned subject OID (if applicable)")
  public String getSubjectOid() {
    return subjectOid;
  }
  public void setSubjectOid(String subjectOid) {
    this.subjectOid = subjectOid;
  }

  /**
   * Category/type of the query (e.g., subject, record, question)
   **/
  @ApiModelProperty(value = "Category/type of the query (e.g., subject, record, question)")
  public String getAnnotationType() {
    return annotationType;
  }
  public void setAnnotationType(String annotationType) {
    this.annotationType = annotationType;
  }

  /**
   * Unique system identifier for the query
   **/
  @ApiModelProperty(value = "Unique system identifier for the query")
  public Integer getAnnotationId() {
    return annotationId;
  }
  public void setAnnotationId(Integer annotationId) {
    this.annotationId = annotationId;
  }

  /**
   * System text identifier for the query type/location (subject, record, question)
   **/
  @ApiModelProperty(value = "System text identifier for the query type/location (subject, record, question)")
  public String getType() {
    return type;
  }
  public void setType(String type) {
    this.type = type;
  }

  /**
   * Description of the query (e.g., reason or context)
   **/
  @ApiModelProperty(value = "Description of the query (e.g., reason or context)")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * Record ID associated with the query (if applicable)
   **/
  @ApiModelProperty(value = "Record ID associated with the query (if applicable)")
  public Integer getRecordId() {
    return recordId;
  }
  public void setRecordId(Integer recordId) {
    this.recordId = recordId;
  }

  /**
   * Variable name (field) associated with the query (if applicable)
   **/
  @ApiModelProperty(value = "Variable name (field) associated with the query (if applicable)")
  public String getVariable() {
    return variable;
  }
  public void setVariable(String variable) {
    this.variable = variable;
  }

  /**
   * Subject display ID associated with the query (if applicable)
   **/
  @ApiModelProperty(value = "Subject display ID associated with the query (if applicable)")
  public String getSubjectKey() {
    return subjectKey;
  }
  public void setSubjectKey(String subjectKey) {
    this.subjectKey = subjectKey;
  }

  /**
   * Date when the query was created
   **/
  @ApiModelProperty(value = "Date when the query was created")
  public String getDateCreated() {
    return dateCreated;
  }
  public void setDateCreated(String dateCreated) {
    this.dateCreated = dateCreated;
  }

  /**
   * Date when the query was last modified
   **/
  @ApiModelProperty(value = "Date when the query was last modified")
  public String getDateModified() {
    return dateModified;
  }
  public void setDateModified(String dateModified) {
    this.dateModified = dateModified;
  }

  /**
   * History of comments/actions on the query
   **/
  @ApiModelProperty(value = "History of comments/actions on the query")
  public List<QueryComment> getQueryComments() {
    return queryComments;
  }
  public void setQueryComments(List<QueryComment> queryComments) {
    this.queryComments = queryComments;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Query query = (Query) o;
    return (this.studyKey == null ? query.studyKey == null : this.studyKey.equals(query.studyKey)) &&
        (this.subjectId == null ? query.subjectId == null : this.subjectId.equals(query.subjectId)) &&
        (this.subjectOid == null ? query.subjectOid == null : this.subjectOid.equals(query.subjectOid)) &&
        (this.annotationType == null ? query.annotationType == null : this.annotationType.equals(query.annotationType)) &&
        (this.annotationId == null ? query.annotationId == null : this.annotationId.equals(query.annotationId)) &&
        (this.type == null ? query.type == null : this.type.equals(query.type)) &&
        (this.description == null ? query.description == null : this.description.equals(query.description)) &&
        (this.recordId == null ? query.recordId == null : this.recordId.equals(query.recordId)) &&
        (this.variable == null ? query.variable == null : this.variable.equals(query.variable)) &&
        (this.subjectKey == null ? query.subjectKey == null : this.subjectKey.equals(query.subjectKey)) &&
        (this.dateCreated == null ? query.dateCreated == null : this.dateCreated.equals(query.dateCreated)) &&
        (this.dateModified == null ? query.dateModified == null : this.dateModified.equals(query.dateModified)) &&
        (this.queryComments == null ? query.queryComments == null : this.queryComments.equals(query.queryComments));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.studyKey == null ? 0: this.studyKey.hashCode());
    result = 31 * result + (this.subjectId == null ? 0: this.subjectId.hashCode());
    result = 31 * result + (this.subjectOid == null ? 0: this.subjectOid.hashCode());
    result = 31 * result + (this.annotationType == null ? 0: this.annotationType.hashCode());
    result = 31 * result + (this.annotationId == null ? 0: this.annotationId.hashCode());
    result = 31 * result + (this.type == null ? 0: this.type.hashCode());
    result = 31 * result + (this.description == null ? 0: this.description.hashCode());
    result = 31 * result + (this.recordId == null ? 0: this.recordId.hashCode());
    result = 31 * result + (this.variable == null ? 0: this.variable.hashCode());
    result = 31 * result + (this.subjectKey == null ? 0: this.subjectKey.hashCode());
    result = 31 * result + (this.dateCreated == null ? 0: this.dateCreated.hashCode());
    result = 31 * result + (this.dateModified == null ? 0: this.dateModified.hashCode());
    result = 31 * result + (this.queryComments == null ? 0: this.queryComments.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class Query {\n");
    
    sb.append("  studyKey: ").append(studyKey).append("\n");
    sb.append("  subjectId: ").append(subjectId).append("\n");
    sb.append("  subjectOid: ").append(subjectOid).append("\n");
    sb.append("  annotationType: ").append(annotationType).append("\n");
    sb.append("  annotationId: ").append(annotationId).append("\n");
    sb.append("  type: ").append(type).append("\n");
    sb.append("  description: ").append(description).append("\n");
    sb.append("  recordId: ").append(recordId).append("\n");
    sb.append("  variable: ").append(variable).append("\n");
    sb.append("  subjectKey: ").append(subjectKey).append("\n");
    sb.append("  dateCreated: ").append(dateCreated).append("\n");
    sb.append("  dateModified: ").append(dateModified).append("\n");
    sb.append("  queryComments: ").append(queryComments).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
