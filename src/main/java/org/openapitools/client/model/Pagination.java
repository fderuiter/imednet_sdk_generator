/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Sort;




public class Pagination  {
  
 /**
   * Current index page returned
  **/
  private Integer currentPage;

 /**
   * Number of items per page returned
  **/
  private Integer size;

 /**
   * Total number of pages available
  **/
  private Integer totalPages;

 /**
   * Total number of elements (items) available
  **/
  private Integer totalElements;

  private List<Sort> sort = null;

 /**
   * Current index page returned
   * @return currentPage
  **/
  public Integer getCurrentPage() {
    return currentPage;
  }

  /**
    * Set currentPage
  **/
  public void setCurrentPage(Integer currentPage) {
    this.currentPage = currentPage;
  }

  public Pagination currentPage(Integer currentPage) {
    this.currentPage = currentPage;
    return this;
  }

 /**
   * Number of items per page returned
   * @return size
  **/
  public Integer getSize() {
    return size;
  }

  /**
    * Set size
  **/
  public void setSize(Integer size) {
    this.size = size;
  }

  public Pagination size(Integer size) {
    this.size = size;
    return this;
  }

 /**
   * Total number of pages available
   * @return totalPages
  **/
  public Integer getTotalPages() {
    return totalPages;
  }

  /**
    * Set totalPages
  **/
  public void setTotalPages(Integer totalPages) {
    this.totalPages = totalPages;
  }

  public Pagination totalPages(Integer totalPages) {
    this.totalPages = totalPages;
    return this;
  }

 /**
   * Total number of elements (items) available
   * @return totalElements
  **/
  public Integer getTotalElements() {
    return totalElements;
  }

  /**
    * Set totalElements
  **/
  public void setTotalElements(Integer totalElements) {
    this.totalElements = totalElements;
  }

  public Pagination totalElements(Integer totalElements) {
    this.totalElements = totalElements;
    return this;
  }

 /**
   * Get sort
   * @return sort
  **/
  public List<Sort> getSort() {
    return sort;
  }

  /**
    * Set sort
  **/
  public void setSort(List<Sort> sort) {
    this.sort = sort;
  }

  public Pagination sort(List<Sort> sort) {
    this.sort = sort;
    return this;
  }

  public Pagination addSortItem(Sort sortItem) {
    this.sort.add(sortItem);
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pagination {\n");
    
    sb.append("    currentPage: ").append(toIndentedString(currentPage)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
    sb.append("    totalElements: ").append(toIndentedString(totalElements)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

