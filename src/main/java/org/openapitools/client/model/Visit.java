/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;




public class Visit  {
  
 /**
   * Unique study key
  **/
  private String studyKey;

 /**
   * Unique system identifier for the subject visit instance
  **/
  private Integer visitId;

 /**
   * Unique system identifier of the interval definition for this visit
  **/
  private Integer intervalId;

 /**
   * Name of the interval (visit) for this visit instance
  **/
  private String intervalName;

 /**
   * Mednet subject ID of the subject
  **/
  private Integer subjectId;

 /**
   * Protocol-assigned subject identifier
  **/
  private String subjectKey;

 /**
   * Start date of the visit window (in YYYY-MM-DD format)
  **/
  private String startDate;

 /**
   * End date of the visit window (in YYYY-MM-DD format)
  **/
  private String endDate;

 /**
   * Due date of the visit (in YYYY-MM-DD format), if applicable
  **/
  private String dueDate;

 /**
   * Actual date the visit took place (in YYYY-MM-DD format)
  **/
  private String visitDate;

 /**
   * Name of the form used to capture the actual visit date
  **/
  private String visitDateForm;

 /**
   * Variable name of the field capturing the actual visit date
  **/
  private String visitDateQuestion;

 /**
   * Whether the visit instance is marked as deleted
  **/
  private Boolean deleted;

 /**
   * Date when this visit record was created
  **/
  private String dateCreated;

 /**
   * Date when this visit record was last modified
  **/
  private String dateModified;

 /**
   * Unique study key
   * @return studyKey
  **/
  public String getStudyKey() {
    return studyKey;
  }

  /**
    * Set studyKey
  **/
  public void setStudyKey(String studyKey) {
    this.studyKey = studyKey;
  }

  public Visit studyKey(String studyKey) {
    this.studyKey = studyKey;
    return this;
  }

 /**
   * Unique system identifier for the subject visit instance
   * @return visitId
  **/
  public Integer getVisitId() {
    return visitId;
  }

  /**
    * Set visitId
  **/
  public void setVisitId(Integer visitId) {
    this.visitId = visitId;
  }

  public Visit visitId(Integer visitId) {
    this.visitId = visitId;
    return this;
  }

 /**
   * Unique system identifier of the interval definition for this visit
   * @return intervalId
  **/
  public Integer getIntervalId() {
    return intervalId;
  }

  /**
    * Set intervalId
  **/
  public void setIntervalId(Integer intervalId) {
    this.intervalId = intervalId;
  }

  public Visit intervalId(Integer intervalId) {
    this.intervalId = intervalId;
    return this;
  }

 /**
   * Name of the interval (visit) for this visit instance
   * @return intervalName
  **/
  public String getIntervalName() {
    return intervalName;
  }

  /**
    * Set intervalName
  **/
  public void setIntervalName(String intervalName) {
    this.intervalName = intervalName;
  }

  public Visit intervalName(String intervalName) {
    this.intervalName = intervalName;
    return this;
  }

 /**
   * Mednet subject ID of the subject
   * @return subjectId
  **/
  public Integer getSubjectId() {
    return subjectId;
  }

  /**
    * Set subjectId
  **/
  public void setSubjectId(Integer subjectId) {
    this.subjectId = subjectId;
  }

  public Visit subjectId(Integer subjectId) {
    this.subjectId = subjectId;
    return this;
  }

 /**
   * Protocol-assigned subject identifier
   * @return subjectKey
  **/
  public String getSubjectKey() {
    return subjectKey;
  }

  /**
    * Set subjectKey
  **/
  public void setSubjectKey(String subjectKey) {
    this.subjectKey = subjectKey;
  }

  public Visit subjectKey(String subjectKey) {
    this.subjectKey = subjectKey;
    return this;
  }

 /**
   * Start date of the visit window (in YYYY-MM-DD format)
   * @return startDate
  **/
  public String getStartDate() {
    return startDate;
  }

  /**
    * Set startDate
  **/
  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }

  public Visit startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

 /**
   * End date of the visit window (in YYYY-MM-DD format)
   * @return endDate
  **/
  public String getEndDate() {
    return endDate;
  }

  /**
    * Set endDate
  **/
  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }

  public Visit endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

 /**
   * Due date of the visit (in YYYY-MM-DD format), if applicable
   * @return dueDate
  **/
  public String getDueDate() {
    return dueDate;
  }

  /**
    * Set dueDate
  **/
  public void setDueDate(String dueDate) {
    this.dueDate = dueDate;
  }

  public Visit dueDate(String dueDate) {
    this.dueDate = dueDate;
    return this;
  }

 /**
   * Actual date the visit took place (in YYYY-MM-DD format)
   * @return visitDate
  **/
  public String getVisitDate() {
    return visitDate;
  }

  /**
    * Set visitDate
  **/
  public void setVisitDate(String visitDate) {
    this.visitDate = visitDate;
  }

  public Visit visitDate(String visitDate) {
    this.visitDate = visitDate;
    return this;
  }

 /**
   * Name of the form used to capture the actual visit date
   * @return visitDateForm
  **/
  public String getVisitDateForm() {
    return visitDateForm;
  }

  /**
    * Set visitDateForm
  **/
  public void setVisitDateForm(String visitDateForm) {
    this.visitDateForm = visitDateForm;
  }

  public Visit visitDateForm(String visitDateForm) {
    this.visitDateForm = visitDateForm;
    return this;
  }

 /**
   * Variable name of the field capturing the actual visit date
   * @return visitDateQuestion
  **/
  public String getVisitDateQuestion() {
    return visitDateQuestion;
  }

  /**
    * Set visitDateQuestion
  **/
  public void setVisitDateQuestion(String visitDateQuestion) {
    this.visitDateQuestion = visitDateQuestion;
  }

  public Visit visitDateQuestion(String visitDateQuestion) {
    this.visitDateQuestion = visitDateQuestion;
    return this;
  }

 /**
   * Whether the visit instance is marked as deleted
   * @return deleted
  **/
  public Boolean getDeleted() {
    return deleted;
  }

  /**
    * Set deleted
  **/
  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }

  public Visit deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

 /**
   * Date when this visit record was created
   * @return dateCreated
  **/
  public String getDateCreated() {
    return dateCreated;
  }

  /**
    * Set dateCreated
  **/
  public void setDateCreated(String dateCreated) {
    this.dateCreated = dateCreated;
  }

  public Visit dateCreated(String dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

 /**
   * Date when this visit record was last modified
   * @return dateModified
  **/
  public String getDateModified() {
    return dateModified;
  }

  /**
    * Set dateModified
  **/
  public void setDateModified(String dateModified) {
    this.dateModified = dateModified;
  }

  public Visit dateModified(String dateModified) {
    this.dateModified = dateModified;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Visit {\n");
    
    sb.append("    studyKey: ").append(toIndentedString(studyKey)).append("\n");
    sb.append("    visitId: ").append(toIndentedString(visitId)).append("\n");
    sb.append("    intervalId: ").append(toIndentedString(intervalId)).append("\n");
    sb.append("    intervalName: ").append(toIndentedString(intervalName)).append("\n");
    sb.append("    subjectId: ").append(toIndentedString(subjectId)).append("\n");
    sb.append("    subjectKey: ").append(toIndentedString(subjectKey)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    visitDate: ").append(toIndentedString(visitDate)).append("\n");
    sb.append("    visitDateForm: ").append(toIndentedString(visitDateForm)).append("\n");
    sb.append("    visitDateQuestion: ").append(toIndentedString(visitDateQuestion)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

