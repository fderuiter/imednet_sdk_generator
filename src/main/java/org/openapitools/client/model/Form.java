/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;




public class Form  {
  
 /**
   * Unique study key
  **/
  private String studyKey;

 /**
   * Mednet Form ID
  **/
  private Integer formId;

 /**
   * User-defined form key
  **/
  private String formKey;

 /**
   * Name of the form (eCRF)
  **/
  private String formName;

 /**
   * Type of the form (e.g., Subject or Site)
  **/
  private String formType;

 /**
   * Number of modifications (revisions) of the form metadata
  **/
  private Integer revision;

 /**
   * Whether the form has an embedded log
  **/
  private Boolean embeddedLog;

 /**
   * Whether the form enforces record ownership
  **/
  private Boolean enforceOwnership;

 /**
   * Whether the form requires a user agreement
  **/
  private Boolean userAgreement;

 /**
   * Whether the form is marked as a subject record report
  **/
  private Boolean subjectRecordReport;

 /**
   * Whether the form is included in unscheduled visits
  **/
  private Boolean unscheduledVisit;

 /**
   * Whether the form is included in Other Forms category
  **/
  private Boolean otherForms;

 /**
   * Whether the form is an ePRO (electronic patient reported outcome) form
  **/
  private Boolean eproForm;

 /**
   * Whether the form allows copying of data
  **/
  private Boolean allowCopy;

 /**
   * Whether the form is soft-deleted (disabled)
  **/
  private Boolean disabled;

 /**
   * Date when this form was created
  **/
  private String dateCreated;

 /**
   * Date when this form was last modified
  **/
  private String dateModified;

 /**
   * Unique study key
   * @return studyKey
  **/
  public String getStudyKey() {
    return studyKey;
  }

  /**
    * Set studyKey
  **/
  public void setStudyKey(String studyKey) {
    this.studyKey = studyKey;
  }

  public Form studyKey(String studyKey) {
    this.studyKey = studyKey;
    return this;
  }

 /**
   * Mednet Form ID
   * @return formId
  **/
  public Integer getFormId() {
    return formId;
  }

  /**
    * Set formId
  **/
  public void setFormId(Integer formId) {
    this.formId = formId;
  }

  public Form formId(Integer formId) {
    this.formId = formId;
    return this;
  }

 /**
   * User-defined form key
   * @return formKey
  **/
  public String getFormKey() {
    return formKey;
  }

  /**
    * Set formKey
  **/
  public void setFormKey(String formKey) {
    this.formKey = formKey;
  }

  public Form formKey(String formKey) {
    this.formKey = formKey;
    return this;
  }

 /**
   * Name of the form (eCRF)
   * @return formName
  **/
  public String getFormName() {
    return formName;
  }

  /**
    * Set formName
  **/
  public void setFormName(String formName) {
    this.formName = formName;
  }

  public Form formName(String formName) {
    this.formName = formName;
    return this;
  }

 /**
   * Type of the form (e.g., Subject or Site)
   * @return formType
  **/
  public String getFormType() {
    return formType;
  }

  /**
    * Set formType
  **/
  public void setFormType(String formType) {
    this.formType = formType;
  }

  public Form formType(String formType) {
    this.formType = formType;
    return this;
  }

 /**
   * Number of modifications (revisions) of the form metadata
   * @return revision
  **/
  public Integer getRevision() {
    return revision;
  }

  /**
    * Set revision
  **/
  public void setRevision(Integer revision) {
    this.revision = revision;
  }

  public Form revision(Integer revision) {
    this.revision = revision;
    return this;
  }

 /**
   * Whether the form has an embedded log
   * @return embeddedLog
  **/
  public Boolean getEmbeddedLog() {
    return embeddedLog;
  }

  /**
    * Set embeddedLog
  **/
  public void setEmbeddedLog(Boolean embeddedLog) {
    this.embeddedLog = embeddedLog;
  }

  public Form embeddedLog(Boolean embeddedLog) {
    this.embeddedLog = embeddedLog;
    return this;
  }

 /**
   * Whether the form enforces record ownership
   * @return enforceOwnership
  **/
  public Boolean getEnforceOwnership() {
    return enforceOwnership;
  }

  /**
    * Set enforceOwnership
  **/
  public void setEnforceOwnership(Boolean enforceOwnership) {
    this.enforceOwnership = enforceOwnership;
  }

  public Form enforceOwnership(Boolean enforceOwnership) {
    this.enforceOwnership = enforceOwnership;
    return this;
  }

 /**
   * Whether the form requires a user agreement
   * @return userAgreement
  **/
  public Boolean getUserAgreement() {
    return userAgreement;
  }

  /**
    * Set userAgreement
  **/
  public void setUserAgreement(Boolean userAgreement) {
    this.userAgreement = userAgreement;
  }

  public Form userAgreement(Boolean userAgreement) {
    this.userAgreement = userAgreement;
    return this;
  }

 /**
   * Whether the form is marked as a subject record report
   * @return subjectRecordReport
  **/
  public Boolean getSubjectRecordReport() {
    return subjectRecordReport;
  }

  /**
    * Set subjectRecordReport
  **/
  public void setSubjectRecordReport(Boolean subjectRecordReport) {
    this.subjectRecordReport = subjectRecordReport;
  }

  public Form subjectRecordReport(Boolean subjectRecordReport) {
    this.subjectRecordReport = subjectRecordReport;
    return this;
  }

 /**
   * Whether the form is included in unscheduled visits
   * @return unscheduledVisit
  **/
  public Boolean getUnscheduledVisit() {
    return unscheduledVisit;
  }

  /**
    * Set unscheduledVisit
  **/
  public void setUnscheduledVisit(Boolean unscheduledVisit) {
    this.unscheduledVisit = unscheduledVisit;
  }

  public Form unscheduledVisit(Boolean unscheduledVisit) {
    this.unscheduledVisit = unscheduledVisit;
    return this;
  }

 /**
   * Whether the form is included in Other Forms category
   * @return otherForms
  **/
  public Boolean getOtherForms() {
    return otherForms;
  }

  /**
    * Set otherForms
  **/
  public void setOtherForms(Boolean otherForms) {
    this.otherForms = otherForms;
  }

  public Form otherForms(Boolean otherForms) {
    this.otherForms = otherForms;
    return this;
  }

 /**
   * Whether the form is an ePRO (electronic patient reported outcome) form
   * @return eproForm
  **/
  public Boolean getEproForm() {
    return eproForm;
  }

  /**
    * Set eproForm
  **/
  public void setEproForm(Boolean eproForm) {
    this.eproForm = eproForm;
  }

  public Form eproForm(Boolean eproForm) {
    this.eproForm = eproForm;
    return this;
  }

 /**
   * Whether the form allows copying of data
   * @return allowCopy
  **/
  public Boolean getAllowCopy() {
    return allowCopy;
  }

  /**
    * Set allowCopy
  **/
  public void setAllowCopy(Boolean allowCopy) {
    this.allowCopy = allowCopy;
  }

  public Form allowCopy(Boolean allowCopy) {
    this.allowCopy = allowCopy;
    return this;
  }

 /**
   * Whether the form is soft-deleted (disabled)
   * @return disabled
  **/
  public Boolean getDisabled() {
    return disabled;
  }

  /**
    * Set disabled
  **/
  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }

  public Form disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

 /**
   * Date when this form was created
   * @return dateCreated
  **/
  public String getDateCreated() {
    return dateCreated;
  }

  /**
    * Set dateCreated
  **/
  public void setDateCreated(String dateCreated) {
    this.dateCreated = dateCreated;
  }

  public Form dateCreated(String dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

 /**
   * Date when this form was last modified
   * @return dateModified
  **/
  public String getDateModified() {
    return dateModified;
  }

  /**
    * Set dateModified
  **/
  public void setDateModified(String dateModified) {
    this.dateModified = dateModified;
  }

  public Form dateModified(String dateModified) {
    this.dateModified = dateModified;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Form {\n");
    
    sb.append("    studyKey: ").append(toIndentedString(studyKey)).append("\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    formKey: ").append(toIndentedString(formKey)).append("\n");
    sb.append("    formName: ").append(toIndentedString(formName)).append("\n");
    sb.append("    formType: ").append(toIndentedString(formType)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    embeddedLog: ").append(toIndentedString(embeddedLog)).append("\n");
    sb.append("    enforceOwnership: ").append(toIndentedString(enforceOwnership)).append("\n");
    sb.append("    userAgreement: ").append(toIndentedString(userAgreement)).append("\n");
    sb.append("    subjectRecordReport: ").append(toIndentedString(subjectRecordReport)).append("\n");
    sb.append("    unscheduledVisit: ").append(toIndentedString(unscheduledVisit)).append("\n");
    sb.append("    otherForms: ").append(toIndentedString(otherForms)).append("\n");
    sb.append("    eproForm: ").append(toIndentedString(eproForm)).append("\n");
    sb.append("    allowCopy: ").append(toIndentedString(allowCopy)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

