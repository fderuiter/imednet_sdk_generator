/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.ComponentsSchemasRecordCreateRequestItem;
import org.openapitools.client.model.InlineObject;
import org.openapitools.client.model.InlineObject1;
import org.openapitools.client.model.InlineObject2;
import org.openapitools.client.model.InlineObject3;
import org.openapitools.client.model.InlineObject4;
import org.openapitools.client.model.InlineObject5;
import java.util.*;
import org.openapitools.client.model.RecordJobStatus;
import org.openapitools.client.model.RecordList;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class RecordsApi {
  String basePath = "https://edc.prod.imednetapi.com/api/v1/edc";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Add new record or update subject/record data
  * 
   * @param studyKey Study key identifying the study context for the request
   * @param componentsSchemasRecordCreateRequestItem An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update).
   * @return RecordJobStatus
  */
  public RecordJobStatus createRecords (String studyKey, List<ComponentsSchemasRecordCreateRequestItem> componentsSchemasRecordCreateRequestItem) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = componentsSchemasRecordCreateRequestItem;
    // verify the required parameter 'studyKey' is set
    if (studyKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyKey' when calling createRecords",
        new ApiException(400, "Missing the required parameter 'studyKey' when calling createRecords"));
    }
    // verify the required parameter 'componentsSchemasRecordCreateRequestItem' is set
    if (componentsSchemasRecordCreateRequestItem == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'componentsSchemasRecordCreateRequestItem' when calling createRecords",
        new ApiException(400, "Missing the required parameter 'componentsSchemasRecordCreateRequestItem' when calling createRecords"));
    }

    // create path and map variables
    String path = "/studies/{studyKey}/records".replaceAll("\\{" + "studyKey" + "\\}", apiInvoker.escapeString(studyKey.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyAuth", "securityKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RecordJobStatus) ApiInvoker.deserialize(localVarResponse, "", RecordJobStatus.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Add new record or update subject/record data
   * 
   * @param studyKey Study key identifying the study context for the request   * @param componentsSchemasRecordCreateRequestItem An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update).
  */
  public void createRecords (String studyKey, List<ComponentsSchemasRecordCreateRequestItem> componentsSchemasRecordCreateRequestItem, final Response.Listener<RecordJobStatus> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = componentsSchemasRecordCreateRequestItem;

    // verify the required parameter 'studyKey' is set
    if (studyKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyKey' when calling createRecords",
        new ApiException(400, "Missing the required parameter 'studyKey' when calling createRecords"));
    }
    // verify the required parameter 'componentsSchemasRecordCreateRequestItem' is set
    if (componentsSchemasRecordCreateRequestItem == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'componentsSchemasRecordCreateRequestItem' when calling createRecords",
        new ApiException(400, "Missing the required parameter 'componentsSchemasRecordCreateRequestItem' when calling createRecords"));
    }

    // create path and map variables
    String path = "/studies/{studyKey}/records".replaceAll("\\{format\\}","json").replaceAll("\\{" + "studyKey" + "\\}", apiInvoker.escapeString(studyKey.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyAuth", "securityKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RecordJobStatus) ApiInvoker.deserialize(localVarResponse,  "", RecordJobStatus.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * List records (eCRF instances) in a study
  * 
   * @param studyKey Study key identifying the study context for the request
   * @param page Page index to retrieve (0-based)
   * @param size Number of items to return per page (max 500)
   * @param sort Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated.
   * @param filter Optional filter criteria to apply, in the format &#x60;attribute&#x3D;&#x3D;value&#x60; with support for &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, !&#x3D;. Multiple criteria can be combined with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR).
   * @param recordDataFilter Optional filter criteria to apply on recordData fields (question responses). Supports &#x3D;&#x3D;, !&#x3D;, &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;~ (contains) and can combine multiple criteria with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR).
   * @return RecordList
  */
  public RecordList listRecords (String studyKey, Integer page, Integer size, String sort, String filter, String recordDataFilter) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'studyKey' is set
    if (studyKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyKey' when calling listRecords",
        new ApiException(400, "Missing the required parameter 'studyKey' when calling listRecords"));
    }

    // create path and map variables
    String path = "/studies/{studyKey}/records".replaceAll("\\{" + "studyKey" + "\\}", apiInvoker.escapeString(studyKey.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort", sort));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter", filter));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "recordDataFilter", recordDataFilter));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "apiKeyAuth", "securityKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (RecordList) ApiInvoker.deserialize(localVarResponse, "", RecordList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * List records (eCRF instances) in a study
   * 
   * @param studyKey Study key identifying the study context for the request   * @param page Page index to retrieve (0-based)   * @param size Number of items to return per page (max 500)   * @param sort Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated.   * @param filter Optional filter criteria to apply, in the format &#x60;attribute&#x3D;&#x3D;value&#x60; with support for &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, !&#x3D;. Multiple criteria can be combined with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR).   * @param recordDataFilter Optional filter criteria to apply on recordData fields (question responses). Supports &#x3D;&#x3D;, !&#x3D;, &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;~ (contains) and can combine multiple criteria with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR).
  */
  public void listRecords (String studyKey, Integer page, Integer size, String sort, String filter, String recordDataFilter, final Response.Listener<RecordList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'studyKey' is set
    if (studyKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'studyKey' when calling listRecords",
        new ApiException(400, "Missing the required parameter 'studyKey' when calling listRecords"));
    }

    // create path and map variables
    String path = "/studies/{studyKey}/records".replaceAll("\\{format\\}","json").replaceAll("\\{" + "studyKey" + "\\}", apiInvoker.escapeString(studyKey.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page", page));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "size", size));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort", sort));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "filter", filter));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "recordDataFilter", recordDataFilter));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "apiKeyAuth", "securityKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RecordList) ApiInvoker.deserialize(localVarResponse,  "", RecordList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
