/** Mednet EDC API
  * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  *
  * The version of the OpenAPI document: 1.3.6
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param studyKey Unique study key
  * @param siteId Unique site ID
  * @param siteName Name of the site
  * @param siteEnrollmentStatus Enrollment status of the site
  * @param dateCreated Date when this site was created
  * @param dateModified Date when this site was last modified
  */
case class Site(
    studyKey: Option[String] = None,
    siteId: Option[Int] = None,
    siteName: Option[String] = None,
    siteEnrollmentStatus: Option[String] = None,
    dateCreated: Option[String] = None,
    dateModified: Option[String] = None
)
  
object Site {
  given encoderSite: Encoder[Site] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.studyKey.map(v => "studyKey" -> v.asJson),
        t.siteId.map(v => "siteId" -> v.asJson),
        t.siteName.map(v => "siteName" -> v.asJson),
        t.siteEnrollmentStatus.map(v => "siteEnrollmentStatus" -> v.asJson),
        t.dateCreated.map(v => "dateCreated" -> v.asJson),
        t.dateModified.map(v => "dateModified" -> v.asJson)
      ).flatten
    }
  }
  given decoderSite: Decoder[Site] = Decoder.instance { c =>
    for {
      studyKey <- c.downField("studyKey").as[Option[String]]
      siteId <- c.downField("siteId").as[Option[Int]]
      siteName <- c.downField("siteName").as[Option[String]]
      siteEnrollmentStatus <- c.downField("siteEnrollmentStatus").as[Option[String]]
      dateCreated <- c.downField("dateCreated").as[Option[String]]
      dateModified <- c.downField("dateModified").as[Option[String]]
    } yield Site(
      studyKey = studyKey,
      siteId = siteId,
      siteName = siteName,
      siteEnrollmentStatus = siteEnrollmentStatus,
      dateCreated = dateCreated,
      dateModified = dateModified
    )
  }
}

