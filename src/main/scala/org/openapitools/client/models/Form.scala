/** Mednet EDC API
  * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  *
  * The version of the OpenAPI document: 1.3.6
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param studyKey Unique study key
  * @param formId Mednet Form ID
  * @param formKey User-defined form key
  * @param formName Name of the form (eCRF)
  * @param formType Type of the form (e.g., Subject or Site)
  * @param revision Number of modifications (revisions) of the form metadata
  * @param embeddedLog Whether the form has an embedded log
  * @param enforceOwnership Whether the form enforces record ownership
  * @param userAgreement Whether the form requires a user agreement
  * @param subjectRecordReport Whether the form is marked as a subject record report
  * @param unscheduledVisit Whether the form is included in unscheduled visits
  * @param otherForms Whether the form is included in Other Forms category
  * @param eproForm Whether the form is an ePRO (electronic patient reported outcome) form
  * @param allowCopy Whether the form allows copying of data
  * @param disabled Whether the form is soft-deleted (disabled)
  * @param dateCreated Date when this form was created
  * @param dateModified Date when this form was last modified
  */
case class Form(
    studyKey: Option[String] = None,
    formId: Option[Int] = None,
    formKey: Option[String] = None,
    formName: Option[String] = None,
    formType: Option[String] = None,
    revision: Option[Int] = None,
    embeddedLog: Option[Boolean] = None,
    enforceOwnership: Option[Boolean] = None,
    userAgreement: Option[Boolean] = None,
    subjectRecordReport: Option[Boolean] = None,
    unscheduledVisit: Option[Boolean] = None,
    otherForms: Option[Boolean] = None,
    eproForm: Option[Boolean] = None,
    allowCopy: Option[Boolean] = None,
    disabled: Option[Boolean] = None,
    dateCreated: Option[String] = None,
    dateModified: Option[String] = None
)
  
object Form {
  given encoderForm: Encoder[Form] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.studyKey.map(v => "studyKey" -> v.asJson),
        t.formId.map(v => "formId" -> v.asJson),
        t.formKey.map(v => "formKey" -> v.asJson),
        t.formName.map(v => "formName" -> v.asJson),
        t.formType.map(v => "formType" -> v.asJson),
        t.revision.map(v => "revision" -> v.asJson),
        t.embeddedLog.map(v => "embeddedLog" -> v.asJson),
        t.enforceOwnership.map(v => "enforceOwnership" -> v.asJson),
        t.userAgreement.map(v => "userAgreement" -> v.asJson),
        t.subjectRecordReport.map(v => "subjectRecordReport" -> v.asJson),
        t.unscheduledVisit.map(v => "unscheduledVisit" -> v.asJson),
        t.otherForms.map(v => "otherForms" -> v.asJson),
        t.eproForm.map(v => "eproForm" -> v.asJson),
        t.allowCopy.map(v => "allowCopy" -> v.asJson),
        t.disabled.map(v => "disabled" -> v.asJson),
        t.dateCreated.map(v => "dateCreated" -> v.asJson),
        t.dateModified.map(v => "dateModified" -> v.asJson)
      ).flatten
    }
  }
  given decoderForm: Decoder[Form] = Decoder.instance { c =>
    for {
      studyKey <- c.downField("studyKey").as[Option[String]]
      formId <- c.downField("formId").as[Option[Int]]
      formKey <- c.downField("formKey").as[Option[String]]
      formName <- c.downField("formName").as[Option[String]]
      formType <- c.downField("formType").as[Option[String]]
      revision <- c.downField("revision").as[Option[Int]]
      embeddedLog <- c.downField("embeddedLog").as[Option[Boolean]]
      enforceOwnership <- c.downField("enforceOwnership").as[Option[Boolean]]
      userAgreement <- c.downField("userAgreement").as[Option[Boolean]]
      subjectRecordReport <- c.downField("subjectRecordReport").as[Option[Boolean]]
      unscheduledVisit <- c.downField("unscheduledVisit").as[Option[Boolean]]
      otherForms <- c.downField("otherForms").as[Option[Boolean]]
      eproForm <- c.downField("eproForm").as[Option[Boolean]]
      allowCopy <- c.downField("allowCopy").as[Option[Boolean]]
      disabled <- c.downField("disabled").as[Option[Boolean]]
      dateCreated <- c.downField("dateCreated").as[Option[String]]
      dateModified <- c.downField("dateModified").as[Option[String]]
    } yield Form(
      studyKey = studyKey,
      formId = formId,
      formKey = formKey,
      formName = formName,
      formType = formType,
      revision = revision,
      embeddedLog = embeddedLog,
      enforceOwnership = enforceOwnership,
      userAgreement = userAgreement,
      subjectRecordReport = subjectRecordReport,
      unscheduledVisit = unscheduledVisit,
      otherForms = otherForms,
      eproForm = eproForm,
      allowCopy = allowCopy,
      disabled = disabled,
      dateCreated = dateCreated,
      dateModified = dateModified
    )
  }
}

