/** Mednet EDC API
  * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  *
  * The version of the OpenAPI document: 1.3.6
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param sponsorKey Sponsor key that this study belongs to
  * @param studyKey Unique study key
  * @param studyId Mednet study ID (internal numeric identifier)
  * @param studyName Name of the study
  * @param studyDescription Description of the study
  * @param studyType Type of study (e.g., STUDY)
  * @param dateCreated Date when the study record was created
  * @param dateModified Date when the study record was last modified
  */
case class Study(
    sponsorKey: Option[String] = None,
    studyKey: Option[String] = None,
    studyId: Option[Int] = None,
    studyName: Option[String] = None,
    studyDescription: Option[String] = None,
    studyType: Option[String] = None,
    dateCreated: Option[String] = None,
    dateModified: Option[String] = None
)
  
object Study {
  given encoderStudy: Encoder[Study] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.sponsorKey.map(v => "sponsorKey" -> v.asJson),
        t.studyKey.map(v => "studyKey" -> v.asJson),
        t.studyId.map(v => "studyId" -> v.asJson),
        t.studyName.map(v => "studyName" -> v.asJson),
        t.studyDescription.map(v => "studyDescription" -> v.asJson),
        t.studyType.map(v => "studyType" -> v.asJson),
        t.dateCreated.map(v => "dateCreated" -> v.asJson),
        t.dateModified.map(v => "dateModified" -> v.asJson)
      ).flatten
    }
  }
  given decoderStudy: Decoder[Study] = Decoder.instance { c =>
    for {
      sponsorKey <- c.downField("sponsorKey").as[Option[String]]
      studyKey <- c.downField("studyKey").as[Option[String]]
      studyId <- c.downField("studyId").as[Option[Int]]
      studyName <- c.downField("studyName").as[Option[String]]
      studyDescription <- c.downField("studyDescription").as[Option[String]]
      studyType <- c.downField("studyType").as[Option[String]]
      dateCreated <- c.downField("dateCreated").as[Option[String]]
      dateModified <- c.downField("dateModified").as[Option[String]]
    } yield Study(
      sponsorKey = sponsorKey,
      studyKey = studyKey,
      studyId = studyId,
      studyName = studyName,
      studyDescription = studyDescription,
      studyType = studyType,
      dateCreated = dateCreated,
      dateModified = dateModified
    )
  }
}

