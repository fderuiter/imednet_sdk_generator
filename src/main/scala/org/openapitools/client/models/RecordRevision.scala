/** Mednet EDC API
  * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  *
  * The version of the OpenAPI document: 1.3.6
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param studyKey Unique study key
  * @param recordRevisionId Unique system identifier for the record revision
  * @param recordId Unique system identifier of the related record
  * @param recordOid Client-assigned record OID (if any)
  * @param recordRevision Revision number of the record (version of the record status)
  * @param dataRevision Revision number of the data within the record
  * @param recordStatus Status of the record at this revision (user-defined status label)
  * @param subjectId Mednet subject ID related to the record
  * @param subjectOid Client-assigned subject OID related to the record
  * @param subjectKey Subject display ID related to the record
  * @param siteId Site ID related to the record
  * @param formKey Form key of the form that the record belongs to
  * @param intervalId Interval ID (visit definition) related to the record
  * @param role Role name of the user who saved the record revision
  * @param user Username of the user who saved the record revision
  * @param reasonForChange Reason for change, if provided (for audit trail)
  * @param deleted Whether the record was deleted in this revision
  * @param dateCreated Date when this record revision was created
  */
case class RecordRevision(
    studyKey: Option[String] = None,
    recordRevisionId: Option[Int] = None,
    recordId: Option[Int] = None,
    recordOid: Option[String] = None,
    recordRevision: Option[Int] = None,
    dataRevision: Option[Int] = None,
    recordStatus: Option[String] = None,
    subjectId: Option[Int] = None,
    subjectOid: Option[String] = None,
    subjectKey: Option[String] = None,
    siteId: Option[Int] = None,
    formKey: Option[String] = None,
    intervalId: Option[Int] = None,
    role: Option[String] = None,
    user: Option[String] = None,
    reasonForChange: Option[String] = None,
    deleted: Option[Boolean] = None,
    dateCreated: Option[String] = None
)
  
object RecordRevision {
  given encoderRecordRevision: Encoder[RecordRevision] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.studyKey.map(v => "studyKey" -> v.asJson),
        t.recordRevisionId.map(v => "recordRevisionId" -> v.asJson),
        t.recordId.map(v => "recordId" -> v.asJson),
        t.recordOid.map(v => "recordOid" -> v.asJson),
        t.recordRevision.map(v => "recordRevision" -> v.asJson),
        t.dataRevision.map(v => "dataRevision" -> v.asJson),
        t.recordStatus.map(v => "recordStatus" -> v.asJson),
        t.subjectId.map(v => "subjectId" -> v.asJson),
        t.subjectOid.map(v => "subjectOid" -> v.asJson),
        t.subjectKey.map(v => "subjectKey" -> v.asJson),
        t.siteId.map(v => "siteId" -> v.asJson),
        t.formKey.map(v => "formKey" -> v.asJson),
        t.intervalId.map(v => "intervalId" -> v.asJson),
        t.role.map(v => "role" -> v.asJson),
        t.user.map(v => "user" -> v.asJson),
        t.reasonForChange.map(v => "reasonForChange" -> v.asJson),
        t.deleted.map(v => "deleted" -> v.asJson),
        t.dateCreated.map(v => "dateCreated" -> v.asJson)
      ).flatten
    }
  }
  given decoderRecordRevision: Decoder[RecordRevision] = Decoder.instance { c =>
    for {
      studyKey <- c.downField("studyKey").as[Option[String]]
      recordRevisionId <- c.downField("recordRevisionId").as[Option[Int]]
      recordId <- c.downField("recordId").as[Option[Int]]
      recordOid <- c.downField("recordOid").as[Option[String]]
      recordRevision <- c.downField("recordRevision").as[Option[Int]]
      dataRevision <- c.downField("dataRevision").as[Option[Int]]
      recordStatus <- c.downField("recordStatus").as[Option[String]]
      subjectId <- c.downField("subjectId").as[Option[Int]]
      subjectOid <- c.downField("subjectOid").as[Option[String]]
      subjectKey <- c.downField("subjectKey").as[Option[String]]
      siteId <- c.downField("siteId").as[Option[Int]]
      formKey <- c.downField("formKey").as[Option[String]]
      intervalId <- c.downField("intervalId").as[Option[Int]]
      role <- c.downField("role").as[Option[String]]
      user <- c.downField("user").as[Option[String]]
      reasonForChange <- c.downField("reasonForChange").as[Option[String]]
      deleted <- c.downField("deleted").as[Option[Boolean]]
      dateCreated <- c.downField("dateCreated").as[Option[String]]
    } yield RecordRevision(
      studyKey = studyKey,
      recordRevisionId = recordRevisionId,
      recordId = recordId,
      recordOid = recordOid,
      recordRevision = recordRevision,
      dataRevision = dataRevision,
      recordStatus = recordStatus,
      subjectId = subjectId,
      subjectOid = subjectOid,
      subjectKey = subjectKey,
      siteId = siteId,
      formKey = formKey,
      intervalId = intervalId,
      role = role,
      user = user,
      reasonForChange = reasonForChange,
      deleted = deleted,
      dateCreated = dateCreated
    )
  }
}

