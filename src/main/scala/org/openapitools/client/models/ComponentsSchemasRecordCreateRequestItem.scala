/** Mednet EDC API
  * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  *
  * The version of the OpenAPI document: 1.3.6
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param formKey Form key identifying the eCRF to create or update
  * @param formId Form ID identifying the eCRF to create or update (alternative to formKey)
  * @param siteName Name of the site where the record should be created (for new subject registration)
  * @param siteId Site ID for the record (alternative to siteName)
  * @param subjectKey Subject identifier (display ID) for which to create or update the record
  * @param subjectId Subject ID for which to create or update the record (alternative to subjectKey)
  * @param subjectOid Subject OID for which to create or update the record (alternative to subjectKey)
  * @param intervalName Name of the interval (visit) for a scheduled record update
  * @param intervalId Interval ID for a scheduled record update (alternative to intervalName)
  * @param recordId Record ID for updating an existing unscheduled record (if applicable)
  * @param recordOid Record OID for updating an existing unscheduled record (if applicable)
  * @param data Key-value pairs of field names and values for the record data
  */
case class ComponentsSchemasRecordCreateRequestItem(
    formKey: String,
    formId: Option[Int] = None,
    siteName: Option[String] = None,
    siteId: Option[Int] = None,
    subjectKey: Option[String] = None,
    subjectId: Option[Int] = None,
    subjectOid: Option[String] = None,
    intervalName: Option[String] = None,
    intervalId: Option[Int] = None,
    recordId: Option[Int] = None,
    recordOid: Option[String] = None,
    data: Map[String, AnyType]
)
  
object ComponentsSchemasRecordCreateRequestItem {
  given encoderComponentsSchemasRecordCreateRequestItem: Encoder[ComponentsSchemasRecordCreateRequestItem] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        Some("formKey" -> t.formKey.asJson),
        t.formId.map(v => "formId" -> v.asJson),
        t.siteName.map(v => "siteName" -> v.asJson),
        t.siteId.map(v => "siteId" -> v.asJson),
        t.subjectKey.map(v => "subjectKey" -> v.asJson),
        t.subjectId.map(v => "subjectId" -> v.asJson),
        t.subjectOid.map(v => "subjectOid" -> v.asJson),
        t.intervalName.map(v => "intervalName" -> v.asJson),
        t.intervalId.map(v => "intervalId" -> v.asJson),
        t.recordId.map(v => "recordId" -> v.asJson),
        t.recordOid.map(v => "recordOid" -> v.asJson),
        Some("data" -> t.data.asJson)
      ).flatten
    }
  }
  given decoderComponentsSchemasRecordCreateRequestItem: Decoder[ComponentsSchemasRecordCreateRequestItem] = Decoder.instance { c =>
    for {
      formKey <- c.downField("formKey").as[String]
      formId <- c.downField("formId").as[Option[Int]]
      siteName <- c.downField("siteName").as[Option[String]]
      siteId <- c.downField("siteId").as[Option[Int]]
      subjectKey <- c.downField("subjectKey").as[Option[String]]
      subjectId <- c.downField("subjectId").as[Option[Int]]
      subjectOid <- c.downField("subjectOid").as[Option[String]]
      intervalName <- c.downField("intervalName").as[Option[String]]
      intervalId <- c.downField("intervalId").as[Option[Int]]
      recordId <- c.downField("recordId").as[Option[Int]]
      recordOid <- c.downField("recordOid").as[Option[String]]
      data <- c.downField("data").as[Map[String, AnyType]]
    } yield ComponentsSchemasRecordCreateRequestItem(
      formKey = formKey,
      formId = formId,
      siteName = siteName,
      siteId = siteId,
      subjectKey = subjectKey,
      subjectId = subjectId,
      subjectOid = subjectOid,
      intervalName = intervalName,
      intervalId = intervalId,
      recordId = recordId,
      recordOid = recordOid,
      data = data
    )
  }
}

