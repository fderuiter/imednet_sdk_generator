/** Mednet EDC API
  * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  *
  * The version of the OpenAPI document: 1.3.6
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import java.time.Instant

/** 
  * @param status HTTP status of the response (e.g., OK or ERROR)
  * @param method HTTP method of the request
  * @param path Requested URI path
  * @param timestamp Timestamp when response was generated
  * @param error 
  */
case class Metadata(
    status: Option[String] = None,
    method: Option[String] = None,
    path: Option[String] = None,
    timestamp: Option[Instant] = None,
    error: Option[ComponentsSchemasMetadataError] = None
)
  
object Metadata {
  given encoderMetadata: Encoder[Metadata] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.status.map(v => "status" -> v.asJson),
        t.method.map(v => "method" -> v.asJson),
        t.path.map(v => "path" -> v.asJson),
        t.timestamp.map(v => "timestamp" -> v.asJson),
        t.error.map(v => "error" -> v.asJson)
      ).flatten
    }
  }
  given decoderMetadata: Decoder[Metadata] = Decoder.instance { c =>
    for {
      status <- c.downField("status").as[Option[String]]
      method <- c.downField("method").as[Option[String]]
      path <- c.downField("path").as[Option[String]]
      timestamp <- c.downField("timestamp").as[Option[Instant]]
      error <- c.downField("error").as[Option[ComponentsSchemasMetadataError]]
    } yield Metadata(
      status = status,
      method = method,
      path = path,
      timestamp = timestamp,
      error = error
    )
  }
}

