/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.ComponentsSchemasRecordCreateRequestItem
import org.openapitools.client.model.InlineObject
import org.openapitools.client.model.InlineObject1
import org.openapitools.client.model.InlineObject2
import org.openapitools.client.model.InlineObject3
import org.openapitools.client.model.InlineObject4
import org.openapitools.client.model.InlineObject5
import org.openapitools.client.model.RecordJobStatus
import org.openapitools.client.model.RecordList
import org.openapitools.client.core.JsonSupport._
import sttp.client4._
import sttp.model.Method

object RecordsApi {
  def apply(baseUrl: String = "https://edc.prod.imednetapi.com/api/v1/edc") = new RecordsApi(baseUrl)
}

class RecordsApi(baseUrl: String) {

  /**
   * Expected answers:
   *   code 202 : RecordJobStatus (Accepted request for record creation. Returns a job identifier to check status.)
   *   code 400 : InlineObject (Bad request (malformed or invalid input))
   *   code 401 : InlineObject1 (Authentication failed or was not provided)
   *   code 403 : InlineObject2 (Authenticated but not allowed to access the resource)
   *   code 404 : InlineObject3 (The requested resource was not found)
   *   code 429 : InlineObject4 (Too many requests (rate limit exceeded))
   *   code 500 : InlineObject5 (Internal server error (unexpected condition encountered))
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   *   securityKeyAuth (apiKey)
   * 
   * @param studyKey Study key identifying the study context for the request
   * @param componentsSchemasRecordCreateRequestItem An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update).
   */
  def createRecords(apiKey: String, apiKey: String)(studyKey: String, componentsSchemasRecordCreateRequestItem: Seq[ComponentsSchemasRecordCreateRequestItem]): Request[Either[ResponseException[String, Exception], RecordJobStatus]] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/studies/${studyKey}/records")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .header("x-imn-security-key", apiKey)
      .body(componentsSchemasRecordCreateRequestItem)
      .response(asJson[RecordJobStatus])

  /**
   * Expected answers:
   *   code 200 : RecordList (Successful response with list of records)
   *   code 400 : InlineObject (Bad request (malformed or invalid input))
   *   code 401 : InlineObject1 (Authentication failed or was not provided)
   *   code 403 : InlineObject2 (Authenticated but not allowed to access the resource)
   *   code 404 : InlineObject3 (The requested resource was not found)
   *   code 500 : InlineObject5 (Internal server error (unexpected condition encountered))
   * 
   * Available security schemes:
   *   apiKeyAuth (apiKey)
   *   securityKeyAuth (apiKey)
   * 
   * @param studyKey Study key identifying the study context for the request
   * @param page Page index to retrieve (0-based)
   * @param size Number of items to return per page (max 500)
   * @param sort Sorting criteria in the format `property,ASC` or `property,DESC`. Can be repeated.
   * @param filter Optional filter criteria to apply, in the format `attribute==value` with support for >, >=, <, <=, !=. Multiple criteria can be combined with `;` (AND) or `,` (OR).
   * @param recordDataFilter Optional filter criteria to apply on recordData fields (question responses). Supports ==, !=, <, <=, >, >=, =~ (contains) and can combine multiple criteria with `;` (AND) or `,` (OR).
   */
  def listRecords(apiKey: String, apiKey: String)(studyKey: String, page: Option[Int] = None, size: Option[Int] = None, sort: Option[String] = None, filter: Option[String] = None, recordDataFilter: Option[String] = None): Request[Either[ResponseException[String, Exception], RecordList]] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/studies/${studyKey}/records?page=${ page }&size=${ size }&sort=${ sort }&filter=${ filter }&recordDataFilter=${ recordDataFilter }")
      .contentType("application/json")
      .header("x-api-key", apiKey)
      .header("x-imn-security-key", apiKey)
      .response(asJson[RecordList])

}
