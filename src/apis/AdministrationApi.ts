// tslint:disable
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject3,
    InlineObject3FromJSON,
    InlineObject3ToJSON,
    InlineObject5,
    InlineObject5FromJSON,
    InlineObject5ToJSON,
    UserList,
    UserListFromJSON,
    UserListToJSON,
} from '../models';

export interface ListUsersRequest {
    studyKey: string;
    page?: number;
    size?: number;
    sort?: string;
    includeInactive?: boolean;
}


/**
 * List users and their roles in a study
 */
function listUsersRaw<T>(requestParameters: ListUsersRequest, requestConfig: runtime.TypedQueryConfig<T, UserList> = {}): QueryConfig<T> {
    if (requestParameters.studyKey === null || requestParameters.studyKey === undefined) {
        throw new runtime.RequiredError('studyKey','Required parameter requestParameters.studyKey was null or undefined when calling listUsers.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.page !== undefined) {
        queryParameters['page'] = requestParameters.page;
    }


    if (requestParameters.size !== undefined) {
        queryParameters['size'] = requestParameters.size;
    }


    if (requestParameters.sort !== undefined) {
        queryParameters['sort'] = requestParameters.sort;
    }


    if (requestParameters.includeInactive !== undefined) {
        queryParameters['includeInactive'] = requestParameters.includeInactive;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/studies/{studyKey}/users`.replace(`{${"studyKey"}}`, encodeURIComponent(String(requestParameters.studyKey))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UserListFromJSON(body), text);
    }

    return config;
}

/**
* List users and their roles in a study
*/
export function listUsers<T>(requestParameters: ListUsersRequest, requestConfig?: runtime.TypedQueryConfig<T, UserList>): QueryConfig<T> {
    return listUsersRaw(requestParameters, requestConfig);
}

