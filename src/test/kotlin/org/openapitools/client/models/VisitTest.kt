/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.Visit

class VisitTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Visit
        //val modelInstance = Visit()

        // to test the property `studyKey` - Unique study key
        should("test studyKey") {
            // uncomment below to test the property
            //modelInstance.studyKey shouldBe ("TODO")
        }

        // to test the property `visitId` - Unique system identifier for the subject visit instance
        should("test visitId") {
            // uncomment below to test the property
            //modelInstance.visitId shouldBe ("TODO")
        }

        // to test the property `intervalId` - Unique system identifier of the interval definition for this visit
        should("test intervalId") {
            // uncomment below to test the property
            //modelInstance.intervalId shouldBe ("TODO")
        }

        // to test the property `intervalName` - Name of the interval (visit) for this visit instance
        should("test intervalName") {
            // uncomment below to test the property
            //modelInstance.intervalName shouldBe ("TODO")
        }

        // to test the property `subjectId` - Mednet subject ID of the subject
        should("test subjectId") {
            // uncomment below to test the property
            //modelInstance.subjectId shouldBe ("TODO")
        }

        // to test the property `subjectKey` - Protocol-assigned subject identifier
        should("test subjectKey") {
            // uncomment below to test the property
            //modelInstance.subjectKey shouldBe ("TODO")
        }

        // to test the property `startDate` - Start date of the visit window (in YYYY-MM-DD format)
        should("test startDate") {
            // uncomment below to test the property
            //modelInstance.startDate shouldBe ("TODO")
        }

        // to test the property `endDate` - End date of the visit window (in YYYY-MM-DD format)
        should("test endDate") {
            // uncomment below to test the property
            //modelInstance.endDate shouldBe ("TODO")
        }

        // to test the property `dueDate` - Due date of the visit (in YYYY-MM-DD format), if applicable
        should("test dueDate") {
            // uncomment below to test the property
            //modelInstance.dueDate shouldBe ("TODO")
        }

        // to test the property `visitDate` - Actual date the visit took place (in YYYY-MM-DD format)
        should("test visitDate") {
            // uncomment below to test the property
            //modelInstance.visitDate shouldBe ("TODO")
        }

        // to test the property `visitDateForm` - Name of the form used to capture the actual visit date
        should("test visitDateForm") {
            // uncomment below to test the property
            //modelInstance.visitDateForm shouldBe ("TODO")
        }

        // to test the property `visitDateQuestion` - Variable name of the field capturing the actual visit date
        should("test visitDateQuestion") {
            // uncomment below to test the property
            //modelInstance.visitDateQuestion shouldBe ("TODO")
        }

        // to test the property `deleted` - Whether the visit instance is marked as deleted
        should("test deleted") {
            // uncomment below to test the property
            //modelInstance.deleted shouldBe ("TODO")
        }

        // to test the property `dateCreated` - Date when this visit record was created
        should("test dateCreated") {
            // uncomment below to test the property
            //modelInstance.dateCreated shouldBe ("TODO")
        }

        // to test the property `dateModified` - Date when this visit record was last modified
        should("test dateModified") {
            // uncomment below to test the property
            //modelInstance.dateModified shouldBe ("TODO")
        }

    }
}
