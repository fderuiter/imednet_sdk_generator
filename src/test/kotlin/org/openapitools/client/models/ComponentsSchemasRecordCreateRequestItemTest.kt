/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.ComponentsSchemasRecordCreateRequestItem

class ComponentsSchemasRecordCreateRequestItemTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ComponentsSchemasRecordCreateRequestItem
        //val modelInstance = ComponentsSchemasRecordCreateRequestItem()

        // to test the property `formKey` - Form key identifying the eCRF to create or update
        should("test formKey") {
            // uncomment below to test the property
            //modelInstance.formKey shouldBe ("TODO")
        }

        // to test the property ``data`` - Key-value pairs of field names and values for the record data
        should("test `data`") {
            // uncomment below to test the property
            //modelInstance.`data` shouldBe ("TODO")
        }

        // to test the property `formId` - Form ID identifying the eCRF to create or update (alternative to formKey)
        should("test formId") {
            // uncomment below to test the property
            //modelInstance.formId shouldBe ("TODO")
        }

        // to test the property `siteName` - Name of the site where the record should be created (for new subject registration)
        should("test siteName") {
            // uncomment below to test the property
            //modelInstance.siteName shouldBe ("TODO")
        }

        // to test the property `siteId` - Site ID for the record (alternative to siteName)
        should("test siteId") {
            // uncomment below to test the property
            //modelInstance.siteId shouldBe ("TODO")
        }

        // to test the property `subjectKey` - Subject identifier (display ID) for which to create or update the record
        should("test subjectKey") {
            // uncomment below to test the property
            //modelInstance.subjectKey shouldBe ("TODO")
        }

        // to test the property `subjectId` - Subject ID for which to create or update the record (alternative to subjectKey)
        should("test subjectId") {
            // uncomment below to test the property
            //modelInstance.subjectId shouldBe ("TODO")
        }

        // to test the property `subjectOid` - Subject OID for which to create or update the record (alternative to subjectKey)
        should("test subjectOid") {
            // uncomment below to test the property
            //modelInstance.subjectOid shouldBe ("TODO")
        }

        // to test the property `intervalName` - Name of the interval (visit) for a scheduled record update
        should("test intervalName") {
            // uncomment below to test the property
            //modelInstance.intervalName shouldBe ("TODO")
        }

        // to test the property `intervalId` - Interval ID for a scheduled record update (alternative to intervalName)
        should("test intervalId") {
            // uncomment below to test the property
            //modelInstance.intervalId shouldBe ("TODO")
        }

        // to test the property `recordId` - Record ID for updating an existing unscheduled record (if applicable)
        should("test recordId") {
            // uncomment below to test the property
            //modelInstance.recordId shouldBe ("TODO")
        }

        // to test the property `recordOid` - Record OID for updating an existing unscheduled record (if applicable)
        should("test recordOid") {
            // uncomment below to test the property
            //modelInstance.recordOid shouldBe ("TODO")
        }

    }
}
