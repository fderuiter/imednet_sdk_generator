/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.Coding

class CodingTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Coding
        //val modelInstance = Coding()

        // to test the property `studyKey` - Unique study key
        should("test studyKey") {
            // uncomment below to test the property
            //modelInstance.studyKey shouldBe ("TODO")
        }

        // to test the property `siteName` - Name of the site associated with the coded data
        should("test siteName") {
            // uncomment below to test the property
            //modelInstance.siteName shouldBe ("TODO")
        }

        // to test the property `siteId` - Site ID associated with the coded data
        should("test siteId") {
            // uncomment below to test the property
            //modelInstance.siteId shouldBe ("TODO")
        }

        // to test the property `subjectId` - Subject ID associated with the coded data
        should("test subjectId") {
            // uncomment below to test the property
            //modelInstance.subjectId shouldBe ("TODO")
        }

        // to test the property `subjectKey` - Subject key (display ID) associated with the coded data
        should("test subjectKey") {
            // uncomment below to test the property
            //modelInstance.subjectKey shouldBe ("TODO")
        }

        // to test the property `formId` - Form ID where the coded data originates
        should("test formId") {
            // uncomment below to test the property
            //modelInstance.formId shouldBe ("TODO")
        }

        // to test the property `formName` - Name of the form where the coded data originates
        should("test formName") {
            // uncomment below to test the property
            //modelInstance.formName shouldBe ("TODO")
        }

        // to test the property `formKey` - Form key where the coded data originates
        should("test formKey") {
            // uncomment below to test the property
            //modelInstance.formKey shouldBe ("TODO")
        }

        // to test the property `revision` - Revision number of the coding entry
        should("test revision") {
            // uncomment below to test the property
            //modelInstance.revision shouldBe ("TODO")
        }

        // to test the property `recordId` - Record ID associated with the coded data
        should("test recordId") {
            // uncomment below to test the property
            //modelInstance.recordId shouldBe ("TODO")
        }

        // to test the property `variable` - Variable name (field) that was coded
        should("test variable") {
            // uncomment below to test the property
            //modelInstance.variable shouldBe ("TODO")
        }

        // to test the property ``value`` - Original value entered that required coding
        should("test `value`") {
            // uncomment below to test the property
            //modelInstance.`value` shouldBe ("TODO")
        }

        // to test the property `codingId` - Mednet coding ID
        should("test codingId") {
            // uncomment below to test the property
            //modelInstance.codingId shouldBe ("TODO")
        }

        // to test the property `code` - Standardized code assigned (e.g., dictionary term)
        should("test code") {
            // uncomment below to test the property
            //modelInstance.code shouldBe ("TODO")
        }

        // to test the property `codedBy` - Name of the user who performed the coding
        should("test codedBy") {
            // uncomment below to test the property
            //modelInstance.codedBy shouldBe ("TODO")
        }

        // to test the property `reason` - Reason for coding or any notes on changes
        should("test reason") {
            // uncomment below to test the property
            //modelInstance.reason shouldBe ("TODO")
        }

        // to test the property `dictionaryName` - Name of the dictionary used (e.g., MedDRA)
        should("test dictionaryName") {
            // uncomment below to test the property
            //modelInstance.dictionaryName shouldBe ("TODO")
        }

        // to test the property `dictionaryVersion` - Version of the dictionary used
        should("test dictionaryVersion") {
            // uncomment below to test the property
            //modelInstance.dictionaryVersion shouldBe ("TODO")
        }

        // to test the property `dateCoded` - Date when the coding was performed
        should("test dateCoded") {
            // uncomment below to test the property
            //modelInstance.dateCoded shouldBe ("TODO")
        }

    }
}
