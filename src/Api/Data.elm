{-
   Mednet EDC API
   The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

   The version of the OpenAPI document: 1.3.6

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( Coding
    , CodingList
    , ComponentsSchemasIntervalFormsItem
    , ComponentsSchemasMetadataError
    , ComponentsSchemasRecordCreateRequestItem
    , Form
    , FormList
    , InlineObject
    , InlineObject1
    , InlineObject2
    , InlineObject3
    , InlineObject4
    , InlineObject5
    , Interval
    , IntervalList
    , Job
    , Keyword
    , Metadata
    , Pagination
    , Query
    , QueryComment
    , QueryList
    , Record
    , RecordJobStatus
    , RecordList
    , RecordRevision
    , RecordRevisionList
    , Role
    , Site
    , SiteList
    , Sort, SortDirection(..), sortDirectionVariants
    , Study
    , StudyList
    , Subject
    , SubjectList
    , User
    , UserList
    , Variable, VariableVariableType(..), variableVariableTypeVariants
    , VariableList
    , Visit
    , VisitList
    , encodeCoding
    , encodeCodingList
    , encodeComponentsSchemasIntervalFormsItem
    , encodeComponentsSchemasMetadataError
    , encodeComponentsSchemasRecordCreateRequestItem
    , encodeForm
    , encodeFormList
    , encodeInlineObject
    , encodeInlineObject1
    , encodeInlineObject2
    , encodeInlineObject3
    , encodeInlineObject4
    , encodeInlineObject5
    , encodeInterval
    , encodeIntervalList
    , encodeJob
    , encodeKeyword
    , encodeMetadata
    , encodePagination
    , encodeQuery
    , encodeQueryComment
    , encodeQueryList
    , encodeRecord
    , encodeRecordJobStatus
    , encodeRecordList
    , encodeRecordRevision
    , encodeRecordRevisionList
    , encodeRole
    , encodeSite
    , encodeSiteList
    , encodeSort
    , encodeStudy
    , encodeStudyList
    , encodeSubject
    , encodeSubjectList
    , encodeUser
    , encodeUserList
    , encodeVariable
    , encodeVariableList
    , encodeVisit
    , encodeVisitList
    , codingDecoder
    , codingListDecoder
    , componentsSchemasIntervalFormsItemDecoder
    , componentsSchemasMetadataErrorDecoder
    , componentsSchemasRecordCreateRequestItemDecoder
    , formDecoder
    , formListDecoder
    , inlineObjectDecoder
    , inlineObject1Decoder
    , inlineObject2Decoder
    , inlineObject3Decoder
    , inlineObject4Decoder
    , inlineObject5Decoder
    , intervalDecoder
    , intervalListDecoder
    , jobDecoder
    , keywordDecoder
    , metadataDecoder
    , paginationDecoder
    , queryDecoder
    , queryCommentDecoder
    , queryListDecoder
    , recordDecoder
    , recordJobStatusDecoder
    , recordListDecoder
    , recordRevisionDecoder
    , recordRevisionListDecoder
    , roleDecoder
    , siteDecoder
    , siteListDecoder
    , sortDecoder
    , studyDecoder
    , studyListDecoder
    , subjectDecoder
    , subjectListDecoder
    , userDecoder
    , userListDecoder
    , variableDecoder
    , variableListDecoder
    , visitDecoder
    , visitListDecoder
    )

import Api
import Api.Time exposing (Posix)
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type alias Coding =
    { studyKey : Maybe String
    , siteName : Maybe String
    , siteId : Maybe Int
    , subjectId : Maybe Int
    , subjectKey : Maybe String
    , formId : Maybe Int
    , formName : Maybe String
    , formKey : Maybe String
    , revision : Maybe Int
    , recordId : Maybe Int
    , variable : Maybe String
    , value : Maybe String
    , codingId : Maybe Int
    , code : Maybe String
    , codedBy : Maybe String
    , reason : Maybe String
    , dictionaryName : Maybe String
    , dictionaryVersion : Maybe String
    , dateCoded : Maybe String
    }


type alias CodingList =
    { metadata : Maybe Metadata
    , pagination : Maybe Pagination
    , data : Maybe ( List Coding )
    }


type alias ComponentsSchemasIntervalFormsItem =
    { formId : Maybe Int
    , formKey : Maybe String
    , formName : Maybe String
    }


{-| Error details if an error occurred
-}
type alias ComponentsSchemasMetadataError =
    { message : Maybe String
    }


type alias ComponentsSchemasRecordCreateRequestItem =
    { formKey : String
    , formId : Maybe Int
    , siteName : Maybe String
    , siteId : Maybe Int
    , subjectKey : Maybe String
    , subjectId : Maybe Int
    , subjectOid : Maybe String
    , intervalName : Maybe String
    , intervalId : Maybe Int
    , recordId : Maybe Int
    , recordOid : Maybe String
    , data : Dict.Dict String Maybe AnyType
    }


type alias Form =
    { studyKey : Maybe String
    , formId : Maybe Int
    , formKey : Maybe String
    , formName : Maybe String
    , formType : Maybe String
    , revision : Maybe Int
    , embeddedLog : Maybe Bool
    , enforceOwnership : Maybe Bool
    , userAgreement : Maybe Bool
    , subjectRecordReport : Maybe Bool
    , unscheduledVisit : Maybe Bool
    , otherForms : Maybe Bool
    , eproForm : Maybe Bool
    , allowCopy : Maybe Bool
    , disabled : Maybe Bool
    , dateCreated : Maybe String
    , dateModified : Maybe String
    }


type alias FormList =
    { metadata : Maybe Metadata
    , pagination : Maybe Pagination
    , data : Maybe ( List Form )
    }


type alias InlineObject =
    { metadata : Maybe Metadata
    }


type alias InlineObject1 =
    { metadata : Maybe Metadata
    }


type alias InlineObject2 =
    { metadata : Maybe Metadata
    }


type alias InlineObject3 =
    { metadata : Maybe Metadata
    }


type alias InlineObject4 =
    { metadata : Maybe Metadata
    }


type alias InlineObject5 =
    { metadata : Maybe Metadata
    }


type alias Interval =
    { studyKey : Maybe String
    , intervalId : Maybe Int
    , intervalName : Maybe String
    , intervalDescription : Maybe String
    , intervalSequence : Maybe Int
    , intervalGroupId : Maybe Int
    , intervalGroupName : Maybe String
    , timeline : Maybe String
    , definedUsingInterval : Maybe String
    , windowCalculationForm : Maybe String
    , windowCalculationDate : Maybe String
    , actualDateForm : Maybe String
    , actualDate : Maybe String
    , dueDateWillBeIn : Maybe Int
    , negativeSlack : Maybe Int
    , positiveSlack : Maybe Int
    , eproGracePeriod : Maybe Int
    , forms : Maybe ( List ComponentsSchemasIntervalFormsItem )
    , disabled : Maybe Bool
    , dateCreated : Maybe String
    , dateModified : Maybe String
    }


type alias IntervalList =
    { metadata : Maybe Metadata
    , pagination : Maybe Pagination
    , data : Maybe ( List Interval )
    }


type alias Job =
    { jobId : Maybe String
    , batchId : Maybe String
    , state : Maybe String
    , dateCreated : Maybe String
    , dateStarted : Maybe String
    , dateFinished : Maybe String
    }


type alias Keyword =
    { keywordName : Maybe String
    , keywordKey : Maybe String
    , keywordId : Maybe Int
    , dateAdded : Maybe String
    }


type alias Metadata =
    { status : Maybe String
    , method : Maybe String
    , path : Maybe String
    , timestamp : Maybe Posix
    , error : Maybe ComponentsSchemasMetadataError
    }


type alias Pagination =
    { currentPage : Maybe Int
    , size : Maybe Int
    , totalPages : Maybe Int
    , totalElements : Maybe Int
    , sort : Maybe ( List Sort )
    }


type alias Query =
    { studyKey : Maybe String
    , subjectId : Maybe Int
    , subjectOid : Maybe String
    , annotationType : Maybe String
    , annotationId : Maybe Int
    , type_ : Maybe String
    , description : Maybe String
    , recordId : Maybe Int
    , variable : Maybe String
    , subjectKey : Maybe String
    , dateCreated : Maybe String
    , dateModified : Maybe String
    , queryComments : Maybe ( List QueryComment )
    }


type alias QueryComment =
    { sequence : Maybe Int
    , annotationStatus : Maybe String
    , user : Maybe String
    , comment : Maybe String
    , closed : Maybe Bool
    , date : Maybe String
    }


type alias QueryList =
    { metadata : Maybe Metadata
    , pagination : Maybe Pagination
    , data : Maybe ( List Query )
    }


type alias Record =
    { studyKey : Maybe String
    , intervalId : Maybe Int
    , formId : Maybe Int
    , formKey : Maybe String
    , siteId : Maybe Int
    , recordId : Maybe Int
    , recordOid : Maybe String
    , recordType : Maybe String
    , recordStatus : Maybe String
    , deleted : Maybe Bool
    , dateCreated : Maybe String
    , dateModified : Maybe String
    , subjectId : Maybe Int
    , subjectOid : Maybe String
    , subjectKey : Maybe String
    , visitId : Maybe Int
    , parentRecordId : Maybe Int
    , keywords : Maybe ( List Keyword )
    , recordData : Maybe ( Dict.Dict String Maybe AnyType )
    }


type alias RecordJobStatus =
    { jobId : Maybe String
    , batchId : Maybe String
    , state : Maybe String
    }


type alias RecordList =
    { metadata : Maybe Metadata
    , pagination : Maybe Pagination
    , data : Maybe ( List Record )
    }


type alias RecordRevision =
    { studyKey : Maybe String
    , recordRevisionId : Maybe Int
    , recordId : Maybe Int
    , recordOid : Maybe String
    , recordRevision : Maybe Int
    , dataRevision : Maybe Int
    , recordStatus : Maybe String
    , subjectId : Maybe Int
    , subjectOid : Maybe String
    , subjectKey : Maybe String
    , siteId : Maybe Int
    , formKey : Maybe String
    , intervalId : Maybe Int
    , role : Maybe String
    , user : Maybe String
    , reasonForChange : Maybe String
    , deleted : Maybe Bool
    , dateCreated : Maybe String
    }


type alias RecordRevisionList =
    { metadata : Maybe Metadata
    , pagination : Maybe Pagination
    , data : Maybe ( List RecordRevision )
    }


type alias Role =
    { dateCreated : Maybe ( List Int )
    , dateModified : Maybe ( List Int )
    , roleId : Maybe String
    , communityId : Maybe Int
    , name : Maybe String
    , description : Maybe String
    , level : Maybe Int
    , type_ : Maybe String
    , inactive : Maybe Bool
    }


type alias Site =
    { studyKey : Maybe String
    , siteId : Maybe Int
    , siteName : Maybe String
    , siteEnrollmentStatus : Maybe String
    , dateCreated : Maybe String
    , dateModified : Maybe String
    }


type alias SiteList =
    { metadata : Maybe Metadata
    , pagination : Maybe Pagination
    , data : Maybe ( List Site )
    }


type alias Sort =
    { property : Maybe String
    , direction : Maybe SortDirection
    }


type SortDirection
    = SortDirectionASC
    | SortDirectionDESC


sortDirectionVariants : List SortDirection
sortDirectionVariants =
    [ SortDirectionASC
    , SortDirectionDESC
    ]


type alias Study =
    { sponsorKey : Maybe String
    , studyKey : Maybe String
    , studyId : Maybe Int
    , studyName : Maybe String
    , studyDescription : Maybe String
    , studyType : Maybe String
    , dateCreated : Maybe String
    , dateModified : Maybe String
    }


type alias StudyList =
    { metadata : Maybe Metadata
    , pagination : Maybe Pagination
    , data : Maybe ( List Study )
    }


type alias Subject =
    { studyKey : Maybe String
    , subjectId : Maybe Int
    , subjectOid : Maybe String
    , subjectKey : Maybe String
    , subjectStatus : Maybe String
    , siteId : Maybe Int
    , siteName : Maybe String
    , deleted : Maybe Bool
    , enrollmentStartDate : Maybe String
    , dateCreated : Maybe String
    , dateModified : Maybe String
    , keywords : Maybe ( List Keyword )
    }


type alias SubjectList =
    { metadata : Maybe Metadata
    , pagination : Maybe Pagination
    , data : Maybe ( List Subject )
    }


type alias User =
    { userId : Maybe String
    , login : Maybe String
    , firstName : Maybe String
    , lastName : Maybe String
    , email : Maybe String
    , userActiveInStudy : Maybe Bool
    , roles : Maybe ( List Role )
    }


type alias UserList =
    { metadata : Maybe Metadata
    , pagination : Maybe Pagination
    , data : Maybe ( List User )
    }


type alias Variable =
    { studyKey : Maybe String
    , variableId : Maybe Int
    , variableType : Maybe VariableVariableType
    , variableName : Maybe String
    , sequence : Maybe Int
    , revision : Maybe Int
    , disabled : Maybe Bool
    , dateCreated : Maybe String
    , dateModified : Maybe String
    , formId : Maybe Int
    , variableOid : Maybe String
    , deleted : Maybe Bool
    , formKey : Maybe String
    , formName : Maybe String
    , label : Maybe String
    , blinded : Maybe Bool
    }


type VariableVariableType
    = VariableVariableTypeTEXT
    | VariableVariableTypeTEXTAREA
    | VariableVariableTypeRADIO
    | VariableVariableTypeCHECKBOX
    | VariableVariableTypeDROPDOWN
    | VariableVariableTypeDATE
    | VariableVariableTypeNUMBER


variableVariableTypeVariants : List VariableVariableType
variableVariableTypeVariants =
    [ VariableVariableTypeTEXT
    , VariableVariableTypeTEXTAREA
    , VariableVariableTypeRADIO
    , VariableVariableTypeCHECKBOX
    , VariableVariableTypeDROPDOWN
    , VariableVariableTypeDATE
    , VariableVariableTypeNUMBER
    ]


type alias VariableList =
    { metadata : Maybe Metadata
    , pagination : Maybe Pagination
    , data : Maybe ( List Variable )
    }


type alias Visit =
    { studyKey : Maybe String
    , visitId : Maybe Int
    , intervalId : Maybe Int
    , intervalName : Maybe String
    , subjectId : Maybe Int
    , subjectKey : Maybe String
    , startDate : Maybe String
    , endDate : Maybe String
    , dueDate : Maybe String
    , visitDate : Maybe String
    , visitDateForm : Maybe String
    , visitDateQuestion : Maybe String
    , deleted : Maybe Bool
    , dateCreated : Maybe String
    , dateModified : Maybe String
    }


type alias VisitList =
    { metadata : Maybe Metadata
    , pagination : Maybe Pagination
    , data : Maybe ( List Visit )
    }


-- ENCODER


encodeCoding : Coding -> Json.Encode.Value
encodeCoding =
    encodeObject << encodeCodingPairs


encodeCodingWithTag : ( String, String ) -> Coding -> Json.Encode.Value
encodeCodingWithTag (tagField, tag) model =
    encodeObject (encodeCodingPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCodingPairs : Coding -> List EncodedField
encodeCodingPairs model =
    let
        pairs =
            [ maybeEncode "studyKey" Json.Encode.string model.studyKey
            , maybeEncode "siteName" Json.Encode.string model.siteName
            , maybeEncode "siteId" Json.Encode.int model.siteId
            , maybeEncode "subjectId" Json.Encode.int model.subjectId
            , maybeEncode "subjectKey" Json.Encode.string model.subjectKey
            , maybeEncode "formId" Json.Encode.int model.formId
            , maybeEncode "formName" Json.Encode.string model.formName
            , maybeEncode "formKey" Json.Encode.string model.formKey
            , maybeEncode "revision" Json.Encode.int model.revision
            , maybeEncode "recordId" Json.Encode.int model.recordId
            , maybeEncode "variable" Json.Encode.string model.variable
            , maybeEncode "value" Json.Encode.string model.value
            , maybeEncode "codingId" Json.Encode.int model.codingId
            , maybeEncode "code" Json.Encode.string model.code
            , maybeEncode "codedBy" Json.Encode.string model.codedBy
            , maybeEncode "reason" Json.Encode.string model.reason
            , maybeEncode "dictionaryName" Json.Encode.string model.dictionaryName
            , maybeEncode "dictionaryVersion" Json.Encode.string model.dictionaryVersion
            , maybeEncode "dateCoded" Json.Encode.string model.dateCoded
            ]
    in
    pairs


encodeCodingList : CodingList -> Json.Encode.Value
encodeCodingList =
    encodeObject << encodeCodingListPairs


encodeCodingListWithTag : ( String, String ) -> CodingList -> Json.Encode.Value
encodeCodingListWithTag (tagField, tag) model =
    encodeObject (encodeCodingListPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCodingListPairs : CodingList -> List EncodedField
encodeCodingListPairs model =
    let
        pairs =
            [ maybeEncode "metadata" encodeMetadata model.metadata
            , maybeEncode "pagination" encodePagination model.pagination
            , maybeEncode "data" (Json.Encode.list encodeCoding) model.data
            ]
    in
    pairs


encodeComponentsSchemasIntervalFormsItem : ComponentsSchemasIntervalFormsItem -> Json.Encode.Value
encodeComponentsSchemasIntervalFormsItem =
    encodeObject << encodeComponentsSchemasIntervalFormsItemPairs


encodeComponentsSchemasIntervalFormsItemWithTag : ( String, String ) -> ComponentsSchemasIntervalFormsItem -> Json.Encode.Value
encodeComponentsSchemasIntervalFormsItemWithTag (tagField, tag) model =
    encodeObject (encodeComponentsSchemasIntervalFormsItemPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeComponentsSchemasIntervalFormsItemPairs : ComponentsSchemasIntervalFormsItem -> List EncodedField
encodeComponentsSchemasIntervalFormsItemPairs model =
    let
        pairs =
            [ maybeEncode "formId" Json.Encode.int model.formId
            , maybeEncode "formKey" Json.Encode.string model.formKey
            , maybeEncode "formName" Json.Encode.string model.formName
            ]
    in
    pairs


encodeComponentsSchemasMetadataError : ComponentsSchemasMetadataError -> Json.Encode.Value
encodeComponentsSchemasMetadataError =
    encodeObject << encodeComponentsSchemasMetadataErrorPairs


encodeComponentsSchemasMetadataErrorWithTag : ( String, String ) -> ComponentsSchemasMetadataError -> Json.Encode.Value
encodeComponentsSchemasMetadataErrorWithTag (tagField, tag) model =
    encodeObject (encodeComponentsSchemasMetadataErrorPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeComponentsSchemasMetadataErrorPairs : ComponentsSchemasMetadataError -> List EncodedField
encodeComponentsSchemasMetadataErrorPairs model =
    let
        pairs =
            [ maybeEncode "message" Json.Encode.string model.message
            ]
    in
    pairs


encodeComponentsSchemasRecordCreateRequestItem : ComponentsSchemasRecordCreateRequestItem -> Json.Encode.Value
encodeComponentsSchemasRecordCreateRequestItem =
    encodeObject << encodeComponentsSchemasRecordCreateRequestItemPairs


encodeComponentsSchemasRecordCreateRequestItemWithTag : ( String, String ) -> ComponentsSchemasRecordCreateRequestItem -> Json.Encode.Value
encodeComponentsSchemasRecordCreateRequestItemWithTag (tagField, tag) model =
    encodeObject (encodeComponentsSchemasRecordCreateRequestItemPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeComponentsSchemasRecordCreateRequestItemPairs : ComponentsSchemasRecordCreateRequestItem -> List EncodedField
encodeComponentsSchemasRecordCreateRequestItemPairs model =
    let
        pairs =
            [ encode "formKey" Json.Encode.string model.formKey
            , maybeEncode "formId" Json.Encode.int model.formId
            , maybeEncode "siteName" Json.Encode.string model.siteName
            , maybeEncode "siteId" Json.Encode.int model.siteId
            , maybeEncode "subjectKey" Json.Encode.string model.subjectKey
            , maybeEncode "subjectId" Json.Encode.int model.subjectId
            , maybeEncode "subjectOid" Json.Encode.string model.subjectOid
            , maybeEncode "intervalName" Json.Encode.string model.intervalName
            , maybeEncode "intervalId" Json.Encode.int model.intervalId
            , maybeEncode "recordId" Json.Encode.int model.recordId
            , maybeEncode "recordOid" Json.Encode.string model.recordOid
            , encode "data" (Json.Encode.dict identity encodeAnyType) model.data
            ]
    in
    pairs


encodeForm : Form -> Json.Encode.Value
encodeForm =
    encodeObject << encodeFormPairs


encodeFormWithTag : ( String, String ) -> Form -> Json.Encode.Value
encodeFormWithTag (tagField, tag) model =
    encodeObject (encodeFormPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFormPairs : Form -> List EncodedField
encodeFormPairs model =
    let
        pairs =
            [ maybeEncode "studyKey" Json.Encode.string model.studyKey
            , maybeEncode "formId" Json.Encode.int model.formId
            , maybeEncode "formKey" Json.Encode.string model.formKey
            , maybeEncode "formName" Json.Encode.string model.formName
            , maybeEncode "formType" Json.Encode.string model.formType
            , maybeEncode "revision" Json.Encode.int model.revision
            , maybeEncode "embeddedLog" Json.Encode.bool model.embeddedLog
            , maybeEncode "enforceOwnership" Json.Encode.bool model.enforceOwnership
            , maybeEncode "userAgreement" Json.Encode.bool model.userAgreement
            , maybeEncode "subjectRecordReport" Json.Encode.bool model.subjectRecordReport
            , maybeEncode "unscheduledVisit" Json.Encode.bool model.unscheduledVisit
            , maybeEncode "otherForms" Json.Encode.bool model.otherForms
            , maybeEncode "eproForm" Json.Encode.bool model.eproForm
            , maybeEncode "allowCopy" Json.Encode.bool model.allowCopy
            , maybeEncode "disabled" Json.Encode.bool model.disabled
            , maybeEncode "dateCreated" Json.Encode.string model.dateCreated
            , maybeEncode "dateModified" Json.Encode.string model.dateModified
            ]
    in
    pairs


encodeFormList : FormList -> Json.Encode.Value
encodeFormList =
    encodeObject << encodeFormListPairs


encodeFormListWithTag : ( String, String ) -> FormList -> Json.Encode.Value
encodeFormListWithTag (tagField, tag) model =
    encodeObject (encodeFormListPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFormListPairs : FormList -> List EncodedField
encodeFormListPairs model =
    let
        pairs =
            [ maybeEncode "metadata" encodeMetadata model.metadata
            , maybeEncode "pagination" encodePagination model.pagination
            , maybeEncode "data" (Json.Encode.list encodeForm) model.data
            ]
    in
    pairs


encodeInlineObject : InlineObject -> Json.Encode.Value
encodeInlineObject =
    encodeObject << encodeInlineObjectPairs


encodeInlineObjectWithTag : ( String, String ) -> InlineObject -> Json.Encode.Value
encodeInlineObjectWithTag (tagField, tag) model =
    encodeObject (encodeInlineObjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineObjectPairs : InlineObject -> List EncodedField
encodeInlineObjectPairs model =
    let
        pairs =
            [ maybeEncode "metadata" encodeMetadata model.metadata
            ]
    in
    pairs


encodeInlineObject1 : InlineObject1 -> Json.Encode.Value
encodeInlineObject1 =
    encodeObject << encodeInlineObject1Pairs


encodeInlineObject1WithTag : ( String, String ) -> InlineObject1 -> Json.Encode.Value
encodeInlineObject1WithTag (tagField, tag) model =
    encodeObject (encodeInlineObject1Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineObject1Pairs : InlineObject1 -> List EncodedField
encodeInlineObject1Pairs model =
    let
        pairs =
            [ maybeEncode "metadata" encodeMetadata model.metadata
            ]
    in
    pairs


encodeInlineObject2 : InlineObject2 -> Json.Encode.Value
encodeInlineObject2 =
    encodeObject << encodeInlineObject2Pairs


encodeInlineObject2WithTag : ( String, String ) -> InlineObject2 -> Json.Encode.Value
encodeInlineObject2WithTag (tagField, tag) model =
    encodeObject (encodeInlineObject2Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineObject2Pairs : InlineObject2 -> List EncodedField
encodeInlineObject2Pairs model =
    let
        pairs =
            [ maybeEncode "metadata" encodeMetadata model.metadata
            ]
    in
    pairs


encodeInlineObject3 : InlineObject3 -> Json.Encode.Value
encodeInlineObject3 =
    encodeObject << encodeInlineObject3Pairs


encodeInlineObject3WithTag : ( String, String ) -> InlineObject3 -> Json.Encode.Value
encodeInlineObject3WithTag (tagField, tag) model =
    encodeObject (encodeInlineObject3Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineObject3Pairs : InlineObject3 -> List EncodedField
encodeInlineObject3Pairs model =
    let
        pairs =
            [ maybeEncode "metadata" encodeMetadata model.metadata
            ]
    in
    pairs


encodeInlineObject4 : InlineObject4 -> Json.Encode.Value
encodeInlineObject4 =
    encodeObject << encodeInlineObject4Pairs


encodeInlineObject4WithTag : ( String, String ) -> InlineObject4 -> Json.Encode.Value
encodeInlineObject4WithTag (tagField, tag) model =
    encodeObject (encodeInlineObject4Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineObject4Pairs : InlineObject4 -> List EncodedField
encodeInlineObject4Pairs model =
    let
        pairs =
            [ maybeEncode "metadata" encodeMetadata model.metadata
            ]
    in
    pairs


encodeInlineObject5 : InlineObject5 -> Json.Encode.Value
encodeInlineObject5 =
    encodeObject << encodeInlineObject5Pairs


encodeInlineObject5WithTag : ( String, String ) -> InlineObject5 -> Json.Encode.Value
encodeInlineObject5WithTag (tagField, tag) model =
    encodeObject (encodeInlineObject5Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInlineObject5Pairs : InlineObject5 -> List EncodedField
encodeInlineObject5Pairs model =
    let
        pairs =
            [ maybeEncode "metadata" encodeMetadata model.metadata
            ]
    in
    pairs


encodeInterval : Interval -> Json.Encode.Value
encodeInterval =
    encodeObject << encodeIntervalPairs


encodeIntervalWithTag : ( String, String ) -> Interval -> Json.Encode.Value
encodeIntervalWithTag (tagField, tag) model =
    encodeObject (encodeIntervalPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeIntervalPairs : Interval -> List EncodedField
encodeIntervalPairs model =
    let
        pairs =
            [ maybeEncode "studyKey" Json.Encode.string model.studyKey
            , maybeEncode "intervalId" Json.Encode.int model.intervalId
            , maybeEncode "intervalName" Json.Encode.string model.intervalName
            , maybeEncode "intervalDescription" Json.Encode.string model.intervalDescription
            , maybeEncode "intervalSequence" Json.Encode.int model.intervalSequence
            , maybeEncode "intervalGroupId" Json.Encode.int model.intervalGroupId
            , maybeEncode "intervalGroupName" Json.Encode.string model.intervalGroupName
            , maybeEncode "timeline" Json.Encode.string model.timeline
            , maybeEncode "definedUsingInterval" Json.Encode.string model.definedUsingInterval
            , maybeEncode "windowCalculationForm" Json.Encode.string model.windowCalculationForm
            , maybeEncode "windowCalculationDate" Json.Encode.string model.windowCalculationDate
            , maybeEncode "actualDateForm" Json.Encode.string model.actualDateForm
            , maybeEncode "actualDate" Json.Encode.string model.actualDate
            , maybeEncode "dueDateWillBeIn" Json.Encode.int model.dueDateWillBeIn
            , maybeEncode "negativeSlack" Json.Encode.int model.negativeSlack
            , maybeEncode "positiveSlack" Json.Encode.int model.positiveSlack
            , maybeEncode "eproGracePeriod" Json.Encode.int model.eproGracePeriod
            , maybeEncode "forms" (Json.Encode.list encodeComponentsSchemasIntervalFormsItem) model.forms
            , maybeEncode "disabled" Json.Encode.bool model.disabled
            , maybeEncode "dateCreated" Json.Encode.string model.dateCreated
            , maybeEncode "dateModified" Json.Encode.string model.dateModified
            ]
    in
    pairs


encodeIntervalList : IntervalList -> Json.Encode.Value
encodeIntervalList =
    encodeObject << encodeIntervalListPairs


encodeIntervalListWithTag : ( String, String ) -> IntervalList -> Json.Encode.Value
encodeIntervalListWithTag (tagField, tag) model =
    encodeObject (encodeIntervalListPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeIntervalListPairs : IntervalList -> List EncodedField
encodeIntervalListPairs model =
    let
        pairs =
            [ maybeEncode "metadata" encodeMetadata model.metadata
            , maybeEncode "pagination" encodePagination model.pagination
            , maybeEncode "data" (Json.Encode.list encodeInterval) model.data
            ]
    in
    pairs


encodeJob : Job -> Json.Encode.Value
encodeJob =
    encodeObject << encodeJobPairs


encodeJobWithTag : ( String, String ) -> Job -> Json.Encode.Value
encodeJobWithTag (tagField, tag) model =
    encodeObject (encodeJobPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJobPairs : Job -> List EncodedField
encodeJobPairs model =
    let
        pairs =
            [ maybeEncode "jobId" Json.Encode.string model.jobId
            , maybeEncode "batchId" Json.Encode.string model.batchId
            , maybeEncode "state" Json.Encode.string model.state
            , maybeEncode "dateCreated" Json.Encode.string model.dateCreated
            , maybeEncode "dateStarted" Json.Encode.string model.dateStarted
            , maybeEncode "dateFinished" Json.Encode.string model.dateFinished
            ]
    in
    pairs


encodeKeyword : Keyword -> Json.Encode.Value
encodeKeyword =
    encodeObject << encodeKeywordPairs


encodeKeywordWithTag : ( String, String ) -> Keyword -> Json.Encode.Value
encodeKeywordWithTag (tagField, tag) model =
    encodeObject (encodeKeywordPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeKeywordPairs : Keyword -> List EncodedField
encodeKeywordPairs model =
    let
        pairs =
            [ maybeEncode "keywordName" Json.Encode.string model.keywordName
            , maybeEncode "keywordKey" Json.Encode.string model.keywordKey
            , maybeEncode "keywordId" Json.Encode.int model.keywordId
            , maybeEncode "dateAdded" Json.Encode.string model.dateAdded
            ]
    in
    pairs


encodeMetadata : Metadata -> Json.Encode.Value
encodeMetadata =
    encodeObject << encodeMetadataPairs


encodeMetadataWithTag : ( String, String ) -> Metadata -> Json.Encode.Value
encodeMetadataWithTag (tagField, tag) model =
    encodeObject (encodeMetadataPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMetadataPairs : Metadata -> List EncodedField
encodeMetadataPairs model =
    let
        pairs =
            [ maybeEncode "status" Json.Encode.string model.status
            , maybeEncode "method" Json.Encode.string model.method
            , maybeEncode "path" Json.Encode.string model.path
            , maybeEncode "timestamp" Api.Time.encodeDateTime model.timestamp
            , maybeEncode "error" encodeComponentsSchemasMetadataError model.error
            ]
    in
    pairs


encodePagination : Pagination -> Json.Encode.Value
encodePagination =
    encodeObject << encodePaginationPairs


encodePaginationWithTag : ( String, String ) -> Pagination -> Json.Encode.Value
encodePaginationWithTag (tagField, tag) model =
    encodeObject (encodePaginationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePaginationPairs : Pagination -> List EncodedField
encodePaginationPairs model =
    let
        pairs =
            [ maybeEncode "currentPage" Json.Encode.int model.currentPage
            , maybeEncode "size" Json.Encode.int model.size
            , maybeEncode "totalPages" Json.Encode.int model.totalPages
            , maybeEncode "totalElements" Json.Encode.int model.totalElements
            , maybeEncode "sort" (Json.Encode.list encodeSort) model.sort
            ]
    in
    pairs


encodeQuery : Query -> Json.Encode.Value
encodeQuery =
    encodeObject << encodeQueryPairs


encodeQueryWithTag : ( String, String ) -> Query -> Json.Encode.Value
encodeQueryWithTag (tagField, tag) model =
    encodeObject (encodeQueryPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeQueryPairs : Query -> List EncodedField
encodeQueryPairs model =
    let
        pairs =
            [ maybeEncode "studyKey" Json.Encode.string model.studyKey
            , maybeEncode "subjectId" Json.Encode.int model.subjectId
            , maybeEncode "subjectOid" Json.Encode.string model.subjectOid
            , maybeEncode "annotationType" Json.Encode.string model.annotationType
            , maybeEncode "annotationId" Json.Encode.int model.annotationId
            , maybeEncode "type" Json.Encode.string model.type_
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "recordId" Json.Encode.int model.recordId
            , maybeEncode "variable" Json.Encode.string model.variable
            , maybeEncode "subjectKey" Json.Encode.string model.subjectKey
            , maybeEncode "dateCreated" Json.Encode.string model.dateCreated
            , maybeEncode "dateModified" Json.Encode.string model.dateModified
            , maybeEncode "queryComments" (Json.Encode.list encodeQueryComment) model.queryComments
            ]
    in
    pairs


encodeQueryComment : QueryComment -> Json.Encode.Value
encodeQueryComment =
    encodeObject << encodeQueryCommentPairs


encodeQueryCommentWithTag : ( String, String ) -> QueryComment -> Json.Encode.Value
encodeQueryCommentWithTag (tagField, tag) model =
    encodeObject (encodeQueryCommentPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeQueryCommentPairs : QueryComment -> List EncodedField
encodeQueryCommentPairs model =
    let
        pairs =
            [ maybeEncode "sequence" Json.Encode.int model.sequence
            , maybeEncode "annotationStatus" Json.Encode.string model.annotationStatus
            , maybeEncode "user" Json.Encode.string model.user
            , maybeEncode "comment" Json.Encode.string model.comment
            , maybeEncode "closed" Json.Encode.bool model.closed
            , maybeEncode "date" Json.Encode.string model.date
            ]
    in
    pairs


encodeQueryList : QueryList -> Json.Encode.Value
encodeQueryList =
    encodeObject << encodeQueryListPairs


encodeQueryListWithTag : ( String, String ) -> QueryList -> Json.Encode.Value
encodeQueryListWithTag (tagField, tag) model =
    encodeObject (encodeQueryListPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeQueryListPairs : QueryList -> List EncodedField
encodeQueryListPairs model =
    let
        pairs =
            [ maybeEncode "metadata" encodeMetadata model.metadata
            , maybeEncode "pagination" encodePagination model.pagination
            , maybeEncode "data" (Json.Encode.list encodeQuery) model.data
            ]
    in
    pairs


encodeRecord : Record -> Json.Encode.Value
encodeRecord =
    encodeObject << encodeRecordPairs


encodeRecordWithTag : ( String, String ) -> Record -> Json.Encode.Value
encodeRecordWithTag (tagField, tag) model =
    encodeObject (encodeRecordPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRecordPairs : Record -> List EncodedField
encodeRecordPairs model =
    let
        pairs =
            [ maybeEncode "studyKey" Json.Encode.string model.studyKey
            , maybeEncode "intervalId" Json.Encode.int model.intervalId
            , maybeEncode "formId" Json.Encode.int model.formId
            , maybeEncode "formKey" Json.Encode.string model.formKey
            , maybeEncode "siteId" Json.Encode.int model.siteId
            , maybeEncode "recordId" Json.Encode.int model.recordId
            , maybeEncode "recordOid" Json.Encode.string model.recordOid
            , maybeEncode "recordType" Json.Encode.string model.recordType
            , maybeEncode "recordStatus" Json.Encode.string model.recordStatus
            , maybeEncode "deleted" Json.Encode.bool model.deleted
            , maybeEncode "dateCreated" Json.Encode.string model.dateCreated
            , maybeEncode "dateModified" Json.Encode.string model.dateModified
            , maybeEncode "subjectId" Json.Encode.int model.subjectId
            , maybeEncode "subjectOid" Json.Encode.string model.subjectOid
            , maybeEncode "subjectKey" Json.Encode.string model.subjectKey
            , maybeEncode "visitId" Json.Encode.int model.visitId
            , maybeEncode "parentRecordId" Json.Encode.int model.parentRecordId
            , maybeEncode "keywords" (Json.Encode.list encodeKeyword) model.keywords
            , maybeEncode "recordData" (Json.Encode.dict identity encodeAnyType) model.recordData
            ]
    in
    pairs


encodeRecordJobStatus : RecordJobStatus -> Json.Encode.Value
encodeRecordJobStatus =
    encodeObject << encodeRecordJobStatusPairs


encodeRecordJobStatusWithTag : ( String, String ) -> RecordJobStatus -> Json.Encode.Value
encodeRecordJobStatusWithTag (tagField, tag) model =
    encodeObject (encodeRecordJobStatusPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRecordJobStatusPairs : RecordJobStatus -> List EncodedField
encodeRecordJobStatusPairs model =
    let
        pairs =
            [ maybeEncode "jobId" Json.Encode.string model.jobId
            , maybeEncode "batchId" Json.Encode.string model.batchId
            , maybeEncode "state" Json.Encode.string model.state
            ]
    in
    pairs


encodeRecordList : RecordList -> Json.Encode.Value
encodeRecordList =
    encodeObject << encodeRecordListPairs


encodeRecordListWithTag : ( String, String ) -> RecordList -> Json.Encode.Value
encodeRecordListWithTag (tagField, tag) model =
    encodeObject (encodeRecordListPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRecordListPairs : RecordList -> List EncodedField
encodeRecordListPairs model =
    let
        pairs =
            [ maybeEncode "metadata" encodeMetadata model.metadata
            , maybeEncode "pagination" encodePagination model.pagination
            , maybeEncode "data" (Json.Encode.list encodeRecord) model.data
            ]
    in
    pairs


encodeRecordRevision : RecordRevision -> Json.Encode.Value
encodeRecordRevision =
    encodeObject << encodeRecordRevisionPairs


encodeRecordRevisionWithTag : ( String, String ) -> RecordRevision -> Json.Encode.Value
encodeRecordRevisionWithTag (tagField, tag) model =
    encodeObject (encodeRecordRevisionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRecordRevisionPairs : RecordRevision -> List EncodedField
encodeRecordRevisionPairs model =
    let
        pairs =
            [ maybeEncode "studyKey" Json.Encode.string model.studyKey
            , maybeEncode "recordRevisionId" Json.Encode.int model.recordRevisionId
            , maybeEncode "recordId" Json.Encode.int model.recordId
            , maybeEncode "recordOid" Json.Encode.string model.recordOid
            , maybeEncode "recordRevision" Json.Encode.int model.recordRevision
            , maybeEncode "dataRevision" Json.Encode.int model.dataRevision
            , maybeEncode "recordStatus" Json.Encode.string model.recordStatus
            , maybeEncode "subjectId" Json.Encode.int model.subjectId
            , maybeEncode "subjectOid" Json.Encode.string model.subjectOid
            , maybeEncode "subjectKey" Json.Encode.string model.subjectKey
            , maybeEncode "siteId" Json.Encode.int model.siteId
            , maybeEncode "formKey" Json.Encode.string model.formKey
            , maybeEncode "intervalId" Json.Encode.int model.intervalId
            , maybeEncode "role" Json.Encode.string model.role
            , maybeEncode "user" Json.Encode.string model.user
            , maybeEncode "reasonForChange" Json.Encode.string model.reasonForChange
            , maybeEncode "deleted" Json.Encode.bool model.deleted
            , maybeEncode "dateCreated" Json.Encode.string model.dateCreated
            ]
    in
    pairs


encodeRecordRevisionList : RecordRevisionList -> Json.Encode.Value
encodeRecordRevisionList =
    encodeObject << encodeRecordRevisionListPairs


encodeRecordRevisionListWithTag : ( String, String ) -> RecordRevisionList -> Json.Encode.Value
encodeRecordRevisionListWithTag (tagField, tag) model =
    encodeObject (encodeRecordRevisionListPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRecordRevisionListPairs : RecordRevisionList -> List EncodedField
encodeRecordRevisionListPairs model =
    let
        pairs =
            [ maybeEncode "metadata" encodeMetadata model.metadata
            , maybeEncode "pagination" encodePagination model.pagination
            , maybeEncode "data" (Json.Encode.list encodeRecordRevision) model.data
            ]
    in
    pairs


encodeRole : Role -> Json.Encode.Value
encodeRole =
    encodeObject << encodeRolePairs


encodeRoleWithTag : ( String, String ) -> Role -> Json.Encode.Value
encodeRoleWithTag (tagField, tag) model =
    encodeObject (encodeRolePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRolePairs : Role -> List EncodedField
encodeRolePairs model =
    let
        pairs =
            [ maybeEncode "dateCreated" (Json.Encode.list Json.Encode.int) model.dateCreated
            , maybeEncode "dateModified" (Json.Encode.list Json.Encode.int) model.dateModified
            , maybeEncode "roleId" Json.Encode.string model.roleId
            , maybeEncode "communityId" Json.Encode.int model.communityId
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "level" Json.Encode.int model.level
            , maybeEncode "type" Json.Encode.string model.type_
            , maybeEncode "inactive" Json.Encode.bool model.inactive
            ]
    in
    pairs


encodeSite : Site -> Json.Encode.Value
encodeSite =
    encodeObject << encodeSitePairs


encodeSiteWithTag : ( String, String ) -> Site -> Json.Encode.Value
encodeSiteWithTag (tagField, tag) model =
    encodeObject (encodeSitePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSitePairs : Site -> List EncodedField
encodeSitePairs model =
    let
        pairs =
            [ maybeEncode "studyKey" Json.Encode.string model.studyKey
            , maybeEncode "siteId" Json.Encode.int model.siteId
            , maybeEncode "siteName" Json.Encode.string model.siteName
            , maybeEncode "siteEnrollmentStatus" Json.Encode.string model.siteEnrollmentStatus
            , maybeEncode "dateCreated" Json.Encode.string model.dateCreated
            , maybeEncode "dateModified" Json.Encode.string model.dateModified
            ]
    in
    pairs


encodeSiteList : SiteList -> Json.Encode.Value
encodeSiteList =
    encodeObject << encodeSiteListPairs


encodeSiteListWithTag : ( String, String ) -> SiteList -> Json.Encode.Value
encodeSiteListWithTag (tagField, tag) model =
    encodeObject (encodeSiteListPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSiteListPairs : SiteList -> List EncodedField
encodeSiteListPairs model =
    let
        pairs =
            [ maybeEncode "metadata" encodeMetadata model.metadata
            , maybeEncode "pagination" encodePagination model.pagination
            , maybeEncode "data" (Json.Encode.list encodeSite) model.data
            ]
    in
    pairs


encodeSort : Sort -> Json.Encode.Value
encodeSort =
    encodeObject << encodeSortPairs


encodeSortWithTag : ( String, String ) -> Sort -> Json.Encode.Value
encodeSortWithTag (tagField, tag) model =
    encodeObject (encodeSortPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSortPairs : Sort -> List EncodedField
encodeSortPairs model =
    let
        pairs =
            [ maybeEncode "property" Json.Encode.string model.property
            , maybeEncode "direction" encodeSortDirection model.direction
            ]
    in
    pairs

stringFromSortDirection : SortDirection -> String
stringFromSortDirection model =
    case model of
        SortDirectionASC ->
            "ASC"

        SortDirectionDESC ->
            "DESC"


encodeSortDirection : SortDirection -> Json.Encode.Value
encodeSortDirection =
    Json.Encode.string << stringFromSortDirection



encodeStudy : Study -> Json.Encode.Value
encodeStudy =
    encodeObject << encodeStudyPairs


encodeStudyWithTag : ( String, String ) -> Study -> Json.Encode.Value
encodeStudyWithTag (tagField, tag) model =
    encodeObject (encodeStudyPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeStudyPairs : Study -> List EncodedField
encodeStudyPairs model =
    let
        pairs =
            [ maybeEncode "sponsorKey" Json.Encode.string model.sponsorKey
            , maybeEncode "studyKey" Json.Encode.string model.studyKey
            , maybeEncode "studyId" Json.Encode.int model.studyId
            , maybeEncode "studyName" Json.Encode.string model.studyName
            , maybeEncode "studyDescription" Json.Encode.string model.studyDescription
            , maybeEncode "studyType" Json.Encode.string model.studyType
            , maybeEncode "dateCreated" Json.Encode.string model.dateCreated
            , maybeEncode "dateModified" Json.Encode.string model.dateModified
            ]
    in
    pairs


encodeStudyList : StudyList -> Json.Encode.Value
encodeStudyList =
    encodeObject << encodeStudyListPairs


encodeStudyListWithTag : ( String, String ) -> StudyList -> Json.Encode.Value
encodeStudyListWithTag (tagField, tag) model =
    encodeObject (encodeStudyListPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeStudyListPairs : StudyList -> List EncodedField
encodeStudyListPairs model =
    let
        pairs =
            [ maybeEncode "metadata" encodeMetadata model.metadata
            , maybeEncode "pagination" encodePagination model.pagination
            , maybeEncode "data" (Json.Encode.list encodeStudy) model.data
            ]
    in
    pairs


encodeSubject : Subject -> Json.Encode.Value
encodeSubject =
    encodeObject << encodeSubjectPairs


encodeSubjectWithTag : ( String, String ) -> Subject -> Json.Encode.Value
encodeSubjectWithTag (tagField, tag) model =
    encodeObject (encodeSubjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSubjectPairs : Subject -> List EncodedField
encodeSubjectPairs model =
    let
        pairs =
            [ maybeEncode "studyKey" Json.Encode.string model.studyKey
            , maybeEncode "subjectId" Json.Encode.int model.subjectId
            , maybeEncode "subjectOid" Json.Encode.string model.subjectOid
            , maybeEncode "subjectKey" Json.Encode.string model.subjectKey
            , maybeEncode "subjectStatus" Json.Encode.string model.subjectStatus
            , maybeEncode "siteId" Json.Encode.int model.siteId
            , maybeEncode "siteName" Json.Encode.string model.siteName
            , maybeEncode "deleted" Json.Encode.bool model.deleted
            , maybeEncode "enrollmentStartDate" Json.Encode.string model.enrollmentStartDate
            , maybeEncode "dateCreated" Json.Encode.string model.dateCreated
            , maybeEncode "dateModified" Json.Encode.string model.dateModified
            , maybeEncode "keywords" (Json.Encode.list encodeKeyword) model.keywords
            ]
    in
    pairs


encodeSubjectList : SubjectList -> Json.Encode.Value
encodeSubjectList =
    encodeObject << encodeSubjectListPairs


encodeSubjectListWithTag : ( String, String ) -> SubjectList -> Json.Encode.Value
encodeSubjectListWithTag (tagField, tag) model =
    encodeObject (encodeSubjectListPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSubjectListPairs : SubjectList -> List EncodedField
encodeSubjectListPairs model =
    let
        pairs =
            [ maybeEncode "metadata" encodeMetadata model.metadata
            , maybeEncode "pagination" encodePagination model.pagination
            , maybeEncode "data" (Json.Encode.list encodeSubject) model.data
            ]
    in
    pairs


encodeUser : User -> Json.Encode.Value
encodeUser =
    encodeObject << encodeUserPairs


encodeUserWithTag : ( String, String ) -> User -> Json.Encode.Value
encodeUserWithTag (tagField, tag) model =
    encodeObject (encodeUserPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUserPairs : User -> List EncodedField
encodeUserPairs model =
    let
        pairs =
            [ maybeEncode "userId" Json.Encode.string model.userId
            , maybeEncode "login" Json.Encode.string model.login
            , maybeEncode "firstName" Json.Encode.string model.firstName
            , maybeEncode "lastName" Json.Encode.string model.lastName
            , maybeEncode "email" Json.Encode.string model.email
            , maybeEncode "userActiveInStudy" Json.Encode.bool model.userActiveInStudy
            , maybeEncode "roles" (Json.Encode.list encodeRole) model.roles
            ]
    in
    pairs


encodeUserList : UserList -> Json.Encode.Value
encodeUserList =
    encodeObject << encodeUserListPairs


encodeUserListWithTag : ( String, String ) -> UserList -> Json.Encode.Value
encodeUserListWithTag (tagField, tag) model =
    encodeObject (encodeUserListPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUserListPairs : UserList -> List EncodedField
encodeUserListPairs model =
    let
        pairs =
            [ maybeEncode "metadata" encodeMetadata model.metadata
            , maybeEncode "pagination" encodePagination model.pagination
            , maybeEncode "data" (Json.Encode.list encodeUser) model.data
            ]
    in
    pairs


encodeVariable : Variable -> Json.Encode.Value
encodeVariable =
    encodeObject << encodeVariablePairs


encodeVariableWithTag : ( String, String ) -> Variable -> Json.Encode.Value
encodeVariableWithTag (tagField, tag) model =
    encodeObject (encodeVariablePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeVariablePairs : Variable -> List EncodedField
encodeVariablePairs model =
    let
        pairs =
            [ maybeEncode "studyKey" Json.Encode.string model.studyKey
            , maybeEncode "variableId" Json.Encode.int model.variableId
            , maybeEncode "variableType" encodeVariableVariableType model.variableType
            , maybeEncode "variableName" Json.Encode.string model.variableName
            , maybeEncode "sequence" Json.Encode.int model.sequence
            , maybeEncode "revision" Json.Encode.int model.revision
            , maybeEncode "disabled" Json.Encode.bool model.disabled
            , maybeEncode "dateCreated" Json.Encode.string model.dateCreated
            , maybeEncode "dateModified" Json.Encode.string model.dateModified
            , maybeEncode "formId" Json.Encode.int model.formId
            , maybeEncode "variableOid" Json.Encode.string model.variableOid
            , maybeEncode "deleted" Json.Encode.bool model.deleted
            , maybeEncode "formKey" Json.Encode.string model.formKey
            , maybeEncode "formName" Json.Encode.string model.formName
            , maybeEncode "label" Json.Encode.string model.label
            , maybeEncode "blinded" Json.Encode.bool model.blinded
            ]
    in
    pairs

stringFromVariableVariableType : VariableVariableType -> String
stringFromVariableVariableType model =
    case model of
        VariableVariableTypeTEXT ->
            "TEXT"

        VariableVariableTypeTEXTAREA ->
            "TEXTAREA"

        VariableVariableTypeRADIO ->
            "RADIO"

        VariableVariableTypeCHECKBOX ->
            "CHECKBOX"

        VariableVariableTypeDROPDOWN ->
            "DROPDOWN"

        VariableVariableTypeDATE ->
            "DATE"

        VariableVariableTypeNUMBER ->
            "NUMBER"


encodeVariableVariableType : VariableVariableType -> Json.Encode.Value
encodeVariableVariableType =
    Json.Encode.string << stringFromVariableVariableType



encodeVariableList : VariableList -> Json.Encode.Value
encodeVariableList =
    encodeObject << encodeVariableListPairs


encodeVariableListWithTag : ( String, String ) -> VariableList -> Json.Encode.Value
encodeVariableListWithTag (tagField, tag) model =
    encodeObject (encodeVariableListPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeVariableListPairs : VariableList -> List EncodedField
encodeVariableListPairs model =
    let
        pairs =
            [ maybeEncode "metadata" encodeMetadata model.metadata
            , maybeEncode "pagination" encodePagination model.pagination
            , maybeEncode "data" (Json.Encode.list encodeVariable) model.data
            ]
    in
    pairs


encodeVisit : Visit -> Json.Encode.Value
encodeVisit =
    encodeObject << encodeVisitPairs


encodeVisitWithTag : ( String, String ) -> Visit -> Json.Encode.Value
encodeVisitWithTag (tagField, tag) model =
    encodeObject (encodeVisitPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeVisitPairs : Visit -> List EncodedField
encodeVisitPairs model =
    let
        pairs =
            [ maybeEncode "studyKey" Json.Encode.string model.studyKey
            , maybeEncode "visitId" Json.Encode.int model.visitId
            , maybeEncode "intervalId" Json.Encode.int model.intervalId
            , maybeEncode "intervalName" Json.Encode.string model.intervalName
            , maybeEncode "subjectId" Json.Encode.int model.subjectId
            , maybeEncode "subjectKey" Json.Encode.string model.subjectKey
            , maybeEncode "startDate" Json.Encode.string model.startDate
            , maybeEncode "endDate" Json.Encode.string model.endDate
            , maybeEncode "dueDate" Json.Encode.string model.dueDate
            , maybeEncode "visitDate" Json.Encode.string model.visitDate
            , maybeEncode "visitDateForm" Json.Encode.string model.visitDateForm
            , maybeEncode "visitDateQuestion" Json.Encode.string model.visitDateQuestion
            , maybeEncode "deleted" Json.Encode.bool model.deleted
            , maybeEncode "dateCreated" Json.Encode.string model.dateCreated
            , maybeEncode "dateModified" Json.Encode.string model.dateModified
            ]
    in
    pairs


encodeVisitList : VisitList -> Json.Encode.Value
encodeVisitList =
    encodeObject << encodeVisitListPairs


encodeVisitListWithTag : ( String, String ) -> VisitList -> Json.Encode.Value
encodeVisitListWithTag (tagField, tag) model =
    encodeObject (encodeVisitListPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeVisitListPairs : VisitList -> List EncodedField
encodeVisitListPairs model =
    let
        pairs =
            [ maybeEncode "metadata" encodeMetadata model.metadata
            , maybeEncode "pagination" encodePagination model.pagination
            , maybeEncode "data" (Json.Encode.list encodeVisit) model.data
            ]
    in
    pairs


-- DECODER


codingDecoder : Json.Decode.Decoder Coding
codingDecoder =
    Json.Decode.succeed Coding
        |> maybeDecode "studyKey" Json.Decode.string Nothing
        |> maybeDecode "siteName" Json.Decode.string Nothing
        |> maybeDecode "siteId" Json.Decode.int Nothing
        |> maybeDecode "subjectId" Json.Decode.int Nothing
        |> maybeDecode "subjectKey" Json.Decode.string Nothing
        |> maybeDecode "formId" Json.Decode.int Nothing
        |> maybeDecode "formName" Json.Decode.string Nothing
        |> maybeDecode "formKey" Json.Decode.string Nothing
        |> maybeDecode "revision" Json.Decode.int Nothing
        |> maybeDecode "recordId" Json.Decode.int Nothing
        |> maybeDecode "variable" Json.Decode.string Nothing
        |> maybeDecode "value" Json.Decode.string Nothing
        |> maybeDecode "codingId" Json.Decode.int Nothing
        |> maybeDecode "code" Json.Decode.string Nothing
        |> maybeDecode "codedBy" Json.Decode.string Nothing
        |> maybeDecode "reason" Json.Decode.string Nothing
        |> maybeDecode "dictionaryName" Json.Decode.string Nothing
        |> maybeDecode "dictionaryVersion" Json.Decode.string Nothing
        |> maybeDecode "dateCoded" Json.Decode.string Nothing


codingListDecoder : Json.Decode.Decoder CodingList
codingListDecoder =
    Json.Decode.succeed CodingList
        |> maybeDecode "metadata" metadataDecoder Nothing
        |> maybeDecode "pagination" paginationDecoder Nothing
        |> maybeDecode "data" (Json.Decode.list codingDecoder) Nothing


componentsSchemasIntervalFormsItemDecoder : Json.Decode.Decoder ComponentsSchemasIntervalFormsItem
componentsSchemasIntervalFormsItemDecoder =
    Json.Decode.succeed ComponentsSchemasIntervalFormsItem
        |> maybeDecode "formId" Json.Decode.int Nothing
        |> maybeDecode "formKey" Json.Decode.string Nothing
        |> maybeDecode "formName" Json.Decode.string Nothing


componentsSchemasMetadataErrorDecoder : Json.Decode.Decoder ComponentsSchemasMetadataError
componentsSchemasMetadataErrorDecoder =
    Json.Decode.succeed ComponentsSchemasMetadataError
        |> maybeDecode "message" Json.Decode.string Nothing


componentsSchemasRecordCreateRequestItemDecoder : Json.Decode.Decoder ComponentsSchemasRecordCreateRequestItem
componentsSchemasRecordCreateRequestItemDecoder =
    Json.Decode.succeed ComponentsSchemasRecordCreateRequestItem
        |> decode "formKey" Json.Decode.string 
        |> maybeDecode "formId" Json.Decode.int Nothing
        |> maybeDecode "siteName" Json.Decode.string Nothing
        |> maybeDecode "siteId" Json.Decode.int Nothing
        |> maybeDecode "subjectKey" Json.Decode.string Nothing
        |> maybeDecode "subjectId" Json.Decode.int Nothing
        |> maybeDecode "subjectOid" Json.Decode.string Nothing
        |> maybeDecode "intervalName" Json.Decode.string Nothing
        |> maybeDecode "intervalId" Json.Decode.int Nothing
        |> maybeDecode "recordId" Json.Decode.int Nothing
        |> maybeDecode "recordOid" Json.Decode.string Nothing
        |> decode "data" (Json.Decode.dict anyTypeDecoder) 


formDecoder : Json.Decode.Decoder Form
formDecoder =
    Json.Decode.succeed Form
        |> maybeDecode "studyKey" Json.Decode.string Nothing
        |> maybeDecode "formId" Json.Decode.int Nothing
        |> maybeDecode "formKey" Json.Decode.string Nothing
        |> maybeDecode "formName" Json.Decode.string Nothing
        |> maybeDecode "formType" Json.Decode.string Nothing
        |> maybeDecode "revision" Json.Decode.int Nothing
        |> maybeDecode "embeddedLog" Json.Decode.bool Nothing
        |> maybeDecode "enforceOwnership" Json.Decode.bool Nothing
        |> maybeDecode "userAgreement" Json.Decode.bool Nothing
        |> maybeDecode "subjectRecordReport" Json.Decode.bool Nothing
        |> maybeDecode "unscheduledVisit" Json.Decode.bool Nothing
        |> maybeDecode "otherForms" Json.Decode.bool Nothing
        |> maybeDecode "eproForm" Json.Decode.bool Nothing
        |> maybeDecode "allowCopy" Json.Decode.bool Nothing
        |> maybeDecode "disabled" Json.Decode.bool Nothing
        |> maybeDecode "dateCreated" Json.Decode.string Nothing
        |> maybeDecode "dateModified" Json.Decode.string Nothing


formListDecoder : Json.Decode.Decoder FormList
formListDecoder =
    Json.Decode.succeed FormList
        |> maybeDecode "metadata" metadataDecoder Nothing
        |> maybeDecode "pagination" paginationDecoder Nothing
        |> maybeDecode "data" (Json.Decode.list formDecoder) Nothing


inlineObjectDecoder : Json.Decode.Decoder InlineObject
inlineObjectDecoder =
    Json.Decode.succeed InlineObject
        |> maybeDecode "metadata" metadataDecoder Nothing


inlineObject1Decoder : Json.Decode.Decoder InlineObject1
inlineObject1Decoder =
    Json.Decode.succeed InlineObject1
        |> maybeDecode "metadata" metadataDecoder Nothing


inlineObject2Decoder : Json.Decode.Decoder InlineObject2
inlineObject2Decoder =
    Json.Decode.succeed InlineObject2
        |> maybeDecode "metadata" metadataDecoder Nothing


inlineObject3Decoder : Json.Decode.Decoder InlineObject3
inlineObject3Decoder =
    Json.Decode.succeed InlineObject3
        |> maybeDecode "metadata" metadataDecoder Nothing


inlineObject4Decoder : Json.Decode.Decoder InlineObject4
inlineObject4Decoder =
    Json.Decode.succeed InlineObject4
        |> maybeDecode "metadata" metadataDecoder Nothing


inlineObject5Decoder : Json.Decode.Decoder InlineObject5
inlineObject5Decoder =
    Json.Decode.succeed InlineObject5
        |> maybeDecode "metadata" metadataDecoder Nothing


intervalDecoder : Json.Decode.Decoder Interval
intervalDecoder =
    Json.Decode.succeed Interval
        |> maybeDecode "studyKey" Json.Decode.string Nothing
        |> maybeDecode "intervalId" Json.Decode.int Nothing
        |> maybeDecode "intervalName" Json.Decode.string Nothing
        |> maybeDecode "intervalDescription" Json.Decode.string Nothing
        |> maybeDecode "intervalSequence" Json.Decode.int Nothing
        |> maybeDecode "intervalGroupId" Json.Decode.int Nothing
        |> maybeDecode "intervalGroupName" Json.Decode.string Nothing
        |> maybeDecode "timeline" Json.Decode.string Nothing
        |> maybeDecode "definedUsingInterval" Json.Decode.string Nothing
        |> maybeDecode "windowCalculationForm" Json.Decode.string Nothing
        |> maybeDecode "windowCalculationDate" Json.Decode.string Nothing
        |> maybeDecode "actualDateForm" Json.Decode.string Nothing
        |> maybeDecode "actualDate" Json.Decode.string Nothing
        |> maybeDecode "dueDateWillBeIn" Json.Decode.int Nothing
        |> maybeDecode "negativeSlack" Json.Decode.int Nothing
        |> maybeDecode "positiveSlack" Json.Decode.int Nothing
        |> maybeDecode "eproGracePeriod" Json.Decode.int Nothing
        |> maybeDecode "forms" (Json.Decode.list componentsSchemasIntervalFormsItemDecoder) Nothing
        |> maybeDecode "disabled" Json.Decode.bool Nothing
        |> maybeDecode "dateCreated" Json.Decode.string Nothing
        |> maybeDecode "dateModified" Json.Decode.string Nothing


intervalListDecoder : Json.Decode.Decoder IntervalList
intervalListDecoder =
    Json.Decode.succeed IntervalList
        |> maybeDecode "metadata" metadataDecoder Nothing
        |> maybeDecode "pagination" paginationDecoder Nothing
        |> maybeDecode "data" (Json.Decode.list intervalDecoder) Nothing


jobDecoder : Json.Decode.Decoder Job
jobDecoder =
    Json.Decode.succeed Job
        |> maybeDecode "jobId" Json.Decode.string Nothing
        |> maybeDecode "batchId" Json.Decode.string Nothing
        |> maybeDecode "state" Json.Decode.string Nothing
        |> maybeDecode "dateCreated" Json.Decode.string Nothing
        |> maybeDecode "dateStarted" Json.Decode.string Nothing
        |> maybeDecode "dateFinished" Json.Decode.string Nothing


keywordDecoder : Json.Decode.Decoder Keyword
keywordDecoder =
    Json.Decode.succeed Keyword
        |> maybeDecode "keywordName" Json.Decode.string Nothing
        |> maybeDecode "keywordKey" Json.Decode.string Nothing
        |> maybeDecode "keywordId" Json.Decode.int Nothing
        |> maybeDecode "dateAdded" Json.Decode.string Nothing


metadataDecoder : Json.Decode.Decoder Metadata
metadataDecoder =
    Json.Decode.succeed Metadata
        |> maybeDecode "status" Json.Decode.string Nothing
        |> maybeDecode "method" Json.Decode.string Nothing
        |> maybeDecode "path" Json.Decode.string Nothing
        |> maybeDecode "timestamp" Api.Time.dateTimeDecoder Nothing
        |> maybeDecode "error" componentsSchemasMetadataErrorDecoder Nothing


paginationDecoder : Json.Decode.Decoder Pagination
paginationDecoder =
    Json.Decode.succeed Pagination
        |> maybeDecode "currentPage" Json.Decode.int Nothing
        |> maybeDecode "size" Json.Decode.int Nothing
        |> maybeDecode "totalPages" Json.Decode.int Nothing
        |> maybeDecode "totalElements" Json.Decode.int Nothing
        |> maybeDecode "sort" (Json.Decode.list sortDecoder) Nothing


queryDecoder : Json.Decode.Decoder Query
queryDecoder =
    Json.Decode.succeed Query
        |> maybeDecode "studyKey" Json.Decode.string Nothing
        |> maybeDecode "subjectId" Json.Decode.int Nothing
        |> maybeDecode "subjectOid" Json.Decode.string Nothing
        |> maybeDecode "annotationType" Json.Decode.string Nothing
        |> maybeDecode "annotationId" Json.Decode.int Nothing
        |> maybeDecode "type" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "recordId" Json.Decode.int Nothing
        |> maybeDecode "variable" Json.Decode.string Nothing
        |> maybeDecode "subjectKey" Json.Decode.string Nothing
        |> maybeDecode "dateCreated" Json.Decode.string Nothing
        |> maybeDecode "dateModified" Json.Decode.string Nothing
        |> maybeDecode "queryComments" (Json.Decode.list queryCommentDecoder) Nothing


queryCommentDecoder : Json.Decode.Decoder QueryComment
queryCommentDecoder =
    Json.Decode.succeed QueryComment
        |> maybeDecode "sequence" Json.Decode.int Nothing
        |> maybeDecode "annotationStatus" Json.Decode.string Nothing
        |> maybeDecode "user" Json.Decode.string Nothing
        |> maybeDecode "comment" Json.Decode.string Nothing
        |> maybeDecode "closed" Json.Decode.bool Nothing
        |> maybeDecode "date" Json.Decode.string Nothing


queryListDecoder : Json.Decode.Decoder QueryList
queryListDecoder =
    Json.Decode.succeed QueryList
        |> maybeDecode "metadata" metadataDecoder Nothing
        |> maybeDecode "pagination" paginationDecoder Nothing
        |> maybeDecode "data" (Json.Decode.list queryDecoder) Nothing


recordDecoder : Json.Decode.Decoder Record
recordDecoder =
    Json.Decode.succeed Record
        |> maybeDecode "studyKey" Json.Decode.string Nothing
        |> maybeDecode "intervalId" Json.Decode.int Nothing
        |> maybeDecode "formId" Json.Decode.int Nothing
        |> maybeDecode "formKey" Json.Decode.string Nothing
        |> maybeDecode "siteId" Json.Decode.int Nothing
        |> maybeDecode "recordId" Json.Decode.int Nothing
        |> maybeDecode "recordOid" Json.Decode.string Nothing
        |> maybeDecode "recordType" Json.Decode.string Nothing
        |> maybeDecode "recordStatus" Json.Decode.string Nothing
        |> maybeDecode "deleted" Json.Decode.bool Nothing
        |> maybeDecode "dateCreated" Json.Decode.string Nothing
        |> maybeDecode "dateModified" Json.Decode.string Nothing
        |> maybeDecode "subjectId" Json.Decode.int Nothing
        |> maybeDecode "subjectOid" Json.Decode.string Nothing
        |> maybeDecode "subjectKey" Json.Decode.string Nothing
        |> maybeDecode "visitId" Json.Decode.int Nothing
        |> maybeDecode "parentRecordId" Json.Decode.int Nothing
        |> maybeDecode "keywords" (Json.Decode.list keywordDecoder) Nothing
        |> maybeDecode "recordData" (Json.Decode.dict anyTypeDecoder) Nothing


recordJobStatusDecoder : Json.Decode.Decoder RecordJobStatus
recordJobStatusDecoder =
    Json.Decode.succeed RecordJobStatus
        |> maybeDecode "jobId" Json.Decode.string Nothing
        |> maybeDecode "batchId" Json.Decode.string Nothing
        |> maybeDecode "state" Json.Decode.string Nothing


recordListDecoder : Json.Decode.Decoder RecordList
recordListDecoder =
    Json.Decode.succeed RecordList
        |> maybeDecode "metadata" metadataDecoder Nothing
        |> maybeDecode "pagination" paginationDecoder Nothing
        |> maybeDecode "data" (Json.Decode.list recordDecoder) Nothing


recordRevisionDecoder : Json.Decode.Decoder RecordRevision
recordRevisionDecoder =
    Json.Decode.succeed RecordRevision
        |> maybeDecode "studyKey" Json.Decode.string Nothing
        |> maybeDecode "recordRevisionId" Json.Decode.int Nothing
        |> maybeDecode "recordId" Json.Decode.int Nothing
        |> maybeDecode "recordOid" Json.Decode.string Nothing
        |> maybeDecode "recordRevision" Json.Decode.int Nothing
        |> maybeDecode "dataRevision" Json.Decode.int Nothing
        |> maybeDecode "recordStatus" Json.Decode.string Nothing
        |> maybeDecode "subjectId" Json.Decode.int Nothing
        |> maybeDecode "subjectOid" Json.Decode.string Nothing
        |> maybeDecode "subjectKey" Json.Decode.string Nothing
        |> maybeDecode "siteId" Json.Decode.int Nothing
        |> maybeDecode "formKey" Json.Decode.string Nothing
        |> maybeDecode "intervalId" Json.Decode.int Nothing
        |> maybeDecode "role" Json.Decode.string Nothing
        |> maybeDecode "user" Json.Decode.string Nothing
        |> maybeDecode "reasonForChange" Json.Decode.string Nothing
        |> maybeDecode "deleted" Json.Decode.bool Nothing
        |> maybeDecode "dateCreated" Json.Decode.string Nothing


recordRevisionListDecoder : Json.Decode.Decoder RecordRevisionList
recordRevisionListDecoder =
    Json.Decode.succeed RecordRevisionList
        |> maybeDecode "metadata" metadataDecoder Nothing
        |> maybeDecode "pagination" paginationDecoder Nothing
        |> maybeDecode "data" (Json.Decode.list recordRevisionDecoder) Nothing


roleDecoder : Json.Decode.Decoder Role
roleDecoder =
    Json.Decode.succeed Role
        |> maybeDecode "dateCreated" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecode "dateModified" (Json.Decode.list Json.Decode.int) Nothing
        |> maybeDecode "roleId" Json.Decode.string Nothing
        |> maybeDecode "communityId" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "level" Json.Decode.int Nothing
        |> maybeDecode "type" Json.Decode.string Nothing
        |> maybeDecode "inactive" Json.Decode.bool Nothing


siteDecoder : Json.Decode.Decoder Site
siteDecoder =
    Json.Decode.succeed Site
        |> maybeDecode "studyKey" Json.Decode.string Nothing
        |> maybeDecode "siteId" Json.Decode.int Nothing
        |> maybeDecode "siteName" Json.Decode.string Nothing
        |> maybeDecode "siteEnrollmentStatus" Json.Decode.string Nothing
        |> maybeDecode "dateCreated" Json.Decode.string Nothing
        |> maybeDecode "dateModified" Json.Decode.string Nothing


siteListDecoder : Json.Decode.Decoder SiteList
siteListDecoder =
    Json.Decode.succeed SiteList
        |> maybeDecode "metadata" metadataDecoder Nothing
        |> maybeDecode "pagination" paginationDecoder Nothing
        |> maybeDecode "data" (Json.Decode.list siteDecoder) Nothing


sortDecoder : Json.Decode.Decoder Sort
sortDecoder =
    Json.Decode.succeed Sort
        |> maybeDecode "property" Json.Decode.string Nothing
        |> maybeDecode "direction" sortDirectionDecoder Nothing


sortDirectionDecoder : Json.Decode.Decoder SortDirection
sortDirectionDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ASC" ->
                        Json.Decode.succeed SortDirectionASC

                    "DESC" ->
                        Json.Decode.succeed SortDirectionDESC

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



studyDecoder : Json.Decode.Decoder Study
studyDecoder =
    Json.Decode.succeed Study
        |> maybeDecode "sponsorKey" Json.Decode.string Nothing
        |> maybeDecode "studyKey" Json.Decode.string Nothing
        |> maybeDecode "studyId" Json.Decode.int Nothing
        |> maybeDecode "studyName" Json.Decode.string Nothing
        |> maybeDecode "studyDescription" Json.Decode.string Nothing
        |> maybeDecode "studyType" Json.Decode.string Nothing
        |> maybeDecode "dateCreated" Json.Decode.string Nothing
        |> maybeDecode "dateModified" Json.Decode.string Nothing


studyListDecoder : Json.Decode.Decoder StudyList
studyListDecoder =
    Json.Decode.succeed StudyList
        |> maybeDecode "metadata" metadataDecoder Nothing
        |> maybeDecode "pagination" paginationDecoder Nothing
        |> maybeDecode "data" (Json.Decode.list studyDecoder) Nothing


subjectDecoder : Json.Decode.Decoder Subject
subjectDecoder =
    Json.Decode.succeed Subject
        |> maybeDecode "studyKey" Json.Decode.string Nothing
        |> maybeDecode "subjectId" Json.Decode.int Nothing
        |> maybeDecode "subjectOid" Json.Decode.string Nothing
        |> maybeDecode "subjectKey" Json.Decode.string Nothing
        |> maybeDecode "subjectStatus" Json.Decode.string Nothing
        |> maybeDecode "siteId" Json.Decode.int Nothing
        |> maybeDecode "siteName" Json.Decode.string Nothing
        |> maybeDecode "deleted" Json.Decode.bool Nothing
        |> maybeDecode "enrollmentStartDate" Json.Decode.string Nothing
        |> maybeDecode "dateCreated" Json.Decode.string Nothing
        |> maybeDecode "dateModified" Json.Decode.string Nothing
        |> maybeDecode "keywords" (Json.Decode.list keywordDecoder) Nothing


subjectListDecoder : Json.Decode.Decoder SubjectList
subjectListDecoder =
    Json.Decode.succeed SubjectList
        |> maybeDecode "metadata" metadataDecoder Nothing
        |> maybeDecode "pagination" paginationDecoder Nothing
        |> maybeDecode "data" (Json.Decode.list subjectDecoder) Nothing


userDecoder : Json.Decode.Decoder User
userDecoder =
    Json.Decode.succeed User
        |> maybeDecode "userId" Json.Decode.string Nothing
        |> maybeDecode "login" Json.Decode.string Nothing
        |> maybeDecode "firstName" Json.Decode.string Nothing
        |> maybeDecode "lastName" Json.Decode.string Nothing
        |> maybeDecode "email" Json.Decode.string Nothing
        |> maybeDecode "userActiveInStudy" Json.Decode.bool Nothing
        |> maybeDecode "roles" (Json.Decode.list roleDecoder) Nothing


userListDecoder : Json.Decode.Decoder UserList
userListDecoder =
    Json.Decode.succeed UserList
        |> maybeDecode "metadata" metadataDecoder Nothing
        |> maybeDecode "pagination" paginationDecoder Nothing
        |> maybeDecode "data" (Json.Decode.list userDecoder) Nothing


variableDecoder : Json.Decode.Decoder Variable
variableDecoder =
    Json.Decode.succeed Variable
        |> maybeDecode "studyKey" Json.Decode.string Nothing
        |> maybeDecode "variableId" Json.Decode.int Nothing
        |> maybeDecode "variableType" variableVariableTypeDecoder Nothing
        |> maybeDecode "variableName" Json.Decode.string Nothing
        |> maybeDecode "sequence" Json.Decode.int Nothing
        |> maybeDecode "revision" Json.Decode.int Nothing
        |> maybeDecode "disabled" Json.Decode.bool Nothing
        |> maybeDecode "dateCreated" Json.Decode.string Nothing
        |> maybeDecode "dateModified" Json.Decode.string Nothing
        |> maybeDecode "formId" Json.Decode.int Nothing
        |> maybeDecode "variableOid" Json.Decode.string Nothing
        |> maybeDecode "deleted" Json.Decode.bool Nothing
        |> maybeDecode "formKey" Json.Decode.string Nothing
        |> maybeDecode "formName" Json.Decode.string Nothing
        |> maybeDecode "label" Json.Decode.string Nothing
        |> maybeDecode "blinded" Json.Decode.bool Nothing


variableVariableTypeDecoder : Json.Decode.Decoder VariableVariableType
variableVariableTypeDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "TEXT" ->
                        Json.Decode.succeed VariableVariableTypeTEXT

                    "TEXTAREA" ->
                        Json.Decode.succeed VariableVariableTypeTEXTAREA

                    "RADIO" ->
                        Json.Decode.succeed VariableVariableTypeRADIO

                    "CHECKBOX" ->
                        Json.Decode.succeed VariableVariableTypeCHECKBOX

                    "DROPDOWN" ->
                        Json.Decode.succeed VariableVariableTypeDROPDOWN

                    "DATE" ->
                        Json.Decode.succeed VariableVariableTypeDATE

                    "NUMBER" ->
                        Json.Decode.succeed VariableVariableTypeNUMBER

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



variableListDecoder : Json.Decode.Decoder VariableList
variableListDecoder =
    Json.Decode.succeed VariableList
        |> maybeDecode "metadata" metadataDecoder Nothing
        |> maybeDecode "pagination" paginationDecoder Nothing
        |> maybeDecode "data" (Json.Decode.list variableDecoder) Nothing


visitDecoder : Json.Decode.Decoder Visit
visitDecoder =
    Json.Decode.succeed Visit
        |> maybeDecode "studyKey" Json.Decode.string Nothing
        |> maybeDecode "visitId" Json.Decode.int Nothing
        |> maybeDecode "intervalId" Json.Decode.int Nothing
        |> maybeDecode "intervalName" Json.Decode.string Nothing
        |> maybeDecode "subjectId" Json.Decode.int Nothing
        |> maybeDecode "subjectKey" Json.Decode.string Nothing
        |> maybeDecode "startDate" Json.Decode.string Nothing
        |> maybeDecode "endDate" Json.Decode.string Nothing
        |> maybeDecode "dueDate" Json.Decode.string Nothing
        |> maybeDecode "visitDate" Json.Decode.string Nothing
        |> maybeDecode "visitDateForm" Json.Decode.string Nothing
        |> maybeDecode "visitDateQuestion" Json.Decode.string Nothing
        |> maybeDecode "deleted" Json.Decode.bool Nothing
        |> maybeDecode "dateCreated" Json.Decode.string Nothing
        |> maybeDecode "dateModified" Json.Decode.string Nothing


visitListDecoder : Json.Decode.Decoder VisitList
visitListDecoder =
    Json.Decode.succeed VisitList
        |> maybeDecode "metadata" metadataDecoder Nothing
        |> maybeDecode "pagination" paginationDecoder Nothing
        |> maybeDecode "data" (Json.Decode.list visitDecoder) Nothing




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f