note
 description:"[
		Mednet EDC API
 		The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  		The version of the OpenAPI document: 1.3.6
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class RECORD




feature --Access

    study_key: detachable STRING_32
      -- Unique study key
    interval_id: INTEGER_32
      -- Interval ID (visit definition) that this record is associated with
    form_id: INTEGER_32
      -- Form ID of the form this record instance belongs to
    form_key: detachable STRING_32
      -- Form key of the form for this record instance
    site_id: INTEGER_32
      -- Site ID associated with the record
    record_id: INTEGER_32
      -- Unique record ID
    record_oid: detachable STRING_32
      -- Client-assigned record OID
    record_type: detachable STRING_32
      -- Type of record (e.g., SUBJECT for subject-related forms)
    record_status: detachable STRING_32
      -- Current status of the record (e.g., Record Incomplete, Record Complete)
    deleted: BOOLEAN
      -- Whether the record is marked as deleted
    date_created: detachable STRING_32
      -- Date when this record was created
    date_modified: detachable STRING_32
      -- Date when this record was last modified
    subject_id: INTEGER_32
      -- Mednet subject ID that this record is associated with
    subject_oid: detachable STRING_32
      -- Client-assigned subject OID for the subject this record is associated with
    subject_key: detachable STRING_32
      -- Subject display ID that this record is associated with
    visit_id: INTEGER_32
      -- Visit instance ID that this record is associated with (if applicable)
    parent_record_id: INTEGER_32
      -- Record ID of the parent record if this record is a subrecord (if applicable)
    keywords: detachable LIST [KEYWORD]
      -- List of keywords associated with the record
    record_data: detachable STRING_TABLE [ANY]
      -- Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.

feature -- Change Element

    set_study_key (a_name: like study_key)
        -- Set 'study_key' with 'a_name'.
      do
        study_key := a_name
      ensure
        study_key_set: study_key = a_name
      end

    set_interval_id (a_name: like interval_id)
        -- Set 'interval_id' with 'a_name'.
      do
        interval_id := a_name
      ensure
        interval_id_set: interval_id = a_name
      end

    set_form_id (a_name: like form_id)
        -- Set 'form_id' with 'a_name'.
      do
        form_id := a_name
      ensure
        form_id_set: form_id = a_name
      end

    set_form_key (a_name: like form_key)
        -- Set 'form_key' with 'a_name'.
      do
        form_key := a_name
      ensure
        form_key_set: form_key = a_name
      end

    set_site_id (a_name: like site_id)
        -- Set 'site_id' with 'a_name'.
      do
        site_id := a_name
      ensure
        site_id_set: site_id = a_name
      end

    set_record_id (a_name: like record_id)
        -- Set 'record_id' with 'a_name'.
      do
        record_id := a_name
      ensure
        record_id_set: record_id = a_name
      end

    set_record_oid (a_name: like record_oid)
        -- Set 'record_oid' with 'a_name'.
      do
        record_oid := a_name
      ensure
        record_oid_set: record_oid = a_name
      end

    set_record_type (a_name: like record_type)
        -- Set 'record_type' with 'a_name'.
      do
        record_type := a_name
      ensure
        record_type_set: record_type = a_name
      end

    set_record_status (a_name: like record_status)
        -- Set 'record_status' with 'a_name'.
      do
        record_status := a_name
      ensure
        record_status_set: record_status = a_name
      end

    set_deleted (a_name: like deleted)
        -- Set 'deleted' with 'a_name'.
      do
        deleted := a_name
      ensure
        deleted_set: deleted = a_name
      end

    set_date_created (a_name: like date_created)
        -- Set 'date_created' with 'a_name'.
      do
        date_created := a_name
      ensure
        date_created_set: date_created = a_name
      end

    set_date_modified (a_name: like date_modified)
        -- Set 'date_modified' with 'a_name'.
      do
        date_modified := a_name
      ensure
        date_modified_set: date_modified = a_name
      end

    set_subject_id (a_name: like subject_id)
        -- Set 'subject_id' with 'a_name'.
      do
        subject_id := a_name
      ensure
        subject_id_set: subject_id = a_name
      end

    set_subject_oid (a_name: like subject_oid)
        -- Set 'subject_oid' with 'a_name'.
      do
        subject_oid := a_name
      ensure
        subject_oid_set: subject_oid = a_name
      end

    set_subject_key (a_name: like subject_key)
        -- Set 'subject_key' with 'a_name'.
      do
        subject_key := a_name
      ensure
        subject_key_set: subject_key = a_name
      end

    set_visit_id (a_name: like visit_id)
        -- Set 'visit_id' with 'a_name'.
      do
        visit_id := a_name
      ensure
        visit_id_set: visit_id = a_name
      end

    set_parent_record_id (a_name: like parent_record_id)
        -- Set 'parent_record_id' with 'a_name'.
      do
        parent_record_id := a_name
      ensure
        parent_record_id_set: parent_record_id = a_name
      end

    set_keywords (a_name: like keywords)
        -- Set 'keywords' with 'a_name'.
      do
        keywords := a_name
      ensure
        keywords_set: keywords = a_name
      end

    set_record_data (a_name: like record_data)
        -- Set 'record_data' with 'a_name'.
      do
        record_data := a_name
      ensure
        record_data_set: record_data = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass RECORD%N")
        if attached study_key as l_study_key then
          Result.append ("%Nstudy_key:")
          Result.append (l_study_key.out)
          Result.append ("%N")
        end
        if attached interval_id as l_interval_id then
          Result.append ("%Ninterval_id:")
          Result.append (l_interval_id.out)
          Result.append ("%N")
        end
        if attached form_id as l_form_id then
          Result.append ("%Nform_id:")
          Result.append (l_form_id.out)
          Result.append ("%N")
        end
        if attached form_key as l_form_key then
          Result.append ("%Nform_key:")
          Result.append (l_form_key.out)
          Result.append ("%N")
        end
        if attached site_id as l_site_id then
          Result.append ("%Nsite_id:")
          Result.append (l_site_id.out)
          Result.append ("%N")
        end
        if attached record_id as l_record_id then
          Result.append ("%Nrecord_id:")
          Result.append (l_record_id.out)
          Result.append ("%N")
        end
        if attached record_oid as l_record_oid then
          Result.append ("%Nrecord_oid:")
          Result.append (l_record_oid.out)
          Result.append ("%N")
        end
        if attached record_type as l_record_type then
          Result.append ("%Nrecord_type:")
          Result.append (l_record_type.out)
          Result.append ("%N")
        end
        if attached record_status as l_record_status then
          Result.append ("%Nrecord_status:")
          Result.append (l_record_status.out)
          Result.append ("%N")
        end
        if attached deleted as l_deleted then
          Result.append ("%Ndeleted:")
          Result.append (l_deleted.out)
          Result.append ("%N")
        end
        if attached date_created as l_date_created then
          Result.append ("%Ndate_created:")
          Result.append (l_date_created.out)
          Result.append ("%N")
        end
        if attached date_modified as l_date_modified then
          Result.append ("%Ndate_modified:")
          Result.append (l_date_modified.out)
          Result.append ("%N")
        end
        if attached subject_id as l_subject_id then
          Result.append ("%Nsubject_id:")
          Result.append (l_subject_id.out)
          Result.append ("%N")
        end
        if attached subject_oid as l_subject_oid then
          Result.append ("%Nsubject_oid:")
          Result.append (l_subject_oid.out)
          Result.append ("%N")
        end
        if attached subject_key as l_subject_key then
          Result.append ("%Nsubject_key:")
          Result.append (l_subject_key.out)
          Result.append ("%N")
        end
        if attached visit_id as l_visit_id then
          Result.append ("%Nvisit_id:")
          Result.append (l_visit_id.out)
          Result.append ("%N")
        end
        if attached parent_record_id as l_parent_record_id then
          Result.append ("%Nparent_record_id:")
          Result.append (l_parent_record_id.out)
          Result.append ("%N")
        end
        if attached keywords as l_keywords then
          across l_keywords as ic loop
            Result.append ("%N keywords:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached record_data as l_record_data then
          Result.append ("%Nrecord_data:")
          across l_record_data as ic loop
            Result.append ("%N")
            Result.append ("key:")
            Result.append (ic.key.out)
            Result.append (" - ")
            Result.append ("val:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

