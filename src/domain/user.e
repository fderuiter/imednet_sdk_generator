note
 description:"[
		Mednet EDC API
 		The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  		The version of the OpenAPI document: 1.3.6
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class USER




feature --Access

    user_id: detachable STRING_32
      -- Unique user ID (UUID)
    login: detachable STRING_32
      -- User login name
    first_name: detachable STRING_32
      -- User first name
    last_name: detachable STRING_32
      -- User last name
    email: detachable STRING_32
      -- User email address
    user_active_in_study: BOOLEAN
      -- Whether the user is active in the given study
    roles: detachable LIST [ROLE]
      -- Roles that the user has in the study

feature -- Change Element

    set_user_id (a_name: like user_id)
        -- Set 'user_id' with 'a_name'.
      do
        user_id := a_name
      ensure
        user_id_set: user_id = a_name
      end

    set_login (a_name: like login)
        -- Set 'login' with 'a_name'.
      do
        login := a_name
      ensure
        login_set: login = a_name
      end

    set_first_name (a_name: like first_name)
        -- Set 'first_name' with 'a_name'.
      do
        first_name := a_name
      ensure
        first_name_set: first_name = a_name
      end

    set_last_name (a_name: like last_name)
        -- Set 'last_name' with 'a_name'.
      do
        last_name := a_name
      ensure
        last_name_set: last_name = a_name
      end

    set_email (a_name: like email)
        -- Set 'email' with 'a_name'.
      do
        email := a_name
      ensure
        email_set: email = a_name
      end

    set_user_active_in_study (a_name: like user_active_in_study)
        -- Set 'user_active_in_study' with 'a_name'.
      do
        user_active_in_study := a_name
      ensure
        user_active_in_study_set: user_active_in_study = a_name
      end

    set_roles (a_name: like roles)
        -- Set 'roles' with 'a_name'.
      do
        roles := a_name
      ensure
        roles_set: roles = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass USER%N")
        if attached user_id as l_user_id then
          Result.append ("%Nuser_id:")
          Result.append (l_user_id.out)
          Result.append ("%N")
        end
        if attached login as l_login then
          Result.append ("%Nlogin:")
          Result.append (l_login.out)
          Result.append ("%N")
        end
        if attached first_name as l_first_name then
          Result.append ("%Nfirst_name:")
          Result.append (l_first_name.out)
          Result.append ("%N")
        end
        if attached last_name as l_last_name then
          Result.append ("%Nlast_name:")
          Result.append (l_last_name.out)
          Result.append ("%N")
        end
        if attached email as l_email then
          Result.append ("%Nemail:")
          Result.append (l_email.out)
          Result.append ("%N")
        end
        if attached user_active_in_study as l_user_active_in_study then
          Result.append ("%Nuser_active_in_study:")
          Result.append (l_user_active_in_study.out)
          Result.append ("%N")
        end
        if attached roles as l_roles then
          across l_roles as ic loop
            Result.append ("%N roles:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
      end
end

