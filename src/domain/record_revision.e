note
 description:"[
		Mednet EDC API
 		The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  		The version of the OpenAPI document: 1.3.6
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class RECORD_REVISION




feature --Access

    study_key: detachable STRING_32
      -- Unique study key
    record_revision_id: INTEGER_32
      -- Unique system identifier for the record revision
    record_id: INTEGER_32
      -- Unique system identifier of the related record
    record_oid: detachable STRING_32
      -- Client-assigned record OID (if any)
    record_revision: INTEGER_32
      -- Revision number of the record (version of the record status)
    data_revision: INTEGER_32
      -- Revision number of the data within the record
    record_status: detachable STRING_32
      -- Status of the record at this revision (user-defined status label)
    subject_id: INTEGER_32
      -- Mednet subject ID related to the record
    subject_oid: detachable STRING_32
      -- Client-assigned subject OID related to the record
    subject_key: detachable STRING_32
      -- Subject display ID related to the record
    site_id: INTEGER_32
      -- Site ID related to the record
    form_key: detachable STRING_32
      -- Form key of the form that the record belongs to
    interval_id: INTEGER_32
      -- Interval ID (visit definition) related to the record
    role: detachable STRING_32
      -- Role name of the user who saved the record revision
    user: detachable STRING_32
      -- Username of the user who saved the record revision
    reason_for_change: detachable STRING_32
      -- Reason for change, if provided (for audit trail)
    deleted: BOOLEAN
      -- Whether the record was deleted in this revision
    date_created: detachable STRING_32
      -- Date when this record revision was created

feature -- Change Element

    set_study_key (a_name: like study_key)
        -- Set 'study_key' with 'a_name'.
      do
        study_key := a_name
      ensure
        study_key_set: study_key = a_name
      end

    set_record_revision_id (a_name: like record_revision_id)
        -- Set 'record_revision_id' with 'a_name'.
      do
        record_revision_id := a_name
      ensure
        record_revision_id_set: record_revision_id = a_name
      end

    set_record_id (a_name: like record_id)
        -- Set 'record_id' with 'a_name'.
      do
        record_id := a_name
      ensure
        record_id_set: record_id = a_name
      end

    set_record_oid (a_name: like record_oid)
        -- Set 'record_oid' with 'a_name'.
      do
        record_oid := a_name
      ensure
        record_oid_set: record_oid = a_name
      end

    set_record_revision (a_name: like record_revision)
        -- Set 'record_revision' with 'a_name'.
      do
        record_revision := a_name
      ensure
        record_revision_set: record_revision = a_name
      end

    set_data_revision (a_name: like data_revision)
        -- Set 'data_revision' with 'a_name'.
      do
        data_revision := a_name
      ensure
        data_revision_set: data_revision = a_name
      end

    set_record_status (a_name: like record_status)
        -- Set 'record_status' with 'a_name'.
      do
        record_status := a_name
      ensure
        record_status_set: record_status = a_name
      end

    set_subject_id (a_name: like subject_id)
        -- Set 'subject_id' with 'a_name'.
      do
        subject_id := a_name
      ensure
        subject_id_set: subject_id = a_name
      end

    set_subject_oid (a_name: like subject_oid)
        -- Set 'subject_oid' with 'a_name'.
      do
        subject_oid := a_name
      ensure
        subject_oid_set: subject_oid = a_name
      end

    set_subject_key (a_name: like subject_key)
        -- Set 'subject_key' with 'a_name'.
      do
        subject_key := a_name
      ensure
        subject_key_set: subject_key = a_name
      end

    set_site_id (a_name: like site_id)
        -- Set 'site_id' with 'a_name'.
      do
        site_id := a_name
      ensure
        site_id_set: site_id = a_name
      end

    set_form_key (a_name: like form_key)
        -- Set 'form_key' with 'a_name'.
      do
        form_key := a_name
      ensure
        form_key_set: form_key = a_name
      end

    set_interval_id (a_name: like interval_id)
        -- Set 'interval_id' with 'a_name'.
      do
        interval_id := a_name
      ensure
        interval_id_set: interval_id = a_name
      end

    set_role (a_name: like role)
        -- Set 'role' with 'a_name'.
      do
        role := a_name
      ensure
        role_set: role = a_name
      end

    set_user (a_name: like user)
        -- Set 'user' with 'a_name'.
      do
        user := a_name
      ensure
        user_set: user = a_name
      end

    set_reason_for_change (a_name: like reason_for_change)
        -- Set 'reason_for_change' with 'a_name'.
      do
        reason_for_change := a_name
      ensure
        reason_for_change_set: reason_for_change = a_name
      end

    set_deleted (a_name: like deleted)
        -- Set 'deleted' with 'a_name'.
      do
        deleted := a_name
      ensure
        deleted_set: deleted = a_name
      end

    set_date_created (a_name: like date_created)
        -- Set 'date_created' with 'a_name'.
      do
        date_created := a_name
      ensure
        date_created_set: date_created = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass RECORD_REVISION%N")
        if attached study_key as l_study_key then
          Result.append ("%Nstudy_key:")
          Result.append (l_study_key.out)
          Result.append ("%N")
        end
        if attached record_revision_id as l_record_revision_id then
          Result.append ("%Nrecord_revision_id:")
          Result.append (l_record_revision_id.out)
          Result.append ("%N")
        end
        if attached record_id as l_record_id then
          Result.append ("%Nrecord_id:")
          Result.append (l_record_id.out)
          Result.append ("%N")
        end
        if attached record_oid as l_record_oid then
          Result.append ("%Nrecord_oid:")
          Result.append (l_record_oid.out)
          Result.append ("%N")
        end
        if attached record_revision as l_record_revision then
          Result.append ("%Nrecord_revision:")
          Result.append (l_record_revision.out)
          Result.append ("%N")
        end
        if attached data_revision as l_data_revision then
          Result.append ("%Ndata_revision:")
          Result.append (l_data_revision.out)
          Result.append ("%N")
        end
        if attached record_status as l_record_status then
          Result.append ("%Nrecord_status:")
          Result.append (l_record_status.out)
          Result.append ("%N")
        end
        if attached subject_id as l_subject_id then
          Result.append ("%Nsubject_id:")
          Result.append (l_subject_id.out)
          Result.append ("%N")
        end
        if attached subject_oid as l_subject_oid then
          Result.append ("%Nsubject_oid:")
          Result.append (l_subject_oid.out)
          Result.append ("%N")
        end
        if attached subject_key as l_subject_key then
          Result.append ("%Nsubject_key:")
          Result.append (l_subject_key.out)
          Result.append ("%N")
        end
        if attached site_id as l_site_id then
          Result.append ("%Nsite_id:")
          Result.append (l_site_id.out)
          Result.append ("%N")
        end
        if attached form_key as l_form_key then
          Result.append ("%Nform_key:")
          Result.append (l_form_key.out)
          Result.append ("%N")
        end
        if attached interval_id as l_interval_id then
          Result.append ("%Ninterval_id:")
          Result.append (l_interval_id.out)
          Result.append ("%N")
        end
        if attached role as l_role then
          Result.append ("%Nrole:")
          Result.append (l_role.out)
          Result.append ("%N")
        end
        if attached user as l_user then
          Result.append ("%Nuser:")
          Result.append (l_user.out)
          Result.append ("%N")
        end
        if attached reason_for_change as l_reason_for_change then
          Result.append ("%Nreason_for_change:")
          Result.append (l_reason_for_change.out)
          Result.append ("%N")
        end
        if attached deleted as l_deleted then
          Result.append ("%Ndeleted:")
          Result.append (l_deleted.out)
          Result.append ("%N")
        end
        if attached date_created as l_date_created then
          Result.append ("%Ndate_created:")
          Result.append (l_date_created.out)
          Result.append ("%N")
        end
      end
end

