# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Query

    Query(;
        studyKey=nothing,
        subjectId=nothing,
        subjectOid=nothing,
        annotationType=nothing,
        annotationId=nothing,
        type=nothing,
        description=nothing,
        recordId=nothing,
        variable=nothing,
        subjectKey=nothing,
        dateCreated=nothing,
        dateModified=nothing,
        queryComments=nothing,
    )

    - studyKey::String : Unique study key
    - subjectId::Int64 : Mednet subject ID associated with the query (if applicable)
    - subjectOid::String : Client-assigned subject OID (if applicable)
    - annotationType::String : Category/type of the query (e.g., subject, record, question)
    - annotationId::Int64 : Unique system identifier for the query
    - type::String : System text identifier for the query type/location (subject, record, question)
    - description::String : Description of the query (e.g., reason or context)
    - recordId::Int64 : Record ID associated with the query (if applicable)
    - variable::String : Variable name (field) associated with the query (if applicable)
    - subjectKey::String : Subject display ID associated with the query (if applicable)
    - dateCreated::String : Date when the query was created
    - dateModified::String : Date when the query was last modified
    - queryComments::Vector{QueryComment} : History of comments/actions on the query
"""
Base.@kwdef mutable struct Query <: OpenAPI.APIModel
    studyKey::Union{Nothing, String} = nothing
    subjectId::Union{Nothing, Int64} = nothing
    subjectOid::Union{Nothing, String} = nothing
    annotationType::Union{Nothing, String} = nothing
    annotationId::Union{Nothing, Int64} = nothing
    type::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    recordId::Union{Nothing, Int64} = nothing
    variable::Union{Nothing, String} = nothing
    subjectKey::Union{Nothing, String} = nothing
    dateCreated::Union{Nothing, String} = nothing
    dateModified::Union{Nothing, String} = nothing
    queryComments::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{QueryComment} }

    function Query(studyKey, subjectId, subjectOid, annotationType, annotationId, type, description, recordId, variable, subjectKey, dateCreated, dateModified, queryComments, )
        o = new(studyKey, subjectId, subjectOid, annotationType, annotationId, type, description, recordId, variable, subjectKey, dateCreated, dateModified, queryComments, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Query

const _property_types_Query = Dict{Symbol,String}(Symbol("studyKey")=>"String", Symbol("subjectId")=>"Int64", Symbol("subjectOid")=>"String", Symbol("annotationType")=>"String", Symbol("annotationId")=>"Int64", Symbol("type")=>"String", Symbol("description")=>"String", Symbol("recordId")=>"Int64", Symbol("variable")=>"String", Symbol("subjectKey")=>"String", Symbol("dateCreated")=>"String", Symbol("dateModified")=>"String", Symbol("queryComments")=>"Vector{QueryComment}", )
OpenAPI.property_type(::Type{ Query }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Query[name]))}

function OpenAPI.check_required(o::Query)
    true
end

function OpenAPI.validate_properties(o::Query)
    OpenAPI.validate_property(Query, Symbol("studyKey"), o.studyKey)
    OpenAPI.validate_property(Query, Symbol("subjectId"), o.subjectId)
    OpenAPI.validate_property(Query, Symbol("subjectOid"), o.subjectOid)
    OpenAPI.validate_property(Query, Symbol("annotationType"), o.annotationType)
    OpenAPI.validate_property(Query, Symbol("annotationId"), o.annotationId)
    OpenAPI.validate_property(Query, Symbol("type"), o.type)
    OpenAPI.validate_property(Query, Symbol("description"), o.description)
    OpenAPI.validate_property(Query, Symbol("recordId"), o.recordId)
    OpenAPI.validate_property(Query, Symbol("variable"), o.variable)
    OpenAPI.validate_property(Query, Symbol("subjectKey"), o.subjectKey)
    OpenAPI.validate_property(Query, Symbol("dateCreated"), o.dateCreated)
    OpenAPI.validate_property(Query, Symbol("dateModified"), o.dateModified)
    OpenAPI.validate_property(Query, Symbol("queryComments"), o.queryComments)
end

function OpenAPI.validate_property(::Type{ Query }, name::Symbol, val)













end
