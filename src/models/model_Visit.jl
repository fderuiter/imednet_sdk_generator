# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Visit

    Visit(;
        studyKey=nothing,
        visitId=nothing,
        intervalId=nothing,
        intervalName=nothing,
        subjectId=nothing,
        subjectKey=nothing,
        startDate=nothing,
        endDate=nothing,
        dueDate=nothing,
        visitDate=nothing,
        visitDateForm=nothing,
        visitDateQuestion=nothing,
        deleted=nothing,
        dateCreated=nothing,
        dateModified=nothing,
    )

    - studyKey::String : Unique study key
    - visitId::Int64 : Unique system identifier for the subject visit instance
    - intervalId::Int64 : Unique system identifier of the interval definition for this visit
    - intervalName::String : Name of the interval (visit) for this visit instance
    - subjectId::Int64 : Mednet subject ID of the subject
    - subjectKey::String : Protocol-assigned subject identifier
    - startDate::String : Start date of the visit window (in YYYY-MM-DD format)
    - endDate::String : End date of the visit window (in YYYY-MM-DD format)
    - dueDate::String : Due date of the visit (in YYYY-MM-DD format), if applicable
    - visitDate::String : Actual date the visit took place (in YYYY-MM-DD format)
    - visitDateForm::String : Name of the form used to capture the actual visit date
    - visitDateQuestion::String : Variable name of the field capturing the actual visit date
    - deleted::Bool : Whether the visit instance is marked as deleted
    - dateCreated::String : Date when this visit record was created
    - dateModified::String : Date when this visit record was last modified
"""
Base.@kwdef mutable struct Visit <: OpenAPI.APIModel
    studyKey::Union{Nothing, String} = nothing
    visitId::Union{Nothing, Int64} = nothing
    intervalId::Union{Nothing, Int64} = nothing
    intervalName::Union{Nothing, String} = nothing
    subjectId::Union{Nothing, Int64} = nothing
    subjectKey::Union{Nothing, String} = nothing
    startDate::Union{Nothing, String} = nothing
    endDate::Union{Nothing, String} = nothing
    dueDate::Union{Nothing, String} = nothing
    visitDate::Union{Nothing, String} = nothing
    visitDateForm::Union{Nothing, String} = nothing
    visitDateQuestion::Union{Nothing, String} = nothing
    deleted::Union{Nothing, Bool} = nothing
    dateCreated::Union{Nothing, String} = nothing
    dateModified::Union{Nothing, String} = nothing

    function Visit(studyKey, visitId, intervalId, intervalName, subjectId, subjectKey, startDate, endDate, dueDate, visitDate, visitDateForm, visitDateQuestion, deleted, dateCreated, dateModified, )
        o = new(studyKey, visitId, intervalId, intervalName, subjectId, subjectKey, startDate, endDate, dueDate, visitDate, visitDateForm, visitDateQuestion, deleted, dateCreated, dateModified, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Visit

const _property_types_Visit = Dict{Symbol,String}(Symbol("studyKey")=>"String", Symbol("visitId")=>"Int64", Symbol("intervalId")=>"Int64", Symbol("intervalName")=>"String", Symbol("subjectId")=>"Int64", Symbol("subjectKey")=>"String", Symbol("startDate")=>"String", Symbol("endDate")=>"String", Symbol("dueDate")=>"String", Symbol("visitDate")=>"String", Symbol("visitDateForm")=>"String", Symbol("visitDateQuestion")=>"String", Symbol("deleted")=>"Bool", Symbol("dateCreated")=>"String", Symbol("dateModified")=>"String", )
OpenAPI.property_type(::Type{ Visit }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Visit[name]))}

function OpenAPI.check_required(o::Visit)
    true
end

function OpenAPI.validate_properties(o::Visit)
    OpenAPI.validate_property(Visit, Symbol("studyKey"), o.studyKey)
    OpenAPI.validate_property(Visit, Symbol("visitId"), o.visitId)
    OpenAPI.validate_property(Visit, Symbol("intervalId"), o.intervalId)
    OpenAPI.validate_property(Visit, Symbol("intervalName"), o.intervalName)
    OpenAPI.validate_property(Visit, Symbol("subjectId"), o.subjectId)
    OpenAPI.validate_property(Visit, Symbol("subjectKey"), o.subjectKey)
    OpenAPI.validate_property(Visit, Symbol("startDate"), o.startDate)
    OpenAPI.validate_property(Visit, Symbol("endDate"), o.endDate)
    OpenAPI.validate_property(Visit, Symbol("dueDate"), o.dueDate)
    OpenAPI.validate_property(Visit, Symbol("visitDate"), o.visitDate)
    OpenAPI.validate_property(Visit, Symbol("visitDateForm"), o.visitDateForm)
    OpenAPI.validate_property(Visit, Symbol("visitDateQuestion"), o.visitDateQuestion)
    OpenAPI.validate_property(Visit, Symbol("deleted"), o.deleted)
    OpenAPI.validate_property(Visit, Symbol("dateCreated"), o.dateCreated)
    OpenAPI.validate_property(Visit, Symbol("dateModified"), o.dateModified)
end

function OpenAPI.validate_property(::Type{ Visit }, name::Symbol, val)















end
