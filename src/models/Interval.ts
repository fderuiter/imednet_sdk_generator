// tslint:disable
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ComponentsSchemasIntervalFormsItem,
    ComponentsSchemasIntervalFormsItemFromJSON,
    ComponentsSchemasIntervalFormsItemToJSON,
} from './';

/**
 * 
 * @export
 * @interface Interval
 */
export interface Interval  {
    /**
     * Unique study key
     * @type {string}
     * @memberof Interval
     */
    studyKey?: string;
    /**
     * Unique system identifier for the interval (visit definition)
     * @type {number}
     * @memberof Interval
     */
    intervalId?: number;
    /**
     * Name of the interval (visit) as defined in the study
     * @type {string}
     * @memberof Interval
     */
    intervalName?: string;
    /**
     * Description of the interval (visit)
     * @type {string}
     * @memberof Interval
     */
    intervalDescription?: string;
    /**
     * Sequence number of the interval in the schedule
     * @type {number}
     * @memberof Interval
     */
    intervalSequence?: number;
    /**
     * Identifier for the interval group (if intervals are grouped)
     * @type {number}
     * @memberof Interval
     */
    intervalGroupId?: number;
    /**
     * Name of the interval group
     * @type {string}
     * @memberof Interval
     */
    intervalGroupName?: string;
    /**
     * Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
     * @type {string}
     * @memberof Interval
     */
    timeline?: string;
    /**
     * Baseline interval used for calculating this intervalâ€™s dates
     * @type {string}
     * @memberof Interval
     */
    definedUsingInterval?: string;
    /**
     * Baseline form (name) from which the calculation date is taken
     * @type {string}
     * @memberof Interval
     */
    windowCalculationForm?: string;
    /**
     * Baseline field (variable name) from which the calculation date is taken
     * @type {string}
     * @memberof Interval
     */
    windowCalculationDate?: string;
    /**
     * Form used to capture the actual date for this interval
     * @type {string}
     * @memberof Interval
     */
    actualDateForm?: string;
    /**
     * Field (variable name) used to capture the actual date for this interval
     * @type {string}
     * @memberof Interval
     */
    actualDate?: string;
    /**
     * Number of days from the calculation date when the interval is due
     * @type {number}
     * @memberof Interval
     */
    dueDateWillBeIn?: number;
    /**
     * Number of days before the due date that are allowed (negative window)
     * @type {number}
     * @memberof Interval
     */
    negativeSlack?: number;
    /**
     * Number of days after the due date that are allowed (positive window)
     * @type {number}
     * @memberof Interval
     */
    positiveSlack?: number;
    /**
     * Number of days of grace period for ePRO completion after due date
     * @type {number}
     * @memberof Interval
     */
    eproGracePeriod?: number;
    /**
     * List of forms that are scheduled in this interval
     * @type {Array<ComponentsSchemasIntervalFormsItem>}
     * @memberof Interval
     */
    forms?: Array<ComponentsSchemasIntervalFormsItem>;
    /**
     * Whether the interval is soft-deleted (disabled)
     * @type {boolean}
     * @memberof Interval
     */
    disabled?: boolean;
    /**
     * Date when this interval was created
     * @type {string}
     * @memberof Interval
     */
    dateCreated?: string;
    /**
     * Date when this interval was last modified
     * @type {string}
     * @memberof Interval
     */
    dateModified?: string;
}

export function IntervalFromJSON(json: any): Interval {
    return {
        'studyKey': !exists(json, 'studyKey') ? undefined : json['studyKey'],
        'intervalId': !exists(json, 'intervalId') ? undefined : json['intervalId'],
        'intervalName': !exists(json, 'intervalName') ? undefined : json['intervalName'],
        'intervalDescription': !exists(json, 'intervalDescription') ? undefined : json['intervalDescription'],
        'intervalSequence': !exists(json, 'intervalSequence') ? undefined : json['intervalSequence'],
        'intervalGroupId': !exists(json, 'intervalGroupId') ? undefined : json['intervalGroupId'],
        'intervalGroupName': !exists(json, 'intervalGroupName') ? undefined : json['intervalGroupName'],
        'timeline': !exists(json, 'timeline') ? undefined : json['timeline'],
        'definedUsingInterval': !exists(json, 'definedUsingInterval') ? undefined : json['definedUsingInterval'],
        'windowCalculationForm': !exists(json, 'windowCalculationForm') ? undefined : json['windowCalculationForm'],
        'windowCalculationDate': !exists(json, 'windowCalculationDate') ? undefined : json['windowCalculationDate'],
        'actualDateForm': !exists(json, 'actualDateForm') ? undefined : json['actualDateForm'],
        'actualDate': !exists(json, 'actualDate') ? undefined : json['actualDate'],
        'dueDateWillBeIn': !exists(json, 'dueDateWillBeIn') ? undefined : json['dueDateWillBeIn'],
        'negativeSlack': !exists(json, 'negativeSlack') ? undefined : json['negativeSlack'],
        'positiveSlack': !exists(json, 'positiveSlack') ? undefined : json['positiveSlack'],
        'eproGracePeriod': !exists(json, 'eproGracePeriod') ? undefined : json['eproGracePeriod'],
        'forms': !exists(json, 'forms') ? undefined : (json['forms'] as Array<any>).map(ComponentsSchemasIntervalFormsItemFromJSON),
        'disabled': !exists(json, 'disabled') ? undefined : json['disabled'],
        'dateCreated': !exists(json, 'dateCreated') ? undefined : json['dateCreated'],
        'dateModified': !exists(json, 'dateModified') ? undefined : json['dateModified'],
    };
}

export function IntervalToJSON(value?: Interval): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'studyKey': value.studyKey,
        'intervalId': value.intervalId,
        'intervalName': value.intervalName,
        'intervalDescription': value.intervalDescription,
        'intervalSequence': value.intervalSequence,
        'intervalGroupId': value.intervalGroupId,
        'intervalGroupName': value.intervalGroupName,
        'timeline': value.timeline,
        'definedUsingInterval': value.definedUsingInterval,
        'windowCalculationForm': value.windowCalculationForm,
        'windowCalculationDate': value.windowCalculationDate,
        'actualDateForm': value.actualDateForm,
        'actualDate': value.actualDate,
        'dueDateWillBeIn': value.dueDateWillBeIn,
        'negativeSlack': value.negativeSlack,
        'positiveSlack': value.positiveSlack,
        'eproGracePeriod': value.eproGracePeriod,
        'forms': value.forms === undefined ? undefined : (value.forms as Array<any>).map(ComponentsSchemasIntervalFormsItemToJSON),
        'disabled': value.disabled,
        'dateCreated': value.dateCreated,
        'dateModified': value.dateModified,
    };
}


