# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Role

    Role(;
        dateCreated=nothing,
        dateModified=nothing,
        roleId=nothing,
        communityId=nothing,
        name=nothing,
        description=nothing,
        level=nothing,
        type=nothing,
        inactive=nothing,
    )

    - dateCreated::Vector{Int64} : Timestamp when the role assignment was created (as [year, month, day, hour, minute, second, nanosecond])
    - dateModified::Vector{Int64} : Timestamp when the role assignment was last modified
    - roleId::String : Unique role ID (UUID)
    - communityId::Int64 : Community ID or level associated with the role
    - name::String : Name of the role
    - description::String : Description of the role
    - level::Int64 : Role level or hierarchy
    - type::String : Role type/category
    - inactive::Bool : Whether the role is inactive
"""
Base.@kwdef mutable struct Role <: OpenAPI.APIModel
    dateCreated::Union{Nothing, Vector{Int64}} = nothing
    dateModified::Union{Nothing, Vector{Int64}} = nothing
    roleId::Union{Nothing, String} = nothing
    communityId::Union{Nothing, Int64} = nothing
    name::Union{Nothing, String} = nothing
    description::Union{Nothing, String} = nothing
    level::Union{Nothing, Int64} = nothing
    type::Union{Nothing, String} = nothing
    inactive::Union{Nothing, Bool} = nothing

    function Role(dateCreated, dateModified, roleId, communityId, name, description, level, type, inactive, )
        o = new(dateCreated, dateModified, roleId, communityId, name, description, level, type, inactive, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Role

const _property_types_Role = Dict{Symbol,String}(Symbol("dateCreated")=>"Vector{Int64}", Symbol("dateModified")=>"Vector{Int64}", Symbol("roleId")=>"String", Symbol("communityId")=>"Int64", Symbol("name")=>"String", Symbol("description")=>"String", Symbol("level")=>"Int64", Symbol("type")=>"String", Symbol("inactive")=>"Bool", )
OpenAPI.property_type(::Type{ Role }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Role[name]))}

function OpenAPI.check_required(o::Role)
    true
end

function OpenAPI.validate_properties(o::Role)
    OpenAPI.validate_property(Role, Symbol("dateCreated"), o.dateCreated)
    OpenAPI.validate_property(Role, Symbol("dateModified"), o.dateModified)
    OpenAPI.validate_property(Role, Symbol("roleId"), o.roleId)
    OpenAPI.validate_property(Role, Symbol("communityId"), o.communityId)
    OpenAPI.validate_property(Role, Symbol("name"), o.name)
    OpenAPI.validate_property(Role, Symbol("description"), o.description)
    OpenAPI.validate_property(Role, Symbol("level"), o.level)
    OpenAPI.validate_property(Role, Symbol("type"), o.type)
    OpenAPI.validate_property(Role, Symbol("inactive"), o.inactive)
end

function OpenAPI.validate_property(::Type{ Role }, name::Symbol, val)









end
