# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""User

    User(;
        userId=nothing,
        login=nothing,
        firstName=nothing,
        lastName=nothing,
        email=nothing,
        userActiveInStudy=nothing,
        roles=nothing,
    )

    - userId::String : Unique user ID (UUID)
    - login::String : User login name
    - firstName::String : User first name
    - lastName::String : User last name
    - email::String : User email address
    - userActiveInStudy::Bool : Whether the user is active in the given study
    - roles::Vector{Role} : Roles that the user has in the study
"""
Base.@kwdef mutable struct User <: OpenAPI.APIModel
    userId::Union{Nothing, String} = nothing
    login::Union{Nothing, String} = nothing
    firstName::Union{Nothing, String} = nothing
    lastName::Union{Nothing, String} = nothing
    email::Union{Nothing, String} = nothing
    userActiveInStudy::Union{Nothing, Bool} = nothing
    roles::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Role} }

    function User(userId, login, firstName, lastName, email, userActiveInStudy, roles, )
        o = new(userId, login, firstName, lastName, email, userActiveInStudy, roles, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type User

const _property_types_User = Dict{Symbol,String}(Symbol("userId")=>"String", Symbol("login")=>"String", Symbol("firstName")=>"String", Symbol("lastName")=>"String", Symbol("email")=>"String", Symbol("userActiveInStudy")=>"Bool", Symbol("roles")=>"Vector{Role}", )
OpenAPI.property_type(::Type{ User }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_User[name]))}

function OpenAPI.check_required(o::User)
    true
end

function OpenAPI.validate_properties(o::User)
    OpenAPI.validate_property(User, Symbol("userId"), o.userId)
    OpenAPI.validate_property(User, Symbol("login"), o.login)
    OpenAPI.validate_property(User, Symbol("firstName"), o.firstName)
    OpenAPI.validate_property(User, Symbol("lastName"), o.lastName)
    OpenAPI.validate_property(User, Symbol("email"), o.email)
    OpenAPI.validate_property(User, Symbol("userActiveInStudy"), o.userActiveInStudy)
    OpenAPI.validate_property(User, Symbol("roles"), o.roles)
end

function OpenAPI.validate_property(::Type{ User }, name::Symbol, val)







end
