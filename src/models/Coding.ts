// tslint:disable
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Coding
 */
export interface Coding  {
    /**
     * Unique study key
     * @type {string}
     * @memberof Coding
     */
    studyKey?: string;
    /**
     * Name of the site associated with the coded data
     * @type {string}
     * @memberof Coding
     */
    siteName?: string;
    /**
     * Site ID associated with the coded data
     * @type {number}
     * @memberof Coding
     */
    siteId?: number;
    /**
     * Subject ID associated with the coded data
     * @type {number}
     * @memberof Coding
     */
    subjectId?: number;
    /**
     * Subject key (display ID) associated with the coded data
     * @type {string}
     * @memberof Coding
     */
    subjectKey?: string;
    /**
     * Form ID where the coded data originates
     * @type {number}
     * @memberof Coding
     */
    formId?: number;
    /**
     * Name of the form where the coded data originates
     * @type {string}
     * @memberof Coding
     */
    formName?: string;
    /**
     * Form key where the coded data originates
     * @type {string}
     * @memberof Coding
     */
    formKey?: string;
    /**
     * Revision number of the coding entry
     * @type {number}
     * @memberof Coding
     */
    revision?: number;
    /**
     * Record ID associated with the coded data
     * @type {number}
     * @memberof Coding
     */
    recordId?: number;
    /**
     * Variable name (field) that was coded
     * @type {string}
     * @memberof Coding
     */
    variable?: string;
    /**
     * Original value entered that required coding
     * @type {string}
     * @memberof Coding
     */
    value?: string;
    /**
     * Mednet coding ID
     * @type {number}
     * @memberof Coding
     */
    codingId?: number;
    /**
     * Standardized code assigned (e.g., dictionary term)
     * @type {string}
     * @memberof Coding
     */
    code?: string;
    /**
     * Name of the user who performed the coding
     * @type {string}
     * @memberof Coding
     */
    codedBy?: string;
    /**
     * Reason for coding or any notes on changes
     * @type {string}
     * @memberof Coding
     */
    reason?: string;
    /**
     * Name of the dictionary used (e.g., MedDRA)
     * @type {string}
     * @memberof Coding
     */
    dictionaryName?: string;
    /**
     * Version of the dictionary used
     * @type {string}
     * @memberof Coding
     */
    dictionaryVersion?: string;
    /**
     * Date when the coding was performed
     * @type {string}
     * @memberof Coding
     */
    dateCoded?: string;
}

export function CodingFromJSON(json: any): Coding {
    return {
        'studyKey': !exists(json, 'studyKey') ? undefined : json['studyKey'],
        'siteName': !exists(json, 'siteName') ? undefined : json['siteName'],
        'siteId': !exists(json, 'siteId') ? undefined : json['siteId'],
        'subjectId': !exists(json, 'subjectId') ? undefined : json['subjectId'],
        'subjectKey': !exists(json, 'subjectKey') ? undefined : json['subjectKey'],
        'formId': !exists(json, 'formId') ? undefined : json['formId'],
        'formName': !exists(json, 'formName') ? undefined : json['formName'],
        'formKey': !exists(json, 'formKey') ? undefined : json['formKey'],
        'revision': !exists(json, 'revision') ? undefined : json['revision'],
        'recordId': !exists(json, 'recordId') ? undefined : json['recordId'],
        'variable': !exists(json, 'variable') ? undefined : json['variable'],
        'value': !exists(json, 'value') ? undefined : json['value'],
        'codingId': !exists(json, 'codingId') ? undefined : json['codingId'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'codedBy': !exists(json, 'codedBy') ? undefined : json['codedBy'],
        'reason': !exists(json, 'reason') ? undefined : json['reason'],
        'dictionaryName': !exists(json, 'dictionaryName') ? undefined : json['dictionaryName'],
        'dictionaryVersion': !exists(json, 'dictionaryVersion') ? undefined : json['dictionaryVersion'],
        'dateCoded': !exists(json, 'dateCoded') ? undefined : json['dateCoded'],
    };
}

export function CodingToJSON(value?: Coding): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'studyKey': value.studyKey,
        'siteName': value.siteName,
        'siteId': value.siteId,
        'subjectId': value.subjectId,
        'subjectKey': value.subjectKey,
        'formId': value.formId,
        'formName': value.formName,
        'formKey': value.formKey,
        'revision': value.revision,
        'recordId': value.recordId,
        'variable': value.variable,
        'value': value.value,
        'codingId': value.codingId,
        'code': value.code,
        'codedBy': value.codedBy,
        'reason': value.reason,
        'dictionaryName': value.dictionaryName,
        'dictionaryVersion': value.dictionaryVersion,
        'dateCoded': value.dateCoded,
    };
}


