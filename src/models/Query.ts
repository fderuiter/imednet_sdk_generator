// tslint:disable
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    QueryComment,
    QueryCommentFromJSON,
    QueryCommentToJSON,
} from './';

/**
 * 
 * @export
 * @interface Query
 */
export interface Query  {
    /**
     * Unique study key
     * @type {string}
     * @memberof Query
     */
    studyKey?: string;
    /**
     * Mednet subject ID associated with the query (if applicable)
     * @type {number}
     * @memberof Query
     */
    subjectId?: number;
    /**
     * Client-assigned subject OID (if applicable)
     * @type {string}
     * @memberof Query
     */
    subjectOid?: string;
    /**
     * Category/type of the query (e.g., subject, record, question)
     * @type {string}
     * @memberof Query
     */
    annotationType?: string;
    /**
     * Unique system identifier for the query
     * @type {number}
     * @memberof Query
     */
    annotationId?: number;
    /**
     * System text identifier for the query type/location (subject, record, question)
     * @type {string}
     * @memberof Query
     */
    type?: string;
    /**
     * Description of the query (e.g., reason or context)
     * @type {string}
     * @memberof Query
     */
    description?: string;
    /**
     * Record ID associated with the query (if applicable)
     * @type {number}
     * @memberof Query
     */
    recordId?: number;
    /**
     * Variable name (field) associated with the query (if applicable)
     * @type {string}
     * @memberof Query
     */
    variable?: string;
    /**
     * Subject display ID associated with the query (if applicable)
     * @type {string}
     * @memberof Query
     */
    subjectKey?: string;
    /**
     * Date when the query was created
     * @type {string}
     * @memberof Query
     */
    dateCreated?: string;
    /**
     * Date when the query was last modified
     * @type {string}
     * @memberof Query
     */
    dateModified?: string;
    /**
     * History of comments/actions on the query
     * @type {Array<QueryComment>}
     * @memberof Query
     */
    queryComments?: Array<QueryComment>;
}

export function QueryFromJSON(json: any): Query {
    return {
        'studyKey': !exists(json, 'studyKey') ? undefined : json['studyKey'],
        'subjectId': !exists(json, 'subjectId') ? undefined : json['subjectId'],
        'subjectOid': !exists(json, 'subjectOid') ? undefined : json['subjectOid'],
        'annotationType': !exists(json, 'annotationType') ? undefined : json['annotationType'],
        'annotationId': !exists(json, 'annotationId') ? undefined : json['annotationId'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'recordId': !exists(json, 'recordId') ? undefined : json['recordId'],
        'variable': !exists(json, 'variable') ? undefined : json['variable'],
        'subjectKey': !exists(json, 'subjectKey') ? undefined : json['subjectKey'],
        'dateCreated': !exists(json, 'dateCreated') ? undefined : json['dateCreated'],
        'dateModified': !exists(json, 'dateModified') ? undefined : json['dateModified'],
        'queryComments': !exists(json, 'queryComments') ? undefined : (json['queryComments'] as Array<any>).map(QueryCommentFromJSON),
    };
}

export function QueryToJSON(value?: Query): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'studyKey': value.studyKey,
        'subjectId': value.subjectId,
        'subjectOid': value.subjectOid,
        'annotationType': value.annotationType,
        'annotationId': value.annotationId,
        'type': value.type,
        'description': value.description,
        'recordId': value.recordId,
        'variable': value.variable,
        'subjectKey': value.subjectKey,
        'dateCreated': value.dateCreated,
        'dateModified': value.dateModified,
        'queryComments': value.queryComments === undefined ? undefined : (value.queryComments as Array<any>).map(QueryCommentToJSON),
    };
}


