// tslint:disable
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Keyword,
    KeywordFromJSON,
    KeywordToJSON,
} from './';

/**
 * 
 * @export
 * @interface Subject
 */
export interface Subject  {
    /**
     * Unique study key
     * @type {string}
     * @memberof Subject
     */
    studyKey?: string;
    /**
     * Mednet subject ID (internal numeric ID)
     * @type {number}
     * @memberof Subject
     */
    subjectId?: number;
    /**
     * Client-assigned subject object identifier (OID)
     * @type {string}
     * @memberof Subject
     */
    subjectOid?: string;
    /**
     * Protocol-assigned subject identifier (display ID)
     * @type {string}
     * @memberof Subject
     */
    subjectKey?: string;
    /**
     * Current status of the subject (e.g., Enrolled)
     * @type {string}
     * @memberof Subject
     */
    subjectStatus?: string;
    /**
     * Mednet site ID the subject is associated with
     * @type {number}
     * @memberof Subject
     */
    siteId?: number;
    /**
     * Name of the site the subject is associated with
     * @type {string}
     * @memberof Subject
     */
    siteName?: string;
    /**
     * Whether the subject is marked as deleted
     * @type {boolean}
     * @memberof Subject
     */
    deleted?: boolean;
    /**
     * Subjectâ€™s enrollment start date
     * @type {string}
     * @memberof Subject
     */
    enrollmentStartDate?: string;
    /**
     * Date when this subject record was created
     * @type {string}
     * @memberof Subject
     */
    dateCreated?: string;
    /**
     * Date when this subject record was last modified
     * @type {string}
     * @memberof Subject
     */
    dateModified?: string;
    /**
     * List of keywords associated with the subject
     * @type {Array<Keyword>}
     * @memberof Subject
     */
    keywords?: Array<Keyword>;
}

export function SubjectFromJSON(json: any): Subject {
    return {
        'studyKey': !exists(json, 'studyKey') ? undefined : json['studyKey'],
        'subjectId': !exists(json, 'subjectId') ? undefined : json['subjectId'],
        'subjectOid': !exists(json, 'subjectOid') ? undefined : json['subjectOid'],
        'subjectKey': !exists(json, 'subjectKey') ? undefined : json['subjectKey'],
        'subjectStatus': !exists(json, 'subjectStatus') ? undefined : json['subjectStatus'],
        'siteId': !exists(json, 'siteId') ? undefined : json['siteId'],
        'siteName': !exists(json, 'siteName') ? undefined : json['siteName'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'enrollmentStartDate': !exists(json, 'enrollmentStartDate') ? undefined : json['enrollmentStartDate'],
        'dateCreated': !exists(json, 'dateCreated') ? undefined : json['dateCreated'],
        'dateModified': !exists(json, 'dateModified') ? undefined : json['dateModified'],
        'keywords': !exists(json, 'keywords') ? undefined : (json['keywords'] as Array<any>).map(KeywordFromJSON),
    };
}

export function SubjectToJSON(value?: Subject): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'studyKey': value.studyKey,
        'subjectId': value.subjectId,
        'subjectOid': value.subjectOid,
        'subjectKey': value.subjectKey,
        'subjectStatus': value.subjectStatus,
        'siteId': value.siteId,
        'siteName': value.siteName,
        'deleted': value.deleted,
        'enrollmentStartDate': value.enrollmentStartDate,
        'dateCreated': value.dateCreated,
        'dateModified': value.dateModified,
        'keywords': value.keywords === undefined ? undefined : (value.keywords as Array<any>).map(KeywordToJSON),
    };
}


