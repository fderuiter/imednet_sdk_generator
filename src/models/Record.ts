// tslint:disable
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Keyword,
    KeywordFromJSON,
    KeywordToJSON,
} from './';

/**
 * 
 * @export
 * @interface Record
 */
export interface Record  {
    /**
     * Unique study key
     * @type {string}
     * @memberof Record
     */
    studyKey?: string;
    /**
     * Interval ID (visit definition) that this record is associated with
     * @type {number}
     * @memberof Record
     */
    intervalId?: number;
    /**
     * Form ID of the form this record instance belongs to
     * @type {number}
     * @memberof Record
     */
    formId?: number;
    /**
     * Form key of the form for this record instance
     * @type {string}
     * @memberof Record
     */
    formKey?: string;
    /**
     * Site ID associated with the record
     * @type {number}
     * @memberof Record
     */
    siteId?: number;
    /**
     * Unique record ID
     * @type {number}
     * @memberof Record
     */
    recordId?: number;
    /**
     * Client-assigned record OID
     * @type {string}
     * @memberof Record
     */
    recordOid?: string;
    /**
     * Type of record (e.g., SUBJECT for subject-related forms)
     * @type {string}
     * @memberof Record
     */
    recordType?: string;
    /**
     * Current status of the record (e.g., Record Incomplete, Record Complete)
     * @type {string}
     * @memberof Record
     */
    recordStatus?: string;
    /**
     * Whether the record is marked as deleted
     * @type {boolean}
     * @memberof Record
     */
    deleted?: boolean;
    /**
     * Date when this record was created
     * @type {string}
     * @memberof Record
     */
    dateCreated?: string;
    /**
     * Date when this record was last modified
     * @type {string}
     * @memberof Record
     */
    dateModified?: string;
    /**
     * Mednet subject ID that this record is associated with
     * @type {number}
     * @memberof Record
     */
    subjectId?: number;
    /**
     * Client-assigned subject OID for the subject this record is associated with
     * @type {string}
     * @memberof Record
     */
    subjectOid?: string;
    /**
     * Subject display ID that this record is associated with
     * @type {string}
     * @memberof Record
     */
    subjectKey?: string;
    /**
     * Visit instance ID that this record is associated with (if applicable)
     * @type {number}
     * @memberof Record
     */
    visitId?: number;
    /**
     * Record ID of the parent record if this record is a subrecord (if applicable)
     * @type {number}
     * @memberof Record
     */
    parentRecordId?: number;
    /**
     * List of keywords associated with the record
     * @type {Array<Keyword>}
     * @memberof Record
     */
    keywords?: Array<Keyword>;
    /**
     * Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.
     * @type {{ [key: string]: any; }}
     * @memberof Record
     */
    recordData?: { [key: string]: any; };
}

export function RecordFromJSON(json: any): Record {
    return {
        'studyKey': !exists(json, 'studyKey') ? undefined : json['studyKey'],
        'intervalId': !exists(json, 'intervalId') ? undefined : json['intervalId'],
        'formId': !exists(json, 'formId') ? undefined : json['formId'],
        'formKey': !exists(json, 'formKey') ? undefined : json['formKey'],
        'siteId': !exists(json, 'siteId') ? undefined : json['siteId'],
        'recordId': !exists(json, 'recordId') ? undefined : json['recordId'],
        'recordOid': !exists(json, 'recordOid') ? undefined : json['recordOid'],
        'recordType': !exists(json, 'recordType') ? undefined : json['recordType'],
        'recordStatus': !exists(json, 'recordStatus') ? undefined : json['recordStatus'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'dateCreated': !exists(json, 'dateCreated') ? undefined : json['dateCreated'],
        'dateModified': !exists(json, 'dateModified') ? undefined : json['dateModified'],
        'subjectId': !exists(json, 'subjectId') ? undefined : json['subjectId'],
        'subjectOid': !exists(json, 'subjectOid') ? undefined : json['subjectOid'],
        'subjectKey': !exists(json, 'subjectKey') ? undefined : json['subjectKey'],
        'visitId': !exists(json, 'visitId') ? undefined : json['visitId'],
        'parentRecordId': !exists(json, 'parentRecordId') ? undefined : json['parentRecordId'],
        'keywords': !exists(json, 'keywords') ? undefined : (json['keywords'] as Array<any>).map(KeywordFromJSON),
        'recordData': !exists(json, 'recordData') ? undefined : json['recordData'],
    };
}

export function RecordToJSON(value?: Record): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'studyKey': value.studyKey,
        'intervalId': value.intervalId,
        'formId': value.formId,
        'formKey': value.formKey,
        'siteId': value.siteId,
        'recordId': value.recordId,
        'recordOid': value.recordOid,
        'recordType': value.recordType,
        'recordStatus': value.recordStatus,
        'deleted': value.deleted,
        'dateCreated': value.dateCreated,
        'dateModified': value.dateModified,
        'subjectId': value.subjectId,
        'subjectOid': value.subjectOid,
        'subjectKey': value.subjectKey,
        'visitId': value.visitId,
        'parentRecordId': value.parentRecordId,
        'keywords': value.keywords === undefined ? undefined : (value.keywords as Array<any>).map(KeywordToJSON),
        'recordData': value.recordData,
    };
}


