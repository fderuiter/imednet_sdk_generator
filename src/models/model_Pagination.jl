# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Pagination

    Pagination(;
        currentPage=nothing,
        size=nothing,
        totalPages=nothing,
        totalElements=nothing,
        sort=nothing,
    )

    - currentPage::Int64 : Current index page returned
    - size::Int64 : Number of items per page returned
    - totalPages::Int64 : Total number of pages available
    - totalElements::Int64 : Total number of elements (items) available
    - sort::Vector{Sort}
"""
Base.@kwdef mutable struct Pagination <: OpenAPI.APIModel
    currentPage::Union{Nothing, Int64} = nothing
    size::Union{Nothing, Int64} = nothing
    totalPages::Union{Nothing, Int64} = nothing
    totalElements::Union{Nothing, Int64} = nothing
    sort::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Sort} }

    function Pagination(currentPage, size, totalPages, totalElements, sort, )
        o = new(currentPage, size, totalPages, totalElements, sort, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Pagination

const _property_types_Pagination = Dict{Symbol,String}(Symbol("currentPage")=>"Int64", Symbol("size")=>"Int64", Symbol("totalPages")=>"Int64", Symbol("totalElements")=>"Int64", Symbol("sort")=>"Vector{Sort}", )
OpenAPI.property_type(::Type{ Pagination }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Pagination[name]))}

function OpenAPI.check_required(o::Pagination)
    true
end

function OpenAPI.validate_properties(o::Pagination)
    OpenAPI.validate_property(Pagination, Symbol("currentPage"), o.currentPage)
    OpenAPI.validate_property(Pagination, Symbol("size"), o.size)
    OpenAPI.validate_property(Pagination, Symbol("totalPages"), o.totalPages)
    OpenAPI.validate_property(Pagination, Symbol("totalElements"), o.totalElements)
    OpenAPI.validate_property(Pagination, Symbol("sort"), o.sort)
end

function OpenAPI.validate_property(::Type{ Pagination }, name::Symbol, val)





end
