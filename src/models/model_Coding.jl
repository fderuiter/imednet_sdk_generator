# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Coding

    Coding(;
        studyKey=nothing,
        siteName=nothing,
        siteId=nothing,
        subjectId=nothing,
        subjectKey=nothing,
        formId=nothing,
        formName=nothing,
        formKey=nothing,
        revision=nothing,
        recordId=nothing,
        variable=nothing,
        value=nothing,
        codingId=nothing,
        code=nothing,
        codedBy=nothing,
        reason=nothing,
        dictionaryName=nothing,
        dictionaryVersion=nothing,
        dateCoded=nothing,
    )

    - studyKey::String : Unique study key
    - siteName::String : Name of the site associated with the coded data
    - siteId::Int64 : Site ID associated with the coded data
    - subjectId::Int64 : Subject ID associated with the coded data
    - subjectKey::String : Subject key (display ID) associated with the coded data
    - formId::Int64 : Form ID where the coded data originates
    - formName::String : Name of the form where the coded data originates
    - formKey::String : Form key where the coded data originates
    - revision::Int64 : Revision number of the coding entry
    - recordId::Int64 : Record ID associated with the coded data
    - variable::String : Variable name (field) that was coded
    - value::String : Original value entered that required coding
    - codingId::Int64 : Mednet coding ID
    - code::String : Standardized code assigned (e.g., dictionary term)
    - codedBy::String : Name of the user who performed the coding
    - reason::String : Reason for coding or any notes on changes
    - dictionaryName::String : Name of the dictionary used (e.g., MedDRA)
    - dictionaryVersion::String : Version of the dictionary used
    - dateCoded::String : Date when the coding was performed
"""
Base.@kwdef mutable struct Coding <: OpenAPI.APIModel
    studyKey::Union{Nothing, String} = nothing
    siteName::Union{Nothing, String} = nothing
    siteId::Union{Nothing, Int64} = nothing
    subjectId::Union{Nothing, Int64} = nothing
    subjectKey::Union{Nothing, String} = nothing
    formId::Union{Nothing, Int64} = nothing
    formName::Union{Nothing, String} = nothing
    formKey::Union{Nothing, String} = nothing
    revision::Union{Nothing, Int64} = nothing
    recordId::Union{Nothing, Int64} = nothing
    variable::Union{Nothing, String} = nothing
    value::Union{Nothing, String} = nothing
    codingId::Union{Nothing, Int64} = nothing
    code::Union{Nothing, String} = nothing
    codedBy::Union{Nothing, String} = nothing
    reason::Union{Nothing, String} = nothing
    dictionaryName::Union{Nothing, String} = nothing
    dictionaryVersion::Union{Nothing, String} = nothing
    dateCoded::Union{Nothing, String} = nothing

    function Coding(studyKey, siteName, siteId, subjectId, subjectKey, formId, formName, formKey, revision, recordId, variable, value, codingId, code, codedBy, reason, dictionaryName, dictionaryVersion, dateCoded, )
        o = new(studyKey, siteName, siteId, subjectId, subjectKey, formId, formName, formKey, revision, recordId, variable, value, codingId, code, codedBy, reason, dictionaryName, dictionaryVersion, dateCoded, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Coding

const _property_types_Coding = Dict{Symbol,String}(Symbol("studyKey")=>"String", Symbol("siteName")=>"String", Symbol("siteId")=>"Int64", Symbol("subjectId")=>"Int64", Symbol("subjectKey")=>"String", Symbol("formId")=>"Int64", Symbol("formName")=>"String", Symbol("formKey")=>"String", Symbol("revision")=>"Int64", Symbol("recordId")=>"Int64", Symbol("variable")=>"String", Symbol("value")=>"String", Symbol("codingId")=>"Int64", Symbol("code")=>"String", Symbol("codedBy")=>"String", Symbol("reason")=>"String", Symbol("dictionaryName")=>"String", Symbol("dictionaryVersion")=>"String", Symbol("dateCoded")=>"String", )
OpenAPI.property_type(::Type{ Coding }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Coding[name]))}

function OpenAPI.check_required(o::Coding)
    true
end

function OpenAPI.validate_properties(o::Coding)
    OpenAPI.validate_property(Coding, Symbol("studyKey"), o.studyKey)
    OpenAPI.validate_property(Coding, Symbol("siteName"), o.siteName)
    OpenAPI.validate_property(Coding, Symbol("siteId"), o.siteId)
    OpenAPI.validate_property(Coding, Symbol("subjectId"), o.subjectId)
    OpenAPI.validate_property(Coding, Symbol("subjectKey"), o.subjectKey)
    OpenAPI.validate_property(Coding, Symbol("formId"), o.formId)
    OpenAPI.validate_property(Coding, Symbol("formName"), o.formName)
    OpenAPI.validate_property(Coding, Symbol("formKey"), o.formKey)
    OpenAPI.validate_property(Coding, Symbol("revision"), o.revision)
    OpenAPI.validate_property(Coding, Symbol("recordId"), o.recordId)
    OpenAPI.validate_property(Coding, Symbol("variable"), o.variable)
    OpenAPI.validate_property(Coding, Symbol("value"), o.value)
    OpenAPI.validate_property(Coding, Symbol("codingId"), o.codingId)
    OpenAPI.validate_property(Coding, Symbol("code"), o.code)
    OpenAPI.validate_property(Coding, Symbol("codedBy"), o.codedBy)
    OpenAPI.validate_property(Coding, Symbol("reason"), o.reason)
    OpenAPI.validate_property(Coding, Symbol("dictionaryName"), o.dictionaryName)
    OpenAPI.validate_property(Coding, Symbol("dictionaryVersion"), o.dictionaryVersion)
    OpenAPI.validate_property(Coding, Symbol("dateCoded"), o.dateCoded)
end

function OpenAPI.validate_property(::Type{ Coding }, name::Symbol, val)



















end
