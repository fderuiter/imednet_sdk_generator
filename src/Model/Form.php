<?php
/**
 * Form
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API.
 *
 * The version of the OpenAPI document: 1.3.6
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * Form Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Form implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Form';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'study_key' => 'string',
        'form_id' => 'int',
        'form_key' => 'string',
        'form_name' => 'string',
        'form_type' => 'string',
        'revision' => 'int',
        'embedded_log' => 'bool',
        'enforce_ownership' => 'bool',
        'user_agreement' => 'bool',
        'subject_record_report' => 'bool',
        'unscheduled_visit' => 'bool',
        'other_forms' => 'bool',
        'epro_form' => 'bool',
        'allow_copy' => 'bool',
        'disabled' => 'bool',
        'date_created' => 'string',
        'date_modified' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'study_key' => null,
        'form_id' => null,
        'form_key' => null,
        'form_name' => null,
        'form_type' => null,
        'revision' => null,
        'embedded_log' => null,
        'enforce_ownership' => null,
        'user_agreement' => null,
        'subject_record_report' => null,
        'unscheduled_visit' => null,
        'other_forms' => null,
        'epro_form' => null,
        'allow_copy' => null,
        'disabled' => null,
        'date_created' => null,
        'date_modified' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'study_key' => false,
        'form_id' => false,
        'form_key' => false,
        'form_name' => false,
        'form_type' => false,
        'revision' => false,
        'embedded_log' => false,
        'enforce_ownership' => false,
        'user_agreement' => false,
        'subject_record_report' => false,
        'unscheduled_visit' => false,
        'other_forms' => false,
        'epro_form' => false,
        'allow_copy' => false,
        'disabled' => false,
        'date_created' => false,
        'date_modified' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'study_key' => 'studyKey',
        'form_id' => 'formId',
        'form_key' => 'formKey',
        'form_name' => 'formName',
        'form_type' => 'formType',
        'revision' => 'revision',
        'embedded_log' => 'embeddedLog',
        'enforce_ownership' => 'enforceOwnership',
        'user_agreement' => 'userAgreement',
        'subject_record_report' => 'subjectRecordReport',
        'unscheduled_visit' => 'unscheduledVisit',
        'other_forms' => 'otherForms',
        'epro_form' => 'eproForm',
        'allow_copy' => 'allowCopy',
        'disabled' => 'disabled',
        'date_created' => 'dateCreated',
        'date_modified' => 'dateModified'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'study_key' => 'setStudyKey',
        'form_id' => 'setFormId',
        'form_key' => 'setFormKey',
        'form_name' => 'setFormName',
        'form_type' => 'setFormType',
        'revision' => 'setRevision',
        'embedded_log' => 'setEmbeddedLog',
        'enforce_ownership' => 'setEnforceOwnership',
        'user_agreement' => 'setUserAgreement',
        'subject_record_report' => 'setSubjectRecordReport',
        'unscheduled_visit' => 'setUnscheduledVisit',
        'other_forms' => 'setOtherForms',
        'epro_form' => 'setEproForm',
        'allow_copy' => 'setAllowCopy',
        'disabled' => 'setDisabled',
        'date_created' => 'setDateCreated',
        'date_modified' => 'setDateModified'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'study_key' => 'getStudyKey',
        'form_id' => 'getFormId',
        'form_key' => 'getFormKey',
        'form_name' => 'getFormName',
        'form_type' => 'getFormType',
        'revision' => 'getRevision',
        'embedded_log' => 'getEmbeddedLog',
        'enforce_ownership' => 'getEnforceOwnership',
        'user_agreement' => 'getUserAgreement',
        'subject_record_report' => 'getSubjectRecordReport',
        'unscheduled_visit' => 'getUnscheduledVisit',
        'other_forms' => 'getOtherForms',
        'epro_form' => 'getEproForm',
        'allow_copy' => 'getAllowCopy',
        'disabled' => 'getDisabled',
        'date_created' => 'getDateCreated',
        'date_modified' => 'getDateModified'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('study_key', $data ?? [], null);
        $this->setIfExists('form_id', $data ?? [], null);
        $this->setIfExists('form_key', $data ?? [], null);
        $this->setIfExists('form_name', $data ?? [], null);
        $this->setIfExists('form_type', $data ?? [], null);
        $this->setIfExists('revision', $data ?? [], null);
        $this->setIfExists('embedded_log', $data ?? [], null);
        $this->setIfExists('enforce_ownership', $data ?? [], null);
        $this->setIfExists('user_agreement', $data ?? [], null);
        $this->setIfExists('subject_record_report', $data ?? [], null);
        $this->setIfExists('unscheduled_visit', $data ?? [], null);
        $this->setIfExists('other_forms', $data ?? [], null);
        $this->setIfExists('epro_form', $data ?? [], null);
        $this->setIfExists('allow_copy', $data ?? [], null);
        $this->setIfExists('disabled', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('date_modified', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets study_key
     *
     * @return string|null
     */
    public function getStudyKey(): ?string
    {
        return $this->container['study_key'];
    }

    /**
     * Sets study_key
     *
     * @param string|null $study_key Unique study key
     *
     * @return $this
     */
    public function setStudyKey(?string $study_key): static
    {
        if (is_null($study_key)) {
            throw new InvalidArgumentException('non-nullable study_key cannot be null');
        }
        $this->container['study_key'] = $study_key;

        return $this;
    }

    /**
     * Gets form_id
     *
     * @return int|null
     */
    public function getFormId(): ?int
    {
        return $this->container['form_id'];
    }

    /**
     * Sets form_id
     *
     * @param int|null $form_id Mednet Form ID
     *
     * @return $this
     */
    public function setFormId(?int $form_id): static
    {
        if (is_null($form_id)) {
            throw new InvalidArgumentException('non-nullable form_id cannot be null');
        }
        $this->container['form_id'] = $form_id;

        return $this;
    }

    /**
     * Gets form_key
     *
     * @return string|null
     */
    public function getFormKey(): ?string
    {
        return $this->container['form_key'];
    }

    /**
     * Sets form_key
     *
     * @param string|null $form_key User-defined form key
     *
     * @return $this
     */
    public function setFormKey(?string $form_key): static
    {
        if (is_null($form_key)) {
            throw new InvalidArgumentException('non-nullable form_key cannot be null');
        }
        $this->container['form_key'] = $form_key;

        return $this;
    }

    /**
     * Gets form_name
     *
     * @return string|null
     */
    public function getFormName(): ?string
    {
        return $this->container['form_name'];
    }

    /**
     * Sets form_name
     *
     * @param string|null $form_name Name of the form (eCRF)
     *
     * @return $this
     */
    public function setFormName(?string $form_name): static
    {
        if (is_null($form_name)) {
            throw new InvalidArgumentException('non-nullable form_name cannot be null');
        }
        $this->container['form_name'] = $form_name;

        return $this;
    }

    /**
     * Gets form_type
     *
     * @return string|null
     */
    public function getFormType(): ?string
    {
        return $this->container['form_type'];
    }

    /**
     * Sets form_type
     *
     * @param string|null $form_type Type of the form (e.g., Subject or Site)
     *
     * @return $this
     */
    public function setFormType(?string $form_type): static
    {
        if (is_null($form_type)) {
            throw new InvalidArgumentException('non-nullable form_type cannot be null');
        }
        $this->container['form_type'] = $form_type;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int|null
     */
    public function getRevision(): ?int
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int|null $revision Number of modifications (revisions) of the form metadata
     *
     * @return $this
     */
    public function setRevision(?int $revision): static
    {
        if (is_null($revision)) {
            throw new InvalidArgumentException('non-nullable revision cannot be null');
        }
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets embedded_log
     *
     * @return bool|null
     */
    public function getEmbeddedLog(): ?bool
    {
        return $this->container['embedded_log'];
    }

    /**
     * Sets embedded_log
     *
     * @param bool|null $embedded_log Whether the form has an embedded log
     *
     * @return $this
     */
    public function setEmbeddedLog(?bool $embedded_log): static
    {
        if (is_null($embedded_log)) {
            throw new InvalidArgumentException('non-nullable embedded_log cannot be null');
        }
        $this->container['embedded_log'] = $embedded_log;

        return $this;
    }

    /**
     * Gets enforce_ownership
     *
     * @return bool|null
     */
    public function getEnforceOwnership(): ?bool
    {
        return $this->container['enforce_ownership'];
    }

    /**
     * Sets enforce_ownership
     *
     * @param bool|null $enforce_ownership Whether the form enforces record ownership
     *
     * @return $this
     */
    public function setEnforceOwnership(?bool $enforce_ownership): static
    {
        if (is_null($enforce_ownership)) {
            throw new InvalidArgumentException('non-nullable enforce_ownership cannot be null');
        }
        $this->container['enforce_ownership'] = $enforce_ownership;

        return $this;
    }

    /**
     * Gets user_agreement
     *
     * @return bool|null
     */
    public function getUserAgreement(): ?bool
    {
        return $this->container['user_agreement'];
    }

    /**
     * Sets user_agreement
     *
     * @param bool|null $user_agreement Whether the form requires a user agreement
     *
     * @return $this
     */
    public function setUserAgreement(?bool $user_agreement): static
    {
        if (is_null($user_agreement)) {
            throw new InvalidArgumentException('non-nullable user_agreement cannot be null');
        }
        $this->container['user_agreement'] = $user_agreement;

        return $this;
    }

    /**
     * Gets subject_record_report
     *
     * @return bool|null
     */
    public function getSubjectRecordReport(): ?bool
    {
        return $this->container['subject_record_report'];
    }

    /**
     * Sets subject_record_report
     *
     * @param bool|null $subject_record_report Whether the form is marked as a subject record report
     *
     * @return $this
     */
    public function setSubjectRecordReport(?bool $subject_record_report): static
    {
        if (is_null($subject_record_report)) {
            throw new InvalidArgumentException('non-nullable subject_record_report cannot be null');
        }
        $this->container['subject_record_report'] = $subject_record_report;

        return $this;
    }

    /**
     * Gets unscheduled_visit
     *
     * @return bool|null
     */
    public function getUnscheduledVisit(): ?bool
    {
        return $this->container['unscheduled_visit'];
    }

    /**
     * Sets unscheduled_visit
     *
     * @param bool|null $unscheduled_visit Whether the form is included in unscheduled visits
     *
     * @return $this
     */
    public function setUnscheduledVisit(?bool $unscheduled_visit): static
    {
        if (is_null($unscheduled_visit)) {
            throw new InvalidArgumentException('non-nullable unscheduled_visit cannot be null');
        }
        $this->container['unscheduled_visit'] = $unscheduled_visit;

        return $this;
    }

    /**
     * Gets other_forms
     *
     * @return bool|null
     */
    public function getOtherForms(): ?bool
    {
        return $this->container['other_forms'];
    }

    /**
     * Sets other_forms
     *
     * @param bool|null $other_forms Whether the form is included in Other Forms category
     *
     * @return $this
     */
    public function setOtherForms(?bool $other_forms): static
    {
        if (is_null($other_forms)) {
            throw new InvalidArgumentException('non-nullable other_forms cannot be null');
        }
        $this->container['other_forms'] = $other_forms;

        return $this;
    }

    /**
     * Gets epro_form
     *
     * @return bool|null
     */
    public function getEproForm(): ?bool
    {
        return $this->container['epro_form'];
    }

    /**
     * Sets epro_form
     *
     * @param bool|null $epro_form Whether the form is an ePRO (electronic patient reported outcome) form
     *
     * @return $this
     */
    public function setEproForm(?bool $epro_form): static
    {
        if (is_null($epro_form)) {
            throw new InvalidArgumentException('non-nullable epro_form cannot be null');
        }
        $this->container['epro_form'] = $epro_form;

        return $this;
    }

    /**
     * Gets allow_copy
     *
     * @return bool|null
     */
    public function getAllowCopy(): ?bool
    {
        return $this->container['allow_copy'];
    }

    /**
     * Sets allow_copy
     *
     * @param bool|null $allow_copy Whether the form allows copying of data
     *
     * @return $this
     */
    public function setAllowCopy(?bool $allow_copy): static
    {
        if (is_null($allow_copy)) {
            throw new InvalidArgumentException('non-nullable allow_copy cannot be null');
        }
        $this->container['allow_copy'] = $allow_copy;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool|null
     */
    public function getDisabled(): ?bool
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool|null $disabled Whether the form is soft-deleted (disabled)
     *
     * @return $this
     */
    public function setDisabled(?bool $disabled): static
    {
        if (is_null($disabled)) {
            throw new InvalidArgumentException('non-nullable disabled cannot be null');
        }
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string|null
     */
    public function getDateCreated(): ?string
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string|null $date_created Date when this form was created
     *
     * @return $this
     */
    public function setDateCreated(?string $date_created): static
    {
        if (is_null($date_created)) {
            throw new InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return string|null
     */
    public function getDateModified(): ?string
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param string|null $date_modified Date when this form was last modified
     *
     * @return $this
     */
    public function setDateModified(?string $date_modified): static
    {
        if (is_null($date_modified)) {
            throw new InvalidArgumentException('non-nullable date_modified cannot be null');
        }
        $this->container['date_modified'] = $date_modified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


