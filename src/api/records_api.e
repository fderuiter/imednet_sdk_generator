note
 description:"[
		Mednet EDC API
 		The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  		The version of the OpenAPI document: 1.3.6
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	RECORDS_API

inherit

    API_I


feature -- API Access


	create_records (study_key: STRING_32; components_schemas__record_create_request_item: LIST [COMPONENTS_SCHEMAS_RECORD_CREATE_REQUEST_ITEM]): detachable RECORD_JOB_STATUS
			-- Add new record or update subject/record data
			-- 
			-- 
			-- argument: study_key Study key identifying the study context for the request (required)
			-- 
			-- argument: components_schemas__record_create_request_item An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update). (required)
			-- 
			-- 
			-- Result RECORD_JOB_STATUS
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(components_schemas__record_create_request_item)
			l_path := "/studies/{studyKey}/records"
			l_path.replace_substring_all ("{"+"studyKey"+"}", api_client.url_encode (study_key.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"apiKeyAuth", "securityKeyAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { RECORD_JOB_STATUS } l_response.data ({ RECORD_JOB_STATUS }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	list_records (study_key: STRING_32; page: INTEGER_32; size: INTEGER_32; sort: STRING_32; filter: STRING_32; record_data_filter: STRING_32): detachable RECORD_LIST
			-- List records (eCRF instances) in a study
			-- 
			-- 
			-- argument: study_key Study key identifying the study context for the request (required)
			-- 
			-- argument: page Page index to retrieve (0-based) (optional, default to 0)
			-- 
			-- argument: size Number of items to return per page (max 500) (optional, default to 25)
			-- 
			-- argument: sort Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated. (optional, default to null)
			-- 
			-- argument: filter Optional filter criteria to apply, in the format &#x60;attribute&#x3D;&#x3D;value&#x60; with support for &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, !&#x3D;. Multiple criteria can be combined with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR). (optional, default to null)
			-- 
			-- argument: record_data_filter Optional filter criteria to apply on recordData fields (question responses). Supports &#x3D;&#x3D;, !&#x3D;, &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;~ (contains) and can combine multiple criteria with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR). (optional, default to null)
			-- 
			-- 
			-- Result RECORD_LIST
		require
     		page_is_greater_or_equal_than: page >= 0
			size_is_less_or_equal_than: size <= 500
     		size_is_greater_or_equal_than: size >= 1
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/studies/{studyKey}/records"
			l_path.replace_substring_all ("{"+"studyKey"+"}", api_client.url_encode (study_key.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "page", page));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "size", size));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "sort", sort));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "filter", filter));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "recordDataFilter", record_data_filter));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"apiKeyAuth", "securityKeyAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { RECORD_LIST } l_response.data ({ RECORD_LIST }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
