/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */



import ApiClient from "../ApiClient";
import ComponentsSchemasRecordCreateRequestItem from '../model/ComponentsSchemasRecordCreateRequestItem';
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineObject2 from '../model/InlineObject2';
import InlineObject3 from '../model/InlineObject3';
import InlineObject4 from '../model/InlineObject4';
import InlineObject5 from '../model/InlineObject5';
import RecordJobStatus from '../model/RecordJobStatus';
import RecordList from '../model/RecordList';

/**
* Records service.
* @module api/RecordsApi
* @version 1.3.6
*/
export default class RecordsApi extends ApiClient {

    /**
    * Constructs a new RecordsApi. 
    * @alias module:api/RecordsApi
    * @class
    */
    constructor(baseURL = 'https://edc.prod.imednetapi.com/api/v1/edc') {
      super(baseURL);
    }


    /**
     * Add new record or update subject/record data
     * @param {String} studyKey Study key identifying the study context for the request
     * @param {Array.<module:model/ComponentsSchemasRecordCreateRequestItem>} componentsSchemasRecordCreateRequestItem An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update).
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/RecordJobStatus>}
     */
    async createRecords(studyKey, componentsSchemasRecordCreateRequestItem, requestInit) {
      let postBody = componentsSchemasRecordCreateRequestItem;
      // verify the required parameter 'studyKey' is set
      if (studyKey === undefined || studyKey === null) {
        throw new Error("Missing the required parameter 'studyKey' when calling createRecords");
      }
      // verify the required parameter 'componentsSchemasRecordCreateRequestItem' is set
      if (componentsSchemasRecordCreateRequestItem === undefined || componentsSchemasRecordCreateRequestItem === null) {
        throw new Error("Missing the required parameter 'componentsSchemasRecordCreateRequestItem' when calling createRecords");
      }

      let pathParams = {
        'studyKey': studyKey
      };
      let queryParams = {
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.3.6/Javascript',
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth', 'securityKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RecordJobStatus;

      return this.callApi(
        '/studies/{studyKey}/records', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }

    /**
     * List records (eCRF instances) in a study
     * @param {String} studyKey Study key identifying the study context for the request
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page Page index to retrieve (0-based) (default to 0)
     * @param {Number} opts.size Number of items to return per page (max 500) (default to 25)
     * @param {String} opts.sort Sorting criteria in the format `property,ASC` or `property,DESC`. Can be repeated.
     * @param {String} opts.filter Optional filter criteria to apply, in the format `attribute==value` with support for >, >=, <, <=, !=. Multiple criteria can be combined with `;` (AND) or `,` (OR).
     * @param {String} opts.recordDataFilter Optional filter criteria to apply on recordData fields (question responses). Supports ==, !=, <, <=, >, >=, =~ (contains) and can combine multiple criteria with `;` (AND) or `,` (OR).
     * @param requestInit Dynamic configuration. @see {@link https://github.com/apollographql/apollo-server/pull/1277}
     * @return {Promise<module:model/RecordList>}
     */
    async listRecords(studyKey, opts, requestInit) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'studyKey' is set
      if (studyKey === undefined || studyKey === null) {
        throw new Error("Missing the required parameter 'studyKey' when calling listRecords");
      }

      let pathParams = {
        'studyKey': studyKey
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'sort': opts['sort'],
        'filter': opts['filter'],
        'recordDataFilter': opts['recordDataFilter']
      };
      let headerParams = {
        'User-Agent': 'OpenAPI-Generator/1.3.6/Javascript',
      };
      let formParams = {
      };

      let authNames = ['apiKeyAuth', 'securityKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecordList;

      return this.callApi(
        '/studies/{studyKey}/records', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, requestInit
      );
    }


}
