#
# Mednet EDC API
# The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
# Version: 1.3.6
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

Retrieve job status by batch ID

.DESCRIPTION

No description available.

.PARAMETER StudyKey
Study key identifying the study context for the request

.PARAMETER BatchId
Batch ID of the job to retrieve

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

Job
#>
function Get-JobStatus {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StudyKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${BatchId},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Get-JobStatus' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/studies/{studyKey}/jobs/{batchId}'
        if (!$StudyKey) {
            throw "Error! The required parameter `StudyKey` missing when calling getJobStatus."
        }
        $LocalVarUri = $LocalVarUri.replace('{studyKey}', [System.Web.HTTPUtility]::UrlEncode($StudyKey))
        if (!$BatchId) {
            throw "Error! The required parameter `BatchId` missing when calling getJobStatus."
        }
        $LocalVarUri = $LocalVarUri.replace('{batchId}', [System.Web.HTTPUtility]::UrlEncode($BatchId))

        if ($Configuration["ApiKeyPrefix"] -and $Configuration["ApiKeyPrefix"]["x-api-key"]) {
            $apiKeyPrefix = $Configuration["ApiKeyPrefix"]["x-api-key"]
        } else {
            $apiKeyPrefix = ""
        }
        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["x-api-key"]) {
            $LocalVarHeaderParameters['x-api-key'] = $apiKeyPrefix + $Configuration["ApiKey"]["x-api-key"]
            Write-Verbose ("Using API key 'x-api-key' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKeyPrefix"] -and $Configuration["ApiKeyPrefix"]["x-imn-security-key"]) {
            $apiKeyPrefix = $Configuration["ApiKeyPrefix"]["x-imn-security-key"]
        } else {
            $apiKeyPrefix = ""
        }
        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["x-imn-security-key"]) {
            $LocalVarHeaderParameters['x-imn-security-key'] = $apiKeyPrefix + $Configuration["ApiKey"]["x-imn-security-key"]
            Write-Verbose ("Using API key 'x-imn-security-key' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "Job" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

