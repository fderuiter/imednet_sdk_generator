#
# Mednet EDC API
# The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
# Version: 1.3.6
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER StudyKey
Unique study key
.PARAMETER VariableId
Mednet variable ID
.PARAMETER VariableType
Type of the variable (field type), e.g., RADIO, TEXT, etc.
.PARAMETER VariableName
Name of the variable (question text or label)
.PARAMETER Sequence
Sequence of the variable on the form
.PARAMETER Revision
Number of modifications of the variable (via form metadata revisions)
.PARAMETER Disabled
Whether the variable is marked as disabled (deleted)
.PARAMETER DateCreated
Date when this variable was created
.PARAMETER DateModified
Date when this variable was last modified
.PARAMETER FormId
ID of the form that this variable belongs to
.PARAMETER VariableOid
Client-assigned variable OID
.PARAMETER Deleted
Whether the variable is marked as deleted
.PARAMETER FormKey
Form key of the form that this variable belongs to
.PARAMETER FormName
Name of the form that this variable belongs to
.PARAMETER Label
User-defined identifier (field name) for the variable
.PARAMETER Blinded
Whether the variable is flagged as blinded (hidden in certain contexts)
.OUTPUTS

Variable<PSCustomObject>
#>

function Initialize-Variable {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StudyKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VariableId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [ValidateSet("TEXT", "TEXTAREA", "RADIO", "CHECKBOX", "DROPDOWN", "DATE", "NUMBER")]
        [String]
        ${VariableType},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VariableName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Sequence},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Revision},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Disabled},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateCreated},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateModified},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FormId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VariableOid},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Deleted},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FormKey},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FormName},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Label},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Blinded}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Variable' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "variableId" = ${VariableId}
            "variableType" = ${VariableType}
            "variableName" = ${VariableName}
            "sequence" = ${Sequence}
            "revision" = ${Revision}
            "disabled" = ${Disabled}
            "dateCreated" = ${DateCreated}
            "dateModified" = ${DateModified}
            "formId" = ${FormId}
            "variableOid" = ${VariableOid}
            "deleted" = ${Deleted}
            "formKey" = ${FormKey}
            "formName" = ${FormName}
            "label" = ${Label}
            "blinded" = ${Blinded}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Variable<PSCustomObject>

.DESCRIPTION

Convert from JSON to Variable<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Variable<PSCustomObject>
#>
function ConvertFrom-JsonToVariable {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Variable' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Variable
        $AllProperties = ("studyKey", "variableId", "variableType", "variableName", "sequence", "revision", "disabled", "dateCreated", "dateModified", "formId", "variableOid", "deleted", "formKey", "formName", "label", "blinded")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "studyKey"))) { #optional property not found
            $StudyKey = $null
        } else {
            $StudyKey = $JsonParameters.PSobject.Properties["studyKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "variableId"))) { #optional property not found
            $VariableId = $null
        } else {
            $VariableId = $JsonParameters.PSobject.Properties["variableId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "variableType"))) { #optional property not found
            $VariableType = $null
        } else {
            $VariableType = $JsonParameters.PSobject.Properties["variableType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "variableName"))) { #optional property not found
            $VariableName = $null
        } else {
            $VariableName = $JsonParameters.PSobject.Properties["variableName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sequence"))) { #optional property not found
            $Sequence = $null
        } else {
            $Sequence = $JsonParameters.PSobject.Properties["sequence"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "revision"))) { #optional property not found
            $Revision = $null
        } else {
            $Revision = $JsonParameters.PSobject.Properties["revision"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disabled"))) { #optional property not found
            $Disabled = $null
        } else {
            $Disabled = $JsonParameters.PSobject.Properties["disabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateModified"))) { #optional property not found
            $DateModified = $null
        } else {
            $DateModified = $JsonParameters.PSobject.Properties["dateModified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formId"))) { #optional property not found
            $FormId = $null
        } else {
            $FormId = $JsonParameters.PSobject.Properties["formId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "variableOid"))) { #optional property not found
            $VariableOid = $null
        } else {
            $VariableOid = $JsonParameters.PSobject.Properties["variableOid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deleted"))) { #optional property not found
            $Deleted = $null
        } else {
            $Deleted = $JsonParameters.PSobject.Properties["deleted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formKey"))) { #optional property not found
            $FormKey = $null
        } else {
            $FormKey = $JsonParameters.PSobject.Properties["formKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formName"))) { #optional property not found
            $FormName = $null
        } else {
            $FormName = $JsonParameters.PSobject.Properties["formName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "label"))) { #optional property not found
            $Label = $null
        } else {
            $Label = $JsonParameters.PSobject.Properties["label"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "blinded"))) { #optional property not found
            $Blinded = $null
        } else {
            $Blinded = $JsonParameters.PSobject.Properties["blinded"].value
        }

        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "variableId" = ${VariableId}
            "variableType" = ${VariableType}
            "variableName" = ${VariableName}
            "sequence" = ${Sequence}
            "revision" = ${Revision}
            "disabled" = ${Disabled}
            "dateCreated" = ${DateCreated}
            "dateModified" = ${DateModified}
            "formId" = ${FormId}
            "variableOid" = ${VariableOid}
            "deleted" = ${Deleted}
            "formKey" = ${FormKey}
            "formName" = ${FormName}
            "label" = ${Label}
            "blinded" = ${Blinded}
        }

        return $PSO
    }

}

