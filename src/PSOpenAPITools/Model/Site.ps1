#
# Mednet EDC API
# The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
# Version: 1.3.6
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER StudyKey
Unique study key
.PARAMETER SiteId
Unique site ID
.PARAMETER SiteName
Name of the site
.PARAMETER SiteEnrollmentStatus
Enrollment status of the site
.PARAMETER DateCreated
Date when this site was created
.PARAMETER DateModified
Date when this site was last modified
.OUTPUTS

Site<PSCustomObject>
#>

function Initialize-Site {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StudyKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SiteId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SiteName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SiteEnrollmentStatus},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateCreated},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateModified}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Site' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "siteId" = ${SiteId}
            "siteName" = ${SiteName}
            "siteEnrollmentStatus" = ${SiteEnrollmentStatus}
            "dateCreated" = ${DateCreated}
            "dateModified" = ${DateModified}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Site<PSCustomObject>

.DESCRIPTION

Convert from JSON to Site<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Site<PSCustomObject>
#>
function ConvertFrom-JsonToSite {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Site' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Site
        $AllProperties = ("studyKey", "siteId", "siteName", "siteEnrollmentStatus", "dateCreated", "dateModified")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "studyKey"))) { #optional property not found
            $StudyKey = $null
        } else {
            $StudyKey = $JsonParameters.PSobject.Properties["studyKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "siteId"))) { #optional property not found
            $SiteId = $null
        } else {
            $SiteId = $JsonParameters.PSobject.Properties["siteId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "siteName"))) { #optional property not found
            $SiteName = $null
        } else {
            $SiteName = $JsonParameters.PSobject.Properties["siteName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "siteEnrollmentStatus"))) { #optional property not found
            $SiteEnrollmentStatus = $null
        } else {
            $SiteEnrollmentStatus = $JsonParameters.PSobject.Properties["siteEnrollmentStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateModified"))) { #optional property not found
            $DateModified = $null
        } else {
            $DateModified = $JsonParameters.PSobject.Properties["dateModified"].value
        }

        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "siteId" = ${SiteId}
            "siteName" = ${SiteName}
            "siteEnrollmentStatus" = ${SiteEnrollmentStatus}
            "dateCreated" = ${DateCreated}
            "dateModified" = ${DateModified}
        }

        return $PSO
    }

}

