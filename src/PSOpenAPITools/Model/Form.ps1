#
# Mednet EDC API
# The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
# Version: 1.3.6
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER StudyKey
Unique study key
.PARAMETER FormId
Mednet Form ID
.PARAMETER FormKey
User-defined form key
.PARAMETER FormName
Name of the form (eCRF)
.PARAMETER FormType
Type of the form (e.g., Subject or Site)
.PARAMETER Revision
Number of modifications (revisions) of the form metadata
.PARAMETER EmbeddedLog
Whether the form has an embedded log
.PARAMETER EnforceOwnership
Whether the form enforces record ownership
.PARAMETER UserAgreement
Whether the form requires a user agreement
.PARAMETER SubjectRecordReport
Whether the form is marked as a subject record report
.PARAMETER UnscheduledVisit
Whether the form is included in unscheduled visits
.PARAMETER OtherForms
Whether the form is included in Other Forms category
.PARAMETER EproForm
Whether the form is an ePRO (electronic patient reported outcome) form
.PARAMETER AllowCopy
Whether the form allows copying of data
.PARAMETER Disabled
Whether the form is soft-deleted (disabled)
.PARAMETER DateCreated
Date when this form was created
.PARAMETER DateModified
Date when this form was last modified
.OUTPUTS

Form<PSCustomObject>
#>

function Initialize-Form {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StudyKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FormId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FormKey},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FormName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FormType},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Revision},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EmbeddedLog},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EnforceOwnership},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UserAgreement},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${SubjectRecordReport},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UnscheduledVisit},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${OtherForms},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${EproForm},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${AllowCopy},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Disabled},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateCreated},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateModified}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Form' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "formId" = ${FormId}
            "formKey" = ${FormKey}
            "formName" = ${FormName}
            "formType" = ${FormType}
            "revision" = ${Revision}
            "embeddedLog" = ${EmbeddedLog}
            "enforceOwnership" = ${EnforceOwnership}
            "userAgreement" = ${UserAgreement}
            "subjectRecordReport" = ${SubjectRecordReport}
            "unscheduledVisit" = ${UnscheduledVisit}
            "otherForms" = ${OtherForms}
            "eproForm" = ${EproForm}
            "allowCopy" = ${AllowCopy}
            "disabled" = ${Disabled}
            "dateCreated" = ${DateCreated}
            "dateModified" = ${DateModified}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Form<PSCustomObject>

.DESCRIPTION

Convert from JSON to Form<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Form<PSCustomObject>
#>
function ConvertFrom-JsonToForm {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Form' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Form
        $AllProperties = ("studyKey", "formId", "formKey", "formName", "formType", "revision", "embeddedLog", "enforceOwnership", "userAgreement", "subjectRecordReport", "unscheduledVisit", "otherForms", "eproForm", "allowCopy", "disabled", "dateCreated", "dateModified")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "studyKey"))) { #optional property not found
            $StudyKey = $null
        } else {
            $StudyKey = $JsonParameters.PSobject.Properties["studyKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formId"))) { #optional property not found
            $FormId = $null
        } else {
            $FormId = $JsonParameters.PSobject.Properties["formId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formKey"))) { #optional property not found
            $FormKey = $null
        } else {
            $FormKey = $JsonParameters.PSobject.Properties["formKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formName"))) { #optional property not found
            $FormName = $null
        } else {
            $FormName = $JsonParameters.PSobject.Properties["formName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formType"))) { #optional property not found
            $FormType = $null
        } else {
            $FormType = $JsonParameters.PSobject.Properties["formType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "revision"))) { #optional property not found
            $Revision = $null
        } else {
            $Revision = $JsonParameters.PSobject.Properties["revision"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "embeddedLog"))) { #optional property not found
            $EmbeddedLog = $null
        } else {
            $EmbeddedLog = $JsonParameters.PSobject.Properties["embeddedLog"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enforceOwnership"))) { #optional property not found
            $EnforceOwnership = $null
        } else {
            $EnforceOwnership = $JsonParameters.PSobject.Properties["enforceOwnership"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "userAgreement"))) { #optional property not found
            $UserAgreement = $null
        } else {
            $UserAgreement = $JsonParameters.PSobject.Properties["userAgreement"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectRecordReport"))) { #optional property not found
            $SubjectRecordReport = $null
        } else {
            $SubjectRecordReport = $JsonParameters.PSobject.Properties["subjectRecordReport"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unscheduledVisit"))) { #optional property not found
            $UnscheduledVisit = $null
        } else {
            $UnscheduledVisit = $JsonParameters.PSobject.Properties["unscheduledVisit"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "otherForms"))) { #optional property not found
            $OtherForms = $null
        } else {
            $OtherForms = $JsonParameters.PSobject.Properties["otherForms"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "eproForm"))) { #optional property not found
            $EproForm = $null
        } else {
            $EproForm = $JsonParameters.PSobject.Properties["eproForm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "allowCopy"))) { #optional property not found
            $AllowCopy = $null
        } else {
            $AllowCopy = $JsonParameters.PSobject.Properties["allowCopy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disabled"))) { #optional property not found
            $Disabled = $null
        } else {
            $Disabled = $JsonParameters.PSobject.Properties["disabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateModified"))) { #optional property not found
            $DateModified = $null
        } else {
            $DateModified = $JsonParameters.PSobject.Properties["dateModified"].value
        }

        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "formId" = ${FormId}
            "formKey" = ${FormKey}
            "formName" = ${FormName}
            "formType" = ${FormType}
            "revision" = ${Revision}
            "embeddedLog" = ${EmbeddedLog}
            "enforceOwnership" = ${EnforceOwnership}
            "userAgreement" = ${UserAgreement}
            "subjectRecordReport" = ${SubjectRecordReport}
            "unscheduledVisit" = ${UnscheduledVisit}
            "otherForms" = ${OtherForms}
            "eproForm" = ${EproForm}
            "allowCopy" = ${AllowCopy}
            "disabled" = ${Disabled}
            "dateCreated" = ${DateCreated}
            "dateModified" = ${DateModified}
        }

        return $PSO
    }

}

