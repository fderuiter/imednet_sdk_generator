#
# Mednet EDC API
# The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
# Version: 1.3.6
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER StudyKey
Unique study key
.PARAMETER SubjectId
Mednet subject ID (internal numeric ID)
.PARAMETER SubjectOid
Client-assigned subject object identifier (OID)
.PARAMETER SubjectKey
Protocol-assigned subject identifier (display ID)
.PARAMETER SubjectStatus
Current status of the subject (e.g., Enrolled)
.PARAMETER SiteId
Mednet site ID the subject is associated with
.PARAMETER SiteName
Name of the site the subject is associated with
.PARAMETER Deleted
Whether the subject is marked as deleted
.PARAMETER EnrollmentStartDate
Subjectâ€™s enrollment start date
.PARAMETER DateCreated
Date when this subject record was created
.PARAMETER DateModified
Date when this subject record was last modified
.PARAMETER Keywords
List of keywords associated with the subject
.OUTPUTS

Subject<PSCustomObject>
#>

function Initialize-Subject {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StudyKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SubjectId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubjectOid},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubjectKey},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubjectStatus},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SiteId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SiteName},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Deleted},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EnrollmentStartDate},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateCreated},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateModified},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Keywords}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Subject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "subjectId" = ${SubjectId}
            "subjectOid" = ${SubjectOid}
            "subjectKey" = ${SubjectKey}
            "subjectStatus" = ${SubjectStatus}
            "siteId" = ${SiteId}
            "siteName" = ${SiteName}
            "deleted" = ${Deleted}
            "enrollmentStartDate" = ${EnrollmentStartDate}
            "dateCreated" = ${DateCreated}
            "dateModified" = ${DateModified}
            "keywords" = ${Keywords}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Subject<PSCustomObject>

.DESCRIPTION

Convert from JSON to Subject<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Subject<PSCustomObject>
#>
function ConvertFrom-JsonToSubject {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Subject' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Subject
        $AllProperties = ("studyKey", "subjectId", "subjectOid", "subjectKey", "subjectStatus", "siteId", "siteName", "deleted", "enrollmentStartDate", "dateCreated", "dateModified", "keywords")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "studyKey"))) { #optional property not found
            $StudyKey = $null
        } else {
            $StudyKey = $JsonParameters.PSobject.Properties["studyKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectId"))) { #optional property not found
            $SubjectId = $null
        } else {
            $SubjectId = $JsonParameters.PSobject.Properties["subjectId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectOid"))) { #optional property not found
            $SubjectOid = $null
        } else {
            $SubjectOid = $JsonParameters.PSobject.Properties["subjectOid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectKey"))) { #optional property not found
            $SubjectKey = $null
        } else {
            $SubjectKey = $JsonParameters.PSobject.Properties["subjectKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectStatus"))) { #optional property not found
            $SubjectStatus = $null
        } else {
            $SubjectStatus = $JsonParameters.PSobject.Properties["subjectStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "siteId"))) { #optional property not found
            $SiteId = $null
        } else {
            $SiteId = $JsonParameters.PSobject.Properties["siteId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "siteName"))) { #optional property not found
            $SiteName = $null
        } else {
            $SiteName = $JsonParameters.PSobject.Properties["siteName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deleted"))) { #optional property not found
            $Deleted = $null
        } else {
            $Deleted = $JsonParameters.PSobject.Properties["deleted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "enrollmentStartDate"))) { #optional property not found
            $EnrollmentStartDate = $null
        } else {
            $EnrollmentStartDate = $JsonParameters.PSobject.Properties["enrollmentStartDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateModified"))) { #optional property not found
            $DateModified = $null
        } else {
            $DateModified = $JsonParameters.PSobject.Properties["dateModified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "keywords"))) { #optional property not found
            $Keywords = $null
        } else {
            $Keywords = $JsonParameters.PSobject.Properties["keywords"].value
        }

        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "subjectId" = ${SubjectId}
            "subjectOid" = ${SubjectOid}
            "subjectKey" = ${SubjectKey}
            "subjectStatus" = ${SubjectStatus}
            "siteId" = ${SiteId}
            "siteName" = ${SiteName}
            "deleted" = ${Deleted}
            "enrollmentStartDate" = ${EnrollmentStartDate}
            "dateCreated" = ${DateCreated}
            "dateModified" = ${DateModified}
            "keywords" = ${Keywords}
        }

        return $PSO
    }

}

