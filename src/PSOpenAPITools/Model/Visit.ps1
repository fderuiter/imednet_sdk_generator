#
# Mednet EDC API
# The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
# Version: 1.3.6
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER StudyKey
Unique study key
.PARAMETER VisitId
Unique system identifier for the subject visit instance
.PARAMETER IntervalId
Unique system identifier of the interval definition for this visit
.PARAMETER IntervalName
Name of the interval (visit) for this visit instance
.PARAMETER SubjectId
Mednet subject ID of the subject
.PARAMETER SubjectKey
Protocol-assigned subject identifier
.PARAMETER StartDate
Start date of the visit window (in YYYY-MM-DD format)
.PARAMETER EndDate
End date of the visit window (in YYYY-MM-DD format)
.PARAMETER DueDate
Due date of the visit (in YYYY-MM-DD format), if applicable
.PARAMETER VisitDate
Actual date the visit took place (in YYYY-MM-DD format)
.PARAMETER VisitDateForm
Name of the form used to capture the actual visit date
.PARAMETER VisitDateQuestion
Variable name of the field capturing the actual visit date
.PARAMETER Deleted
Whether the visit instance is marked as deleted
.PARAMETER DateCreated
Date when this visit record was created
.PARAMETER DateModified
Date when this visit record was last modified
.OUTPUTS

Visit<PSCustomObject>
#>

function Initialize-Visit {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StudyKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VisitId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${IntervalId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IntervalName},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SubjectId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubjectKey},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StartDate},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${EndDate},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DueDate},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VisitDate},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VisitDateForm},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${VisitDateQuestion},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Deleted},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateCreated},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateModified}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Visit' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "visitId" = ${VisitId}
            "intervalId" = ${IntervalId}
            "intervalName" = ${IntervalName}
            "subjectId" = ${SubjectId}
            "subjectKey" = ${SubjectKey}
            "startDate" = ${StartDate}
            "endDate" = ${EndDate}
            "dueDate" = ${DueDate}
            "visitDate" = ${VisitDate}
            "visitDateForm" = ${VisitDateForm}
            "visitDateQuestion" = ${VisitDateQuestion}
            "deleted" = ${Deleted}
            "dateCreated" = ${DateCreated}
            "dateModified" = ${DateModified}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Visit<PSCustomObject>

.DESCRIPTION

Convert from JSON to Visit<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Visit<PSCustomObject>
#>
function ConvertFrom-JsonToVisit {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Visit' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Visit
        $AllProperties = ("studyKey", "visitId", "intervalId", "intervalName", "subjectId", "subjectKey", "startDate", "endDate", "dueDate", "visitDate", "visitDateForm", "visitDateQuestion", "deleted", "dateCreated", "dateModified")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "studyKey"))) { #optional property not found
            $StudyKey = $null
        } else {
            $StudyKey = $JsonParameters.PSobject.Properties["studyKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visitId"))) { #optional property not found
            $VisitId = $null
        } else {
            $VisitId = $JsonParameters.PSobject.Properties["visitId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "intervalId"))) { #optional property not found
            $IntervalId = $null
        } else {
            $IntervalId = $JsonParameters.PSobject.Properties["intervalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "intervalName"))) { #optional property not found
            $IntervalName = $null
        } else {
            $IntervalName = $JsonParameters.PSobject.Properties["intervalName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectId"))) { #optional property not found
            $SubjectId = $null
        } else {
            $SubjectId = $JsonParameters.PSobject.Properties["subjectId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectKey"))) { #optional property not found
            $SubjectKey = $null
        } else {
            $SubjectKey = $JsonParameters.PSobject.Properties["subjectKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startDate"))) { #optional property not found
            $StartDate = $null
        } else {
            $StartDate = $JsonParameters.PSobject.Properties["startDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "endDate"))) { #optional property not found
            $EndDate = $null
        } else {
            $EndDate = $JsonParameters.PSobject.Properties["endDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dueDate"))) { #optional property not found
            $DueDate = $null
        } else {
            $DueDate = $JsonParameters.PSobject.Properties["dueDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visitDate"))) { #optional property not found
            $VisitDate = $null
        } else {
            $VisitDate = $JsonParameters.PSobject.Properties["visitDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visitDateForm"))) { #optional property not found
            $VisitDateForm = $null
        } else {
            $VisitDateForm = $JsonParameters.PSobject.Properties["visitDateForm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visitDateQuestion"))) { #optional property not found
            $VisitDateQuestion = $null
        } else {
            $VisitDateQuestion = $JsonParameters.PSobject.Properties["visitDateQuestion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deleted"))) { #optional property not found
            $Deleted = $null
        } else {
            $Deleted = $JsonParameters.PSobject.Properties["deleted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateModified"))) { #optional property not found
            $DateModified = $null
        } else {
            $DateModified = $JsonParameters.PSobject.Properties["dateModified"].value
        }

        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "visitId" = ${VisitId}
            "intervalId" = ${IntervalId}
            "intervalName" = ${IntervalName}
            "subjectId" = ${SubjectId}
            "subjectKey" = ${SubjectKey}
            "startDate" = ${StartDate}
            "endDate" = ${EndDate}
            "dueDate" = ${DueDate}
            "visitDate" = ${VisitDate}
            "visitDateForm" = ${VisitDateForm}
            "visitDateQuestion" = ${VisitDateQuestion}
            "deleted" = ${Deleted}
            "dateCreated" = ${DateCreated}
            "dateModified" = ${DateModified}
        }

        return $PSO
    }

}

