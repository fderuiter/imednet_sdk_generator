#
# Mednet EDC API
# The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
# Version: 1.3.6
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER StudyKey
Unique study key
.PARAMETER SiteName
Name of the site associated with the coded data
.PARAMETER SiteId
Site ID associated with the coded data
.PARAMETER SubjectId
Subject ID associated with the coded data
.PARAMETER SubjectKey
Subject key (display ID) associated with the coded data
.PARAMETER FormId
Form ID where the coded data originates
.PARAMETER FormName
Name of the form where the coded data originates
.PARAMETER FormKey
Form key where the coded data originates
.PARAMETER Revision
Revision number of the coding entry
.PARAMETER RecordId
Record ID associated with the coded data
.PARAMETER Variable
Variable name (field) that was coded
.PARAMETER Value
Original value entered that required coding
.PARAMETER CodingId
Mednet coding ID
.PARAMETER Code
Standardized code assigned (e.g., dictionary term)
.PARAMETER CodedBy
Name of the user who performed the coding
.PARAMETER Reason
Reason for coding or any notes on changes
.PARAMETER DictionaryName
Name of the dictionary used (e.g., MedDRA)
.PARAMETER DictionaryVersion
Version of the dictionary used
.PARAMETER DateCoded
Date when the coding was performed
.OUTPUTS

Coding<PSCustomObject>
#>

function Initialize-Coding {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StudyKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SiteName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SiteId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SubjectId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubjectKey},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FormId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FormName},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FormKey},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Revision},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RecordId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Variable},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Value},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CodingId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Code},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${CodedBy},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Reason},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DictionaryName},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DictionaryVersion},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateCoded}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Coding' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "siteName" = ${SiteName}
            "siteId" = ${SiteId}
            "subjectId" = ${SubjectId}
            "subjectKey" = ${SubjectKey}
            "formId" = ${FormId}
            "formName" = ${FormName}
            "formKey" = ${FormKey}
            "revision" = ${Revision}
            "recordId" = ${RecordId}
            "variable" = ${Variable}
            "value" = ${Value}
            "codingId" = ${CodingId}
            "code" = ${Code}
            "codedBy" = ${CodedBy}
            "reason" = ${Reason}
            "dictionaryName" = ${DictionaryName}
            "dictionaryVersion" = ${DictionaryVersion}
            "dateCoded" = ${DateCoded}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Coding<PSCustomObject>

.DESCRIPTION

Convert from JSON to Coding<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Coding<PSCustomObject>
#>
function ConvertFrom-JsonToCoding {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Coding' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Coding
        $AllProperties = ("studyKey", "siteName", "siteId", "subjectId", "subjectKey", "formId", "formName", "formKey", "revision", "recordId", "variable", "value", "codingId", "code", "codedBy", "reason", "dictionaryName", "dictionaryVersion", "dateCoded")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "studyKey"))) { #optional property not found
            $StudyKey = $null
        } else {
            $StudyKey = $JsonParameters.PSobject.Properties["studyKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "siteName"))) { #optional property not found
            $SiteName = $null
        } else {
            $SiteName = $JsonParameters.PSobject.Properties["siteName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "siteId"))) { #optional property not found
            $SiteId = $null
        } else {
            $SiteId = $JsonParameters.PSobject.Properties["siteId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectId"))) { #optional property not found
            $SubjectId = $null
        } else {
            $SubjectId = $JsonParameters.PSobject.Properties["subjectId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectKey"))) { #optional property not found
            $SubjectKey = $null
        } else {
            $SubjectKey = $JsonParameters.PSobject.Properties["subjectKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formId"))) { #optional property not found
            $FormId = $null
        } else {
            $FormId = $JsonParameters.PSobject.Properties["formId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formName"))) { #optional property not found
            $FormName = $null
        } else {
            $FormName = $JsonParameters.PSobject.Properties["formName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formKey"))) { #optional property not found
            $FormKey = $null
        } else {
            $FormKey = $JsonParameters.PSobject.Properties["formKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "revision"))) { #optional property not found
            $Revision = $null
        } else {
            $Revision = $JsonParameters.PSobject.Properties["revision"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recordId"))) { #optional property not found
            $RecordId = $null
        } else {
            $RecordId = $JsonParameters.PSobject.Properties["recordId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "variable"))) { #optional property not found
            $Variable = $null
        } else {
            $Variable = $JsonParameters.PSobject.Properties["variable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "value"))) { #optional property not found
            $Value = $null
        } else {
            $Value = $JsonParameters.PSobject.Properties["value"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "codingId"))) { #optional property not found
            $CodingId = $null
        } else {
            $CodingId = $JsonParameters.PSobject.Properties["codingId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "code"))) { #optional property not found
            $Code = $null
        } else {
            $Code = $JsonParameters.PSobject.Properties["code"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "codedBy"))) { #optional property not found
            $CodedBy = $null
        } else {
            $CodedBy = $JsonParameters.PSobject.Properties["codedBy"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reason"))) { #optional property not found
            $Reason = $null
        } else {
            $Reason = $JsonParameters.PSobject.Properties["reason"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dictionaryName"))) { #optional property not found
            $DictionaryName = $null
        } else {
            $DictionaryName = $JsonParameters.PSobject.Properties["dictionaryName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dictionaryVersion"))) { #optional property not found
            $DictionaryVersion = $null
        } else {
            $DictionaryVersion = $JsonParameters.PSobject.Properties["dictionaryVersion"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCoded"))) { #optional property not found
            $DateCoded = $null
        } else {
            $DateCoded = $JsonParameters.PSobject.Properties["dateCoded"].value
        }

        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "siteName" = ${SiteName}
            "siteId" = ${SiteId}
            "subjectId" = ${SubjectId}
            "subjectKey" = ${SubjectKey}
            "formId" = ${FormId}
            "formName" = ${FormName}
            "formKey" = ${FormKey}
            "revision" = ${Revision}
            "recordId" = ${RecordId}
            "variable" = ${Variable}
            "value" = ${Value}
            "codingId" = ${CodingId}
            "code" = ${Code}
            "codedBy" = ${CodedBy}
            "reason" = ${Reason}
            "dictionaryName" = ${DictionaryName}
            "dictionaryVersion" = ${DictionaryVersion}
            "dateCoded" = ${DateCoded}
        }

        return $PSO
    }

}

