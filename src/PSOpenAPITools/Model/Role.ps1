#
# Mednet EDC API
# The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
# Version: 1.3.6
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER DateCreated
Timestamp when the role assignment was created (as [year, month, day, hour, minute, second, nanosecond])
.PARAMETER DateModified
Timestamp when the role assignment was last modified
.PARAMETER RoleId
Unique role ID (UUID)
.PARAMETER CommunityId
Community ID or level associated with the role
.PARAMETER Name
Name of the role
.PARAMETER Description
Description of the role
.PARAMETER Level
Role level or hierarchy
.PARAMETER Type
Role type/category
.PARAMETER Inactive
Whether the role is inactive
.OUTPUTS

Role<PSCustomObject>
#>

function Initialize-Role {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${DateCreated},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [Int32[]]
        ${DateModified},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RoleId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CommunityId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Level},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Inactive}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Role' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "dateCreated" = ${DateCreated}
            "dateModified" = ${DateModified}
            "roleId" = ${RoleId}
            "communityId" = ${CommunityId}
            "name" = ${Name}
            "description" = ${Description}
            "level" = ${Level}
            "type" = ${Type}
            "inactive" = ${Inactive}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Role<PSCustomObject>

.DESCRIPTION

Convert from JSON to Role<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Role<PSCustomObject>
#>
function ConvertFrom-JsonToRole {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Role' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Role
        $AllProperties = ("dateCreated", "dateModified", "roleId", "communityId", "name", "description", "level", "type", "inactive")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateModified"))) { #optional property not found
            $DateModified = $null
        } else {
            $DateModified = $JsonParameters.PSobject.Properties["dateModified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "roleId"))) { #optional property not found
            $RoleId = $null
        } else {
            $RoleId = $JsonParameters.PSobject.Properties["roleId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "communityId"))) { #optional property not found
            $CommunityId = $null
        } else {
            $CommunityId = $JsonParameters.PSobject.Properties["communityId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "level"))) { #optional property not found
            $Level = $null
        } else {
            $Level = $JsonParameters.PSobject.Properties["level"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "inactive"))) { #optional property not found
            $Inactive = $null
        } else {
            $Inactive = $JsonParameters.PSobject.Properties["inactive"].value
        }

        $PSO = [PSCustomObject]@{
            "dateCreated" = ${DateCreated}
            "dateModified" = ${DateModified}
            "roleId" = ${RoleId}
            "communityId" = ${CommunityId}
            "name" = ${Name}
            "description" = ${Description}
            "level" = ${Level}
            "type" = ${Type}
            "inactive" = ${Inactive}
        }

        return $PSO
    }

}

