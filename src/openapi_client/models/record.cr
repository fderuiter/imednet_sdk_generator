# #Mednet EDC API
#
##The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
#
#The version of the OpenAPI document: 1.3.6
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.14.0
#

require "big"
require "json"
require "yaml"
require "time"

module OpenAPIClient
  class Record
    include JSON::Serializable
    include YAML::Serializable

    # Optional properties
    # Unique study key
    @[JSON::Field(key: "studyKey", type: String?, nillable: true, emit_null: false)]
    property study_key : String?

    # Interval ID (visit definition) that this record is associated with
    @[JSON::Field(key: "intervalId", type: Int32?, nillable: true, emit_null: false)]
    property interval_id : Int32?

    # Form ID of the form this record instance belongs to
    @[JSON::Field(key: "formId", type: Int32?, nillable: true, emit_null: false)]
    property form_id : Int32?

    # Form key of the form for this record instance
    @[JSON::Field(key: "formKey", type: String?, nillable: true, emit_null: false)]
    property form_key : String?

    # Site ID associated with the record
    @[JSON::Field(key: "siteId", type: Int32?, nillable: true, emit_null: false)]
    property site_id : Int32?

    # Unique record ID
    @[JSON::Field(key: "recordId", type: Int32?, nillable: true, emit_null: false)]
    property record_id : Int32?

    # Client-assigned record OID
    @[JSON::Field(key: "recordOid", type: String?, nillable: true, emit_null: false)]
    property record_oid : String?

    # Type of record (e.g., SUBJECT for subject-related forms)
    @[JSON::Field(key: "recordType", type: String?, nillable: true, emit_null: false)]
    property record_type : String?

    # Current status of the record (e.g., Record Incomplete, Record Complete)
    @[JSON::Field(key: "recordStatus", type: String?, nillable: true, emit_null: false)]
    property record_status : String?

    # Whether the record is marked as deleted
    @[JSON::Field(key: "deleted", type: Bool?, nillable: true, emit_null: false)]
    property deleted : Bool?

    # Date when this record was created
    @[JSON::Field(key: "dateCreated", type: String?, nillable: true, emit_null: false)]
    property date_created : String?

    # Date when this record was last modified
    @[JSON::Field(key: "dateModified", type: String?, nillable: true, emit_null: false)]
    property date_modified : String?

    # Mednet subject ID that this record is associated with
    @[JSON::Field(key: "subjectId", type: Int32?, nillable: true, emit_null: false)]
    property subject_id : Int32?

    # Client-assigned subject OID for the subject this record is associated with
    @[JSON::Field(key: "subjectOid", type: String?, nillable: true, emit_null: false)]
    property subject_oid : String?

    # Subject display ID that this record is associated with
    @[JSON::Field(key: "subjectKey", type: String?, nillable: true, emit_null: false)]
    property subject_key : String?

    # Visit instance ID that this record is associated with (if applicable)
    @[JSON::Field(key: "visitId", type: Int32?, nillable: true, emit_null: false)]
    property visit_id : Int32?

    # Record ID of the parent record if this record is a subrecord (if applicable)
    @[JSON::Field(key: "parentRecordId", type: Int32?, nillable: true, emit_null: false)]
    property parent_record_id : Int32?

    # List of keywords associated with the record
    @[JSON::Field(key: "keywords", type: Array(Keyword)?, nillable: true, emit_null: false)]
    property keywords : Array(Keyword)?

    # Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.
    @[JSON::Field(key: "recordData", type: Hash(String, Object)?, nillable: true, emit_null: false)]
    property record_data : Hash(String, Object)?

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@study_key : String?, @interval_id : Int32?, @form_id : Int32?, @form_key : String?, @site_id : Int32?, @record_id : Int32?, @record_oid : String?, @record_type : String?, @record_status : String?, @deleted : Bool?, @date_created : String?, @date_modified : String?, @subject_id : Int32?, @subject_oid : String?, @subject_key : String?, @visit_id : Int32?, @parent_record_id : Int32?, @keywords : Array(Keyword)?, @record_data : Hash(String, Object)?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if self.same?(other)
      self.class == other.class &&
          study_key == other.study_key &&
          interval_id == other.interval_id &&
          form_id == other.form_id &&
          form_key == other.form_key &&
          site_id == other.site_id &&
          record_id == other.record_id &&
          record_oid == other.record_oid &&
          record_type == other.record_type &&
          record_status == other.record_status &&
          deleted == other.deleted &&
          date_created == other.date_created &&
          date_modified == other.date_modified &&
          subject_id == other.subject_id &&
          subject_oid == other.subject_oid &&
          subject_key == other.subject_key &&
          visit_id == other.visit_id &&
          parent_record_id == other.parent_record_id &&
          keywords == other.keywords &&
          record_data == other.record_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [study_key, interval_id, form_id, form_key, site_id, record_id, record_oid, record_type, record_status, deleted, date_created, date_modified, subject_id, subject_oid, subject_key, visit_id, parent_record_id, keywords, record_data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
