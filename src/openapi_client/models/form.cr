# #Mednet EDC API
#
##The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
#
#The version of the OpenAPI document: 1.3.6
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.14.0
#

require "big"
require "json"
require "yaml"
require "time"

module OpenAPIClient
  class Form
    include JSON::Serializable
    include YAML::Serializable

    # Optional properties
    # Unique study key
    @[JSON::Field(key: "studyKey", type: String?, nillable: true, emit_null: false)]
    property study_key : String?

    # Mednet Form ID
    @[JSON::Field(key: "formId", type: Int32?, nillable: true, emit_null: false)]
    property form_id : Int32?

    # User-defined form key
    @[JSON::Field(key: "formKey", type: String?, nillable: true, emit_null: false)]
    property form_key : String?

    # Name of the form (eCRF)
    @[JSON::Field(key: "formName", type: String?, nillable: true, emit_null: false)]
    property form_name : String?

    # Type of the form (e.g., Subject or Site)
    @[JSON::Field(key: "formType", type: String?, nillable: true, emit_null: false)]
    property form_type : String?

    # Number of modifications (revisions) of the form metadata
    @[JSON::Field(key: "revision", type: Int32?, nillable: true, emit_null: false)]
    property revision : Int32?

    # Whether the form has an embedded log
    @[JSON::Field(key: "embeddedLog", type: Bool?, nillable: true, emit_null: false)]
    property embedded_log : Bool?

    # Whether the form enforces record ownership
    @[JSON::Field(key: "enforceOwnership", type: Bool?, nillable: true, emit_null: false)]
    property enforce_ownership : Bool?

    # Whether the form requires a user agreement
    @[JSON::Field(key: "userAgreement", type: Bool?, nillable: true, emit_null: false)]
    property user_agreement : Bool?

    # Whether the form is marked as a subject record report
    @[JSON::Field(key: "subjectRecordReport", type: Bool?, nillable: true, emit_null: false)]
    property subject_record_report : Bool?

    # Whether the form is included in unscheduled visits
    @[JSON::Field(key: "unscheduledVisit", type: Bool?, nillable: true, emit_null: false)]
    property unscheduled_visit : Bool?

    # Whether the form is included in Other Forms category
    @[JSON::Field(key: "otherForms", type: Bool?, nillable: true, emit_null: false)]
    property other_forms : Bool?

    # Whether the form is an ePRO (electronic patient reported outcome) form
    @[JSON::Field(key: "eproForm", type: Bool?, nillable: true, emit_null: false)]
    property epro_form : Bool?

    # Whether the form allows copying of data
    @[JSON::Field(key: "allowCopy", type: Bool?, nillable: true, emit_null: false)]
    property allow_copy : Bool?

    # Whether the form is soft-deleted (disabled)
    @[JSON::Field(key: "disabled", type: Bool?, nillable: true, emit_null: false)]
    property disabled : Bool?

    # Date when this form was created
    @[JSON::Field(key: "dateCreated", type: String?, nillable: true, emit_null: false)]
    property date_created : String?

    # Date when this form was last modified
    @[JSON::Field(key: "dateModified", type: String?, nillable: true, emit_null: false)]
    property date_modified : String?

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@study_key : String?, @form_id : Int32?, @form_key : String?, @form_name : String?, @form_type : String?, @revision : Int32?, @embedded_log : Bool?, @enforce_ownership : Bool?, @user_agreement : Bool?, @subject_record_report : Bool?, @unscheduled_visit : Bool?, @other_forms : Bool?, @epro_form : Bool?, @allow_copy : Bool?, @disabled : Bool?, @date_created : String?, @date_modified : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if self.same?(other)
      self.class == other.class &&
          study_key == other.study_key &&
          form_id == other.form_id &&
          form_key == other.form_key &&
          form_name == other.form_name &&
          form_type == other.form_type &&
          revision == other.revision &&
          embedded_log == other.embedded_log &&
          enforce_ownership == other.enforce_ownership &&
          user_agreement == other.user_agreement &&
          subject_record_report == other.subject_record_report &&
          unscheduled_visit == other.unscheduled_visit &&
          other_forms == other.other_forms &&
          epro_form == other.epro_form &&
          allow_copy == other.allow_copy &&
          disabled == other.disabled &&
          date_created == other.date_created &&
          date_modified == other.date_modified
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [study_key, form_id, form_key, form_name, form_type, revision, embedded_log, enforce_ownership, user_agreement, subject_record_report, unscheduled_visit, other_forms, epro_form, allow_copy, disabled, date_created, date_modified].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
