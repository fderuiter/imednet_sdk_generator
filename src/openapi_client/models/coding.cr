# #Mednet EDC API
#
##The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
#
#The version of the OpenAPI document: 1.3.6
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.14.0
#

require "big"
require "json"
require "yaml"
require "time"

module OpenAPIClient
  class Coding
    include JSON::Serializable
    include YAML::Serializable

    # Optional properties
    # Unique study key
    @[JSON::Field(key: "studyKey", type: String?, nillable: true, emit_null: false)]
    property study_key : String?

    # Name of the site associated with the coded data
    @[JSON::Field(key: "siteName", type: String?, nillable: true, emit_null: false)]
    property site_name : String?

    # Site ID associated with the coded data
    @[JSON::Field(key: "siteId", type: Int32?, nillable: true, emit_null: false)]
    property site_id : Int32?

    # Subject ID associated with the coded data
    @[JSON::Field(key: "subjectId", type: Int32?, nillable: true, emit_null: false)]
    property subject_id : Int32?

    # Subject key (display ID) associated with the coded data
    @[JSON::Field(key: "subjectKey", type: String?, nillable: true, emit_null: false)]
    property subject_key : String?

    # Form ID where the coded data originates
    @[JSON::Field(key: "formId", type: Int32?, nillable: true, emit_null: false)]
    property form_id : Int32?

    # Name of the form where the coded data originates
    @[JSON::Field(key: "formName", type: String?, nillable: true, emit_null: false)]
    property form_name : String?

    # Form key where the coded data originates
    @[JSON::Field(key: "formKey", type: String?, nillable: true, emit_null: false)]
    property form_key : String?

    # Revision number of the coding entry
    @[JSON::Field(key: "revision", type: Int32?, nillable: true, emit_null: false)]
    property revision : Int32?

    # Record ID associated with the coded data
    @[JSON::Field(key: "recordId", type: Int32?, nillable: true, emit_null: false)]
    property record_id : Int32?

    # Variable name (field) that was coded
    @[JSON::Field(key: "variable", type: String?, nillable: true, emit_null: false)]
    property variable : String?

    # Original value entered that required coding
    @[JSON::Field(key: "value", type: String?, nillable: true, emit_null: false)]
    property value : String?

    # Mednet coding ID
    @[JSON::Field(key: "codingId", type: Int32?, nillable: true, emit_null: false)]
    property coding_id : Int32?

    # Standardized code assigned (e.g., dictionary term)
    @[JSON::Field(key: "code", type: String?, nillable: true, emit_null: false)]
    property code : String?

    # Name of the user who performed the coding
    @[JSON::Field(key: "codedBy", type: String?, nillable: true, emit_null: false)]
    property coded_by : String?

    # Reason for coding or any notes on changes
    @[JSON::Field(key: "reason", type: String?, nillable: true, emit_null: false)]
    property reason : String?

    # Name of the dictionary used (e.g., MedDRA)
    @[JSON::Field(key: "dictionaryName", type: String?, nillable: true, emit_null: false)]
    property dictionary_name : String?

    # Version of the dictionary used
    @[JSON::Field(key: "dictionaryVersion", type: String?, nillable: true, emit_null: false)]
    property dictionary_version : String?

    # Date when the coding was performed
    @[JSON::Field(key: "dateCoded", type: String?, nillable: true, emit_null: false)]
    property date_coded : String?

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@study_key : String?, @site_name : String?, @site_id : Int32?, @subject_id : Int32?, @subject_key : String?, @form_id : Int32?, @form_name : String?, @form_key : String?, @revision : Int32?, @record_id : Int32?, @variable : String?, @value : String?, @coding_id : Int32?, @code : String?, @coded_by : String?, @reason : String?, @dictionary_name : String?, @dictionary_version : String?, @date_coded : String?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if self.same?(other)
      self.class == other.class &&
          study_key == other.study_key &&
          site_name == other.site_name &&
          site_id == other.site_id &&
          subject_id == other.subject_id &&
          subject_key == other.subject_key &&
          form_id == other.form_id &&
          form_name == other.form_name &&
          form_key == other.form_key &&
          revision == other.revision &&
          record_id == other.record_id &&
          variable == other.variable &&
          value == other.value &&
          coding_id == other.coding_id &&
          code == other.code &&
          coded_by == other.coded_by &&
          reason == other.reason &&
          dictionary_name == other.dictionary_name &&
          dictionary_version == other.dictionary_version &&
          date_coded == other.date_coded
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [study_key, site_name, site_id, subject_id, subject_key, form_id, form_name, form_key, revision, record_id, variable, value, coding_id, code, coded_by, reason, dictionary_name, dictionary_version, date_coded].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
