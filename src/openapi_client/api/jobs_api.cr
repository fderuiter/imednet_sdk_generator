# #Mednet EDC API
#
##The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
#
#The version of the OpenAPI document: 1.3.6
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.14.0
#

require "uri"

module OpenAPIClient
  class JobsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve job status by batch ID
    # @param study_key [String] Study key identifying the study context for the request
    # @param batch_id [String] Batch ID of the job to retrieve
    # @return [Job]
    def get_job_status(study_key : String, batch_id : String)
      data, _status_code, _headers = get_job_status_with_http_info(study_key, batch_id)
      data
    end

    # Retrieve job status by batch ID
    # @param study_key [String] Study key identifying the study context for the request
    # @param batch_id [String] Batch ID of the job to retrieve
    # @return [Array<(Job, Integer, Hash)>] Job data, response status code and response headers
    def get_job_status_with_http_info(study_key : String, batch_id : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: JobsApi.get_job_status ..."}
      end
      # verify the required parameter "study_key" is set
      if @api_client.config.client_side_validation && study_key.nil?
        raise ArgumentError.new("Missing the required parameter 'study_key' when calling JobsApi.get_job_status")
      end
      # verify the required parameter "batch_id" is set
      if @api_client.config.client_side_validation && batch_id.nil?
        raise ArgumentError.new("Missing the required parameter 'batch_id' when calling JobsApi.get_job_status")
      end
      # resource path
      local_var_path = "/studies/{studyKey}/jobs/{batchId}".sub("{" + "studyKey" + "}", URI.encode_path(study_key.to_s)).sub("{" + "batchId" + "}", URI.encode_path(batch_id.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Job"

      # auth_names
      auth_names = ["apiKeyAuth", "securityKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"JobsApi.get_job_status",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: JobsApi#get_job_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Job.from_json(data), status_code, headers
    end
  end
end
