# #Mednet EDC API
#
##The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
#
#The version of the OpenAPI document: 1.3.6
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.14.0
#

require "../spec_helper"

# Unit tests for OpenAPIClient::Variable
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
Spectator.describe OpenAPIClient::Variable do

  describe "test an instance of Variable" do
    skip "should create an instance of Variable" do
      #instance = OpenAPIClient::Variable.new
      #expect(instance).to be_instance_of(OpenAPIClient::Variable)
    end
  end
  describe "test attribute 'study_key'" do
    skip "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  describe "test attribute 'variable_id'" do
    skip "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  describe "test attribute 'variable_type'" do
    skip "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
      # validator = Petstore::EnumTest::EnumAttributeValidator.new("String", ["TEXT", "TEXTAREA", "RADIO", "CHECKBOX", "DROPDOWN", "DATE", "NUMBER"])
      # validator.allowable_values.each do |value|
      #   expect { instance.variable_type = value }.not_to raise_error
      # end
    end
  end

  describe "test attribute 'variable_name'" do
    skip "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  describe "test attribute 'sequence'" do
    skip "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  describe "test attribute 'revision'" do
    skip "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  describe "test attribute 'disabled'" do
    skip "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  describe "test attribute 'date_created'" do
    skip "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  describe "test attribute 'date_modified'" do
    skip "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  describe "test attribute 'form_id'" do
    skip "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  describe "test attribute 'variable_oid'" do
    skip "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  describe "test attribute 'deleted'" do
    skip "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  describe "test attribute 'form_key'" do
    skip "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  describe "test attribute 'form_name'" do
    skip "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  describe "test attribute 'label'" do
    skip "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

  describe "test attribute 'blinded'" do
    skip "should work" do
      # assertion here. ref: https://crystal-lang.org/reference/guides/testing.html
    end
  end

end
