# #Mednet EDC API
#
##The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
#
#The version of the OpenAPI document: 1.3.6
#
#Generated by: https://openapi-generator.tech
#Generator version: 7.14.0
#

require "uri"

module OpenAPIClient
  class FormsApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List forms in a study
    # @param study_key [String] Study key identifying the study context for the request
    # @return [FormList]
    def list_forms(study_key : String, page : Int32? = nil, size : Int32? = nil, sort : String? = nil, filter : String? = nil)
      data, _status_code, _headers = list_forms_with_http_info(study_key, page, size, sort, filter)
      data
    end

    # List forms in a study
    # @param study_key [String] Study key identifying the study context for the request
    # @return [Array<(FormList, Integer, Hash)>] FormList data, response status code and response headers
    def list_forms_with_http_info(study_key : String, page : Int32? = nil, size : Int32? = nil, sort : String? = nil, filter : String? = nil)
      if @api_client.config.debugging
        Log.debug {"Calling API: FormsApi.list_forms ..."}
      end
      # verify the required parameter "study_key" is set
      if @api_client.config.client_side_validation && study_key.nil?
        raise ArgumentError.new("Missing the required parameter 'study_key' when calling FormsApi.list_forms")
      end
      if @api_client.config.client_side_validation && !page.nil? && page < 0
        raise ArgumentError.new("invalid value for \"page\" when calling FormsApi.list_forms, must be greater than or equal to 0.")
      end

      if @api_client.config.client_side_validation && !size.nil? && size > 500
        raise ArgumentError.new("invalid value for \"size\" when calling FormsApi.list_forms, must be smaller than or equal to 500.")
      end

      if @api_client.config.client_side_validation && !size.nil? && size < 1
        raise ArgumentError.new("invalid value for \"size\" when calling FormsApi.list_forms, must be greater than or equal to 1.")
      end

      # resource path
      local_var_path = "/studies/{studyKey}/forms".sub("{" + "studyKey" + "}", URI.encode_path(study_key.to_s))

      # cookie parameters
      cookie_params = Hash(String, String).new

      # query parameters
      query_params = Hash(String, String).new
      query_params["page"] = page.to_s unless page.nil?
      query_params["size"] = size.to_s unless size.nil?
      query_params["sort"] = sort.to_s unless sort.nil?
      query_params["filter"] = filter.to_s unless filter.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "FormList"

      # auth_names
      auth_names = ["apiKeyAuth", "securityKeyAuth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"FormsApi.list_forms",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        cookie_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: FormsApi#list_forms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return FormList.from_json(data), status_code, headers
    end
  end
end
