// tslint:disable
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    InlineObject,
    InlineObjectFromJSON,
    InlineObjectToJSON,
    InlineObject1,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    InlineObject2,
    InlineObject2FromJSON,
    InlineObject2ToJSON,
    InlineObject3,
    InlineObject3FromJSON,
    InlineObject3ToJSON,
    InlineObject5,
    InlineObject5FromJSON,
    InlineObject5ToJSON,
    Job,
    JobFromJSON,
    JobToJSON,
} from '../models';

export interface GetJobStatusRequest {
    studyKey: string;
    batchId: string;
}


/**
 * Retrieve job status by batch ID
 */
function getJobStatusRaw<T>(requestParameters: GetJobStatusRequest, requestConfig: runtime.TypedQueryConfig<T, Job> = {}): QueryConfig<T> {
    if (requestParameters.studyKey === null || requestParameters.studyKey === undefined) {
        throw new runtime.RequiredError('studyKey','Required parameter requestParameters.studyKey was null or undefined when calling getJobStatus.');
    }

    if (requestParameters.batchId === null || requestParameters.batchId === undefined) {
        throw new runtime.RequiredError('batchId','Required parameter requestParameters.batchId was null or undefined when calling getJobStatus.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['api_key', 'header'];
    meta.authType = ['api_key', 'header'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/studies/{studyKey}/jobs/{batchId}`.replace(`{${"studyKey"}}`, encodeURIComponent(String(requestParameters.studyKey))).replace(`{${"batchId"}}`, encodeURIComponent(String(requestParameters.batchId))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(JobFromJSON(body), text);
    }

    return config;
}

/**
* Retrieve job status by batch ID
*/
export function getJobStatus<T>(requestParameters: GetJobStatusRequest, requestConfig?: runtime.TypedQueryConfig<T, Job>): QueryConfig<T> {
    return getJobStatusRaw(requestParameters, requestConfig);
}

