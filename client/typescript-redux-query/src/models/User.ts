// tslint:disable
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Role,
    RoleFromJSON,
    RoleToJSON,
} from './';

/**
 * 
 * @export
 * @interface User
 */
export interface User  {
    /**
     * Unique user ID (UUID)
     * @type {string}
     * @memberof User
     */
    userId?: string;
    /**
     * User login name
     * @type {string}
     * @memberof User
     */
    login?: string;
    /**
     * User first name
     * @type {string}
     * @memberof User
     */
    firstName?: string;
    /**
     * User last name
     * @type {string}
     * @memberof User
     */
    lastName?: string;
    /**
     * User email address
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * Whether the user is active in the given study
     * @type {boolean}
     * @memberof User
     */
    userActiveInStudy?: boolean;
    /**
     * Roles that the user has in the study
     * @type {Array<Role>}
     * @memberof User
     */
    roles?: Array<Role>;
}

export function UserFromJSON(json: any): User {
    return {
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'login': !exists(json, 'login') ? undefined : json['login'],
        'firstName': !exists(json, 'firstName') ? undefined : json['firstName'],
        'lastName': !exists(json, 'lastName') ? undefined : json['lastName'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'userActiveInStudy': !exists(json, 'userActiveInStudy') ? undefined : json['userActiveInStudy'],
        'roles': !exists(json, 'roles') ? undefined : (json['roles'] as Array<any>).map(RoleFromJSON),
    };
}

export function UserToJSON(value?: User): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'userId': value.userId,
        'login': value.login,
        'firstName': value.firstName,
        'lastName': value.lastName,
        'email': value.email,
        'userActiveInStudy': value.userActiveInStudy,
        'roles': value.roles === undefined ? undefined : (value.roles as Array<any>).map(RoleToJSON),
    };
}


