// tslint:disable
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Form
 */
export interface Form  {
    /**
     * Unique study key
     * @type {string}
     * @memberof Form
     */
    studyKey?: string;
    /**
     * Mednet Form ID
     * @type {number}
     * @memberof Form
     */
    formId?: number;
    /**
     * User-defined form key
     * @type {string}
     * @memberof Form
     */
    formKey?: string;
    /**
     * Name of the form (eCRF)
     * @type {string}
     * @memberof Form
     */
    formName?: string;
    /**
     * Type of the form (e.g., Subject or Site)
     * @type {string}
     * @memberof Form
     */
    formType?: string;
    /**
     * Number of modifications (revisions) of the form metadata
     * @type {number}
     * @memberof Form
     */
    revision?: number;
    /**
     * Whether the form has an embedded log
     * @type {boolean}
     * @memberof Form
     */
    embeddedLog?: boolean;
    /**
     * Whether the form enforces record ownership
     * @type {boolean}
     * @memberof Form
     */
    enforceOwnership?: boolean;
    /**
     * Whether the form requires a user agreement
     * @type {boolean}
     * @memberof Form
     */
    userAgreement?: boolean;
    /**
     * Whether the form is marked as a subject record report
     * @type {boolean}
     * @memberof Form
     */
    subjectRecordReport?: boolean;
    /**
     * Whether the form is included in unscheduled visits
     * @type {boolean}
     * @memberof Form
     */
    unscheduledVisit?: boolean;
    /**
     * Whether the form is included in Other Forms category
     * @type {boolean}
     * @memberof Form
     */
    otherForms?: boolean;
    /**
     * Whether the form is an ePRO (electronic patient reported outcome) form
     * @type {boolean}
     * @memberof Form
     */
    eproForm?: boolean;
    /**
     * Whether the form allows copying of data
     * @type {boolean}
     * @memberof Form
     */
    allowCopy?: boolean;
    /**
     * Whether the form is soft-deleted (disabled)
     * @type {boolean}
     * @memberof Form
     */
    disabled?: boolean;
    /**
     * Date when this form was created
     * @type {string}
     * @memberof Form
     */
    dateCreated?: string;
    /**
     * Date when this form was last modified
     * @type {string}
     * @memberof Form
     */
    dateModified?: string;
}

export function FormFromJSON(json: any): Form {
    return {
        'studyKey': !exists(json, 'studyKey') ? undefined : json['studyKey'],
        'formId': !exists(json, 'formId') ? undefined : json['formId'],
        'formKey': !exists(json, 'formKey') ? undefined : json['formKey'],
        'formName': !exists(json, 'formName') ? undefined : json['formName'],
        'formType': !exists(json, 'formType') ? undefined : json['formType'],
        'revision': !exists(json, 'revision') ? undefined : json['revision'],
        'embeddedLog': !exists(json, 'embeddedLog') ? undefined : json['embeddedLog'],
        'enforceOwnership': !exists(json, 'enforceOwnership') ? undefined : json['enforceOwnership'],
        'userAgreement': !exists(json, 'userAgreement') ? undefined : json['userAgreement'],
        'subjectRecordReport': !exists(json, 'subjectRecordReport') ? undefined : json['subjectRecordReport'],
        'unscheduledVisit': !exists(json, 'unscheduledVisit') ? undefined : json['unscheduledVisit'],
        'otherForms': !exists(json, 'otherForms') ? undefined : json['otherForms'],
        'eproForm': !exists(json, 'eproForm') ? undefined : json['eproForm'],
        'allowCopy': !exists(json, 'allowCopy') ? undefined : json['allowCopy'],
        'disabled': !exists(json, 'disabled') ? undefined : json['disabled'],
        'dateCreated': !exists(json, 'dateCreated') ? undefined : json['dateCreated'],
        'dateModified': !exists(json, 'dateModified') ? undefined : json['dateModified'],
    };
}

export function FormToJSON(value?: Form): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'studyKey': value.studyKey,
        'formId': value.formId,
        'formKey': value.formKey,
        'formName': value.formName,
        'formType': value.formType,
        'revision': value.revision,
        'embeddedLog': value.embeddedLog,
        'enforceOwnership': value.enforceOwnership,
        'userAgreement': value.userAgreement,
        'subjectRecordReport': value.subjectRecordReport,
        'unscheduledVisit': value.unscheduledVisit,
        'otherForms': value.otherForms,
        'eproForm': value.eproForm,
        'allowCopy': value.allowCopy,
        'disabled': value.disabled,
        'dateCreated': value.dateCreated,
        'dateModified': value.dateModified,
    };
}


