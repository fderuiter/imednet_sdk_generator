// tslint:disable
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Visit
 */
export interface Visit  {
    /**
     * Unique study key
     * @type {string}
     * @memberof Visit
     */
    studyKey?: string;
    /**
     * Unique system identifier for the subject visit instance
     * @type {number}
     * @memberof Visit
     */
    visitId?: number;
    /**
     * Unique system identifier of the interval definition for this visit
     * @type {number}
     * @memberof Visit
     */
    intervalId?: number;
    /**
     * Name of the interval (visit) for this visit instance
     * @type {string}
     * @memberof Visit
     */
    intervalName?: string;
    /**
     * Mednet subject ID of the subject
     * @type {number}
     * @memberof Visit
     */
    subjectId?: number;
    /**
     * Protocol-assigned subject identifier
     * @type {string}
     * @memberof Visit
     */
    subjectKey?: string;
    /**
     * Start date of the visit window (in YYYY-MM-DD format)
     * @type {string}
     * @memberof Visit
     */
    startDate?: string;
    /**
     * End date of the visit window (in YYYY-MM-DD format)
     * @type {string}
     * @memberof Visit
     */
    endDate?: string;
    /**
     * Due date of the visit (in YYYY-MM-DD format), if applicable
     * @type {string}
     * @memberof Visit
     */
    dueDate?: string;
    /**
     * Actual date the visit took place (in YYYY-MM-DD format)
     * @type {string}
     * @memberof Visit
     */
    visitDate?: string;
    /**
     * Name of the form used to capture the actual visit date
     * @type {string}
     * @memberof Visit
     */
    visitDateForm?: string;
    /**
     * Variable name of the field capturing the actual visit date
     * @type {string}
     * @memberof Visit
     */
    visitDateQuestion?: string;
    /**
     * Whether the visit instance is marked as deleted
     * @type {boolean}
     * @memberof Visit
     */
    deleted?: boolean;
    /**
     * Date when this visit record was created
     * @type {string}
     * @memberof Visit
     */
    dateCreated?: string;
    /**
     * Date when this visit record was last modified
     * @type {string}
     * @memberof Visit
     */
    dateModified?: string;
}

export function VisitFromJSON(json: any): Visit {
    return {
        'studyKey': !exists(json, 'studyKey') ? undefined : json['studyKey'],
        'visitId': !exists(json, 'visitId') ? undefined : json['visitId'],
        'intervalId': !exists(json, 'intervalId') ? undefined : json['intervalId'],
        'intervalName': !exists(json, 'intervalName') ? undefined : json['intervalName'],
        'subjectId': !exists(json, 'subjectId') ? undefined : json['subjectId'],
        'subjectKey': !exists(json, 'subjectKey') ? undefined : json['subjectKey'],
        'startDate': !exists(json, 'startDate') ? undefined : json['startDate'],
        'endDate': !exists(json, 'endDate') ? undefined : json['endDate'],
        'dueDate': !exists(json, 'dueDate') ? undefined : json['dueDate'],
        'visitDate': !exists(json, 'visitDate') ? undefined : json['visitDate'],
        'visitDateForm': !exists(json, 'visitDateForm') ? undefined : json['visitDateForm'],
        'visitDateQuestion': !exists(json, 'visitDateQuestion') ? undefined : json['visitDateQuestion'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'dateCreated': !exists(json, 'dateCreated') ? undefined : json['dateCreated'],
        'dateModified': !exists(json, 'dateModified') ? undefined : json['dateModified'],
    };
}

export function VisitToJSON(value?: Visit): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'studyKey': value.studyKey,
        'visitId': value.visitId,
        'intervalId': value.intervalId,
        'intervalName': value.intervalName,
        'subjectId': value.subjectId,
        'subjectKey': value.subjectKey,
        'startDate': value.startDate,
        'endDate': value.endDate,
        'dueDate': value.dueDate,
        'visitDate': value.visitDate,
        'visitDateForm': value.visitDateForm,
        'visitDateQuestion': value.visitDateQuestion,
        'deleted': value.deleted,
        'dateCreated': value.dateCreated,
        'dateModified': value.dateModified,
    };
}


