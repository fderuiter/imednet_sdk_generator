// tslint:disable
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Variable
 */
export interface Variable  {
    /**
     * Unique study key
     * @type {string}
     * @memberof Variable
     */
    studyKey?: string;
    /**
     * Mednet variable ID
     * @type {number}
     * @memberof Variable
     */
    variableId?: number;
    /**
     * Type of the variable (field type), e.g., RADIO, TEXT, etc.
     * @type {string}
     * @memberof Variable
     */
    variableType?: VariableVariableTypeEnum;
    /**
     * Name of the variable (question text or label)
     * @type {string}
     * @memberof Variable
     */
    variableName?: string;
    /**
     * Sequence of the variable on the form
     * @type {number}
     * @memberof Variable
     */
    sequence?: number;
    /**
     * Number of modifications of the variable (via form metadata revisions)
     * @type {number}
     * @memberof Variable
     */
    revision?: number;
    /**
     * Whether the variable is marked as disabled (deleted)
     * @type {boolean}
     * @memberof Variable
     */
    disabled?: boolean;
    /**
     * Date when this variable was created
     * @type {string}
     * @memberof Variable
     */
    dateCreated?: string;
    /**
     * Date when this variable was last modified
     * @type {string}
     * @memberof Variable
     */
    dateModified?: string;
    /**
     * ID of the form that this variable belongs to
     * @type {number}
     * @memberof Variable
     */
    formId?: number;
    /**
     * Client-assigned variable OID
     * @type {string}
     * @memberof Variable
     */
    variableOid?: string;
    /**
     * Whether the variable is marked as deleted
     * @type {boolean}
     * @memberof Variable
     */
    deleted?: boolean;
    /**
     * Form key of the form that this variable belongs to
     * @type {string}
     * @memberof Variable
     */
    formKey?: string;
    /**
     * Name of the form that this variable belongs to
     * @type {string}
     * @memberof Variable
     */
    formName?: string;
    /**
     * User-defined identifier (field name) for the variable
     * @type {string}
     * @memberof Variable
     */
    label?: string;
    /**
     * Whether the variable is flagged as blinded (hidden in certain contexts)
     * @type {boolean}
     * @memberof Variable
     */
    blinded?: boolean;
}

export function VariableFromJSON(json: any): Variable {
    return {
        'studyKey': !exists(json, 'studyKey') ? undefined : json['studyKey'],
        'variableId': !exists(json, 'variableId') ? undefined : json['variableId'],
        'variableType': !exists(json, 'variableType') ? undefined : json['variableType'],
        'variableName': !exists(json, 'variableName') ? undefined : json['variableName'],
        'sequence': !exists(json, 'sequence') ? undefined : json['sequence'],
        'revision': !exists(json, 'revision') ? undefined : json['revision'],
        'disabled': !exists(json, 'disabled') ? undefined : json['disabled'],
        'dateCreated': !exists(json, 'dateCreated') ? undefined : json['dateCreated'],
        'dateModified': !exists(json, 'dateModified') ? undefined : json['dateModified'],
        'formId': !exists(json, 'formId') ? undefined : json['formId'],
        'variableOid': !exists(json, 'variableOid') ? undefined : json['variableOid'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'formKey': !exists(json, 'formKey') ? undefined : json['formKey'],
        'formName': !exists(json, 'formName') ? undefined : json['formName'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'blinded': !exists(json, 'blinded') ? undefined : json['blinded'],
    };
}

export function VariableToJSON(value?: Variable): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'studyKey': value.studyKey,
        'variableId': value.variableId,
        'variableType': value.variableType,
        'variableName': value.variableName,
        'sequence': value.sequence,
        'revision': value.revision,
        'disabled': value.disabled,
        'dateCreated': value.dateCreated,
        'dateModified': value.dateModified,
        'formId': value.formId,
        'variableOid': value.variableOid,
        'deleted': value.deleted,
        'formKey': value.formKey,
        'formName': value.formName,
        'label': value.label,
        'blinded': value.blinded,
    };
}

/**
* @export
* @enum {string}
*/
export enum VariableVariableTypeEnum {
    Text = 'TEXT',
    Textarea = 'TEXTAREA',
    Radio = 'RADIO',
    Checkbox = 'CHECKBOX',
    Dropdown = 'DROPDOWN',
    Date = 'DATE',
    Number = 'NUMBER'
}


