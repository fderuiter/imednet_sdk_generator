// tslint:disable
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RecordRevision
 */
export interface RecordRevision  {
    /**
     * Unique study key
     * @type {string}
     * @memberof RecordRevision
     */
    studyKey?: string;
    /**
     * Unique system identifier for the record revision
     * @type {number}
     * @memberof RecordRevision
     */
    recordRevisionId?: number;
    /**
     * Unique system identifier of the related record
     * @type {number}
     * @memberof RecordRevision
     */
    recordId?: number;
    /**
     * Client-assigned record OID (if any)
     * @type {string}
     * @memberof RecordRevision
     */
    recordOid?: string;
    /**
     * Revision number of the record (version of the record status)
     * @type {number}
     * @memberof RecordRevision
     */
    recordRevision?: number;
    /**
     * Revision number of the data within the record
     * @type {number}
     * @memberof RecordRevision
     */
    dataRevision?: number;
    /**
     * Status of the record at this revision (user-defined status label)
     * @type {string}
     * @memberof RecordRevision
     */
    recordStatus?: string;
    /**
     * Mednet subject ID related to the record
     * @type {number}
     * @memberof RecordRevision
     */
    subjectId?: number;
    /**
     * Client-assigned subject OID related to the record
     * @type {string}
     * @memberof RecordRevision
     */
    subjectOid?: string;
    /**
     * Subject display ID related to the record
     * @type {string}
     * @memberof RecordRevision
     */
    subjectKey?: string;
    /**
     * Site ID related to the record
     * @type {number}
     * @memberof RecordRevision
     */
    siteId?: number;
    /**
     * Form key of the form that the record belongs to
     * @type {string}
     * @memberof RecordRevision
     */
    formKey?: string;
    /**
     * Interval ID (visit definition) related to the record
     * @type {number}
     * @memberof RecordRevision
     */
    intervalId?: number;
    /**
     * Role name of the user who saved the record revision
     * @type {string}
     * @memberof RecordRevision
     */
    role?: string;
    /**
     * Username of the user who saved the record revision
     * @type {string}
     * @memberof RecordRevision
     */
    user?: string;
    /**
     * Reason for change, if provided (for audit trail)
     * @type {string}
     * @memberof RecordRevision
     */
    reasonForChange?: string;
    /**
     * Whether the record was deleted in this revision
     * @type {boolean}
     * @memberof RecordRevision
     */
    deleted?: boolean;
    /**
     * Date when this record revision was created
     * @type {string}
     * @memberof RecordRevision
     */
    dateCreated?: string;
}

export function RecordRevisionFromJSON(json: any): RecordRevision {
    return {
        'studyKey': !exists(json, 'studyKey') ? undefined : json['studyKey'],
        'recordRevisionId': !exists(json, 'recordRevisionId') ? undefined : json['recordRevisionId'],
        'recordId': !exists(json, 'recordId') ? undefined : json['recordId'],
        'recordOid': !exists(json, 'recordOid') ? undefined : json['recordOid'],
        'recordRevision': !exists(json, 'recordRevision') ? undefined : json['recordRevision'],
        'dataRevision': !exists(json, 'dataRevision') ? undefined : json['dataRevision'],
        'recordStatus': !exists(json, 'recordStatus') ? undefined : json['recordStatus'],
        'subjectId': !exists(json, 'subjectId') ? undefined : json['subjectId'],
        'subjectOid': !exists(json, 'subjectOid') ? undefined : json['subjectOid'],
        'subjectKey': !exists(json, 'subjectKey') ? undefined : json['subjectKey'],
        'siteId': !exists(json, 'siteId') ? undefined : json['siteId'],
        'formKey': !exists(json, 'formKey') ? undefined : json['formKey'],
        'intervalId': !exists(json, 'intervalId') ? undefined : json['intervalId'],
        'role': !exists(json, 'role') ? undefined : json['role'],
        'user': !exists(json, 'user') ? undefined : json['user'],
        'reasonForChange': !exists(json, 'reasonForChange') ? undefined : json['reasonForChange'],
        'deleted': !exists(json, 'deleted') ? undefined : json['deleted'],
        'dateCreated': !exists(json, 'dateCreated') ? undefined : json['dateCreated'],
    };
}

export function RecordRevisionToJSON(value?: RecordRevision): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'studyKey': value.studyKey,
        'recordRevisionId': value.recordRevisionId,
        'recordId': value.recordId,
        'recordOid': value.recordOid,
        'recordRevision': value.recordRevision,
        'dataRevision': value.dataRevision,
        'recordStatus': value.recordStatus,
        'subjectId': value.subjectId,
        'subjectOid': value.subjectOid,
        'subjectKey': value.subjectKey,
        'siteId': value.siteId,
        'formKey': value.formKey,
        'intervalId': value.intervalId,
        'role': value.role,
        'user': value.user,
        'reasonForChange': value.reasonForChange,
        'deleted': value.deleted,
        'dateCreated': value.dateCreated,
    };
}


