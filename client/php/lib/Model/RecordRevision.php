<?php
/**
 * RecordRevision
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API.
 *
 * The version of the OpenAPI document: 1.3.6
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RecordRevision Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RecordRevision implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RecordRevision';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'study_key' => 'string',
        'record_revision_id' => 'int',
        'record_id' => 'int',
        'record_oid' => 'string',
        'record_revision' => 'int',
        'data_revision' => 'int',
        'record_status' => 'string',
        'subject_id' => 'int',
        'subject_oid' => 'string',
        'subject_key' => 'string',
        'site_id' => 'int',
        'form_key' => 'string',
        'interval_id' => 'int',
        'role' => 'string',
        'user' => 'string',
        'reason_for_change' => 'string',
        'deleted' => 'bool',
        'date_created' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'study_key' => null,
        'record_revision_id' => null,
        'record_id' => null,
        'record_oid' => null,
        'record_revision' => null,
        'data_revision' => null,
        'record_status' => null,
        'subject_id' => null,
        'subject_oid' => null,
        'subject_key' => null,
        'site_id' => null,
        'form_key' => null,
        'interval_id' => null,
        'role' => null,
        'user' => null,
        'reason_for_change' => null,
        'deleted' => null,
        'date_created' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'study_key' => false,
        'record_revision_id' => false,
        'record_id' => false,
        'record_oid' => false,
        'record_revision' => false,
        'data_revision' => false,
        'record_status' => false,
        'subject_id' => false,
        'subject_oid' => false,
        'subject_key' => false,
        'site_id' => false,
        'form_key' => false,
        'interval_id' => false,
        'role' => false,
        'user' => false,
        'reason_for_change' => false,
        'deleted' => false,
        'date_created' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'study_key' => 'studyKey',
        'record_revision_id' => 'recordRevisionId',
        'record_id' => 'recordId',
        'record_oid' => 'recordOid',
        'record_revision' => 'recordRevision',
        'data_revision' => 'dataRevision',
        'record_status' => 'recordStatus',
        'subject_id' => 'subjectId',
        'subject_oid' => 'subjectOid',
        'subject_key' => 'subjectKey',
        'site_id' => 'siteId',
        'form_key' => 'formKey',
        'interval_id' => 'intervalId',
        'role' => 'role',
        'user' => 'user',
        'reason_for_change' => 'reasonForChange',
        'deleted' => 'deleted',
        'date_created' => 'dateCreated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'study_key' => 'setStudyKey',
        'record_revision_id' => 'setRecordRevisionId',
        'record_id' => 'setRecordId',
        'record_oid' => 'setRecordOid',
        'record_revision' => 'setRecordRevision',
        'data_revision' => 'setDataRevision',
        'record_status' => 'setRecordStatus',
        'subject_id' => 'setSubjectId',
        'subject_oid' => 'setSubjectOid',
        'subject_key' => 'setSubjectKey',
        'site_id' => 'setSiteId',
        'form_key' => 'setFormKey',
        'interval_id' => 'setIntervalId',
        'role' => 'setRole',
        'user' => 'setUser',
        'reason_for_change' => 'setReasonForChange',
        'deleted' => 'setDeleted',
        'date_created' => 'setDateCreated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'study_key' => 'getStudyKey',
        'record_revision_id' => 'getRecordRevisionId',
        'record_id' => 'getRecordId',
        'record_oid' => 'getRecordOid',
        'record_revision' => 'getRecordRevision',
        'data_revision' => 'getDataRevision',
        'record_status' => 'getRecordStatus',
        'subject_id' => 'getSubjectId',
        'subject_oid' => 'getSubjectOid',
        'subject_key' => 'getSubjectKey',
        'site_id' => 'getSiteId',
        'form_key' => 'getFormKey',
        'interval_id' => 'getIntervalId',
        'role' => 'getRole',
        'user' => 'getUser',
        'reason_for_change' => 'getReasonForChange',
        'deleted' => 'getDeleted',
        'date_created' => 'getDateCreated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('study_key', $data ?? [], null);
        $this->setIfExists('record_revision_id', $data ?? [], null);
        $this->setIfExists('record_id', $data ?? [], null);
        $this->setIfExists('record_oid', $data ?? [], null);
        $this->setIfExists('record_revision', $data ?? [], null);
        $this->setIfExists('data_revision', $data ?? [], null);
        $this->setIfExists('record_status', $data ?? [], null);
        $this->setIfExists('subject_id', $data ?? [], null);
        $this->setIfExists('subject_oid', $data ?? [], null);
        $this->setIfExists('subject_key', $data ?? [], null);
        $this->setIfExists('site_id', $data ?? [], null);
        $this->setIfExists('form_key', $data ?? [], null);
        $this->setIfExists('interval_id', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('reason_for_change', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets study_key
     *
     * @return string|null
     */
    public function getStudyKey()
    {
        return $this->container['study_key'];
    }

    /**
     * Sets study_key
     *
     * @param string|null $study_key Unique study key
     *
     * @return self
     */
    public function setStudyKey($study_key)
    {
        if (is_null($study_key)) {
            throw new \InvalidArgumentException('non-nullable study_key cannot be null');
        }
        $this->container['study_key'] = $study_key;

        return $this;
    }

    /**
     * Gets record_revision_id
     *
     * @return int|null
     */
    public function getRecordRevisionId()
    {
        return $this->container['record_revision_id'];
    }

    /**
     * Sets record_revision_id
     *
     * @param int|null $record_revision_id Unique system identifier for the record revision
     *
     * @return self
     */
    public function setRecordRevisionId($record_revision_id)
    {
        if (is_null($record_revision_id)) {
            throw new \InvalidArgumentException('non-nullable record_revision_id cannot be null');
        }
        $this->container['record_revision_id'] = $record_revision_id;

        return $this;
    }

    /**
     * Gets record_id
     *
     * @return int|null
     */
    public function getRecordId()
    {
        return $this->container['record_id'];
    }

    /**
     * Sets record_id
     *
     * @param int|null $record_id Unique system identifier of the related record
     *
     * @return self
     */
    public function setRecordId($record_id)
    {
        if (is_null($record_id)) {
            throw new \InvalidArgumentException('non-nullable record_id cannot be null');
        }
        $this->container['record_id'] = $record_id;

        return $this;
    }

    /**
     * Gets record_oid
     *
     * @return string|null
     */
    public function getRecordOid()
    {
        return $this->container['record_oid'];
    }

    /**
     * Sets record_oid
     *
     * @param string|null $record_oid Client-assigned record OID (if any)
     *
     * @return self
     */
    public function setRecordOid($record_oid)
    {
        if (is_null($record_oid)) {
            throw new \InvalidArgumentException('non-nullable record_oid cannot be null');
        }
        $this->container['record_oid'] = $record_oid;

        return $this;
    }

    /**
     * Gets record_revision
     *
     * @return int|null
     */
    public function getRecordRevision()
    {
        return $this->container['record_revision'];
    }

    /**
     * Sets record_revision
     *
     * @param int|null $record_revision Revision number of the record (version of the record status)
     *
     * @return self
     */
    public function setRecordRevision($record_revision)
    {
        if (is_null($record_revision)) {
            throw new \InvalidArgumentException('non-nullable record_revision cannot be null');
        }
        $this->container['record_revision'] = $record_revision;

        return $this;
    }

    /**
     * Gets data_revision
     *
     * @return int|null
     */
    public function getDataRevision()
    {
        return $this->container['data_revision'];
    }

    /**
     * Sets data_revision
     *
     * @param int|null $data_revision Revision number of the data within the record
     *
     * @return self
     */
    public function setDataRevision($data_revision)
    {
        if (is_null($data_revision)) {
            throw new \InvalidArgumentException('non-nullable data_revision cannot be null');
        }
        $this->container['data_revision'] = $data_revision;

        return $this;
    }

    /**
     * Gets record_status
     *
     * @return string|null
     */
    public function getRecordStatus()
    {
        return $this->container['record_status'];
    }

    /**
     * Sets record_status
     *
     * @param string|null $record_status Status of the record at this revision (user-defined status label)
     *
     * @return self
     */
    public function setRecordStatus($record_status)
    {
        if (is_null($record_status)) {
            throw new \InvalidArgumentException('non-nullable record_status cannot be null');
        }
        $this->container['record_status'] = $record_status;

        return $this;
    }

    /**
     * Gets subject_id
     *
     * @return int|null
     */
    public function getSubjectId()
    {
        return $this->container['subject_id'];
    }

    /**
     * Sets subject_id
     *
     * @param int|null $subject_id Mednet subject ID related to the record
     *
     * @return self
     */
    public function setSubjectId($subject_id)
    {
        if (is_null($subject_id)) {
            throw new \InvalidArgumentException('non-nullable subject_id cannot be null');
        }
        $this->container['subject_id'] = $subject_id;

        return $this;
    }

    /**
     * Gets subject_oid
     *
     * @return string|null
     */
    public function getSubjectOid()
    {
        return $this->container['subject_oid'];
    }

    /**
     * Sets subject_oid
     *
     * @param string|null $subject_oid Client-assigned subject OID related to the record
     *
     * @return self
     */
    public function setSubjectOid($subject_oid)
    {
        if (is_null($subject_oid)) {
            throw new \InvalidArgumentException('non-nullable subject_oid cannot be null');
        }
        $this->container['subject_oid'] = $subject_oid;

        return $this;
    }

    /**
     * Gets subject_key
     *
     * @return string|null
     */
    public function getSubjectKey()
    {
        return $this->container['subject_key'];
    }

    /**
     * Sets subject_key
     *
     * @param string|null $subject_key Subject display ID related to the record
     *
     * @return self
     */
    public function setSubjectKey($subject_key)
    {
        if (is_null($subject_key)) {
            throw new \InvalidArgumentException('non-nullable subject_key cannot be null');
        }
        $this->container['subject_key'] = $subject_key;

        return $this;
    }

    /**
     * Gets site_id
     *
     * @return int|null
     */
    public function getSiteId()
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     *
     * @param int|null $site_id Site ID related to the record
     *
     * @return self
     */
    public function setSiteId($site_id)
    {
        if (is_null($site_id)) {
            throw new \InvalidArgumentException('non-nullable site_id cannot be null');
        }
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets form_key
     *
     * @return string|null
     */
    public function getFormKey()
    {
        return $this->container['form_key'];
    }

    /**
     * Sets form_key
     *
     * @param string|null $form_key Form key of the form that the record belongs to
     *
     * @return self
     */
    public function setFormKey($form_key)
    {
        if (is_null($form_key)) {
            throw new \InvalidArgumentException('non-nullable form_key cannot be null');
        }
        $this->container['form_key'] = $form_key;

        return $this;
    }

    /**
     * Gets interval_id
     *
     * @return int|null
     */
    public function getIntervalId()
    {
        return $this->container['interval_id'];
    }

    /**
     * Sets interval_id
     *
     * @param int|null $interval_id Interval ID (visit definition) related to the record
     *
     * @return self
     */
    public function setIntervalId($interval_id)
    {
        if (is_null($interval_id)) {
            throw new \InvalidArgumentException('non-nullable interval_id cannot be null');
        }
        $this->container['interval_id'] = $interval_id;

        return $this;
    }

    /**
     * Gets role
     *
     * @return string|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param string|null $role Role name of the user who saved the record revision
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            throw new \InvalidArgumentException('non-nullable role cannot be null');
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user Username of the user who saved the record revision
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets reason_for_change
     *
     * @return string|null
     */
    public function getReasonForChange()
    {
        return $this->container['reason_for_change'];
    }

    /**
     * Sets reason_for_change
     *
     * @param string|null $reason_for_change Reason for change, if provided (for audit trail)
     *
     * @return self
     */
    public function setReasonForChange($reason_for_change)
    {
        if (is_null($reason_for_change)) {
            throw new \InvalidArgumentException('non-nullable reason_for_change cannot be null');
        }
        $this->container['reason_for_change'] = $reason_for_change;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted Whether the record was deleted in this revision
     *
     * @return self
     */
    public function setDeleted($deleted)
    {
        if (is_null($deleted)) {
            throw new \InvalidArgumentException('non-nullable deleted cannot be null');
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string|null $date_created Date when this record revision was created
     *
     * @return self
     */
    public function setDateCreated($date_created)
    {
        if (is_null($date_created)) {
            throw new \InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


