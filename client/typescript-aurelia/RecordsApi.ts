/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  RecordList,
  RecordJobStatus,
} from './models';

/**
 * createRecords - parameters interface
 */
export interface ICreateRecordsParams {
  studyKey: string;
  componentsSchemasRecordCreateRequestItem: Array<ComponentsSchemasRecordCreateRequestItem>;
}

/**
 * listRecords - parameters interface
 */
export interface IListRecordsParams {
  studyKey: string;
  page?: number;
  size?: number;
  sort?: string;
  filter?: string;
  recordDataFilter?: string;
}

/**
 * RecordsApi - API class
 */
@autoinject()
export class RecordsApi extends Api {

  /**
   * Creates a new RecordsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Add new record or update subject/record data
   * @param params.studyKey Study key identifying the study context for the request
   * @param params.componentsSchemasRecordCreateRequestItem An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update).
   */
  async createRecords(params: ICreateRecordsParams): Promise<RecordJobStatus> {
    // Verify required parameters are set
    this.ensureParamIsSet('createRecords', params, 'studyKey');
    this.ensureParamIsSet('createRecords', params, 'componentsSchemasRecordCreateRequestItem');

    // Create URL to call
    const url = `${this.basePath}/studies/{studyKey}/records`
      .replace(`{${'studyKey'}}`, encodeURIComponent(`${params['studyKey']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['componentsSchemasRecordCreateRequestItem'] || {}))

      // Authentication 'apiKeyAuth' required
      .withHeader('x-api-key', this.authStorage.getapiKeyAuth())
      // Authentication 'securityKeyAuth' required
      .withHeader('x-imn-security-key', this.authStorage.getsecurityKeyAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List records (eCRF instances) in a study
   * @param params.studyKey Study key identifying the study context for the request
   * @param params.page Page index to retrieve (0-based)
   * @param params.size Number of items to return per page (max 500)
   * @param params.sort Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated.
   * @param params.filter Optional filter criteria to apply, in the format &#x60;attribute&#x3D;&#x3D;value&#x60; with support for &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, !&#x3D;. Multiple criteria can be combined with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR).
   * @param params.recordDataFilter Optional filter criteria to apply on recordData fields (question responses). Supports &#x3D;&#x3D;, !&#x3D;, &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;~ (contains) and can combine multiple criteria with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR).
   */
  async listRecords(params: IListRecordsParams): Promise<RecordList> {
    // Verify required parameters are set
    this.ensureParamIsSet('listRecords', params, 'studyKey');

    // Create URL to call
    const url = `${this.basePath}/studies/{studyKey}/records`
      .replace(`{${'studyKey'}}`, encodeURIComponent(`${params['studyKey']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'page': params['page'],
        'size': params['size'],
        'sort': params['sort'],
        'filter': params['filter'],
        'recordDataFilter': params['recordDataFilter'],
      })

      // Authentication 'apiKeyAuth' required
      .withHeader('x-api-key', this.authStorage.getapiKeyAuth())
      // Authentication 'securityKeyAuth' required
      .withHeader('x-imn-security-key', this.authStorage.getsecurityKeyAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

