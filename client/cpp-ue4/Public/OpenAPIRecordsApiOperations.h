/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * OpenAPI spec version: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#pragma once

#include "OpenAPIBaseModel.h"
#include "OpenAPIRecordsApi.h"

#include "OpenAPIComponentsSchemasRecordCreateRequestItem.h"
#include "OpenAPIInlineObject.h"
#include "OpenAPIInlineObject1.h"
#include "OpenAPIInlineObject2.h"
#include "OpenAPIInlineObject3.h"
#include "OpenAPIInlineObject4.h"
#include "OpenAPIInlineObject5.h"
#include "OpenAPIRecordJobStatus.h"
#include "OpenAPIRecordList.h"

namespace OpenAPI
{

/* Add new record or update subject/record data

*/
class OPENAPI_API OpenAPIRecordsApi::CreateRecordsRequest : public Request
{
public:
    virtual ~CreateRecordsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Study key identifying the study context for the request */
	FString StudyKey;
	/* An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update). */
	TArray<OpenAPIComponentsSchemasRecordCreateRequestItem> OpenAPIComponentsSchemasRecordCreateRequestItem;
};

class OPENAPI_API OpenAPIRecordsApi::CreateRecordsResponse : public Response
{
public:
    virtual ~CreateRecordsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIRecordJobStatus Content;
};

/* List records (eCRF instances) in a study

*/
class OPENAPI_API OpenAPIRecordsApi::ListRecordsRequest : public Request
{
public:
    virtual ~ListRecordsRequest() {}
	void SetupHttpRequest(const FHttpRequestRef& HttpRequest) const final;
	FString ComputePath() const final;

	/* Study key identifying the study context for the request */
	FString StudyKey;
	/* Page index to retrieve (0-based) */
	TOptional<int32> Page;
	/* Number of items to return per page (max 500) */
	TOptional<int32> Size;
	/* Sorting criteria in the format `property,ASC` or `property,DESC`. Can be repeated. */
	TOptional<FString> Sort;
	/* Optional filter criteria to apply, in the format `attribute==value` with support for >, >=, <, <=, !=. Multiple criteria can be combined with `;` (AND) or `,` (OR). */
	TOptional<FString> Filter;
	/* Optional filter criteria to apply on recordData fields (question responses). Supports ==, !=, <, <=, >, >=, =~ (contains) and can combine multiple criteria with `;` (AND) or `,` (OR). */
	TOptional<FString> RecordDataFilter;
};

class OPENAPI_API OpenAPIRecordsApi::ListRecordsResponse : public Response
{
public:
    virtual ~ListRecordsResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonValue) final;

    OpenAPIRecordList Content;
};

}
