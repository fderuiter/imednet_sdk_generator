/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * OpenAPI spec version: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIVisitsApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

FString OpenAPIVisitsApi::ListVisitsRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("studyKey"), FStringFormatArg(ToUrlString(StudyKey)) } };

	FString Path = FString::Format(TEXT("/studies/{studyKey}/visits"), PathParams);

	TArray<FString> QueryParams;
	if(Page.IsSet())
	{
		QueryParams.Add(FString(TEXT("page=")) + ToUrlString(Page.GetValue()));
	}
	if(Size.IsSet())
	{
		QueryParams.Add(FString(TEXT("size=")) + ToUrlString(Size.GetValue()));
	}
	if(Sort.IsSet())
	{
		QueryParams.Add(FString(TEXT("sort=")) + ToUrlString(Sort.GetValue()));
	}
	if(Filter.IsSet())
	{
		QueryParams.Add(FString(TEXT("filter=")) + ToUrlString(Filter.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIVisitsApi::ListVisitsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIVisitsApi::ListVisitsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successful response with list of visits"));
		break;
	case 400:
		SetResponseString(TEXT("Bad request (malformed or invalid input)"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed or was not provided"));
		break;
	case 403:
		SetResponseString(TEXT("Authenticated but not allowed to access the resource"));
		break;
	case 404:
		SetResponseString(TEXT("The requested resource was not found"));
		break;
	case 500:
		SetResponseString(TEXT("Internal server error (unexpected condition encountered)"));
		break;
	}
}

bool OpenAPIVisitsApi::ListVisitsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

}
