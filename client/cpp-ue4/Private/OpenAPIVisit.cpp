/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * OpenAPI spec version: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIVisit.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIVisit::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (StudyKey.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("studyKey")); WriteJsonValue(Writer, StudyKey.GetValue());
	}
	if (VisitId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("visitId")); WriteJsonValue(Writer, VisitId.GetValue());
	}
	if (IntervalId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("intervalId")); WriteJsonValue(Writer, IntervalId.GetValue());
	}
	if (IntervalName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("intervalName")); WriteJsonValue(Writer, IntervalName.GetValue());
	}
	if (SubjectId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("subjectId")); WriteJsonValue(Writer, SubjectId.GetValue());
	}
	if (SubjectKey.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("subjectKey")); WriteJsonValue(Writer, SubjectKey.GetValue());
	}
	if (StartDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("startDate")); WriteJsonValue(Writer, StartDate.GetValue());
	}
	if (EndDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("endDate")); WriteJsonValue(Writer, EndDate.GetValue());
	}
	if (DueDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dueDate")); WriteJsonValue(Writer, DueDate.GetValue());
	}
	if (VisitDate.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("visitDate")); WriteJsonValue(Writer, VisitDate.GetValue());
	}
	if (VisitDateForm.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("visitDateForm")); WriteJsonValue(Writer, VisitDateForm.GetValue());
	}
	if (VisitDateQuestion.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("visitDateQuestion")); WriteJsonValue(Writer, VisitDateQuestion.GetValue());
	}
	if (Deleted.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("deleted")); WriteJsonValue(Writer, Deleted.GetValue());
	}
	if (DateCreated.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateCreated")); WriteJsonValue(Writer, DateCreated.GetValue());
	}
	if (DateModified.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateModified")); WriteJsonValue(Writer, DateModified.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIVisit::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("studyKey"), StudyKey);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("visitId"), VisitId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("intervalId"), IntervalId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("intervalName"), IntervalName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subjectId"), SubjectId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subjectKey"), SubjectKey);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("startDate"), StartDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("endDate"), EndDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dueDate"), DueDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("visitDate"), VisitDate);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("visitDateForm"), VisitDateForm);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("visitDateQuestion"), VisitDateQuestion);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("deleted"), Deleted);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateCreated"), DateCreated);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateModified"), DateModified);

	return ParseSuccess;
}

}
