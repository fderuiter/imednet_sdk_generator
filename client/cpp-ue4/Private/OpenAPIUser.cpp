/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * OpenAPI spec version: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIUser.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIUser::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (UserId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("userId")); WriteJsonValue(Writer, UserId.GetValue());
	}
	if (Login.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("login")); WriteJsonValue(Writer, Login.GetValue());
	}
	if (FirstName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("firstName")); WriteJsonValue(Writer, FirstName.GetValue());
	}
	if (LastName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("lastName")); WriteJsonValue(Writer, LastName.GetValue());
	}
	if (Email.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("email")); WriteJsonValue(Writer, Email.GetValue());
	}
	if (UserActiveInStudy.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("userActiveInStudy")); WriteJsonValue(Writer, UserActiveInStudy.GetValue());
	}
	if (Roles.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("roles")); WriteJsonValue(Writer, Roles.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIUser::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("userId"), UserId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("login"), Login);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("firstName"), FirstName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("lastName"), LastName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("email"), Email);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("userActiveInStudy"), UserActiveInStudy);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("roles"), Roles);

	return ParseSuccess;
}

}
