/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * OpenAPI spec version: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIQuery.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIQuery::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (StudyKey.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("studyKey")); WriteJsonValue(Writer, StudyKey.GetValue());
	}
	if (SubjectId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("subjectId")); WriteJsonValue(Writer, SubjectId.GetValue());
	}
	if (SubjectOid.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("subjectOid")); WriteJsonValue(Writer, SubjectOid.GetValue());
	}
	if (AnnotationType.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("annotationType")); WriteJsonValue(Writer, AnnotationType.GetValue());
	}
	if (AnnotationId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("annotationId")); WriteJsonValue(Writer, AnnotationId.GetValue());
	}
	if (Type.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type.GetValue());
	}
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	if (RecordId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("recordId")); WriteJsonValue(Writer, RecordId.GetValue());
	}
	if (Variable.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("variable")); WriteJsonValue(Writer, Variable.GetValue());
	}
	if (SubjectKey.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("subjectKey")); WriteJsonValue(Writer, SubjectKey.GetValue());
	}
	if (DateCreated.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateCreated")); WriteJsonValue(Writer, DateCreated.GetValue());
	}
	if (DateModified.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateModified")); WriteJsonValue(Writer, DateModified.GetValue());
	}
	if (QueryComments.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("queryComments")); WriteJsonValue(Writer, QueryComments.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIQuery::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("studyKey"), StudyKey);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subjectId"), SubjectId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subjectOid"), SubjectOid);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("annotationType"), AnnotationType);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("annotationId"), AnnotationId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("recordId"), RecordId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("variable"), Variable);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subjectKey"), SubjectKey);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateCreated"), DateCreated);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateModified"), DateModified);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("queryComments"), QueryComments);

	return ParseSuccess;
}

}
