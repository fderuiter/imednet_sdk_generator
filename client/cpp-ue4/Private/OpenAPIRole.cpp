/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * OpenAPI spec version: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIRole.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIRole::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (DateCreated.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateCreated")); WriteJsonValue(Writer, DateCreated.GetValue());
	}
	if (DateModified.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateModified")); WriteJsonValue(Writer, DateModified.GetValue());
	}
	if (RoleId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("roleId")); WriteJsonValue(Writer, RoleId.GetValue());
	}
	if (CommunityId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("communityId")); WriteJsonValue(Writer, CommunityId.GetValue());
	}
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	if (Level.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("level")); WriteJsonValue(Writer, Level.GetValue());
	}
	if (Type.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("type")); WriteJsonValue(Writer, Type.GetValue());
	}
	if (Inactive.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("inactive")); WriteJsonValue(Writer, Inactive.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIRole::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateCreated"), DateCreated);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateModified"), DateModified);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("roleId"), RoleId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("communityId"), CommunityId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("level"), Level);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("type"), Type);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("inactive"), Inactive);

	return ParseSuccess;
}

}
