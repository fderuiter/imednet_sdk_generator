/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * OpenAPI spec version: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPICoding.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPICoding::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (StudyKey.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("studyKey")); WriteJsonValue(Writer, StudyKey.GetValue());
	}
	if (SiteName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("siteName")); WriteJsonValue(Writer, SiteName.GetValue());
	}
	if (SiteId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("siteId")); WriteJsonValue(Writer, SiteId.GetValue());
	}
	if (SubjectId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("subjectId")); WriteJsonValue(Writer, SubjectId.GetValue());
	}
	if (SubjectKey.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("subjectKey")); WriteJsonValue(Writer, SubjectKey.GetValue());
	}
	if (FormId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("formId")); WriteJsonValue(Writer, FormId.GetValue());
	}
	if (FormName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("formName")); WriteJsonValue(Writer, FormName.GetValue());
	}
	if (FormKey.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("formKey")); WriteJsonValue(Writer, FormKey.GetValue());
	}
	if (Revision.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("revision")); WriteJsonValue(Writer, Revision.GetValue());
	}
	if (RecordId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("recordId")); WriteJsonValue(Writer, RecordId.GetValue());
	}
	if (Variable.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("variable")); WriteJsonValue(Writer, Variable.GetValue());
	}
	if (Value.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("value")); WriteJsonValue(Writer, Value.GetValue());
	}
	if (CodingId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("codingId")); WriteJsonValue(Writer, CodingId.GetValue());
	}
	if (Code.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("code")); WriteJsonValue(Writer, Code.GetValue());
	}
	if (CodedBy.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("codedBy")); WriteJsonValue(Writer, CodedBy.GetValue());
	}
	if (Reason.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("reason")); WriteJsonValue(Writer, Reason.GetValue());
	}
	if (DictionaryName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dictionaryName")); WriteJsonValue(Writer, DictionaryName.GetValue());
	}
	if (DictionaryVersion.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dictionaryVersion")); WriteJsonValue(Writer, DictionaryVersion.GetValue());
	}
	if (DateCoded.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("dateCoded")); WriteJsonValue(Writer, DateCoded.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPICoding::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("studyKey"), StudyKey);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("siteName"), SiteName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("siteId"), SiteId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subjectId"), SubjectId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("subjectKey"), SubjectKey);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("formId"), FormId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("formName"), FormName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("formKey"), FormKey);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("revision"), Revision);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("recordId"), RecordId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("variable"), Variable);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("value"), Value);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("codingId"), CodingId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("code"), Code);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("codedBy"), CodedBy);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("reason"), Reason);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dictionaryName"), DictionaryName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dictionaryVersion"), DictionaryVersion);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("dateCoded"), DateCoded);

	return ParseSuccess;
}

}
