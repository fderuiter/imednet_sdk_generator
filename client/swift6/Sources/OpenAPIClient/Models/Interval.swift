//
// Interval.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Interval: Sendable, Codable, ParameterConvertible, Hashable {

    /** Unique study key */
    public var studyKey: String?
    /** Unique system identifier for the interval (visit definition) */
    public var intervalId: Int?
    /** Name of the interval (visit) as defined in the study */
    public var intervalName: String?
    /** Description of the interval (visit) */
    public var intervalDescription: String?
    /** Sequence number of the interval in the schedule */
    public var intervalSequence: Int?
    /** Identifier for the interval group (if intervals are grouped) */
    public var intervalGroupId: Int?
    /** Name of the interval group */
    public var intervalGroupName: String?
    /** Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date) */
    public var timeline: String?
    /** Baseline interval used for calculating this intervalâ€™s dates */
    public var definedUsingInterval: String?
    /** Baseline form (name) from which the calculation date is taken */
    public var windowCalculationForm: String?
    /** Baseline field (variable name) from which the calculation date is taken */
    public var windowCalculationDate: String?
    /** Form used to capture the actual date for this interval */
    public var actualDateForm: String?
    /** Field (variable name) used to capture the actual date for this interval */
    public var actualDate: String?
    /** Number of days from the calculation date when the interval is due */
    public var dueDateWillBeIn: Int?
    /** Number of days before the due date that are allowed (negative window) */
    public var negativeSlack: Int?
    /** Number of days after the due date that are allowed (positive window) */
    public var positiveSlack: Int?
    /** Number of days of grace period for ePRO completion after due date */
    public var eproGracePeriod: Int?
    /** List of forms that are scheduled in this interval */
    public var forms: [ComponentsSchemasIntervalFormsItem]?
    /** Whether the interval is soft-deleted (disabled) */
    public var disabled: Bool?
    /** Date when this interval was created */
    public var dateCreated: String?
    /** Date when this interval was last modified */
    public var dateModified: String?

    public init(studyKey: String? = nil, intervalId: Int? = nil, intervalName: String? = nil, intervalDescription: String? = nil, intervalSequence: Int? = nil, intervalGroupId: Int? = nil, intervalGroupName: String? = nil, timeline: String? = nil, definedUsingInterval: String? = nil, windowCalculationForm: String? = nil, windowCalculationDate: String? = nil, actualDateForm: String? = nil, actualDate: String? = nil, dueDateWillBeIn: Int? = nil, negativeSlack: Int? = nil, positiveSlack: Int? = nil, eproGracePeriod: Int? = nil, forms: [ComponentsSchemasIntervalFormsItem]? = nil, disabled: Bool? = nil, dateCreated: String? = nil, dateModified: String? = nil) {
        self.studyKey = studyKey
        self.intervalId = intervalId
        self.intervalName = intervalName
        self.intervalDescription = intervalDescription
        self.intervalSequence = intervalSequence
        self.intervalGroupId = intervalGroupId
        self.intervalGroupName = intervalGroupName
        self.timeline = timeline
        self.definedUsingInterval = definedUsingInterval
        self.windowCalculationForm = windowCalculationForm
        self.windowCalculationDate = windowCalculationDate
        self.actualDateForm = actualDateForm
        self.actualDate = actualDate
        self.dueDateWillBeIn = dueDateWillBeIn
        self.negativeSlack = negativeSlack
        self.positiveSlack = positiveSlack
        self.eproGracePeriod = eproGracePeriod
        self.forms = forms
        self.disabled = disabled
        self.dateCreated = dateCreated
        self.dateModified = dateModified
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case studyKey
        case intervalId
        case intervalName
        case intervalDescription
        case intervalSequence
        case intervalGroupId
        case intervalGroupName
        case timeline
        case definedUsingInterval
        case windowCalculationForm
        case windowCalculationDate
        case actualDateForm
        case actualDate
        case dueDateWillBeIn
        case negativeSlack
        case positiveSlack
        case eproGracePeriod
        case forms
        case disabled
        case dateCreated
        case dateModified
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(studyKey, forKey: .studyKey)
        try container.encodeIfPresent(intervalId, forKey: .intervalId)
        try container.encodeIfPresent(intervalName, forKey: .intervalName)
        try container.encodeIfPresent(intervalDescription, forKey: .intervalDescription)
        try container.encodeIfPresent(intervalSequence, forKey: .intervalSequence)
        try container.encodeIfPresent(intervalGroupId, forKey: .intervalGroupId)
        try container.encodeIfPresent(intervalGroupName, forKey: .intervalGroupName)
        try container.encodeIfPresent(timeline, forKey: .timeline)
        try container.encodeIfPresent(definedUsingInterval, forKey: .definedUsingInterval)
        try container.encodeIfPresent(windowCalculationForm, forKey: .windowCalculationForm)
        try container.encodeIfPresent(windowCalculationDate, forKey: .windowCalculationDate)
        try container.encodeIfPresent(actualDateForm, forKey: .actualDateForm)
        try container.encodeIfPresent(actualDate, forKey: .actualDate)
        try container.encodeIfPresent(dueDateWillBeIn, forKey: .dueDateWillBeIn)
        try container.encodeIfPresent(negativeSlack, forKey: .negativeSlack)
        try container.encodeIfPresent(positiveSlack, forKey: .positiveSlack)
        try container.encodeIfPresent(eproGracePeriod, forKey: .eproGracePeriod)
        try container.encodeIfPresent(forms, forKey: .forms)
        try container.encodeIfPresent(disabled, forKey: .disabled)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateModified, forKey: .dateModified)
    }
}

