--  Mednet EDC API
--  The Mednet EDC (Electronic Data Capture) REST API provides a single_point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
--
--  The version of the OpenAPI document: 1.3.6
--
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.14.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

package body .Models is
   pragma Style_Checks ("-bmrIu");

   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Coding_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Study_Key.Is_Null then
         Into.Write_Entity ("studyKey", Value.Study_Key);
      end if;
      if not Value.Site_Name.Is_Null then
         Into.Write_Entity ("siteName", Value.Site_Name);
      end if;
      if not Value.Site_Id.Is_Null then
         Into.Write_Entity ("siteId", Value.Site_Id);
      end if;
      if not Value.Subject_Id.Is_Null then
         Into.Write_Entity ("subjectId", Value.Subject_Id);
      end if;
      if not Value.Subject_Key.Is_Null then
         Into.Write_Entity ("subjectKey", Value.Subject_Key);
      end if;
      if not Value.Form_Id.Is_Null then
         Into.Write_Entity ("formId", Value.Form_Id);
      end if;
      if not Value.Form_Name.Is_Null then
         Into.Write_Entity ("formName", Value.Form_Name);
      end if;
      if not Value.Form_Key.Is_Null then
         Into.Write_Entity ("formKey", Value.Form_Key);
      end if;
      if not Value.Revision.Is_Null then
         Into.Write_Entity ("revision", Value.Revision);
      end if;
      if not Value.Record_Id.Is_Null then
         Into.Write_Entity ("recordId", Value.Record_Id);
      end if;
      if not Value.Variable.Is_Null then
         Into.Write_Entity ("variable", Value.Variable);
      end if;
      if not Value.Value.Is_Null then
         Into.Write_Entity ("value", Value.Value);
      end if;
      if not Value.Coding_Id.Is_Null then
         Into.Write_Entity ("codingId", Value.Coding_Id);
      end if;
      if not Value.Code.Is_Null then
         Into.Write_Entity ("code", Value.Code);
      end if;
      if not Value.Coded_By.Is_Null then
         Into.Write_Entity ("codedBy", Value.Coded_By);
      end if;
      if not Value.Reason.Is_Null then
         Into.Write_Entity ("reason", Value.Reason);
      end if;
      if not Value.Dictionary_Name.Is_Null then
         Into.Write_Entity ("dictionaryName", Value.Dictionary_Name);
      end if;
      if not Value.Dictionary_Version.Is_Null then
         Into.Write_Entity ("dictionaryVersion", Value.Dictionary_Version);
      end if;
      if not Value.Date_Coded.Is_Null then
         Into.Write_Entity ("dateCoded", Value.Date_Coded);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Coding_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Coding_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "studyKey", Value.Study_Key);
      Swagger.Streams.Deserialize (Object, "siteName", Value.Site_Name);
      Swagger.Streams.Deserialize (Object, "siteId", Value.Site_Id);
      Swagger.Streams.Deserialize (Object, "subjectId", Value.Subject_Id);
      Swagger.Streams.Deserialize (Object, "subjectKey", Value.Subject_Key);
      Swagger.Streams.Deserialize (Object, "formId", Value.Form_Id);
      Swagger.Streams.Deserialize (Object, "formName", Value.Form_Name);
      Swagger.Streams.Deserialize (Object, "formKey", Value.Form_Key);
      Swagger.Streams.Deserialize (Object, "revision", Value.Revision);
      Swagger.Streams.Deserialize (Object, "recordId", Value.Record_Id);
      Swagger.Streams.Deserialize (Object, "variable", Value.Variable);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
      Swagger.Streams.Deserialize (Object, "codingId", Value.Coding_Id);
      Swagger.Streams.Deserialize (Object, "code", Value.Code);
      Swagger.Streams.Deserialize (Object, "codedBy", Value.Coded_By);
      Swagger.Streams.Deserialize (Object, "reason", Value.Reason);
      Swagger.Streams.Deserialize (Object, "dictionaryName", Value.Dictionary_Name);
      Swagger.Streams.Deserialize (Object, "dictionaryVersion", Value.Dictionary_Version);
      Swagger.Streams.Deserialize (Object, "dateCoded", Value.Date_Coded);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Coding_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Coding_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ComponentsSchemasIntervalFormsItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Form_Id.Is_Null then
         Into.Write_Entity ("formId", Value.Form_Id);
      end if;
      if not Value.Form_Key.Is_Null then
         Into.Write_Entity ("formKey", Value.Form_Key);
      end if;
      if not Value.Form_Name.Is_Null then
         Into.Write_Entity ("formName", Value.Form_Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ComponentsSchemasIntervalFormsItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ComponentsSchemasIntervalFormsItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "formId", Value.Form_Id);
      Swagger.Streams.Deserialize (Object, "formKey", Value.Form_Key);
      Swagger.Streams.Deserialize (Object, "formName", Value.Form_Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ComponentsSchemasIntervalFormsItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ComponentsSchemasIntervalFormsItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ComponentsSchemasMetadataError_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ComponentsSchemasMetadataError_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ComponentsSchemasMetadataError_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ComponentsSchemasMetadataError_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ComponentsSchemasMetadataError_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Form_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Study_Key.Is_Null then
         Into.Write_Entity ("studyKey", Value.Study_Key);
      end if;
      if not Value.Form_Id.Is_Null then
         Into.Write_Entity ("formId", Value.Form_Id);
      end if;
      if not Value.Form_Key.Is_Null then
         Into.Write_Entity ("formKey", Value.Form_Key);
      end if;
      if not Value.Form_Name.Is_Null then
         Into.Write_Entity ("formName", Value.Form_Name);
      end if;
      if not Value.Form_Type.Is_Null then
         Into.Write_Entity ("formType", Value.Form_Type);
      end if;
      if not Value.Revision.Is_Null then
         Into.Write_Entity ("revision", Value.Revision);
      end if;
      if not Value.Embedded_Log.Is_Null then
         Into.Write_Entity ("embeddedLog", Value.Embedded_Log);
      end if;
      if not Value.Enforce_Ownership.Is_Null then
         Into.Write_Entity ("enforceOwnership", Value.Enforce_Ownership);
      end if;
      if not Value.User_Agreement.Is_Null then
         Into.Write_Entity ("userAgreement", Value.User_Agreement);
      end if;
      if not Value.Subject_Record_Report.Is_Null then
         Into.Write_Entity ("subjectRecordReport", Value.Subject_Record_Report);
      end if;
      if not Value.Unscheduled_Visit.Is_Null then
         Into.Write_Entity ("unscheduledVisit", Value.Unscheduled_Visit);
      end if;
      if not Value.Other_Forms.Is_Null then
         Into.Write_Entity ("otherForms", Value.Other_Forms);
      end if;
      if not Value.Epro_Form.Is_Null then
         Into.Write_Entity ("eproForm", Value.Epro_Form);
      end if;
      if not Value.Allow_Copy.Is_Null then
         Into.Write_Entity ("allowCopy", Value.Allow_Copy);
      end if;
      if not Value.Disabled.Is_Null then
         Into.Write_Entity ("disabled", Value.Disabled);
      end if;
      if not Value.Date_Created.Is_Null then
         Into.Write_Entity ("dateCreated", Value.Date_Created);
      end if;
      if not Value.Date_Modified.Is_Null then
         Into.Write_Entity ("dateModified", Value.Date_Modified);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Form_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Form_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "studyKey", Value.Study_Key);
      Swagger.Streams.Deserialize (Object, "formId", Value.Form_Id);
      Swagger.Streams.Deserialize (Object, "formKey", Value.Form_Key);
      Swagger.Streams.Deserialize (Object, "formName", Value.Form_Name);
      Swagger.Streams.Deserialize (Object, "formType", Value.Form_Type);
      Swagger.Streams.Deserialize (Object, "revision", Value.Revision);
      Swagger.Streams.Deserialize (Object, "embeddedLog", Value.Embedded_Log);
      Swagger.Streams.Deserialize (Object, "enforceOwnership", Value.Enforce_Ownership);
      Swagger.Streams.Deserialize (Object, "userAgreement", Value.User_Agreement);
      Swagger.Streams.Deserialize (Object, "subjectRecordReport", Value.Subject_Record_Report);
      Swagger.Streams.Deserialize (Object, "unscheduledVisit", Value.Unscheduled_Visit);
      Swagger.Streams.Deserialize (Object, "otherForms", Value.Other_Forms);
      Swagger.Streams.Deserialize (Object, "eproForm", Value.Epro_Form);
      Swagger.Streams.Deserialize (Object, "allowCopy", Value.Allow_Copy);
      Swagger.Streams.Deserialize (Object, "disabled", Value.Disabled);
      Swagger.Streams.Deserialize (Object, "dateCreated", Value.Date_Created);
      Swagger.Streams.Deserialize (Object, "dateModified", Value.Date_Modified);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Form_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Form_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Job_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Job_Id.Is_Null then
         Into.Write_Entity ("jobId", Value.Job_Id);
      end if;
      if not Value.Batch_Id.Is_Null then
         Into.Write_Entity ("batchId", Value.Batch_Id);
      end if;
      if not Value.State.Is_Null then
         Into.Write_Entity ("state", Value.State);
      end if;
      if not Value.Date_Created.Is_Null then
         Into.Write_Entity ("dateCreated", Value.Date_Created);
      end if;
      if not Value.Date_Started.Is_Null then
         Into.Write_Entity ("dateStarted", Value.Date_Started);
      end if;
      if not Value.Date_Finished.Is_Null then
         Into.Write_Entity ("dateFinished", Value.Date_Finished);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Job_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Job_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "jobId", Value.Job_Id);
      Swagger.Streams.Deserialize (Object, "batchId", Value.Batch_Id);
      Swagger.Streams.Deserialize (Object, "state", Value.State);
      Swagger.Streams.Deserialize (Object, "dateCreated", Value.Date_Created);
      Swagger.Streams.Deserialize (Object, "dateStarted", Value.Date_Started);
      Swagger.Streams.Deserialize (Object, "dateFinished", Value.Date_Finished);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Job_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Job_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Keyword_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Keyword_Name.Is_Null then
         Into.Write_Entity ("keywordName", Value.Keyword_Name);
      end if;
      if not Value.Keyword_Key.Is_Null then
         Into.Write_Entity ("keywordKey", Value.Keyword_Key);
      end if;
      if not Value.Keyword_Id.Is_Null then
         Into.Write_Entity ("keywordId", Value.Keyword_Id);
      end if;
      if not Value.Date_Added.Is_Null then
         Into.Write_Entity ("dateAdded", Value.Date_Added);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Keyword_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Keyword_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "keywordName", Value.Keyword_Name);
      Swagger.Streams.Deserialize (Object, "keywordKey", Value.Keyword_Key);
      Swagger.Streams.Deserialize (Object, "keywordId", Value.Keyword_Id);
      Swagger.Streams.Deserialize (Object, "dateAdded", Value.Date_Added);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Keyword_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Keyword_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.QueryComment_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Sequence.Is_Null then
         Into.Write_Entity ("sequence", Value.Sequence);
      end if;
      if not Value.Annotation_Status.Is_Null then
         Into.Write_Entity ("annotationStatus", Value.Annotation_Status);
      end if;
      if not Value.User.Is_Null then
         Into.Write_Entity ("user", Value.User);
      end if;
      if not Value.Comment.Is_Null then
         Into.Write_Entity ("comment", Value.Comment);
      end if;
      if not Value.Closed.Is_Null then
         Into.Write_Entity ("closed", Value.Closed);
      end if;
      if not Value.Date.Is_Null then
         Into.Write_Entity ("date", Value.Date);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in QueryComment_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.QueryComment_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "sequence", Value.Sequence);
      Swagger.Streams.Deserialize (Object, "annotationStatus", Value.Annotation_Status);
      Swagger.Streams.Deserialize (Object, "user", Value.User);
      Swagger.Streams.Deserialize (Object, "comment", Value.Comment);
      Swagger.Streams.Deserialize (Object, "closed", Value.Closed);
      Swagger.Streams.Deserialize (Object, "date", Value.Date);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out QueryComment_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.QueryComment_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.RecordJobStatus_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Job_Id.Is_Null then
         Into.Write_Entity ("jobId", Value.Job_Id);
      end if;
      if not Value.Batch_Id.Is_Null then
         Into.Write_Entity ("batchId", Value.Batch_Id);
      end if;
      if not Value.State.Is_Null then
         Into.Write_Entity ("state", Value.State);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RecordJobStatus_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.RecordJobStatus_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "jobId", Value.Job_Id);
      Swagger.Streams.Deserialize (Object, "batchId", Value.Batch_Id);
      Swagger.Streams.Deserialize (Object, "state", Value.State);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out RecordJobStatus_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.RecordJobStatus_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.RecordRevision_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Study_Key.Is_Null then
         Into.Write_Entity ("studyKey", Value.Study_Key);
      end if;
      if not Value.Record_Revision_Id.Is_Null then
         Into.Write_Entity ("recordRevisionId", Value.Record_Revision_Id);
      end if;
      if not Value.Record_Id.Is_Null then
         Into.Write_Entity ("recordId", Value.Record_Id);
      end if;
      if not Value.Record_Oid.Is_Null then
         Into.Write_Entity ("recordOid", Value.Record_Oid);
      end if;
      if not Value.Record_Revision.Is_Null then
         Into.Write_Entity ("recordRevision", Value.Record_Revision);
      end if;
      if not Value.Data_Revision.Is_Null then
         Into.Write_Entity ("dataRevision", Value.Data_Revision);
      end if;
      if not Value.Record_Status.Is_Null then
         Into.Write_Entity ("recordStatus", Value.Record_Status);
      end if;
      if not Value.Subject_Id.Is_Null then
         Into.Write_Entity ("subjectId", Value.Subject_Id);
      end if;
      if not Value.Subject_Oid.Is_Null then
         Into.Write_Entity ("subjectOid", Value.Subject_Oid);
      end if;
      if not Value.Subject_Key.Is_Null then
         Into.Write_Entity ("subjectKey", Value.Subject_Key);
      end if;
      if not Value.Site_Id.Is_Null then
         Into.Write_Entity ("siteId", Value.Site_Id);
      end if;
      if not Value.Form_Key.Is_Null then
         Into.Write_Entity ("formKey", Value.Form_Key);
      end if;
      if not Value.Interval_Id.Is_Null then
         Into.Write_Entity ("intervalId", Value.Interval_Id);
      end if;
      if not Value.Role.Is_Null then
         Into.Write_Entity ("role", Value.Role);
      end if;
      if not Value.User.Is_Null then
         Into.Write_Entity ("user", Value.User);
      end if;
      if not Value.Reason_For_Change.Is_Null then
         Into.Write_Entity ("reasonForChange", Value.Reason_For_Change);
      end if;
      if not Value.Deleted.Is_Null then
         Into.Write_Entity ("deleted", Value.Deleted);
      end if;
      if not Value.Date_Created.Is_Null then
         Into.Write_Entity ("dateCreated", Value.Date_Created);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RecordRevision_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.RecordRevision_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "studyKey", Value.Study_Key);
      Swagger.Streams.Deserialize (Object, "recordRevisionId", Value.Record_Revision_Id);
      Swagger.Streams.Deserialize (Object, "recordId", Value.Record_Id);
      Swagger.Streams.Deserialize (Object, "recordOid", Value.Record_Oid);
      Swagger.Streams.Deserialize (Object, "recordRevision", Value.Record_Revision);
      Swagger.Streams.Deserialize (Object, "dataRevision", Value.Data_Revision);
      Swagger.Streams.Deserialize (Object, "recordStatus", Value.Record_Status);
      Swagger.Streams.Deserialize (Object, "subjectId", Value.Subject_Id);
      Swagger.Streams.Deserialize (Object, "subjectOid", Value.Subject_Oid);
      Swagger.Streams.Deserialize (Object, "subjectKey", Value.Subject_Key);
      Swagger.Streams.Deserialize (Object, "siteId", Value.Site_Id);
      Swagger.Streams.Deserialize (Object, "formKey", Value.Form_Key);
      Swagger.Streams.Deserialize (Object, "intervalId", Value.Interval_Id);
      Swagger.Streams.Deserialize (Object, "role", Value.Role);
      Swagger.Streams.Deserialize (Object, "user", Value.User);
      Swagger.Streams.Deserialize (Object, "reasonForChange", Value.Reason_For_Change);
      Swagger.Streams.Deserialize (Object, "deleted", Value.Deleted);
      Swagger.Streams.Deserialize (Object, "dateCreated", Value.Date_Created);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out RecordRevision_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.RecordRevision_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Role_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "dateCreated", Value.Date_Created);
      Serialize (Into, "dateModified", Value.Date_Modified);
      if not Value.Role_Id.Is_Null then
         Into.Write_Entity ("roleId", Value.Role_Id);
      end if;
      if not Value.Community_Id.Is_Null then
         Into.Write_Entity ("communityId", Value.Community_Id);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Level.Is_Null then
         Into.Write_Entity ("level", Value.Level);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Inactive.Is_Null then
         Into.Write_Entity ("inactive", Value.Inactive);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Role_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Role_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "dateCreated", Value.Date_Created);
      Swagger.Streams.Deserialize (Object, "dateModified", Value.Date_Modified);
      Swagger.Streams.Deserialize (Object, "roleId", Value.Role_Id);
      Swagger.Streams.Deserialize (Object, "communityId", Value.Community_Id);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "level", Value.Level);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "inactive", Value.Inactive);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Role_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Role_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Site_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Study_Key.Is_Null then
         Into.Write_Entity ("studyKey", Value.Study_Key);
      end if;
      if not Value.Site_Id.Is_Null then
         Into.Write_Entity ("siteId", Value.Site_Id);
      end if;
      if not Value.Site_Name.Is_Null then
         Into.Write_Entity ("siteName", Value.Site_Name);
      end if;
      if not Value.Site_Enrollment_Status.Is_Null then
         Into.Write_Entity ("siteEnrollmentStatus", Value.Site_Enrollment_Status);
      end if;
      if not Value.Date_Created.Is_Null then
         Into.Write_Entity ("dateCreated", Value.Date_Created);
      end if;
      if not Value.Date_Modified.Is_Null then
         Into.Write_Entity ("dateModified", Value.Date_Modified);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Site_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Site_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "studyKey", Value.Study_Key);
      Swagger.Streams.Deserialize (Object, "siteId", Value.Site_Id);
      Swagger.Streams.Deserialize (Object, "siteName", Value.Site_Name);
      Swagger.Streams.Deserialize (Object, "siteEnrollmentStatus", Value.Site_Enrollment_Status);
      Swagger.Streams.Deserialize (Object, "dateCreated", Value.Date_Created);
      Swagger.Streams.Deserialize (Object, "dateModified", Value.Date_Modified);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Site_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Site_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Sort_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Property.Is_Null then
         Into.Write_Entity ("property", Value.Property);
      end if;
      if not Value.Direction.Is_Null then
         Into.Write_Entity ("direction", Value.Direction);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Sort_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Sort_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "property", Value.Property);
      Swagger.Streams.Deserialize (Object, "direction", Value.Direction);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Sort_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Sort_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Study_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Sponsor_Key.Is_Null then
         Into.Write_Entity ("sponsorKey", Value.Sponsor_Key);
      end if;
      if not Value.Study_Key.Is_Null then
         Into.Write_Entity ("studyKey", Value.Study_Key);
      end if;
      if not Value.Study_Id.Is_Null then
         Into.Write_Entity ("studyId", Value.Study_Id);
      end if;
      if not Value.Study_Name.Is_Null then
         Into.Write_Entity ("studyName", Value.Study_Name);
      end if;
      if not Value.Study_Description.Is_Null then
         Into.Write_Entity ("studyDescription", Value.Study_Description);
      end if;
      if not Value.Study_Type.Is_Null then
         Into.Write_Entity ("studyType", Value.Study_Type);
      end if;
      if not Value.Date_Created.Is_Null then
         Into.Write_Entity ("dateCreated", Value.Date_Created);
      end if;
      if not Value.Date_Modified.Is_Null then
         Into.Write_Entity ("dateModified", Value.Date_Modified);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Study_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Study_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "sponsorKey", Value.Sponsor_Key);
      Swagger.Streams.Deserialize (Object, "studyKey", Value.Study_Key);
      Swagger.Streams.Deserialize (Object, "studyId", Value.Study_Id);
      Swagger.Streams.Deserialize (Object, "studyName", Value.Study_Name);
      Swagger.Streams.Deserialize (Object, "studyDescription", Value.Study_Description);
      Swagger.Streams.Deserialize (Object, "studyType", Value.Study_Type);
      Swagger.Streams.Deserialize (Object, "dateCreated", Value.Date_Created);
      Swagger.Streams.Deserialize (Object, "dateModified", Value.Date_Modified);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Study_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Study_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Variable_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Study_Key.Is_Null then
         Into.Write_Entity ("studyKey", Value.Study_Key);
      end if;
      if not Value.Variable_Id.Is_Null then
         Into.Write_Entity ("variableId", Value.Variable_Id);
      end if;
      if not Value.Variable_Type.Is_Null then
         Into.Write_Entity ("variableType", Value.Variable_Type);
      end if;
      if not Value.Variable_Name.Is_Null then
         Into.Write_Entity ("variableName", Value.Variable_Name);
      end if;
      if not Value.Sequence.Is_Null then
         Into.Write_Entity ("sequence", Value.Sequence);
      end if;
      if not Value.Revision.Is_Null then
         Into.Write_Entity ("revision", Value.Revision);
      end if;
      if not Value.Disabled.Is_Null then
         Into.Write_Entity ("disabled", Value.Disabled);
      end if;
      if not Value.Date_Created.Is_Null then
         Into.Write_Entity ("dateCreated", Value.Date_Created);
      end if;
      if not Value.Date_Modified.Is_Null then
         Into.Write_Entity ("dateModified", Value.Date_Modified);
      end if;
      if not Value.Form_Id.Is_Null then
         Into.Write_Entity ("formId", Value.Form_Id);
      end if;
      if not Value.Variable_Oid.Is_Null then
         Into.Write_Entity ("variableOid", Value.Variable_Oid);
      end if;
      if not Value.Deleted.Is_Null then
         Into.Write_Entity ("deleted", Value.Deleted);
      end if;
      if not Value.Form_Key.Is_Null then
         Into.Write_Entity ("formKey", Value.Form_Key);
      end if;
      if not Value.Form_Name.Is_Null then
         Into.Write_Entity ("formName", Value.Form_Name);
      end if;
      if not Value.Label.Is_Null then
         Into.Write_Entity ("label", Value.Label);
      end if;
      if not Value.Blinded.Is_Null then
         Into.Write_Entity ("blinded", Value.Blinded);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Variable_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Variable_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "studyKey", Value.Study_Key);
      Swagger.Streams.Deserialize (Object, "variableId", Value.Variable_Id);
      Swagger.Streams.Deserialize (Object, "variableType", Value.Variable_Type);
      Swagger.Streams.Deserialize (Object, "variableName", Value.Variable_Name);
      Swagger.Streams.Deserialize (Object, "sequence", Value.Sequence);
      Swagger.Streams.Deserialize (Object, "revision", Value.Revision);
      Swagger.Streams.Deserialize (Object, "disabled", Value.Disabled);
      Swagger.Streams.Deserialize (Object, "dateCreated", Value.Date_Created);
      Swagger.Streams.Deserialize (Object, "dateModified", Value.Date_Modified);
      Swagger.Streams.Deserialize (Object, "formId", Value.Form_Id);
      Swagger.Streams.Deserialize (Object, "variableOid", Value.Variable_Oid);
      Swagger.Streams.Deserialize (Object, "deleted", Value.Deleted);
      Swagger.Streams.Deserialize (Object, "formKey", Value.Form_Key);
      Swagger.Streams.Deserialize (Object, "formName", Value.Form_Name);
      Swagger.Streams.Deserialize (Object, "label", Value.Label);
      Swagger.Streams.Deserialize (Object, "blinded", Value.Blinded);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Variable_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Variable_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Visit_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Study_Key.Is_Null then
         Into.Write_Entity ("studyKey", Value.Study_Key);
      end if;
      if not Value.Visit_Id.Is_Null then
         Into.Write_Entity ("visitId", Value.Visit_Id);
      end if;
      if not Value.Interval_Id.Is_Null then
         Into.Write_Entity ("intervalId", Value.Interval_Id);
      end if;
      if not Value.Interval_Name.Is_Null then
         Into.Write_Entity ("intervalName", Value.Interval_Name);
      end if;
      if not Value.Subject_Id.Is_Null then
         Into.Write_Entity ("subjectId", Value.Subject_Id);
      end if;
      if not Value.Subject_Key.Is_Null then
         Into.Write_Entity ("subjectKey", Value.Subject_Key);
      end if;
      if not Value.Start_Date.Is_Null then
         Into.Write_Entity ("startDate", Value.Start_Date);
      end if;
      if not Value.End_Date.Is_Null then
         Into.Write_Entity ("endDate", Value.End_Date);
      end if;
      if not Value.Due_Date.Is_Null then
         Into.Write_Entity ("dueDate", Value.Due_Date);
      end if;
      if not Value.Visit_Date.Is_Null then
         Into.Write_Entity ("visitDate", Value.Visit_Date);
      end if;
      if not Value.Visit_Date_Form.Is_Null then
         Into.Write_Entity ("visitDateForm", Value.Visit_Date_Form);
      end if;
      if not Value.Visit_Date_Question.Is_Null then
         Into.Write_Entity ("visitDateQuestion", Value.Visit_Date_Question);
      end if;
      if not Value.Deleted.Is_Null then
         Into.Write_Entity ("deleted", Value.Deleted);
      end if;
      if not Value.Date_Created.Is_Null then
         Into.Write_Entity ("dateCreated", Value.Date_Created);
      end if;
      if not Value.Date_Modified.Is_Null then
         Into.Write_Entity ("dateModified", Value.Date_Modified);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Visit_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Visit_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "studyKey", Value.Study_Key);
      Swagger.Streams.Deserialize (Object, "visitId", Value.Visit_Id);
      Swagger.Streams.Deserialize (Object, "intervalId", Value.Interval_Id);
      Swagger.Streams.Deserialize (Object, "intervalName", Value.Interval_Name);
      Swagger.Streams.Deserialize (Object, "subjectId", Value.Subject_Id);
      Swagger.Streams.Deserialize (Object, "subjectKey", Value.Subject_Key);
      Swagger.Streams.Deserialize (Object, "startDate", Value.Start_Date);
      Swagger.Streams.Deserialize (Object, "endDate", Value.End_Date);
      Swagger.Streams.Deserialize (Object, "dueDate", Value.Due_Date);
      Swagger.Streams.Deserialize (Object, "visitDate", Value.Visit_Date);
      Swagger.Streams.Deserialize (Object, "visitDateForm", Value.Visit_Date_Form);
      Swagger.Streams.Deserialize (Object, "visitDateQuestion", Value.Visit_Date_Question);
      Swagger.Streams.Deserialize (Object, "deleted", Value.Deleted);
      Swagger.Streams.Deserialize (Object, "dateCreated", Value.Date_Created);
      Swagger.Streams.Deserialize (Object, "dateModified", Value.Date_Modified);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Visit_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Visit_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ComponentsSchemasRecordCreateRequestItem_Type) is
   begin
      Into.Start_Entity (Name);
      Into.Write_Entity ("formKey", Value.Form_Key);
      if not Value.Form_Id.Is_Null then
         Into.Write_Entity ("formId", Value.Form_Id);
      end if;
      if not Value.Site_Name.Is_Null then
         Into.Write_Entity ("siteName", Value.Site_Name);
      end if;
      if not Value.Site_Id.Is_Null then
         Into.Write_Entity ("siteId", Value.Site_Id);
      end if;
      if not Value.Subject_Key.Is_Null then
         Into.Write_Entity ("subjectKey", Value.Subject_Key);
      end if;
      if not Value.Subject_Id.Is_Null then
         Into.Write_Entity ("subjectId", Value.Subject_Id);
      end if;
      if not Value.Subject_Oid.Is_Null then
         Into.Write_Entity ("subjectOid", Value.Subject_Oid);
      end if;
      if not Value.Interval_Name.Is_Null then
         Into.Write_Entity ("intervalName", Value.Interval_Name);
      end if;
      if not Value.Interval_Id.Is_Null then
         Into.Write_Entity ("intervalId", Value.Interval_Id);
      end if;
      if not Value.Record_Id.Is_Null then
         Into.Write_Entity ("recordId", Value.Record_Id);
      end if;
      if not Value.Record_Oid.Is_Null then
         Into.Write_Entity ("recordOid", Value.Record_Oid);
      end if;
      Serialize (Into, "data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ComponentsSchemasRecordCreateRequestItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ComponentsSchemasRecordCreateRequestItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "formKey", Value.Form_Key);
      Swagger.Streams.Deserialize (Object, "formId", Value.Form_Id);
      Swagger.Streams.Deserialize (Object, "siteName", Value.Site_Name);
      Swagger.Streams.Deserialize (Object, "siteId", Value.Site_Id);
      Swagger.Streams.Deserialize (Object, "subjectKey", Value.Subject_Key);
      Swagger.Streams.Deserialize (Object, "subjectId", Value.Subject_Id);
      Swagger.Streams.Deserialize (Object, "subjectOid", Value.Subject_Oid);
      Swagger.Streams.Deserialize (Object, "intervalName", Value.Interval_Name);
      Swagger.Streams.Deserialize (Object, "intervalId", Value.Interval_Id);
      Swagger.Streams.Deserialize (Object, "recordId", Value.Record_Id);
      Swagger.Streams.Deserialize (Object, "recordOid", Value.Record_Oid);
      Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ComponentsSchemasRecordCreateRequestItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ComponentsSchemasRecordCreateRequestItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Metadata_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Status.Is_Null then
         Into.Write_Entity ("status", Value.Status);
      end if;
      if not Value.Method.Is_Null then
         Into.Write_Entity ("method", Value.Method);
      end if;
      if not Value.Path.Is_Null then
         Into.Write_Entity ("path", Value.Path);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      Serialize (Into, "error", Value.Error);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Metadata_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Metadata_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "status", Value.Status);
      Swagger.Streams.Deserialize (Object, "method", Value.Method);
      Swagger.Streams.Deserialize (Object, "path", Value.Path);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Deserialize (Object, "error", Value.Error);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Metadata_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Metadata_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.InlineObject1_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metadata", Value.Metadata);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InlineObject1_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.InlineObject1_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "metadata", Value.Metadata);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out InlineObject1_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.InlineObject1_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.InlineObject2_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metadata", Value.Metadata);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InlineObject2_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.InlineObject2_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "metadata", Value.Metadata);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out InlineObject2_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.InlineObject2_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.InlineObject3_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metadata", Value.Metadata);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InlineObject3_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.InlineObject3_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "metadata", Value.Metadata);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out InlineObject3_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.InlineObject3_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.InlineObject4_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metadata", Value.Metadata);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InlineObject4_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.InlineObject4_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "metadata", Value.Metadata);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out InlineObject4_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.InlineObject4_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.InlineObject5_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metadata", Value.Metadata);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InlineObject5_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.InlineObject5_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "metadata", Value.Metadata);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out InlineObject5_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.InlineObject5_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.InlineObject_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metadata", Value.Metadata);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InlineObject_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.InlineObject_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "metadata", Value.Metadata);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out InlineObject_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.InlineObject_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Interval_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Study_Key.Is_Null then
         Into.Write_Entity ("studyKey", Value.Study_Key);
      end if;
      if not Value.Interval_Id.Is_Null then
         Into.Write_Entity ("intervalId", Value.Interval_Id);
      end if;
      if not Value.Interval_Name.Is_Null then
         Into.Write_Entity ("intervalName", Value.Interval_Name);
      end if;
      if not Value.Interval_Description.Is_Null then
         Into.Write_Entity ("intervalDescription", Value.Interval_Description);
      end if;
      if not Value.Interval_Sequence.Is_Null then
         Into.Write_Entity ("intervalSequence", Value.Interval_Sequence);
      end if;
      if not Value.Interval_Group_Id.Is_Null then
         Into.Write_Entity ("intervalGroupId", Value.Interval_Group_Id);
      end if;
      if not Value.Interval_Group_Name.Is_Null then
         Into.Write_Entity ("intervalGroupName", Value.Interval_Group_Name);
      end if;
      if not Value.Timeline.Is_Null then
         Into.Write_Entity ("timeline", Value.Timeline);
      end if;
      if not Value.Defined_Using_Interval.Is_Null then
         Into.Write_Entity ("definedUsingInterval", Value.Defined_Using_Interval);
      end if;
      if not Value.Window_Calculation_Form.Is_Null then
         Into.Write_Entity ("windowCalculationForm", Value.Window_Calculation_Form);
      end if;
      if not Value.Window_Calculation_Date.Is_Null then
         Into.Write_Entity ("windowCalculationDate", Value.Window_Calculation_Date);
      end if;
      if not Value.Actual_Date_Form.Is_Null then
         Into.Write_Entity ("actualDateForm", Value.Actual_Date_Form);
      end if;
      if not Value.Actual_Date.Is_Null then
         Into.Write_Entity ("actualDate", Value.Actual_Date);
      end if;
      if not Value.Due_Date_Will_Be_In.Is_Null then
         Into.Write_Entity ("dueDateWillBeIn", Value.Due_Date_Will_Be_In);
      end if;
      if not Value.Negative_Slack.Is_Null then
         Into.Write_Entity ("negativeSlack", Value.Negative_Slack);
      end if;
      if not Value.Positive_Slack.Is_Null then
         Into.Write_Entity ("positiveSlack", Value.Positive_Slack);
      end if;
      if not Value.Epro_Grace_Period.Is_Null then
         Into.Write_Entity ("eproGracePeriod", Value.Epro_Grace_Period);
      end if;
      Serialize (Into, "forms", Value.Forms);
      if not Value.Disabled.Is_Null then
         Into.Write_Entity ("disabled", Value.Disabled);
      end if;
      if not Value.Date_Created.Is_Null then
         Into.Write_Entity ("dateCreated", Value.Date_Created);
      end if;
      if not Value.Date_Modified.Is_Null then
         Into.Write_Entity ("dateModified", Value.Date_Modified);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Interval_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Interval_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "studyKey", Value.Study_Key);
      Swagger.Streams.Deserialize (Object, "intervalId", Value.Interval_Id);
      Swagger.Streams.Deserialize (Object, "intervalName", Value.Interval_Name);
      Swagger.Streams.Deserialize (Object, "intervalDescription", Value.Interval_Description);
      Swagger.Streams.Deserialize (Object, "intervalSequence", Value.Interval_Sequence);
      Swagger.Streams.Deserialize (Object, "intervalGroupId", Value.Interval_Group_Id);
      Swagger.Streams.Deserialize (Object, "intervalGroupName", Value.Interval_Group_Name);
      Swagger.Streams.Deserialize (Object, "timeline", Value.Timeline);
      Swagger.Streams.Deserialize (Object, "definedUsingInterval", Value.Defined_Using_Interval);
      Swagger.Streams.Deserialize (Object, "windowCalculationForm", Value.Window_Calculation_Form);
      Swagger.Streams.Deserialize (Object, "windowCalculationDate", Value.Window_Calculation_Date);
      Swagger.Streams.Deserialize (Object, "actualDateForm", Value.Actual_Date_Form);
      Swagger.Streams.Deserialize (Object, "actualDate", Value.Actual_Date);
      Swagger.Streams.Deserialize (Object, "dueDateWillBeIn", Value.Due_Date_Will_Be_In);
      Swagger.Streams.Deserialize (Object, "negativeSlack", Value.Negative_Slack);
      Swagger.Streams.Deserialize (Object, "positiveSlack", Value.Positive_Slack);
      Swagger.Streams.Deserialize (Object, "eproGracePeriod", Value.Epro_Grace_Period);
      Deserialize (Object, "forms", Value.Forms);
      Swagger.Streams.Deserialize (Object, "disabled", Value.Disabled);
      Swagger.Streams.Deserialize (Object, "dateCreated", Value.Date_Created);
      Swagger.Streams.Deserialize (Object, "dateModified", Value.Date_Modified);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Interval_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Interval_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Pagination_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Current_Page.Is_Null then
         Into.Write_Entity ("currentPage", Value.Current_Page);
      end if;
      if not Value.Size.Is_Null then
         Into.Write_Entity ("size", Value.Size);
      end if;
      if not Value.Total_Pages.Is_Null then
         Into.Write_Entity ("totalPages", Value.Total_Pages);
      end if;
      if not Value.Total_Elements.Is_Null then
         Into.Write_Entity ("totalElements", Value.Total_Elements);
      end if;
      Serialize (Into, "sort", Value.Sort);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Pagination_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Pagination_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "currentPage", Value.Current_Page);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "totalPages", Value.Total_Pages);
      Swagger.Streams.Deserialize (Object, "totalElements", Value.Total_Elements);
      Deserialize (Object, "sort", Value.Sort);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Pagination_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Pagination_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Query_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Study_Key.Is_Null then
         Into.Write_Entity ("studyKey", Value.Study_Key);
      end if;
      if not Value.Subject_Id.Is_Null then
         Into.Write_Entity ("subjectId", Value.Subject_Id);
      end if;
      if not Value.Subject_Oid.Is_Null then
         Into.Write_Entity ("subjectOid", Value.Subject_Oid);
      end if;
      if not Value.Annotation_Type.Is_Null then
         Into.Write_Entity ("annotationType", Value.Annotation_Type);
      end if;
      if not Value.Annotation_Id.Is_Null then
         Into.Write_Entity ("annotationId", Value.Annotation_Id);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Record_Id.Is_Null then
         Into.Write_Entity ("recordId", Value.Record_Id);
      end if;
      if not Value.Variable.Is_Null then
         Into.Write_Entity ("variable", Value.Variable);
      end if;
      if not Value.Subject_Key.Is_Null then
         Into.Write_Entity ("subjectKey", Value.Subject_Key);
      end if;
      if not Value.Date_Created.Is_Null then
         Into.Write_Entity ("dateCreated", Value.Date_Created);
      end if;
      if not Value.Date_Modified.Is_Null then
         Into.Write_Entity ("dateModified", Value.Date_Modified);
      end if;
      Serialize (Into, "queryComments", Value.Query_Comments);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Query_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Query_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "studyKey", Value.Study_Key);
      Swagger.Streams.Deserialize (Object, "subjectId", Value.Subject_Id);
      Swagger.Streams.Deserialize (Object, "subjectOid", Value.Subject_Oid);
      Swagger.Streams.Deserialize (Object, "annotationType", Value.Annotation_Type);
      Swagger.Streams.Deserialize (Object, "annotationId", Value.Annotation_Id);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "recordId", Value.Record_Id);
      Swagger.Streams.Deserialize (Object, "variable", Value.Variable);
      Swagger.Streams.Deserialize (Object, "subjectKey", Value.Subject_Key);
      Swagger.Streams.Deserialize (Object, "dateCreated", Value.Date_Created);
      Swagger.Streams.Deserialize (Object, "dateModified", Value.Date_Modified);
      Deserialize (Object, "queryComments", Value.Query_Comments);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Query_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Query_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Subject_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Study_Key.Is_Null then
         Into.Write_Entity ("studyKey", Value.Study_Key);
      end if;
      if not Value.Subject_Id.Is_Null then
         Into.Write_Entity ("subjectId", Value.Subject_Id);
      end if;
      if not Value.Subject_Oid.Is_Null then
         Into.Write_Entity ("subjectOid", Value.Subject_Oid);
      end if;
      if not Value.Subject_Key.Is_Null then
         Into.Write_Entity ("subjectKey", Value.Subject_Key);
      end if;
      if not Value.Subject_Status.Is_Null then
         Into.Write_Entity ("subjectStatus", Value.Subject_Status);
      end if;
      if not Value.Site_Id.Is_Null then
         Into.Write_Entity ("siteId", Value.Site_Id);
      end if;
      if not Value.Site_Name.Is_Null then
         Into.Write_Entity ("siteName", Value.Site_Name);
      end if;
      if not Value.Deleted.Is_Null then
         Into.Write_Entity ("deleted", Value.Deleted);
      end if;
      if not Value.Enrollment_Start_Date.Is_Null then
         Into.Write_Entity ("enrollmentStartDate", Value.Enrollment_Start_Date);
      end if;
      if not Value.Date_Created.Is_Null then
         Into.Write_Entity ("dateCreated", Value.Date_Created);
      end if;
      if not Value.Date_Modified.Is_Null then
         Into.Write_Entity ("dateModified", Value.Date_Modified);
      end if;
      Serialize (Into, "keywords", Value.Keywords);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Subject_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Subject_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "studyKey", Value.Study_Key);
      Swagger.Streams.Deserialize (Object, "subjectId", Value.Subject_Id);
      Swagger.Streams.Deserialize (Object, "subjectOid", Value.Subject_Oid);
      Swagger.Streams.Deserialize (Object, "subjectKey", Value.Subject_Key);
      Swagger.Streams.Deserialize (Object, "subjectStatus", Value.Subject_Status);
      Swagger.Streams.Deserialize (Object, "siteId", Value.Site_Id);
      Swagger.Streams.Deserialize (Object, "siteName", Value.Site_Name);
      Swagger.Streams.Deserialize (Object, "deleted", Value.Deleted);
      Swagger.Streams.Deserialize (Object, "enrollmentStartDate", Value.Enrollment_Start_Date);
      Swagger.Streams.Deserialize (Object, "dateCreated", Value.Date_Created);
      Swagger.Streams.Deserialize (Object, "dateModified", Value.Date_Modified);
      Deserialize (Object, "keywords", Value.Keywords);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Subject_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Subject_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.User_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.User_Id.Is_Null then
         Into.Write_Entity ("userId", Value.User_Id);
      end if;
      if not Value.Login.Is_Null then
         Into.Write_Entity ("login", Value.Login);
      end if;
      if not Value.First_Name.Is_Null then
         Into.Write_Entity ("firstName", Value.First_Name);
      end if;
      if not Value.Last_Name.Is_Null then
         Into.Write_Entity ("lastName", Value.Last_Name);
      end if;
      if not Value.Email.Is_Null then
         Into.Write_Entity ("email", Value.Email);
      end if;
      if not Value.User_Active_In_Study.Is_Null then
         Into.Write_Entity ("userActiveInStudy", Value.User_Active_In_Study);
      end if;
      Serialize (Into, "roles", Value.Roles);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in User_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.User_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "userId", Value.User_Id);
      Swagger.Streams.Deserialize (Object, "login", Value.Login);
      Swagger.Streams.Deserialize (Object, "firstName", Value.First_Name);
      Swagger.Streams.Deserialize (Object, "lastName", Value.Last_Name);
      Swagger.Streams.Deserialize (Object, "email", Value.Email);
      Swagger.Streams.Deserialize (Object, "userActiveInStudy", Value.User_Active_In_Study);
      Deserialize (Object, "roles", Value.Roles);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out User_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.User_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Model_Record) is
   begin
      Into.Start_Entity (Name);
      if not Value.Study_Key.Is_Null then
         Into.Write_Entity ("studyKey", Value.Study_Key);
      end if;
      if not Value.Interval_Id.Is_Null then
         Into.Write_Entity ("intervalId", Value.Interval_Id);
      end if;
      if not Value.Form_Id.Is_Null then
         Into.Write_Entity ("formId", Value.Form_Id);
      end if;
      if not Value.Form_Key.Is_Null then
         Into.Write_Entity ("formKey", Value.Form_Key);
      end if;
      if not Value.Site_Id.Is_Null then
         Into.Write_Entity ("siteId", Value.Site_Id);
      end if;
      if not Value.Record_Id.Is_Null then
         Into.Write_Entity ("recordId", Value.Record_Id);
      end if;
      if not Value.Record_Oid.Is_Null then
         Into.Write_Entity ("recordOid", Value.Record_Oid);
      end if;
      if not Value.Record_Type.Is_Null then
         Into.Write_Entity ("recordType", Value.Record_Type);
      end if;
      if not Value.Record_Status.Is_Null then
         Into.Write_Entity ("recordStatus", Value.Record_Status);
      end if;
      if not Value.Deleted.Is_Null then
         Into.Write_Entity ("deleted", Value.Deleted);
      end if;
      if not Value.Date_Created.Is_Null then
         Into.Write_Entity ("dateCreated", Value.Date_Created);
      end if;
      if not Value.Date_Modified.Is_Null then
         Into.Write_Entity ("dateModified", Value.Date_Modified);
      end if;
      if not Value.Subject_Id.Is_Null then
         Into.Write_Entity ("subjectId", Value.Subject_Id);
      end if;
      if not Value.Subject_Oid.Is_Null then
         Into.Write_Entity ("subjectOid", Value.Subject_Oid);
      end if;
      if not Value.Subject_Key.Is_Null then
         Into.Write_Entity ("subjectKey", Value.Subject_Key);
      end if;
      if not Value.Visit_Id.Is_Null then
         Into.Write_Entity ("visitId", Value.Visit_Id);
      end if;
      if not Value.Parent_Record_Id.Is_Null then
         Into.Write_Entity ("parentRecordId", Value.Parent_Record_Id);
      end if;
      Serialize (Into, "keywords", Value.Keywords);
      Serialize (Into, "recordData", Value.Record_Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Model_Record_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Model_Record) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "studyKey", Value.Study_Key);
      Swagger.Streams.Deserialize (Object, "intervalId", Value.Interval_Id);
      Swagger.Streams.Deserialize (Object, "formId", Value.Form_Id);
      Swagger.Streams.Deserialize (Object, "formKey", Value.Form_Key);
      Swagger.Streams.Deserialize (Object, "siteId", Value.Site_Id);
      Swagger.Streams.Deserialize (Object, "recordId", Value.Record_Id);
      Swagger.Streams.Deserialize (Object, "recordOid", Value.Record_Oid);
      Swagger.Streams.Deserialize (Object, "recordType", Value.Record_Type);
      Swagger.Streams.Deserialize (Object, "recordStatus", Value.Record_Status);
      Swagger.Streams.Deserialize (Object, "deleted", Value.Deleted);
      Swagger.Streams.Deserialize (Object, "dateCreated", Value.Date_Created);
      Swagger.Streams.Deserialize (Object, "dateModified", Value.Date_Modified);
      Swagger.Streams.Deserialize (Object, "subjectId", Value.Subject_Id);
      Swagger.Streams.Deserialize (Object, "subjectOid", Value.Subject_Oid);
      Swagger.Streams.Deserialize (Object, "subjectKey", Value.Subject_Key);
      Swagger.Streams.Deserialize (Object, "visitId", Value.Visit_Id);
      Swagger.Streams.Deserialize (Object, "parentRecordId", Value.Parent_Record_Id);
      Deserialize (Object, "keywords", Value.Keywords);
      Deserialize (Object, "recordData", Value.Record_Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Model_Record_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Model_Record;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CodingList_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metadata", Value.Metadata);
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CodingList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CodingList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "metadata", Value.Metadata);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CodingList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CodingList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FormList_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metadata", Value.Metadata);
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FormList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FormList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "metadata", Value.Metadata);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FormList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FormList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.IntervalList_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metadata", Value.Metadata);
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in IntervalList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.IntervalList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "metadata", Value.Metadata);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out IntervalList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.IntervalList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.QueryList_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metadata", Value.Metadata);
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in QueryList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.QueryList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "metadata", Value.Metadata);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out QueryList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.QueryList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.RecordList_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metadata", Value.Metadata);
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RecordList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.RecordList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "metadata", Value.Metadata);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out RecordList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.RecordList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.RecordRevisionList_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metadata", Value.Metadata);
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in RecordRevisionList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.RecordRevisionList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "metadata", Value.Metadata);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out RecordRevisionList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.RecordRevisionList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SiteList_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metadata", Value.Metadata);
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SiteList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SiteList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "metadata", Value.Metadata);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SiteList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SiteList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.StudyList_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metadata", Value.Metadata);
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in StudyList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.StudyList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "metadata", Value.Metadata);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out StudyList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.StudyList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SubjectList_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metadata", Value.Metadata);
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SubjectList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SubjectList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "metadata", Value.Metadata);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SubjectList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SubjectList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UserList_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metadata", Value.Metadata);
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UserList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UserList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "metadata", Value.Metadata);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UserList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UserList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.VariableList_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metadata", Value.Metadata);
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in VariableList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.VariableList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "metadata", Value.Metadata);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out VariableList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.VariableList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.VisitList_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "metadata", Value.Metadata);
      Serialize (Into, "pagination", Value.Pagination);
      Serialize (Into, "data", Value.Data);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in VisitList_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.VisitList_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "metadata", Value.Metadata);
      Deserialize (Object, "pagination", Value.Pagination);
      Deserialize (Object, "data", Value.Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out VisitList_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.VisitList_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


end .Models;
