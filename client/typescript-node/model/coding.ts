/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

export class Coding {
    /**
    * Unique study key
    */
    'studyKey'?: string;
    /**
    * Name of the site associated with the coded data
    */
    'siteName'?: string;
    /**
    * Site ID associated with the coded data
    */
    'siteId'?: number;
    /**
    * Subject ID associated with the coded data
    */
    'subjectId'?: number;
    /**
    * Subject key (display ID) associated with the coded data
    */
    'subjectKey'?: string;
    /**
    * Form ID where the coded data originates
    */
    'formId'?: number;
    /**
    * Name of the form where the coded data originates
    */
    'formName'?: string;
    /**
    * Form key where the coded data originates
    */
    'formKey'?: string;
    /**
    * Revision number of the coding entry
    */
    'revision'?: number;
    /**
    * Record ID associated with the coded data
    */
    'recordId'?: number;
    /**
    * Variable name (field) that was coded
    */
    'variable'?: string;
    /**
    * Original value entered that required coding
    */
    'value'?: string;
    /**
    * Mednet coding ID
    */
    'codingId'?: number;
    /**
    * Standardized code assigned (e.g., dictionary term)
    */
    'code'?: string;
    /**
    * Name of the user who performed the coding
    */
    'codedBy'?: string;
    /**
    * Reason for coding or any notes on changes
    */
    'reason'?: string;
    /**
    * Name of the dictionary used (e.g., MedDRA)
    */
    'dictionaryName'?: string;
    /**
    * Version of the dictionary used
    */
    'dictionaryVersion'?: string;
    /**
    * Date when the coding was performed
    */
    'dateCoded'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "studyKey",
            "baseName": "studyKey",
            "type": "string"
        },
        {
            "name": "siteName",
            "baseName": "siteName",
            "type": "string"
        },
        {
            "name": "siteId",
            "baseName": "siteId",
            "type": "number"
        },
        {
            "name": "subjectId",
            "baseName": "subjectId",
            "type": "number"
        },
        {
            "name": "subjectKey",
            "baseName": "subjectKey",
            "type": "string"
        },
        {
            "name": "formId",
            "baseName": "formId",
            "type": "number"
        },
        {
            "name": "formName",
            "baseName": "formName",
            "type": "string"
        },
        {
            "name": "formKey",
            "baseName": "formKey",
            "type": "string"
        },
        {
            "name": "revision",
            "baseName": "revision",
            "type": "number"
        },
        {
            "name": "recordId",
            "baseName": "recordId",
            "type": "number"
        },
        {
            "name": "variable",
            "baseName": "variable",
            "type": "string"
        },
        {
            "name": "value",
            "baseName": "value",
            "type": "string"
        },
        {
            "name": "codingId",
            "baseName": "codingId",
            "type": "number"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        },
        {
            "name": "codedBy",
            "baseName": "codedBy",
            "type": "string"
        },
        {
            "name": "reason",
            "baseName": "reason",
            "type": "string"
        },
        {
            "name": "dictionaryName",
            "baseName": "dictionaryName",
            "type": "string"
        },
        {
            "name": "dictionaryVersion",
            "baseName": "dictionaryVersion",
            "type": "string"
        },
        {
            "name": "dateCoded",
            "baseName": "dateCoded",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return Coding.attributeTypeMap;
    }
}

