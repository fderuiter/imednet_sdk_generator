/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecordRevision.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecordRevision::OAIRecordRevision(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecordRevision::OAIRecordRevision() {
    this->initializeModel();
}

OAIRecordRevision::~OAIRecordRevision() {}

void OAIRecordRevision::initializeModel() {

    m_study_key_isSet = false;
    m_study_key_isValid = false;

    m_record_revision_id_isSet = false;
    m_record_revision_id_isValid = false;

    m_record_id_isSet = false;
    m_record_id_isValid = false;

    m_record_oid_isSet = false;
    m_record_oid_isValid = false;

    m_record_revision_isSet = false;
    m_record_revision_isValid = false;

    m_data_revision_isSet = false;
    m_data_revision_isValid = false;

    m_record_status_isSet = false;
    m_record_status_isValid = false;

    m_subject_id_isSet = false;
    m_subject_id_isValid = false;

    m_subject_oid_isSet = false;
    m_subject_oid_isValid = false;

    m_subject_key_isSet = false;
    m_subject_key_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_form_key_isSet = false;
    m_form_key_isValid = false;

    m_interval_id_isSet = false;
    m_interval_id_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_reason_for_change_isSet = false;
    m_reason_for_change_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;
}

void OAIRecordRevision::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecordRevision::fromJsonObject(QJsonObject json) {

    m_study_key_isValid = ::OpenAPI::fromJsonValue(m_study_key, json[QString("studyKey")]);
    m_study_key_isSet = !json[QString("studyKey")].isNull() && m_study_key_isValid;

    m_record_revision_id_isValid = ::OpenAPI::fromJsonValue(m_record_revision_id, json[QString("recordRevisionId")]);
    m_record_revision_id_isSet = !json[QString("recordRevisionId")].isNull() && m_record_revision_id_isValid;

    m_record_id_isValid = ::OpenAPI::fromJsonValue(m_record_id, json[QString("recordId")]);
    m_record_id_isSet = !json[QString("recordId")].isNull() && m_record_id_isValid;

    m_record_oid_isValid = ::OpenAPI::fromJsonValue(m_record_oid, json[QString("recordOid")]);
    m_record_oid_isSet = !json[QString("recordOid")].isNull() && m_record_oid_isValid;

    m_record_revision_isValid = ::OpenAPI::fromJsonValue(m_record_revision, json[QString("recordRevision")]);
    m_record_revision_isSet = !json[QString("recordRevision")].isNull() && m_record_revision_isValid;

    m_data_revision_isValid = ::OpenAPI::fromJsonValue(m_data_revision, json[QString("dataRevision")]);
    m_data_revision_isSet = !json[QString("dataRevision")].isNull() && m_data_revision_isValid;

    m_record_status_isValid = ::OpenAPI::fromJsonValue(m_record_status, json[QString("recordStatus")]);
    m_record_status_isSet = !json[QString("recordStatus")].isNull() && m_record_status_isValid;

    m_subject_id_isValid = ::OpenAPI::fromJsonValue(m_subject_id, json[QString("subjectId")]);
    m_subject_id_isSet = !json[QString("subjectId")].isNull() && m_subject_id_isValid;

    m_subject_oid_isValid = ::OpenAPI::fromJsonValue(m_subject_oid, json[QString("subjectOid")]);
    m_subject_oid_isSet = !json[QString("subjectOid")].isNull() && m_subject_oid_isValid;

    m_subject_key_isValid = ::OpenAPI::fromJsonValue(m_subject_key, json[QString("subjectKey")]);
    m_subject_key_isSet = !json[QString("subjectKey")].isNull() && m_subject_key_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("siteId")]);
    m_site_id_isSet = !json[QString("siteId")].isNull() && m_site_id_isValid;

    m_form_key_isValid = ::OpenAPI::fromJsonValue(m_form_key, json[QString("formKey")]);
    m_form_key_isSet = !json[QString("formKey")].isNull() && m_form_key_isValid;

    m_interval_id_isValid = ::OpenAPI::fromJsonValue(m_interval_id, json[QString("intervalId")]);
    m_interval_id_isSet = !json[QString("intervalId")].isNull() && m_interval_id_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_reason_for_change_isValid = ::OpenAPI::fromJsonValue(m_reason_for_change, json[QString("reasonForChange")]);
    m_reason_for_change_isSet = !json[QString("reasonForChange")].isNull() && m_reason_for_change_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;
}

QString OAIRecordRevision::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecordRevision::asJsonObject() const {
    QJsonObject obj;
    if (m_study_key_isSet) {
        obj.insert(QString("studyKey"), ::OpenAPI::toJsonValue(m_study_key));
    }
    if (m_record_revision_id_isSet) {
        obj.insert(QString("recordRevisionId"), ::OpenAPI::toJsonValue(m_record_revision_id));
    }
    if (m_record_id_isSet) {
        obj.insert(QString("recordId"), ::OpenAPI::toJsonValue(m_record_id));
    }
    if (m_record_oid_isSet) {
        obj.insert(QString("recordOid"), ::OpenAPI::toJsonValue(m_record_oid));
    }
    if (m_record_revision_isSet) {
        obj.insert(QString("recordRevision"), ::OpenAPI::toJsonValue(m_record_revision));
    }
    if (m_data_revision_isSet) {
        obj.insert(QString("dataRevision"), ::OpenAPI::toJsonValue(m_data_revision));
    }
    if (m_record_status_isSet) {
        obj.insert(QString("recordStatus"), ::OpenAPI::toJsonValue(m_record_status));
    }
    if (m_subject_id_isSet) {
        obj.insert(QString("subjectId"), ::OpenAPI::toJsonValue(m_subject_id));
    }
    if (m_subject_oid_isSet) {
        obj.insert(QString("subjectOid"), ::OpenAPI::toJsonValue(m_subject_oid));
    }
    if (m_subject_key_isSet) {
        obj.insert(QString("subjectKey"), ::OpenAPI::toJsonValue(m_subject_key));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("siteId"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_form_key_isSet) {
        obj.insert(QString("formKey"), ::OpenAPI::toJsonValue(m_form_key));
    }
    if (m_interval_id_isSet) {
        obj.insert(QString("intervalId"), ::OpenAPI::toJsonValue(m_interval_id));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_reason_for_change_isSet) {
        obj.insert(QString("reasonForChange"), ::OpenAPI::toJsonValue(m_reason_for_change));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    return obj;
}

QString OAIRecordRevision::getStudyKey() const {
    return m_study_key;
}
void OAIRecordRevision::setStudyKey(const QString &study_key) {
    m_study_key = study_key;
    m_study_key_isSet = true;
}

bool OAIRecordRevision::is_study_key_Set() const{
    return m_study_key_isSet;
}

bool OAIRecordRevision::is_study_key_Valid() const{
    return m_study_key_isValid;
}

qint32 OAIRecordRevision::getRecordRevisionId() const {
    return m_record_revision_id;
}
void OAIRecordRevision::setRecordRevisionId(const qint32 &record_revision_id) {
    m_record_revision_id = record_revision_id;
    m_record_revision_id_isSet = true;
}

bool OAIRecordRevision::is_record_revision_id_Set() const{
    return m_record_revision_id_isSet;
}

bool OAIRecordRevision::is_record_revision_id_Valid() const{
    return m_record_revision_id_isValid;
}

qint32 OAIRecordRevision::getRecordId() const {
    return m_record_id;
}
void OAIRecordRevision::setRecordId(const qint32 &record_id) {
    m_record_id = record_id;
    m_record_id_isSet = true;
}

bool OAIRecordRevision::is_record_id_Set() const{
    return m_record_id_isSet;
}

bool OAIRecordRevision::is_record_id_Valid() const{
    return m_record_id_isValid;
}

QString OAIRecordRevision::getRecordOid() const {
    return m_record_oid;
}
void OAIRecordRevision::setRecordOid(const QString &record_oid) {
    m_record_oid = record_oid;
    m_record_oid_isSet = true;
}

bool OAIRecordRevision::is_record_oid_Set() const{
    return m_record_oid_isSet;
}

bool OAIRecordRevision::is_record_oid_Valid() const{
    return m_record_oid_isValid;
}

qint32 OAIRecordRevision::getRecordRevision() const {
    return m_record_revision;
}
void OAIRecordRevision::setRecordRevision(const qint32 &record_revision) {
    m_record_revision = record_revision;
    m_record_revision_isSet = true;
}

bool OAIRecordRevision::is_record_revision_Set() const{
    return m_record_revision_isSet;
}

bool OAIRecordRevision::is_record_revision_Valid() const{
    return m_record_revision_isValid;
}

qint32 OAIRecordRevision::getDataRevision() const {
    return m_data_revision;
}
void OAIRecordRevision::setDataRevision(const qint32 &data_revision) {
    m_data_revision = data_revision;
    m_data_revision_isSet = true;
}

bool OAIRecordRevision::is_data_revision_Set() const{
    return m_data_revision_isSet;
}

bool OAIRecordRevision::is_data_revision_Valid() const{
    return m_data_revision_isValid;
}

QString OAIRecordRevision::getRecordStatus() const {
    return m_record_status;
}
void OAIRecordRevision::setRecordStatus(const QString &record_status) {
    m_record_status = record_status;
    m_record_status_isSet = true;
}

bool OAIRecordRevision::is_record_status_Set() const{
    return m_record_status_isSet;
}

bool OAIRecordRevision::is_record_status_Valid() const{
    return m_record_status_isValid;
}

qint32 OAIRecordRevision::getSubjectId() const {
    return m_subject_id;
}
void OAIRecordRevision::setSubjectId(const qint32 &subject_id) {
    m_subject_id = subject_id;
    m_subject_id_isSet = true;
}

bool OAIRecordRevision::is_subject_id_Set() const{
    return m_subject_id_isSet;
}

bool OAIRecordRevision::is_subject_id_Valid() const{
    return m_subject_id_isValid;
}

QString OAIRecordRevision::getSubjectOid() const {
    return m_subject_oid;
}
void OAIRecordRevision::setSubjectOid(const QString &subject_oid) {
    m_subject_oid = subject_oid;
    m_subject_oid_isSet = true;
}

bool OAIRecordRevision::is_subject_oid_Set() const{
    return m_subject_oid_isSet;
}

bool OAIRecordRevision::is_subject_oid_Valid() const{
    return m_subject_oid_isValid;
}

QString OAIRecordRevision::getSubjectKey() const {
    return m_subject_key;
}
void OAIRecordRevision::setSubjectKey(const QString &subject_key) {
    m_subject_key = subject_key;
    m_subject_key_isSet = true;
}

bool OAIRecordRevision::is_subject_key_Set() const{
    return m_subject_key_isSet;
}

bool OAIRecordRevision::is_subject_key_Valid() const{
    return m_subject_key_isValid;
}

qint32 OAIRecordRevision::getSiteId() const {
    return m_site_id;
}
void OAIRecordRevision::setSiteId(const qint32 &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAIRecordRevision::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAIRecordRevision::is_site_id_Valid() const{
    return m_site_id_isValid;
}

QString OAIRecordRevision::getFormKey() const {
    return m_form_key;
}
void OAIRecordRevision::setFormKey(const QString &form_key) {
    m_form_key = form_key;
    m_form_key_isSet = true;
}

bool OAIRecordRevision::is_form_key_Set() const{
    return m_form_key_isSet;
}

bool OAIRecordRevision::is_form_key_Valid() const{
    return m_form_key_isValid;
}

qint32 OAIRecordRevision::getIntervalId() const {
    return m_interval_id;
}
void OAIRecordRevision::setIntervalId(const qint32 &interval_id) {
    m_interval_id = interval_id;
    m_interval_id_isSet = true;
}

bool OAIRecordRevision::is_interval_id_Set() const{
    return m_interval_id_isSet;
}

bool OAIRecordRevision::is_interval_id_Valid() const{
    return m_interval_id_isValid;
}

QString OAIRecordRevision::getRole() const {
    return m_role;
}
void OAIRecordRevision::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIRecordRevision::is_role_Set() const{
    return m_role_isSet;
}

bool OAIRecordRevision::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIRecordRevision::getUser() const {
    return m_user;
}
void OAIRecordRevision::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIRecordRevision::is_user_Set() const{
    return m_user_isSet;
}

bool OAIRecordRevision::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIRecordRevision::getReasonForChange() const {
    return m_reason_for_change;
}
void OAIRecordRevision::setReasonForChange(const QString &reason_for_change) {
    m_reason_for_change = reason_for_change;
    m_reason_for_change_isSet = true;
}

bool OAIRecordRevision::is_reason_for_change_Set() const{
    return m_reason_for_change_isSet;
}

bool OAIRecordRevision::is_reason_for_change_Valid() const{
    return m_reason_for_change_isValid;
}

bool OAIRecordRevision::isDeleted() const {
    return m_deleted;
}
void OAIRecordRevision::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIRecordRevision::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIRecordRevision::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIRecordRevision::getDateCreated() const {
    return m_date_created;
}
void OAIRecordRevision::setDateCreated(const QString &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIRecordRevision::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIRecordRevision::is_date_created_Valid() const{
    return m_date_created_isValid;
}

bool OAIRecordRevision::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_study_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_revision_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_oid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_oid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_for_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecordRevision::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
