/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RecordRevision model module.
 * @module model/RecordRevision
 * @version 1.3.6
 */
class RecordRevision {
    /**
     * @member {String} studyKey
     * @type {String}
     */
    studyKey;
    /**
     * @member {Number} recordRevisionId
     * @type {Number}
     */
    recordRevisionId;
    /**
     * @member {Number} recordId
     * @type {Number}
     */
    recordId;
    /**
     * @member {String} recordOid
     * @type {String}
     */
    recordOid;
    /**
     * @member {Number} recordRevision
     * @type {Number}
     */
    recordRevision;
    /**
     * @member {Number} dataRevision
     * @type {Number}
     */
    dataRevision;
    /**
     * @member {String} recordStatus
     * @type {String}
     */
    recordStatus;
    /**
     * @member {Number} subjectId
     * @type {Number}
     */
    subjectId;
    /**
     * @member {String} subjectOid
     * @type {String}
     */
    subjectOid;
    /**
     * @member {String} subjectKey
     * @type {String}
     */
    subjectKey;
    /**
     * @member {Number} siteId
     * @type {Number}
     */
    siteId;
    /**
     * @member {String} formKey
     * @type {String}
     */
    formKey;
    /**
     * @member {Number} intervalId
     * @type {Number}
     */
    intervalId;
    /**
     * @member {String} role
     * @type {String}
     */
    role;
    /**
     * @member {String} user
     * @type {String}
     */
    user;
    /**
     * @member {String} reasonForChange
     * @type {String}
     */
    reasonForChange;
    /**
     * @member {Boolean} deleted
     * @type {Boolean}
     */
    deleted;
    /**
     * @member {String} dateCreated
     * @type {String}
     */
    dateCreated;

    

    /**
     * Constructs a new <code>RecordRevision</code>.
     * @alias module:model/RecordRevision
     */
    constructor() { 
        
        RecordRevision.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RecordRevision</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecordRevision} obj Optional instance to populate.
     * @return {module:model/RecordRevision} The populated <code>RecordRevision</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecordRevision();

            if (data.hasOwnProperty('studyKey')) {
                obj['studyKey'] = ApiClient.convertToType(data['studyKey'], 'String');
            }
            if (data.hasOwnProperty('recordRevisionId')) {
                obj['recordRevisionId'] = ApiClient.convertToType(data['recordRevisionId'], 'Number');
            }
            if (data.hasOwnProperty('recordId')) {
                obj['recordId'] = ApiClient.convertToType(data['recordId'], 'Number');
            }
            if (data.hasOwnProperty('recordOid')) {
                obj['recordOid'] = ApiClient.convertToType(data['recordOid'], 'String');
            }
            if (data.hasOwnProperty('recordRevision')) {
                obj['recordRevision'] = ApiClient.convertToType(data['recordRevision'], 'Number');
            }
            if (data.hasOwnProperty('dataRevision')) {
                obj['dataRevision'] = ApiClient.convertToType(data['dataRevision'], 'Number');
            }
            if (data.hasOwnProperty('recordStatus')) {
                obj['recordStatus'] = ApiClient.convertToType(data['recordStatus'], 'String');
            }
            if (data.hasOwnProperty('subjectId')) {
                obj['subjectId'] = ApiClient.convertToType(data['subjectId'], 'Number');
            }
            if (data.hasOwnProperty('subjectOid')) {
                obj['subjectOid'] = ApiClient.convertToType(data['subjectOid'], 'String');
            }
            if (data.hasOwnProperty('subjectKey')) {
                obj['subjectKey'] = ApiClient.convertToType(data['subjectKey'], 'String');
            }
            if (data.hasOwnProperty('siteId')) {
                obj['siteId'] = ApiClient.convertToType(data['siteId'], 'Number');
            }
            if (data.hasOwnProperty('formKey')) {
                obj['formKey'] = ApiClient.convertToType(data['formKey'], 'String');
            }
            if (data.hasOwnProperty('intervalId')) {
                obj['intervalId'] = ApiClient.convertToType(data['intervalId'], 'Number');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
            if (data.hasOwnProperty('reasonForChange')) {
                obj['reasonForChange'] = ApiClient.convertToType(data['reasonForChange'], 'String');
            }
            if (data.hasOwnProperty('deleted')) {
                obj['deleted'] = ApiClient.convertToType(data['deleted'], 'Boolean');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'String');
            }
        }
        return obj;
    }
}



export default RecordRevision;

