/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Coding model module.
 * @module model/Coding
 * @version 1.3.6
 */
class Coding {
    /**
     * @member {String} studyKey
     * @type {String}
     */
    studyKey;
    /**
     * @member {String} siteName
     * @type {String}
     */
    siteName;
    /**
     * @member {Number} siteId
     * @type {Number}
     */
    siteId;
    /**
     * @member {Number} subjectId
     * @type {Number}
     */
    subjectId;
    /**
     * @member {String} subjectKey
     * @type {String}
     */
    subjectKey;
    /**
     * @member {Number} formId
     * @type {Number}
     */
    formId;
    /**
     * @member {String} formName
     * @type {String}
     */
    formName;
    /**
     * @member {String} formKey
     * @type {String}
     */
    formKey;
    /**
     * @member {Number} revision
     * @type {Number}
     */
    revision;
    /**
     * @member {Number} recordId
     * @type {Number}
     */
    recordId;
    /**
     * @member {String} variable
     * @type {String}
     */
    variable;
    /**
     * @member {String} value
     * @type {String}
     */
    value;
    /**
     * @member {Number} codingId
     * @type {Number}
     */
    codingId;
    /**
     * @member {String} code
     * @type {String}
     */
    code;
    /**
     * @member {String} codedBy
     * @type {String}
     */
    codedBy;
    /**
     * @member {String} reason
     * @type {String}
     */
    reason;
    /**
     * @member {String} dictionaryName
     * @type {String}
     */
    dictionaryName;
    /**
     * @member {String} dictionaryVersion
     * @type {String}
     */
    dictionaryVersion;
    /**
     * @member {String} dateCoded
     * @type {String}
     */
    dateCoded;

    

    /**
     * Constructs a new <code>Coding</code>.
     * @alias module:model/Coding
     */
    constructor() { 
        
        Coding.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Coding</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Coding} obj Optional instance to populate.
     * @return {module:model/Coding} The populated <code>Coding</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Coding();

            if (data.hasOwnProperty('studyKey')) {
                obj['studyKey'] = ApiClient.convertToType(data['studyKey'], 'String');
            }
            if (data.hasOwnProperty('siteName')) {
                obj['siteName'] = ApiClient.convertToType(data['siteName'], 'String');
            }
            if (data.hasOwnProperty('siteId')) {
                obj['siteId'] = ApiClient.convertToType(data['siteId'], 'Number');
            }
            if (data.hasOwnProperty('subjectId')) {
                obj['subjectId'] = ApiClient.convertToType(data['subjectId'], 'Number');
            }
            if (data.hasOwnProperty('subjectKey')) {
                obj['subjectKey'] = ApiClient.convertToType(data['subjectKey'], 'String');
            }
            if (data.hasOwnProperty('formId')) {
                obj['formId'] = ApiClient.convertToType(data['formId'], 'Number');
            }
            if (data.hasOwnProperty('formName')) {
                obj['formName'] = ApiClient.convertToType(data['formName'], 'String');
            }
            if (data.hasOwnProperty('formKey')) {
                obj['formKey'] = ApiClient.convertToType(data['formKey'], 'String');
            }
            if (data.hasOwnProperty('revision')) {
                obj['revision'] = ApiClient.convertToType(data['revision'], 'Number');
            }
            if (data.hasOwnProperty('recordId')) {
                obj['recordId'] = ApiClient.convertToType(data['recordId'], 'Number');
            }
            if (data.hasOwnProperty('variable')) {
                obj['variable'] = ApiClient.convertToType(data['variable'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('codingId')) {
                obj['codingId'] = ApiClient.convertToType(data['codingId'], 'Number');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('codedBy')) {
                obj['codedBy'] = ApiClient.convertToType(data['codedBy'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('dictionaryName')) {
                obj['dictionaryName'] = ApiClient.convertToType(data['dictionaryName'], 'String');
            }
            if (data.hasOwnProperty('dictionaryVersion')) {
                obj['dictionaryVersion'] = ApiClient.convertToType(data['dictionaryVersion'], 'String');
            }
            if (data.hasOwnProperty('dateCoded')) {
                obj['dateCoded'] = ApiClient.convertToType(data['dateCoded'], 'String');
            }
        }
        return obj;
    }
}



export default Coding;

