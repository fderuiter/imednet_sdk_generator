/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Study model module.
 * @module model/Study
 * @version 1.3.6
 */
class Study {
    /**
     * @member {String} sponsorKey
     * @type {String}
     */
    sponsorKey;
    /**
     * @member {String} studyKey
     * @type {String}
     */
    studyKey;
    /**
     * @member {Number} studyId
     * @type {Number}
     */
    studyId;
    /**
     * @member {String} studyName
     * @type {String}
     */
    studyName;
    /**
     * @member {String} studyDescription
     * @type {String}
     */
    studyDescription;
    /**
     * @member {String} studyType
     * @type {String}
     */
    studyType;
    /**
     * @member {String} dateCreated
     * @type {String}
     */
    dateCreated;
    /**
     * @member {String} dateModified
     * @type {String}
     */
    dateModified;

    

    /**
     * Constructs a new <code>Study</code>.
     * @alias module:model/Study
     */
    constructor() { 
        
        Study.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Study</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Study} obj Optional instance to populate.
     * @return {module:model/Study} The populated <code>Study</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Study();

            if (data.hasOwnProperty('sponsorKey')) {
                obj['sponsorKey'] = ApiClient.convertToType(data['sponsorKey'], 'String');
            }
            if (data.hasOwnProperty('studyKey')) {
                obj['studyKey'] = ApiClient.convertToType(data['studyKey'], 'String');
            }
            if (data.hasOwnProperty('studyId')) {
                obj['studyId'] = ApiClient.convertToType(data['studyId'], 'Number');
            }
            if (data.hasOwnProperty('studyName')) {
                obj['studyName'] = ApiClient.convertToType(data['studyName'], 'String');
            }
            if (data.hasOwnProperty('studyDescription')) {
                obj['studyDescription'] = ApiClient.convertToType(data['studyDescription'], 'String');
            }
            if (data.hasOwnProperty('studyType')) {
                obj['studyType'] = ApiClient.convertToType(data['studyType'], 'String');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'String');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'String');
            }
        }
        return obj;
    }
}



export default Study;

