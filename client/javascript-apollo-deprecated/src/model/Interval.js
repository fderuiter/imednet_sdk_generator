/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ComponentsSchemasIntervalFormsItem from './ComponentsSchemasIntervalFormsItem';

/**
 * The Interval model module.
 * @module model/Interval
 * @version 1.3.6
 */
class Interval {
    /**
     * @member {String} studyKey
     * @type {String}
     */
    studyKey;
    /**
     * @member {Number} intervalId
     * @type {Number}
     */
    intervalId;
    /**
     * @member {String} intervalName
     * @type {String}
     */
    intervalName;
    /**
     * @member {String} intervalDescription
     * @type {String}
     */
    intervalDescription;
    /**
     * @member {Number} intervalSequence
     * @type {Number}
     */
    intervalSequence;
    /**
     * @member {Number} intervalGroupId
     * @type {Number}
     */
    intervalGroupId;
    /**
     * @member {String} intervalGroupName
     * @type {String}
     */
    intervalGroupName;
    /**
     * @member {String} timeline
     * @type {String}
     */
    timeline;
    /**
     * @member {String} definedUsingInterval
     * @type {String}
     */
    definedUsingInterval;
    /**
     * @member {String} windowCalculationForm
     * @type {String}
     */
    windowCalculationForm;
    /**
     * @member {String} windowCalculationDate
     * @type {String}
     */
    windowCalculationDate;
    /**
     * @member {String} actualDateForm
     * @type {String}
     */
    actualDateForm;
    /**
     * @member {String} actualDate
     * @type {String}
     */
    actualDate;
    /**
     * @member {Number} dueDateWillBeIn
     * @type {Number}
     */
    dueDateWillBeIn;
    /**
     * @member {Number} negativeSlack
     * @type {Number}
     */
    negativeSlack;
    /**
     * @member {Number} positiveSlack
     * @type {Number}
     */
    positiveSlack;
    /**
     * @member {Number} eproGracePeriod
     * @type {Number}
     */
    eproGracePeriod;
    /**
     * @member {Array.<module:model/ComponentsSchemasIntervalFormsItem>} forms
     * @type {Array.<module:model/ComponentsSchemasIntervalFormsItem>}
     */
    forms;
    /**
     * @member {Boolean} disabled
     * @type {Boolean}
     */
    disabled;
    /**
     * @member {String} dateCreated
     * @type {String}
     */
    dateCreated;
    /**
     * @member {String} dateModified
     * @type {String}
     */
    dateModified;

    

    /**
     * Constructs a new <code>Interval</code>.
     * @alias module:model/Interval
     */
    constructor() { 
        
        Interval.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Interval</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Interval} obj Optional instance to populate.
     * @return {module:model/Interval} The populated <code>Interval</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Interval();

            if (data.hasOwnProperty('studyKey')) {
                obj['studyKey'] = ApiClient.convertToType(data['studyKey'], 'String');
            }
            if (data.hasOwnProperty('intervalId')) {
                obj['intervalId'] = ApiClient.convertToType(data['intervalId'], 'Number');
            }
            if (data.hasOwnProperty('intervalName')) {
                obj['intervalName'] = ApiClient.convertToType(data['intervalName'], 'String');
            }
            if (data.hasOwnProperty('intervalDescription')) {
                obj['intervalDescription'] = ApiClient.convertToType(data['intervalDescription'], 'String');
            }
            if (data.hasOwnProperty('intervalSequence')) {
                obj['intervalSequence'] = ApiClient.convertToType(data['intervalSequence'], 'Number');
            }
            if (data.hasOwnProperty('intervalGroupId')) {
                obj['intervalGroupId'] = ApiClient.convertToType(data['intervalGroupId'], 'Number');
            }
            if (data.hasOwnProperty('intervalGroupName')) {
                obj['intervalGroupName'] = ApiClient.convertToType(data['intervalGroupName'], 'String');
            }
            if (data.hasOwnProperty('timeline')) {
                obj['timeline'] = ApiClient.convertToType(data['timeline'], 'String');
            }
            if (data.hasOwnProperty('definedUsingInterval')) {
                obj['definedUsingInterval'] = ApiClient.convertToType(data['definedUsingInterval'], 'String');
            }
            if (data.hasOwnProperty('windowCalculationForm')) {
                obj['windowCalculationForm'] = ApiClient.convertToType(data['windowCalculationForm'], 'String');
            }
            if (data.hasOwnProperty('windowCalculationDate')) {
                obj['windowCalculationDate'] = ApiClient.convertToType(data['windowCalculationDate'], 'String');
            }
            if (data.hasOwnProperty('actualDateForm')) {
                obj['actualDateForm'] = ApiClient.convertToType(data['actualDateForm'], 'String');
            }
            if (data.hasOwnProperty('actualDate')) {
                obj['actualDate'] = ApiClient.convertToType(data['actualDate'], 'String');
            }
            if (data.hasOwnProperty('dueDateWillBeIn')) {
                obj['dueDateWillBeIn'] = ApiClient.convertToType(data['dueDateWillBeIn'], 'Number');
            }
            if (data.hasOwnProperty('negativeSlack')) {
                obj['negativeSlack'] = ApiClient.convertToType(data['negativeSlack'], 'Number');
            }
            if (data.hasOwnProperty('positiveSlack')) {
                obj['positiveSlack'] = ApiClient.convertToType(data['positiveSlack'], 'Number');
            }
            if (data.hasOwnProperty('eproGracePeriod')) {
                obj['eproGracePeriod'] = ApiClient.convertToType(data['eproGracePeriod'], 'Number');
            }
            if (data.hasOwnProperty('forms')) {
                obj['forms'] = ApiClient.convertToType(data['forms'], [ComponentsSchemasIntervalFormsItem]);
            }
            if (data.hasOwnProperty('disabled')) {
                obj['disabled'] = ApiClient.convertToType(data['disabled'], 'Boolean');
            }
            if (data.hasOwnProperty('dateCreated')) {
                obj['dateCreated'] = ApiClient.convertToType(data['dateCreated'], 'String');
            }
            if (data.hasOwnProperty('dateModified')) {
                obj['dateModified'] = ApiClient.convertToType(data['dateModified'], 'String');
            }
        }
        return obj;
    }
}



export default Interval;

