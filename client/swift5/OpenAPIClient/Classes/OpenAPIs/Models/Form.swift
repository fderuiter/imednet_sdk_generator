//
// Form.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Form: Codable, JSONEncodable, Hashable {

    /** Unique study key */
    public var studyKey: String?
    /** Mednet Form ID */
    public var formId: Int?
    /** User-defined form key */
    public var formKey: String?
    /** Name of the form (eCRF) */
    public var formName: String?
    /** Type of the form (e.g., Subject or Site) */
    public var formType: String?
    /** Number of modifications (revisions) of the form metadata */
    public var revision: Int?
    /** Whether the form has an embedded log */
    public var embeddedLog: Bool?
    /** Whether the form enforces record ownership */
    public var enforceOwnership: Bool?
    /** Whether the form requires a user agreement */
    public var userAgreement: Bool?
    /** Whether the form is marked as a subject record report */
    public var subjectRecordReport: Bool?
    /** Whether the form is included in unscheduled visits */
    public var unscheduledVisit: Bool?
    /** Whether the form is included in Other Forms category */
    public var otherForms: Bool?
    /** Whether the form is an ePRO (electronic patient reported outcome) form */
    public var eproForm: Bool?
    /** Whether the form allows copying of data */
    public var allowCopy: Bool?
    /** Whether the form is soft-deleted (disabled) */
    public var disabled: Bool?
    /** Date when this form was created */
    public var dateCreated: String?
    /** Date when this form was last modified */
    public var dateModified: String?

    public init(studyKey: String? = nil, formId: Int? = nil, formKey: String? = nil, formName: String? = nil, formType: String? = nil, revision: Int? = nil, embeddedLog: Bool? = nil, enforceOwnership: Bool? = nil, userAgreement: Bool? = nil, subjectRecordReport: Bool? = nil, unscheduledVisit: Bool? = nil, otherForms: Bool? = nil, eproForm: Bool? = nil, allowCopy: Bool? = nil, disabled: Bool? = nil, dateCreated: String? = nil, dateModified: String? = nil) {
        self.studyKey = studyKey
        self.formId = formId
        self.formKey = formKey
        self.formName = formName
        self.formType = formType
        self.revision = revision
        self.embeddedLog = embeddedLog
        self.enforceOwnership = enforceOwnership
        self.userAgreement = userAgreement
        self.subjectRecordReport = subjectRecordReport
        self.unscheduledVisit = unscheduledVisit
        self.otherForms = otherForms
        self.eproForm = eproForm
        self.allowCopy = allowCopy
        self.disabled = disabled
        self.dateCreated = dateCreated
        self.dateModified = dateModified
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case studyKey
        case formId
        case formKey
        case formName
        case formType
        case revision
        case embeddedLog
        case enforceOwnership
        case userAgreement
        case subjectRecordReport
        case unscheduledVisit
        case otherForms
        case eproForm
        case allowCopy
        case disabled
        case dateCreated
        case dateModified
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(studyKey, forKey: .studyKey)
        try container.encodeIfPresent(formId, forKey: .formId)
        try container.encodeIfPresent(formKey, forKey: .formKey)
        try container.encodeIfPresent(formName, forKey: .formName)
        try container.encodeIfPresent(formType, forKey: .formType)
        try container.encodeIfPresent(revision, forKey: .revision)
        try container.encodeIfPresent(embeddedLog, forKey: .embeddedLog)
        try container.encodeIfPresent(enforceOwnership, forKey: .enforceOwnership)
        try container.encodeIfPresent(userAgreement, forKey: .userAgreement)
        try container.encodeIfPresent(subjectRecordReport, forKey: .subjectRecordReport)
        try container.encodeIfPresent(unscheduledVisit, forKey: .unscheduledVisit)
        try container.encodeIfPresent(otherForms, forKey: .otherForms)
        try container.encodeIfPresent(eproForm, forKey: .eproForm)
        try container.encodeIfPresent(allowCopy, forKey: .allowCopy)
        try container.encodeIfPresent(disabled, forKey: .disabled)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateModified, forKey: .dateModified)
    }
}

