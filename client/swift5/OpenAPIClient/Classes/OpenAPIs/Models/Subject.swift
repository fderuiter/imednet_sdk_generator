//
// Subject.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Subject: Codable, JSONEncodable, Hashable {

    /** Unique study key */
    public var studyKey: String?
    /** Mednet subject ID (internal numeric ID) */
    public var subjectId: Int?
    /** Client-assigned subject object identifier (OID) */
    public var subjectOid: String?
    /** Protocol-assigned subject identifier (display ID) */
    public var subjectKey: String?
    /** Current status of the subject (e.g., Enrolled) */
    public var subjectStatus: String?
    /** Mednet site ID the subject is associated with */
    public var siteId: Int?
    /** Name of the site the subject is associated with */
    public var siteName: String?
    /** Whether the subject is marked as deleted */
    public var deleted: Bool?
    /** Subjectâ€™s enrollment start date */
    public var enrollmentStartDate: String?
    /** Date when this subject record was created */
    public var dateCreated: String?
    /** Date when this subject record was last modified */
    public var dateModified: String?
    /** List of keywords associated with the subject */
    public var keywords: [Keyword]?

    public init(studyKey: String? = nil, subjectId: Int? = nil, subjectOid: String? = nil, subjectKey: String? = nil, subjectStatus: String? = nil, siteId: Int? = nil, siteName: String? = nil, deleted: Bool? = nil, enrollmentStartDate: String? = nil, dateCreated: String? = nil, dateModified: String? = nil, keywords: [Keyword]? = nil) {
        self.studyKey = studyKey
        self.subjectId = subjectId
        self.subjectOid = subjectOid
        self.subjectKey = subjectKey
        self.subjectStatus = subjectStatus
        self.siteId = siteId
        self.siteName = siteName
        self.deleted = deleted
        self.enrollmentStartDate = enrollmentStartDate
        self.dateCreated = dateCreated
        self.dateModified = dateModified
        self.keywords = keywords
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case studyKey
        case subjectId
        case subjectOid
        case subjectKey
        case subjectStatus
        case siteId
        case siteName
        case deleted
        case enrollmentStartDate
        case dateCreated
        case dateModified
        case keywords
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(studyKey, forKey: .studyKey)
        try container.encodeIfPresent(subjectId, forKey: .subjectId)
        try container.encodeIfPresent(subjectOid, forKey: .subjectOid)
        try container.encodeIfPresent(subjectKey, forKey: .subjectKey)
        try container.encodeIfPresent(subjectStatus, forKey: .subjectStatus)
        try container.encodeIfPresent(siteId, forKey: .siteId)
        try container.encodeIfPresent(siteName, forKey: .siteName)
        try container.encodeIfPresent(deleted, forKey: .deleted)
        try container.encodeIfPresent(enrollmentStartDate, forKey: .enrollmentStartDate)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateModified, forKey: .dateModified)
        try container.encodeIfPresent(keywords, forKey: .keywords)
    }
}

