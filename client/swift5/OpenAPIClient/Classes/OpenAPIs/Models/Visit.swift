//
// Visit.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Visit: Codable, JSONEncodable, Hashable {

    /** Unique study key */
    public var studyKey: String?
    /** Unique system identifier for the subject visit instance */
    public var visitId: Int?
    /** Unique system identifier of the interval definition for this visit */
    public var intervalId: Int?
    /** Name of the interval (visit) for this visit instance */
    public var intervalName: String?
    /** Mednet subject ID of the subject */
    public var subjectId: Int?
    /** Protocol-assigned subject identifier */
    public var subjectKey: String?
    /** Start date of the visit window (in YYYY-MM-DD format) */
    public var startDate: String?
    /** End date of the visit window (in YYYY-MM-DD format) */
    public var endDate: String?
    /** Due date of the visit (in YYYY-MM-DD format), if applicable */
    public var dueDate: String?
    /** Actual date the visit took place (in YYYY-MM-DD format) */
    public var visitDate: String?
    /** Name of the form used to capture the actual visit date */
    public var visitDateForm: String?
    /** Variable name of the field capturing the actual visit date */
    public var visitDateQuestion: String?
    /** Whether the visit instance is marked as deleted */
    public var deleted: Bool?
    /** Date when this visit record was created */
    public var dateCreated: String?
    /** Date when this visit record was last modified */
    public var dateModified: String?

    public init(studyKey: String? = nil, visitId: Int? = nil, intervalId: Int? = nil, intervalName: String? = nil, subjectId: Int? = nil, subjectKey: String? = nil, startDate: String? = nil, endDate: String? = nil, dueDate: String? = nil, visitDate: String? = nil, visitDateForm: String? = nil, visitDateQuestion: String? = nil, deleted: Bool? = nil, dateCreated: String? = nil, dateModified: String? = nil) {
        self.studyKey = studyKey
        self.visitId = visitId
        self.intervalId = intervalId
        self.intervalName = intervalName
        self.subjectId = subjectId
        self.subjectKey = subjectKey
        self.startDate = startDate
        self.endDate = endDate
        self.dueDate = dueDate
        self.visitDate = visitDate
        self.visitDateForm = visitDateForm
        self.visitDateQuestion = visitDateQuestion
        self.deleted = deleted
        self.dateCreated = dateCreated
        self.dateModified = dateModified
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case studyKey
        case visitId
        case intervalId
        case intervalName
        case subjectId
        case subjectKey
        case startDate
        case endDate
        case dueDate
        case visitDate
        case visitDateForm
        case visitDateQuestion
        case deleted
        case dateCreated
        case dateModified
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(studyKey, forKey: .studyKey)
        try container.encodeIfPresent(visitId, forKey: .visitId)
        try container.encodeIfPresent(intervalId, forKey: .intervalId)
        try container.encodeIfPresent(intervalName, forKey: .intervalName)
        try container.encodeIfPresent(subjectId, forKey: .subjectId)
        try container.encodeIfPresent(subjectKey, forKey: .subjectKey)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
        try container.encodeIfPresent(dueDate, forKey: .dueDate)
        try container.encodeIfPresent(visitDate, forKey: .visitDate)
        try container.encodeIfPresent(visitDateForm, forKey: .visitDateForm)
        try container.encodeIfPresent(visitDateQuestion, forKey: .visitDateQuestion)
        try container.encodeIfPresent(deleted, forKey: .deleted)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateModified, forKey: .dateModified)
    }
}

