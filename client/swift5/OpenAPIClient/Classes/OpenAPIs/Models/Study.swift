//
// Study.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Study: Codable, JSONEncodable, Hashable {

    /** Sponsor key that this study belongs to */
    public var sponsorKey: String?
    /** Unique study key */
    public var studyKey: String?
    /** Mednet study ID (internal numeric identifier) */
    public var studyId: Int?
    /** Name of the study */
    public var studyName: String?
    /** Description of the study */
    public var studyDescription: String?
    /** Type of study (e.g., STUDY) */
    public var studyType: String?
    /** Date when the study record was created */
    public var dateCreated: String?
    /** Date when the study record was last modified */
    public var dateModified: String?

    public init(sponsorKey: String? = nil, studyKey: String? = nil, studyId: Int? = nil, studyName: String? = nil, studyDescription: String? = nil, studyType: String? = nil, dateCreated: String? = nil, dateModified: String? = nil) {
        self.sponsorKey = sponsorKey
        self.studyKey = studyKey
        self.studyId = studyId
        self.studyName = studyName
        self.studyDescription = studyDescription
        self.studyType = studyType
        self.dateCreated = dateCreated
        self.dateModified = dateModified
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sponsorKey
        case studyKey
        case studyId
        case studyName
        case studyDescription
        case studyType
        case dateCreated
        case dateModified
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(sponsorKey, forKey: .sponsorKey)
        try container.encodeIfPresent(studyKey, forKey: .studyKey)
        try container.encodeIfPresent(studyId, forKey: .studyId)
        try container.encodeIfPresent(studyName, forKey: .studyName)
        try container.encodeIfPresent(studyDescription, forKey: .studyDescription)
        try container.encodeIfPresent(studyType, forKey: .studyType)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateModified, forKey: .dateModified)
    }
}

