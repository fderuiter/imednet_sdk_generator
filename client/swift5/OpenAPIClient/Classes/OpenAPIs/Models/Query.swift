//
// Query.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Query: Codable, JSONEncodable, Hashable {

    /** Unique study key */
    public var studyKey: String?
    /** Mednet subject ID associated with the query (if applicable) */
    public var subjectId: Int?
    /** Client-assigned subject OID (if applicable) */
    public var subjectOid: String?
    /** Category/type of the query (e.g., subject, record, question) */
    public var annotationType: String?
    /** Unique system identifier for the query */
    public var annotationId: Int?
    /** System text identifier for the query type/location (subject, record, question) */
    public var type: String?
    /** Description of the query (e.g., reason or context) */
    public var description: String?
    /** Record ID associated with the query (if applicable) */
    public var recordId: Int?
    /** Variable name (field) associated with the query (if applicable) */
    public var variable: String?
    /** Subject display ID associated with the query (if applicable) */
    public var subjectKey: String?
    /** Date when the query was created */
    public var dateCreated: String?
    /** Date when the query was last modified */
    public var dateModified: String?
    /** History of comments/actions on the query */
    public var queryComments: [QueryComment]?

    public init(studyKey: String? = nil, subjectId: Int? = nil, subjectOid: String? = nil, annotationType: String? = nil, annotationId: Int? = nil, type: String? = nil, description: String? = nil, recordId: Int? = nil, variable: String? = nil, subjectKey: String? = nil, dateCreated: String? = nil, dateModified: String? = nil, queryComments: [QueryComment]? = nil) {
        self.studyKey = studyKey
        self.subjectId = subjectId
        self.subjectOid = subjectOid
        self.annotationType = annotationType
        self.annotationId = annotationId
        self.type = type
        self.description = description
        self.recordId = recordId
        self.variable = variable
        self.subjectKey = subjectKey
        self.dateCreated = dateCreated
        self.dateModified = dateModified
        self.queryComments = queryComments
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case studyKey
        case subjectId
        case subjectOid
        case annotationType
        case annotationId
        case type
        case description
        case recordId
        case variable
        case subjectKey
        case dateCreated
        case dateModified
        case queryComments
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(studyKey, forKey: .studyKey)
        try container.encodeIfPresent(subjectId, forKey: .subjectId)
        try container.encodeIfPresent(subjectOid, forKey: .subjectOid)
        try container.encodeIfPresent(annotationType, forKey: .annotationType)
        try container.encodeIfPresent(annotationId, forKey: .annotationId)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(recordId, forKey: .recordId)
        try container.encodeIfPresent(variable, forKey: .variable)
        try container.encodeIfPresent(subjectKey, forKey: .subjectKey)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateModified, forKey: .dateModified)
        try container.encodeIfPresent(queryComments, forKey: .queryComments)
    }
}

