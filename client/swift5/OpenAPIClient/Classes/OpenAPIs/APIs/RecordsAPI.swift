//
// RecordsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class RecordsAPI {

    /**
     Add new record or update subject/record data
     
     - parameter studyKey: (path) Study key identifying the study context for the request 
     - parameter componentsSchemasRecordCreateRequestItem: (body) An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update). 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createRecords(studyKey: String, componentsSchemasRecordCreateRequestItem: [ComponentsSchemasRecordCreateRequestItem], apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RecordJobStatus?, _ error: Error?) -> Void)) -> RequestTask {
        return createRecordsWithRequestBuilder(studyKey: studyKey, componentsSchemasRecordCreateRequestItem: componentsSchemasRecordCreateRequestItem).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add new record or update subject/record data
     - POST /studies/{studyKey}/records
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyAuth
     - API Key:
       - type: apiKey x-imn-security-key (HEADER)
       - name: securityKeyAuth
     - parameter studyKey: (path) Study key identifying the study context for the request 
     - parameter componentsSchemasRecordCreateRequestItem: (body) An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update). 
     - returns: RequestBuilder<RecordJobStatus> 
     */
    open class func createRecordsWithRequestBuilder(studyKey: String, componentsSchemasRecordCreateRequestItem: [ComponentsSchemasRecordCreateRequestItem]) -> RequestBuilder<RecordJobStatus> {
        var localVariablePath = "/studies/{studyKey}/records"
        let studyKeyPreEscape = "\(APIHelper.mapValueToPathItem(studyKey))"
        let studyKeyPostEscape = studyKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{studyKey}", with: studyKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: componentsSchemasRecordCreateRequestItem)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RecordJobStatus>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List records (eCRF instances) in a study
     
     - parameter studyKey: (path) Study key identifying the study context for the request 
     - parameter page: (query) Page index to retrieve (0-based) (optional, default to 0)
     - parameter size: (query) Number of items to return per page (max 500) (optional, default to 25)
     - parameter sort: (query) Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated. (optional)
     - parameter filter: (query) Optional filter criteria to apply, in the format &#x60;attribute&#x3D;&#x3D;value&#x60; with support for &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, !&#x3D;. Multiple criteria can be combined with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR). (optional)
     - parameter recordDataFilter: (query) Optional filter criteria to apply on recordData fields (question responses). Supports &#x3D;&#x3D;, !&#x3D;, &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;~ (contains) and can combine multiple criteria with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listRecords(studyKey: String, page: Int? = nil, size: Int? = nil, sort: String? = nil, filter: String? = nil, recordDataFilter: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: RecordList?, _ error: Error?) -> Void)) -> RequestTask {
        return listRecordsWithRequestBuilder(studyKey: studyKey, page: page, size: size, sort: sort, filter: filter, recordDataFilter: recordDataFilter).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List records (eCRF instances) in a study
     - GET /studies/{studyKey}/records
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyAuth
     - API Key:
       - type: apiKey x-imn-security-key (HEADER)
       - name: securityKeyAuth
     - parameter studyKey: (path) Study key identifying the study context for the request 
     - parameter page: (query) Page index to retrieve (0-based) (optional, default to 0)
     - parameter size: (query) Number of items to return per page (max 500) (optional, default to 25)
     - parameter sort: (query) Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated. (optional)
     - parameter filter: (query) Optional filter criteria to apply, in the format &#x60;attribute&#x3D;&#x3D;value&#x60; with support for &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, !&#x3D;. Multiple criteria can be combined with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR). (optional)
     - parameter recordDataFilter: (query) Optional filter criteria to apply on recordData fields (question responses). Supports &#x3D;&#x3D;, !&#x3D;, &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;~ (contains) and can combine multiple criteria with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR). (optional)
     - returns: RequestBuilder<RecordList> 
     */
    open class func listRecordsWithRequestBuilder(studyKey: String, page: Int? = nil, size: Int? = nil, sort: String? = nil, filter: String? = nil, recordDataFilter: String? = nil) -> RequestBuilder<RecordList> {
        var localVariablePath = "/studies/{studyKey}/records"
        let studyKeyPreEscape = "\(APIHelper.mapValueToPathItem(studyKey))"
        let studyKeyPostEscape = studyKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{studyKey}", with: studyKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "size": (wrappedValue: size?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "filter": (wrappedValue: filter?.encodeToJSON(), isExplode: true),
            "recordDataFilter": (wrappedValue: recordDataFilter?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RecordList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
