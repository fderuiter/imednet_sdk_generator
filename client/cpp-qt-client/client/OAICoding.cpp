/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICoding.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICoding::OAICoding(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICoding::OAICoding() {
    this->initializeModel();
}

OAICoding::~OAICoding() {}

void OAICoding::initializeModel() {

    m_study_key_isSet = false;
    m_study_key_isValid = false;

    m_site_name_isSet = false;
    m_site_name_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_subject_id_isSet = false;
    m_subject_id_isValid = false;

    m_subject_key_isSet = false;
    m_subject_key_isValid = false;

    m_form_id_isSet = false;
    m_form_id_isValid = false;

    m_form_name_isSet = false;
    m_form_name_isValid = false;

    m_form_key_isSet = false;
    m_form_key_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_record_id_isSet = false;
    m_record_id_isValid = false;

    m_variable_isSet = false;
    m_variable_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_coding_id_isSet = false;
    m_coding_id_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_coded_by_isSet = false;
    m_coded_by_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_dictionary_name_isSet = false;
    m_dictionary_name_isValid = false;

    m_dictionary_version_isSet = false;
    m_dictionary_version_isValid = false;

    m_date_coded_isSet = false;
    m_date_coded_isValid = false;
}

void OAICoding::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICoding::fromJsonObject(QJsonObject json) {

    m_study_key_isValid = ::OpenAPI::fromJsonValue(m_study_key, json[QString("studyKey")]);
    m_study_key_isSet = !json[QString("studyKey")].isNull() && m_study_key_isValid;

    m_site_name_isValid = ::OpenAPI::fromJsonValue(m_site_name, json[QString("siteName")]);
    m_site_name_isSet = !json[QString("siteName")].isNull() && m_site_name_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("siteId")]);
    m_site_id_isSet = !json[QString("siteId")].isNull() && m_site_id_isValid;

    m_subject_id_isValid = ::OpenAPI::fromJsonValue(m_subject_id, json[QString("subjectId")]);
    m_subject_id_isSet = !json[QString("subjectId")].isNull() && m_subject_id_isValid;

    m_subject_key_isValid = ::OpenAPI::fromJsonValue(m_subject_key, json[QString("subjectKey")]);
    m_subject_key_isSet = !json[QString("subjectKey")].isNull() && m_subject_key_isValid;

    m_form_id_isValid = ::OpenAPI::fromJsonValue(m_form_id, json[QString("formId")]);
    m_form_id_isSet = !json[QString("formId")].isNull() && m_form_id_isValid;

    m_form_name_isValid = ::OpenAPI::fromJsonValue(m_form_name, json[QString("formName")]);
    m_form_name_isSet = !json[QString("formName")].isNull() && m_form_name_isValid;

    m_form_key_isValid = ::OpenAPI::fromJsonValue(m_form_key, json[QString("formKey")]);
    m_form_key_isSet = !json[QString("formKey")].isNull() && m_form_key_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_record_id_isValid = ::OpenAPI::fromJsonValue(m_record_id, json[QString("recordId")]);
    m_record_id_isSet = !json[QString("recordId")].isNull() && m_record_id_isValid;

    m_variable_isValid = ::OpenAPI::fromJsonValue(m_variable, json[QString("variable")]);
    m_variable_isSet = !json[QString("variable")].isNull() && m_variable_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_coding_id_isValid = ::OpenAPI::fromJsonValue(m_coding_id, json[QString("codingId")]);
    m_coding_id_isSet = !json[QString("codingId")].isNull() && m_coding_id_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_coded_by_isValid = ::OpenAPI::fromJsonValue(m_coded_by, json[QString("codedBy")]);
    m_coded_by_isSet = !json[QString("codedBy")].isNull() && m_coded_by_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_dictionary_name_isValid = ::OpenAPI::fromJsonValue(m_dictionary_name, json[QString("dictionaryName")]);
    m_dictionary_name_isSet = !json[QString("dictionaryName")].isNull() && m_dictionary_name_isValid;

    m_dictionary_version_isValid = ::OpenAPI::fromJsonValue(m_dictionary_version, json[QString("dictionaryVersion")]);
    m_dictionary_version_isSet = !json[QString("dictionaryVersion")].isNull() && m_dictionary_version_isValid;

    m_date_coded_isValid = ::OpenAPI::fromJsonValue(m_date_coded, json[QString("dateCoded")]);
    m_date_coded_isSet = !json[QString("dateCoded")].isNull() && m_date_coded_isValid;
}

QString OAICoding::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICoding::asJsonObject() const {
    QJsonObject obj;
    if (m_study_key_isSet) {
        obj.insert(QString("studyKey"), ::OpenAPI::toJsonValue(m_study_key));
    }
    if (m_site_name_isSet) {
        obj.insert(QString("siteName"), ::OpenAPI::toJsonValue(m_site_name));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("siteId"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_subject_id_isSet) {
        obj.insert(QString("subjectId"), ::OpenAPI::toJsonValue(m_subject_id));
    }
    if (m_subject_key_isSet) {
        obj.insert(QString("subjectKey"), ::OpenAPI::toJsonValue(m_subject_key));
    }
    if (m_form_id_isSet) {
        obj.insert(QString("formId"), ::OpenAPI::toJsonValue(m_form_id));
    }
    if (m_form_name_isSet) {
        obj.insert(QString("formName"), ::OpenAPI::toJsonValue(m_form_name));
    }
    if (m_form_key_isSet) {
        obj.insert(QString("formKey"), ::OpenAPI::toJsonValue(m_form_key));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_record_id_isSet) {
        obj.insert(QString("recordId"), ::OpenAPI::toJsonValue(m_record_id));
    }
    if (m_variable_isSet) {
        obj.insert(QString("variable"), ::OpenAPI::toJsonValue(m_variable));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_coding_id_isSet) {
        obj.insert(QString("codingId"), ::OpenAPI::toJsonValue(m_coding_id));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_coded_by_isSet) {
        obj.insert(QString("codedBy"), ::OpenAPI::toJsonValue(m_coded_by));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_dictionary_name_isSet) {
        obj.insert(QString("dictionaryName"), ::OpenAPI::toJsonValue(m_dictionary_name));
    }
    if (m_dictionary_version_isSet) {
        obj.insert(QString("dictionaryVersion"), ::OpenAPI::toJsonValue(m_dictionary_version));
    }
    if (m_date_coded_isSet) {
        obj.insert(QString("dateCoded"), ::OpenAPI::toJsonValue(m_date_coded));
    }
    return obj;
}

QString OAICoding::getStudyKey() const {
    return m_study_key;
}
void OAICoding::setStudyKey(const QString &study_key) {
    m_study_key = study_key;
    m_study_key_isSet = true;
}

bool OAICoding::is_study_key_Set() const{
    return m_study_key_isSet;
}

bool OAICoding::is_study_key_Valid() const{
    return m_study_key_isValid;
}

QString OAICoding::getSiteName() const {
    return m_site_name;
}
void OAICoding::setSiteName(const QString &site_name) {
    m_site_name = site_name;
    m_site_name_isSet = true;
}

bool OAICoding::is_site_name_Set() const{
    return m_site_name_isSet;
}

bool OAICoding::is_site_name_Valid() const{
    return m_site_name_isValid;
}

qint32 OAICoding::getSiteId() const {
    return m_site_id;
}
void OAICoding::setSiteId(const qint32 &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAICoding::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAICoding::is_site_id_Valid() const{
    return m_site_id_isValid;
}

qint32 OAICoding::getSubjectId() const {
    return m_subject_id;
}
void OAICoding::setSubjectId(const qint32 &subject_id) {
    m_subject_id = subject_id;
    m_subject_id_isSet = true;
}

bool OAICoding::is_subject_id_Set() const{
    return m_subject_id_isSet;
}

bool OAICoding::is_subject_id_Valid() const{
    return m_subject_id_isValid;
}

QString OAICoding::getSubjectKey() const {
    return m_subject_key;
}
void OAICoding::setSubjectKey(const QString &subject_key) {
    m_subject_key = subject_key;
    m_subject_key_isSet = true;
}

bool OAICoding::is_subject_key_Set() const{
    return m_subject_key_isSet;
}

bool OAICoding::is_subject_key_Valid() const{
    return m_subject_key_isValid;
}

qint32 OAICoding::getFormId() const {
    return m_form_id;
}
void OAICoding::setFormId(const qint32 &form_id) {
    m_form_id = form_id;
    m_form_id_isSet = true;
}

bool OAICoding::is_form_id_Set() const{
    return m_form_id_isSet;
}

bool OAICoding::is_form_id_Valid() const{
    return m_form_id_isValid;
}

QString OAICoding::getFormName() const {
    return m_form_name;
}
void OAICoding::setFormName(const QString &form_name) {
    m_form_name = form_name;
    m_form_name_isSet = true;
}

bool OAICoding::is_form_name_Set() const{
    return m_form_name_isSet;
}

bool OAICoding::is_form_name_Valid() const{
    return m_form_name_isValid;
}

QString OAICoding::getFormKey() const {
    return m_form_key;
}
void OAICoding::setFormKey(const QString &form_key) {
    m_form_key = form_key;
    m_form_key_isSet = true;
}

bool OAICoding::is_form_key_Set() const{
    return m_form_key_isSet;
}

bool OAICoding::is_form_key_Valid() const{
    return m_form_key_isValid;
}

qint32 OAICoding::getRevision() const {
    return m_revision;
}
void OAICoding::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAICoding::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAICoding::is_revision_Valid() const{
    return m_revision_isValid;
}

qint32 OAICoding::getRecordId() const {
    return m_record_id;
}
void OAICoding::setRecordId(const qint32 &record_id) {
    m_record_id = record_id;
    m_record_id_isSet = true;
}

bool OAICoding::is_record_id_Set() const{
    return m_record_id_isSet;
}

bool OAICoding::is_record_id_Valid() const{
    return m_record_id_isValid;
}

QString OAICoding::getVariable() const {
    return m_variable;
}
void OAICoding::setVariable(const QString &variable) {
    m_variable = variable;
    m_variable_isSet = true;
}

bool OAICoding::is_variable_Set() const{
    return m_variable_isSet;
}

bool OAICoding::is_variable_Valid() const{
    return m_variable_isValid;
}

QString OAICoding::getValue() const {
    return m_value;
}
void OAICoding::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAICoding::is_value_Set() const{
    return m_value_isSet;
}

bool OAICoding::is_value_Valid() const{
    return m_value_isValid;
}

qint32 OAICoding::getCodingId() const {
    return m_coding_id;
}
void OAICoding::setCodingId(const qint32 &coding_id) {
    m_coding_id = coding_id;
    m_coding_id_isSet = true;
}

bool OAICoding::is_coding_id_Set() const{
    return m_coding_id_isSet;
}

bool OAICoding::is_coding_id_Valid() const{
    return m_coding_id_isValid;
}

QString OAICoding::getCode() const {
    return m_code;
}
void OAICoding::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICoding::is_code_Set() const{
    return m_code_isSet;
}

bool OAICoding::is_code_Valid() const{
    return m_code_isValid;
}

QString OAICoding::getCodedBy() const {
    return m_coded_by;
}
void OAICoding::setCodedBy(const QString &coded_by) {
    m_coded_by = coded_by;
    m_coded_by_isSet = true;
}

bool OAICoding::is_coded_by_Set() const{
    return m_coded_by_isSet;
}

bool OAICoding::is_coded_by_Valid() const{
    return m_coded_by_isValid;
}

QString OAICoding::getReason() const {
    return m_reason;
}
void OAICoding::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAICoding::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAICoding::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAICoding::getDictionaryName() const {
    return m_dictionary_name;
}
void OAICoding::setDictionaryName(const QString &dictionary_name) {
    m_dictionary_name = dictionary_name;
    m_dictionary_name_isSet = true;
}

bool OAICoding::is_dictionary_name_Set() const{
    return m_dictionary_name_isSet;
}

bool OAICoding::is_dictionary_name_Valid() const{
    return m_dictionary_name_isValid;
}

QString OAICoding::getDictionaryVersion() const {
    return m_dictionary_version;
}
void OAICoding::setDictionaryVersion(const QString &dictionary_version) {
    m_dictionary_version = dictionary_version;
    m_dictionary_version_isSet = true;
}

bool OAICoding::is_dictionary_version_Set() const{
    return m_dictionary_version_isSet;
}

bool OAICoding::is_dictionary_version_Valid() const{
    return m_dictionary_version_isValid;
}

QString OAICoding::getDateCoded() const {
    return m_date_coded;
}
void OAICoding::setDateCoded(const QString &date_coded) {
    m_date_coded = date_coded;
    m_date_coded_isSet = true;
}

bool OAICoding::is_date_coded_Set() const{
    return m_date_coded_isSet;
}

bool OAICoding::is_date_coded_Valid() const{
    return m_date_coded_isValid;
}

bool OAICoding::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_study_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coding_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coded_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dictionary_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dictionary_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_coded_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICoding::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
