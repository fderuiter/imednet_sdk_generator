/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIComponents_schemas_RecordCreateRequest_item.h
 *
 * 
 */

#ifndef OAIComponents_schemas_RecordCreateRequest_item_H
#define OAIComponents_schemas_RecordCreateRequest_item_H

#include <QJsonObject>

#include <QJsonValue>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIComponents_schemas_RecordCreateRequest_item : public OAIObject {
public:
    OAIComponents_schemas_RecordCreateRequest_item();
    OAIComponents_schemas_RecordCreateRequest_item(QString json);
    ~OAIComponents_schemas_RecordCreateRequest_item() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFormKey() const;
    void setFormKey(const QString &form_key);
    bool is_form_key_Set() const;
    bool is_form_key_Valid() const;

    qint32 getFormId() const;
    void setFormId(const qint32 &form_id);
    bool is_form_id_Set() const;
    bool is_form_id_Valid() const;

    QString getSiteName() const;
    void setSiteName(const QString &site_name);
    bool is_site_name_Set() const;
    bool is_site_name_Valid() const;

    qint32 getSiteId() const;
    void setSiteId(const qint32 &site_id);
    bool is_site_id_Set() const;
    bool is_site_id_Valid() const;

    QString getSubjectKey() const;
    void setSubjectKey(const QString &subject_key);
    bool is_subject_key_Set() const;
    bool is_subject_key_Valid() const;

    qint32 getSubjectId() const;
    void setSubjectId(const qint32 &subject_id);
    bool is_subject_id_Set() const;
    bool is_subject_id_Valid() const;

    QString getSubjectOid() const;
    void setSubjectOid(const QString &subject_oid);
    bool is_subject_oid_Set() const;
    bool is_subject_oid_Valid() const;

    QString getIntervalName() const;
    void setIntervalName(const QString &interval_name);
    bool is_interval_name_Set() const;
    bool is_interval_name_Valid() const;

    qint32 getIntervalId() const;
    void setIntervalId(const qint32 &interval_id);
    bool is_interval_id_Set() const;
    bool is_interval_id_Valid() const;

    qint32 getRecordId() const;
    void setRecordId(const qint32 &record_id);
    bool is_record_id_Set() const;
    bool is_record_id_Valid() const;

    QString getRecordOid() const;
    void setRecordOid(const QString &record_oid);
    bool is_record_oid_Set() const;
    bool is_record_oid_Valid() const;

    QMap<QString, QJsonValue> getData() const;
    void setData(const QMap<QString, QJsonValue> &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_form_key;
    bool m_form_key_isSet;
    bool m_form_key_isValid;

    qint32 m_form_id;
    bool m_form_id_isSet;
    bool m_form_id_isValid;

    QString m_site_name;
    bool m_site_name_isSet;
    bool m_site_name_isValid;

    qint32 m_site_id;
    bool m_site_id_isSet;
    bool m_site_id_isValid;

    QString m_subject_key;
    bool m_subject_key_isSet;
    bool m_subject_key_isValid;

    qint32 m_subject_id;
    bool m_subject_id_isSet;
    bool m_subject_id_isValid;

    QString m_subject_oid;
    bool m_subject_oid_isSet;
    bool m_subject_oid_isValid;

    QString m_interval_name;
    bool m_interval_name_isSet;
    bool m_interval_name_isValid;

    qint32 m_interval_id;
    bool m_interval_id_isSet;
    bool m_interval_id_isValid;

    qint32 m_record_id;
    bool m_record_id_isSet;
    bool m_record_id_isValid;

    QString m_record_oid;
    bool m_record_oid_isSet;
    bool m_record_oid_isValid;

    QMap<QString, QJsonValue> m_data;
    bool m_data_isSet;
    bool m_data_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIComponents_schemas_RecordCreateRequest_item)

#endif // OAIComponents_schemas_RecordCreateRequest_item_H
