/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVisit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVisit::OAIVisit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVisit::OAIVisit() {
    this->initializeModel();
}

OAIVisit::~OAIVisit() {}

void OAIVisit::initializeModel() {

    m_study_key_isSet = false;
    m_study_key_isValid = false;

    m_visit_id_isSet = false;
    m_visit_id_isValid = false;

    m_interval_id_isSet = false;
    m_interval_id_isValid = false;

    m_interval_name_isSet = false;
    m_interval_name_isValid = false;

    m_subject_id_isSet = false;
    m_subject_id_isValid = false;

    m_subject_key_isSet = false;
    m_subject_key_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_visit_date_isSet = false;
    m_visit_date_isValid = false;

    m_visit_date_form_isSet = false;
    m_visit_date_form_isValid = false;

    m_visit_date_question_isSet = false;
    m_visit_date_question_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;
}

void OAIVisit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVisit::fromJsonObject(QJsonObject json) {

    m_study_key_isValid = ::OpenAPI::fromJsonValue(m_study_key, json[QString("studyKey")]);
    m_study_key_isSet = !json[QString("studyKey")].isNull() && m_study_key_isValid;

    m_visit_id_isValid = ::OpenAPI::fromJsonValue(m_visit_id, json[QString("visitId")]);
    m_visit_id_isSet = !json[QString("visitId")].isNull() && m_visit_id_isValid;

    m_interval_id_isValid = ::OpenAPI::fromJsonValue(m_interval_id, json[QString("intervalId")]);
    m_interval_id_isSet = !json[QString("intervalId")].isNull() && m_interval_id_isValid;

    m_interval_name_isValid = ::OpenAPI::fromJsonValue(m_interval_name, json[QString("intervalName")]);
    m_interval_name_isSet = !json[QString("intervalName")].isNull() && m_interval_name_isValid;

    m_subject_id_isValid = ::OpenAPI::fromJsonValue(m_subject_id, json[QString("subjectId")]);
    m_subject_id_isSet = !json[QString("subjectId")].isNull() && m_subject_id_isValid;

    m_subject_key_isValid = ::OpenAPI::fromJsonValue(m_subject_key, json[QString("subjectKey")]);
    m_subject_key_isSet = !json[QString("subjectKey")].isNull() && m_subject_key_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("dueDate")]);
    m_due_date_isSet = !json[QString("dueDate")].isNull() && m_due_date_isValid;

    m_visit_date_isValid = ::OpenAPI::fromJsonValue(m_visit_date, json[QString("visitDate")]);
    m_visit_date_isSet = !json[QString("visitDate")].isNull() && m_visit_date_isValid;

    m_visit_date_form_isValid = ::OpenAPI::fromJsonValue(m_visit_date_form, json[QString("visitDateForm")]);
    m_visit_date_form_isSet = !json[QString("visitDateForm")].isNull() && m_visit_date_form_isValid;

    m_visit_date_question_isValid = ::OpenAPI::fromJsonValue(m_visit_date_question, json[QString("visitDateQuestion")]);
    m_visit_date_question_isSet = !json[QString("visitDateQuestion")].isNull() && m_visit_date_question_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;
}

QString OAIVisit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVisit::asJsonObject() const {
    QJsonObject obj;
    if (m_study_key_isSet) {
        obj.insert(QString("studyKey"), ::OpenAPI::toJsonValue(m_study_key));
    }
    if (m_visit_id_isSet) {
        obj.insert(QString("visitId"), ::OpenAPI::toJsonValue(m_visit_id));
    }
    if (m_interval_id_isSet) {
        obj.insert(QString("intervalId"), ::OpenAPI::toJsonValue(m_interval_id));
    }
    if (m_interval_name_isSet) {
        obj.insert(QString("intervalName"), ::OpenAPI::toJsonValue(m_interval_name));
    }
    if (m_subject_id_isSet) {
        obj.insert(QString("subjectId"), ::OpenAPI::toJsonValue(m_subject_id));
    }
    if (m_subject_key_isSet) {
        obj.insert(QString("subjectKey"), ::OpenAPI::toJsonValue(m_subject_key));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("dueDate"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_visit_date_isSet) {
        obj.insert(QString("visitDate"), ::OpenAPI::toJsonValue(m_visit_date));
    }
    if (m_visit_date_form_isSet) {
        obj.insert(QString("visitDateForm"), ::OpenAPI::toJsonValue(m_visit_date_form));
    }
    if (m_visit_date_question_isSet) {
        obj.insert(QString("visitDateQuestion"), ::OpenAPI::toJsonValue(m_visit_date_question));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    return obj;
}

QString OAIVisit::getStudyKey() const {
    return m_study_key;
}
void OAIVisit::setStudyKey(const QString &study_key) {
    m_study_key = study_key;
    m_study_key_isSet = true;
}

bool OAIVisit::is_study_key_Set() const{
    return m_study_key_isSet;
}

bool OAIVisit::is_study_key_Valid() const{
    return m_study_key_isValid;
}

qint32 OAIVisit::getVisitId() const {
    return m_visit_id;
}
void OAIVisit::setVisitId(const qint32 &visit_id) {
    m_visit_id = visit_id;
    m_visit_id_isSet = true;
}

bool OAIVisit::is_visit_id_Set() const{
    return m_visit_id_isSet;
}

bool OAIVisit::is_visit_id_Valid() const{
    return m_visit_id_isValid;
}

qint32 OAIVisit::getIntervalId() const {
    return m_interval_id;
}
void OAIVisit::setIntervalId(const qint32 &interval_id) {
    m_interval_id = interval_id;
    m_interval_id_isSet = true;
}

bool OAIVisit::is_interval_id_Set() const{
    return m_interval_id_isSet;
}

bool OAIVisit::is_interval_id_Valid() const{
    return m_interval_id_isValid;
}

QString OAIVisit::getIntervalName() const {
    return m_interval_name;
}
void OAIVisit::setIntervalName(const QString &interval_name) {
    m_interval_name = interval_name;
    m_interval_name_isSet = true;
}

bool OAIVisit::is_interval_name_Set() const{
    return m_interval_name_isSet;
}

bool OAIVisit::is_interval_name_Valid() const{
    return m_interval_name_isValid;
}

qint32 OAIVisit::getSubjectId() const {
    return m_subject_id;
}
void OAIVisit::setSubjectId(const qint32 &subject_id) {
    m_subject_id = subject_id;
    m_subject_id_isSet = true;
}

bool OAIVisit::is_subject_id_Set() const{
    return m_subject_id_isSet;
}

bool OAIVisit::is_subject_id_Valid() const{
    return m_subject_id_isValid;
}

QString OAIVisit::getSubjectKey() const {
    return m_subject_key;
}
void OAIVisit::setSubjectKey(const QString &subject_key) {
    m_subject_key = subject_key;
    m_subject_key_isSet = true;
}

bool OAIVisit::is_subject_key_Set() const{
    return m_subject_key_isSet;
}

bool OAIVisit::is_subject_key_Valid() const{
    return m_subject_key_isValid;
}

QString OAIVisit::getStartDate() const {
    return m_start_date;
}
void OAIVisit::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIVisit::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIVisit::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIVisit::getEndDate() const {
    return m_end_date;
}
void OAIVisit::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIVisit::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIVisit::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIVisit::getDueDate() const {
    return m_due_date;
}
void OAIVisit::setDueDate(const QString &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIVisit::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIVisit::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAIVisit::getVisitDate() const {
    return m_visit_date;
}
void OAIVisit::setVisitDate(const QString &visit_date) {
    m_visit_date = visit_date;
    m_visit_date_isSet = true;
}

bool OAIVisit::is_visit_date_Set() const{
    return m_visit_date_isSet;
}

bool OAIVisit::is_visit_date_Valid() const{
    return m_visit_date_isValid;
}

QString OAIVisit::getVisitDateForm() const {
    return m_visit_date_form;
}
void OAIVisit::setVisitDateForm(const QString &visit_date_form) {
    m_visit_date_form = visit_date_form;
    m_visit_date_form_isSet = true;
}

bool OAIVisit::is_visit_date_form_Set() const{
    return m_visit_date_form_isSet;
}

bool OAIVisit::is_visit_date_form_Valid() const{
    return m_visit_date_form_isValid;
}

QString OAIVisit::getVisitDateQuestion() const {
    return m_visit_date_question;
}
void OAIVisit::setVisitDateQuestion(const QString &visit_date_question) {
    m_visit_date_question = visit_date_question;
    m_visit_date_question_isSet = true;
}

bool OAIVisit::is_visit_date_question_Set() const{
    return m_visit_date_question_isSet;
}

bool OAIVisit::is_visit_date_question_Valid() const{
    return m_visit_date_question_isValid;
}

bool OAIVisit::isDeleted() const {
    return m_deleted;
}
void OAIVisit::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIVisit::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIVisit::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIVisit::getDateCreated() const {
    return m_date_created;
}
void OAIVisit::setDateCreated(const QString &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIVisit::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIVisit::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIVisit::getDateModified() const {
    return m_date_modified;
}
void OAIVisit::setDateModified(const QString &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIVisit::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIVisit::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

bool OAIVisit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_study_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visit_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visit_date_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visit_date_question_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVisit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
