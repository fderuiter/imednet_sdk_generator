/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForm::OAIForm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForm::OAIForm() {
    this->initializeModel();
}

OAIForm::~OAIForm() {}

void OAIForm::initializeModel() {

    m_study_key_isSet = false;
    m_study_key_isValid = false;

    m_form_id_isSet = false;
    m_form_id_isValid = false;

    m_form_key_isSet = false;
    m_form_key_isValid = false;

    m_form_name_isSet = false;
    m_form_name_isValid = false;

    m_form_type_isSet = false;
    m_form_type_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_embedded_log_isSet = false;
    m_embedded_log_isValid = false;

    m_enforce_ownership_isSet = false;
    m_enforce_ownership_isValid = false;

    m_user_agreement_isSet = false;
    m_user_agreement_isValid = false;

    m_subject_record_report_isSet = false;
    m_subject_record_report_isValid = false;

    m_unscheduled_visit_isSet = false;
    m_unscheduled_visit_isValid = false;

    m_other_forms_isSet = false;
    m_other_forms_isValid = false;

    m_epro_form_isSet = false;
    m_epro_form_isValid = false;

    m_allow_copy_isSet = false;
    m_allow_copy_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;
}

void OAIForm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForm::fromJsonObject(QJsonObject json) {

    m_study_key_isValid = ::OpenAPI::fromJsonValue(m_study_key, json[QString("studyKey")]);
    m_study_key_isSet = !json[QString("studyKey")].isNull() && m_study_key_isValid;

    m_form_id_isValid = ::OpenAPI::fromJsonValue(m_form_id, json[QString("formId")]);
    m_form_id_isSet = !json[QString("formId")].isNull() && m_form_id_isValid;

    m_form_key_isValid = ::OpenAPI::fromJsonValue(m_form_key, json[QString("formKey")]);
    m_form_key_isSet = !json[QString("formKey")].isNull() && m_form_key_isValid;

    m_form_name_isValid = ::OpenAPI::fromJsonValue(m_form_name, json[QString("formName")]);
    m_form_name_isSet = !json[QString("formName")].isNull() && m_form_name_isValid;

    m_form_type_isValid = ::OpenAPI::fromJsonValue(m_form_type, json[QString("formType")]);
    m_form_type_isSet = !json[QString("formType")].isNull() && m_form_type_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_embedded_log_isValid = ::OpenAPI::fromJsonValue(m_embedded_log, json[QString("embeddedLog")]);
    m_embedded_log_isSet = !json[QString("embeddedLog")].isNull() && m_embedded_log_isValid;

    m_enforce_ownership_isValid = ::OpenAPI::fromJsonValue(m_enforce_ownership, json[QString("enforceOwnership")]);
    m_enforce_ownership_isSet = !json[QString("enforceOwnership")].isNull() && m_enforce_ownership_isValid;

    m_user_agreement_isValid = ::OpenAPI::fromJsonValue(m_user_agreement, json[QString("userAgreement")]);
    m_user_agreement_isSet = !json[QString("userAgreement")].isNull() && m_user_agreement_isValid;

    m_subject_record_report_isValid = ::OpenAPI::fromJsonValue(m_subject_record_report, json[QString("subjectRecordReport")]);
    m_subject_record_report_isSet = !json[QString("subjectRecordReport")].isNull() && m_subject_record_report_isValid;

    m_unscheduled_visit_isValid = ::OpenAPI::fromJsonValue(m_unscheduled_visit, json[QString("unscheduledVisit")]);
    m_unscheduled_visit_isSet = !json[QString("unscheduledVisit")].isNull() && m_unscheduled_visit_isValid;

    m_other_forms_isValid = ::OpenAPI::fromJsonValue(m_other_forms, json[QString("otherForms")]);
    m_other_forms_isSet = !json[QString("otherForms")].isNull() && m_other_forms_isValid;

    m_epro_form_isValid = ::OpenAPI::fromJsonValue(m_epro_form, json[QString("eproForm")]);
    m_epro_form_isSet = !json[QString("eproForm")].isNull() && m_epro_form_isValid;

    m_allow_copy_isValid = ::OpenAPI::fromJsonValue(m_allow_copy, json[QString("allowCopy")]);
    m_allow_copy_isSet = !json[QString("allowCopy")].isNull() && m_allow_copy_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;
}

QString OAIForm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForm::asJsonObject() const {
    QJsonObject obj;
    if (m_study_key_isSet) {
        obj.insert(QString("studyKey"), ::OpenAPI::toJsonValue(m_study_key));
    }
    if (m_form_id_isSet) {
        obj.insert(QString("formId"), ::OpenAPI::toJsonValue(m_form_id));
    }
    if (m_form_key_isSet) {
        obj.insert(QString("formKey"), ::OpenAPI::toJsonValue(m_form_key));
    }
    if (m_form_name_isSet) {
        obj.insert(QString("formName"), ::OpenAPI::toJsonValue(m_form_name));
    }
    if (m_form_type_isSet) {
        obj.insert(QString("formType"), ::OpenAPI::toJsonValue(m_form_type));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_embedded_log_isSet) {
        obj.insert(QString("embeddedLog"), ::OpenAPI::toJsonValue(m_embedded_log));
    }
    if (m_enforce_ownership_isSet) {
        obj.insert(QString("enforceOwnership"), ::OpenAPI::toJsonValue(m_enforce_ownership));
    }
    if (m_user_agreement_isSet) {
        obj.insert(QString("userAgreement"), ::OpenAPI::toJsonValue(m_user_agreement));
    }
    if (m_subject_record_report_isSet) {
        obj.insert(QString("subjectRecordReport"), ::OpenAPI::toJsonValue(m_subject_record_report));
    }
    if (m_unscheduled_visit_isSet) {
        obj.insert(QString("unscheduledVisit"), ::OpenAPI::toJsonValue(m_unscheduled_visit));
    }
    if (m_other_forms_isSet) {
        obj.insert(QString("otherForms"), ::OpenAPI::toJsonValue(m_other_forms));
    }
    if (m_epro_form_isSet) {
        obj.insert(QString("eproForm"), ::OpenAPI::toJsonValue(m_epro_form));
    }
    if (m_allow_copy_isSet) {
        obj.insert(QString("allowCopy"), ::OpenAPI::toJsonValue(m_allow_copy));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    return obj;
}

QString OAIForm::getStudyKey() const {
    return m_study_key;
}
void OAIForm::setStudyKey(const QString &study_key) {
    m_study_key = study_key;
    m_study_key_isSet = true;
}

bool OAIForm::is_study_key_Set() const{
    return m_study_key_isSet;
}

bool OAIForm::is_study_key_Valid() const{
    return m_study_key_isValid;
}

qint32 OAIForm::getFormId() const {
    return m_form_id;
}
void OAIForm::setFormId(const qint32 &form_id) {
    m_form_id = form_id;
    m_form_id_isSet = true;
}

bool OAIForm::is_form_id_Set() const{
    return m_form_id_isSet;
}

bool OAIForm::is_form_id_Valid() const{
    return m_form_id_isValid;
}

QString OAIForm::getFormKey() const {
    return m_form_key;
}
void OAIForm::setFormKey(const QString &form_key) {
    m_form_key = form_key;
    m_form_key_isSet = true;
}

bool OAIForm::is_form_key_Set() const{
    return m_form_key_isSet;
}

bool OAIForm::is_form_key_Valid() const{
    return m_form_key_isValid;
}

QString OAIForm::getFormName() const {
    return m_form_name;
}
void OAIForm::setFormName(const QString &form_name) {
    m_form_name = form_name;
    m_form_name_isSet = true;
}

bool OAIForm::is_form_name_Set() const{
    return m_form_name_isSet;
}

bool OAIForm::is_form_name_Valid() const{
    return m_form_name_isValid;
}

QString OAIForm::getFormType() const {
    return m_form_type;
}
void OAIForm::setFormType(const QString &form_type) {
    m_form_type = form_type;
    m_form_type_isSet = true;
}

bool OAIForm::is_form_type_Set() const{
    return m_form_type_isSet;
}

bool OAIForm::is_form_type_Valid() const{
    return m_form_type_isValid;
}

qint32 OAIForm::getRevision() const {
    return m_revision;
}
void OAIForm::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIForm::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIForm::is_revision_Valid() const{
    return m_revision_isValid;
}

bool OAIForm::isEmbeddedLog() const {
    return m_embedded_log;
}
void OAIForm::setEmbeddedLog(const bool &embedded_log) {
    m_embedded_log = embedded_log;
    m_embedded_log_isSet = true;
}

bool OAIForm::is_embedded_log_Set() const{
    return m_embedded_log_isSet;
}

bool OAIForm::is_embedded_log_Valid() const{
    return m_embedded_log_isValid;
}

bool OAIForm::isEnforceOwnership() const {
    return m_enforce_ownership;
}
void OAIForm::setEnforceOwnership(const bool &enforce_ownership) {
    m_enforce_ownership = enforce_ownership;
    m_enforce_ownership_isSet = true;
}

bool OAIForm::is_enforce_ownership_Set() const{
    return m_enforce_ownership_isSet;
}

bool OAIForm::is_enforce_ownership_Valid() const{
    return m_enforce_ownership_isValid;
}

bool OAIForm::isUserAgreement() const {
    return m_user_agreement;
}
void OAIForm::setUserAgreement(const bool &user_agreement) {
    m_user_agreement = user_agreement;
    m_user_agreement_isSet = true;
}

bool OAIForm::is_user_agreement_Set() const{
    return m_user_agreement_isSet;
}

bool OAIForm::is_user_agreement_Valid() const{
    return m_user_agreement_isValid;
}

bool OAIForm::isSubjectRecordReport() const {
    return m_subject_record_report;
}
void OAIForm::setSubjectRecordReport(const bool &subject_record_report) {
    m_subject_record_report = subject_record_report;
    m_subject_record_report_isSet = true;
}

bool OAIForm::is_subject_record_report_Set() const{
    return m_subject_record_report_isSet;
}

bool OAIForm::is_subject_record_report_Valid() const{
    return m_subject_record_report_isValid;
}

bool OAIForm::isUnscheduledVisit() const {
    return m_unscheduled_visit;
}
void OAIForm::setUnscheduledVisit(const bool &unscheduled_visit) {
    m_unscheduled_visit = unscheduled_visit;
    m_unscheduled_visit_isSet = true;
}

bool OAIForm::is_unscheduled_visit_Set() const{
    return m_unscheduled_visit_isSet;
}

bool OAIForm::is_unscheduled_visit_Valid() const{
    return m_unscheduled_visit_isValid;
}

bool OAIForm::isOtherForms() const {
    return m_other_forms;
}
void OAIForm::setOtherForms(const bool &other_forms) {
    m_other_forms = other_forms;
    m_other_forms_isSet = true;
}

bool OAIForm::is_other_forms_Set() const{
    return m_other_forms_isSet;
}

bool OAIForm::is_other_forms_Valid() const{
    return m_other_forms_isValid;
}

bool OAIForm::isEproForm() const {
    return m_epro_form;
}
void OAIForm::setEproForm(const bool &epro_form) {
    m_epro_form = epro_form;
    m_epro_form_isSet = true;
}

bool OAIForm::is_epro_form_Set() const{
    return m_epro_form_isSet;
}

bool OAIForm::is_epro_form_Valid() const{
    return m_epro_form_isValid;
}

bool OAIForm::isAllowCopy() const {
    return m_allow_copy;
}
void OAIForm::setAllowCopy(const bool &allow_copy) {
    m_allow_copy = allow_copy;
    m_allow_copy_isSet = true;
}

bool OAIForm::is_allow_copy_Set() const{
    return m_allow_copy_isSet;
}

bool OAIForm::is_allow_copy_Valid() const{
    return m_allow_copy_isValid;
}

bool OAIForm::isDisabled() const {
    return m_disabled;
}
void OAIForm::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIForm::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIForm::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAIForm::getDateCreated() const {
    return m_date_created;
}
void OAIForm::setDateCreated(const QString &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIForm::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIForm::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIForm::getDateModified() const {
    return m_date_modified;
}
void OAIForm::setDateModified(const QString &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIForm::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIForm::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

bool OAIForm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_study_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_embedded_log_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enforce_ownership_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agreement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_record_report_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unscheduled_visit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_forms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_epro_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_copy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForm::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
