/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPagination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPagination::OAIPagination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPagination::OAIPagination() {
    this->initializeModel();
}

OAIPagination::~OAIPagination() {}

void OAIPagination::initializeModel() {

    m_current_page_isSet = false;
    m_current_page_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_total_pages_isSet = false;
    m_total_pages_isValid = false;

    m_total_elements_isSet = false;
    m_total_elements_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;
}

void OAIPagination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPagination::fromJsonObject(QJsonObject json) {

    m_current_page_isValid = ::OpenAPI::fromJsonValue(m_current_page, json[QString("currentPage")]);
    m_current_page_isSet = !json[QString("currentPage")].isNull() && m_current_page_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_total_pages_isValid = ::OpenAPI::fromJsonValue(m_total_pages, json[QString("totalPages")]);
    m_total_pages_isSet = !json[QString("totalPages")].isNull() && m_total_pages_isValid;

    m_total_elements_isValid = ::OpenAPI::fromJsonValue(m_total_elements, json[QString("totalElements")]);
    m_total_elements_isSet = !json[QString("totalElements")].isNull() && m_total_elements_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;
}

QString OAIPagination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPagination::asJsonObject() const {
    QJsonObject obj;
    if (m_current_page_isSet) {
        obj.insert(QString("currentPage"), ::OpenAPI::toJsonValue(m_current_page));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_total_pages_isSet) {
        obj.insert(QString("totalPages"), ::OpenAPI::toJsonValue(m_total_pages));
    }
    if (m_total_elements_isSet) {
        obj.insert(QString("totalElements"), ::OpenAPI::toJsonValue(m_total_elements));
    }
    if (m_sort.size() > 0) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    return obj;
}

qint32 OAIPagination::getCurrentPage() const {
    return m_current_page;
}
void OAIPagination::setCurrentPage(const qint32 &current_page) {
    m_current_page = current_page;
    m_current_page_isSet = true;
}

bool OAIPagination::is_current_page_Set() const{
    return m_current_page_isSet;
}

bool OAIPagination::is_current_page_Valid() const{
    return m_current_page_isValid;
}

qint32 OAIPagination::getSize() const {
    return m_size;
}
void OAIPagination::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIPagination::is_size_Set() const{
    return m_size_isSet;
}

bool OAIPagination::is_size_Valid() const{
    return m_size_isValid;
}

qint32 OAIPagination::getTotalPages() const {
    return m_total_pages;
}
void OAIPagination::setTotalPages(const qint32 &total_pages) {
    m_total_pages = total_pages;
    m_total_pages_isSet = true;
}

bool OAIPagination::is_total_pages_Set() const{
    return m_total_pages_isSet;
}

bool OAIPagination::is_total_pages_Valid() const{
    return m_total_pages_isValid;
}

qint32 OAIPagination::getTotalElements() const {
    return m_total_elements;
}
void OAIPagination::setTotalElements(const qint32 &total_elements) {
    m_total_elements = total_elements;
    m_total_elements_isSet = true;
}

bool OAIPagination::is_total_elements_Set() const{
    return m_total_elements_isSet;
}

bool OAIPagination::is_total_elements_Valid() const{
    return m_total_elements_isValid;
}

QList<OAISort> OAIPagination::getSort() const {
    return m_sort;
}
void OAIPagination::setSort(const QList<OAISort> &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAIPagination::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAIPagination::is_sort_Valid() const{
    return m_sort_isValid;
}

bool OAIPagination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_elements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPagination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
