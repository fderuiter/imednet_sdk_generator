/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecord.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecord::OAIRecord(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecord::OAIRecord() {
    this->initializeModel();
}

OAIRecord::~OAIRecord() {}

void OAIRecord::initializeModel() {

    m_study_key_isSet = false;
    m_study_key_isValid = false;

    m_interval_id_isSet = false;
    m_interval_id_isValid = false;

    m_form_id_isSet = false;
    m_form_id_isValid = false;

    m_form_key_isSet = false;
    m_form_key_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_record_id_isSet = false;
    m_record_id_isValid = false;

    m_record_oid_isSet = false;
    m_record_oid_isValid = false;

    m_record_type_isSet = false;
    m_record_type_isValid = false;

    m_record_status_isSet = false;
    m_record_status_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_subject_id_isSet = false;
    m_subject_id_isValid = false;

    m_subject_oid_isSet = false;
    m_subject_oid_isValid = false;

    m_subject_key_isSet = false;
    m_subject_key_isValid = false;

    m_visit_id_isSet = false;
    m_visit_id_isValid = false;

    m_parent_record_id_isSet = false;
    m_parent_record_id_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_record_data_isSet = false;
    m_record_data_isValid = false;
}

void OAIRecord::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecord::fromJsonObject(QJsonObject json) {

    m_study_key_isValid = ::OpenAPI::fromJsonValue(m_study_key, json[QString("studyKey")]);
    m_study_key_isSet = !json[QString("studyKey")].isNull() && m_study_key_isValid;

    m_interval_id_isValid = ::OpenAPI::fromJsonValue(m_interval_id, json[QString("intervalId")]);
    m_interval_id_isSet = !json[QString("intervalId")].isNull() && m_interval_id_isValid;

    m_form_id_isValid = ::OpenAPI::fromJsonValue(m_form_id, json[QString("formId")]);
    m_form_id_isSet = !json[QString("formId")].isNull() && m_form_id_isValid;

    m_form_key_isValid = ::OpenAPI::fromJsonValue(m_form_key, json[QString("formKey")]);
    m_form_key_isSet = !json[QString("formKey")].isNull() && m_form_key_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("siteId")]);
    m_site_id_isSet = !json[QString("siteId")].isNull() && m_site_id_isValid;

    m_record_id_isValid = ::OpenAPI::fromJsonValue(m_record_id, json[QString("recordId")]);
    m_record_id_isSet = !json[QString("recordId")].isNull() && m_record_id_isValid;

    m_record_oid_isValid = ::OpenAPI::fromJsonValue(m_record_oid, json[QString("recordOid")]);
    m_record_oid_isSet = !json[QString("recordOid")].isNull() && m_record_oid_isValid;

    m_record_type_isValid = ::OpenAPI::fromJsonValue(m_record_type, json[QString("recordType")]);
    m_record_type_isSet = !json[QString("recordType")].isNull() && m_record_type_isValid;

    m_record_status_isValid = ::OpenAPI::fromJsonValue(m_record_status, json[QString("recordStatus")]);
    m_record_status_isSet = !json[QString("recordStatus")].isNull() && m_record_status_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_subject_id_isValid = ::OpenAPI::fromJsonValue(m_subject_id, json[QString("subjectId")]);
    m_subject_id_isSet = !json[QString("subjectId")].isNull() && m_subject_id_isValid;

    m_subject_oid_isValid = ::OpenAPI::fromJsonValue(m_subject_oid, json[QString("subjectOid")]);
    m_subject_oid_isSet = !json[QString("subjectOid")].isNull() && m_subject_oid_isValid;

    m_subject_key_isValid = ::OpenAPI::fromJsonValue(m_subject_key, json[QString("subjectKey")]);
    m_subject_key_isSet = !json[QString("subjectKey")].isNull() && m_subject_key_isValid;

    m_visit_id_isValid = ::OpenAPI::fromJsonValue(m_visit_id, json[QString("visitId")]);
    m_visit_id_isSet = !json[QString("visitId")].isNull() && m_visit_id_isValid;

    m_parent_record_id_isValid = ::OpenAPI::fromJsonValue(m_parent_record_id, json[QString("parentRecordId")]);
    m_parent_record_id_isSet = !json[QString("parentRecordId")].isNull() && m_parent_record_id_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_record_data_isValid = ::OpenAPI::fromJsonValue(m_record_data, json[QString("recordData")]);
    m_record_data_isSet = !json[QString("recordData")].isNull() && m_record_data_isValid;
}

QString OAIRecord::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecord::asJsonObject() const {
    QJsonObject obj;
    if (m_study_key_isSet) {
        obj.insert(QString("studyKey"), ::OpenAPI::toJsonValue(m_study_key));
    }
    if (m_interval_id_isSet) {
        obj.insert(QString("intervalId"), ::OpenAPI::toJsonValue(m_interval_id));
    }
    if (m_form_id_isSet) {
        obj.insert(QString("formId"), ::OpenAPI::toJsonValue(m_form_id));
    }
    if (m_form_key_isSet) {
        obj.insert(QString("formKey"), ::OpenAPI::toJsonValue(m_form_key));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("siteId"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_record_id_isSet) {
        obj.insert(QString("recordId"), ::OpenAPI::toJsonValue(m_record_id));
    }
    if (m_record_oid_isSet) {
        obj.insert(QString("recordOid"), ::OpenAPI::toJsonValue(m_record_oid));
    }
    if (m_record_type_isSet) {
        obj.insert(QString("recordType"), ::OpenAPI::toJsonValue(m_record_type));
    }
    if (m_record_status_isSet) {
        obj.insert(QString("recordStatus"), ::OpenAPI::toJsonValue(m_record_status));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_subject_id_isSet) {
        obj.insert(QString("subjectId"), ::OpenAPI::toJsonValue(m_subject_id));
    }
    if (m_subject_oid_isSet) {
        obj.insert(QString("subjectOid"), ::OpenAPI::toJsonValue(m_subject_oid));
    }
    if (m_subject_key_isSet) {
        obj.insert(QString("subjectKey"), ::OpenAPI::toJsonValue(m_subject_key));
    }
    if (m_visit_id_isSet) {
        obj.insert(QString("visitId"), ::OpenAPI::toJsonValue(m_visit_id));
    }
    if (m_parent_record_id_isSet) {
        obj.insert(QString("parentRecordId"), ::OpenAPI::toJsonValue(m_parent_record_id));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_record_data.size() > 0) {
        obj.insert(QString("recordData"), ::OpenAPI::toJsonValue(m_record_data));
    }
    return obj;
}

QString OAIRecord::getStudyKey() const {
    return m_study_key;
}
void OAIRecord::setStudyKey(const QString &study_key) {
    m_study_key = study_key;
    m_study_key_isSet = true;
}

bool OAIRecord::is_study_key_Set() const{
    return m_study_key_isSet;
}

bool OAIRecord::is_study_key_Valid() const{
    return m_study_key_isValid;
}

qint32 OAIRecord::getIntervalId() const {
    return m_interval_id;
}
void OAIRecord::setIntervalId(const qint32 &interval_id) {
    m_interval_id = interval_id;
    m_interval_id_isSet = true;
}

bool OAIRecord::is_interval_id_Set() const{
    return m_interval_id_isSet;
}

bool OAIRecord::is_interval_id_Valid() const{
    return m_interval_id_isValid;
}

qint32 OAIRecord::getFormId() const {
    return m_form_id;
}
void OAIRecord::setFormId(const qint32 &form_id) {
    m_form_id = form_id;
    m_form_id_isSet = true;
}

bool OAIRecord::is_form_id_Set() const{
    return m_form_id_isSet;
}

bool OAIRecord::is_form_id_Valid() const{
    return m_form_id_isValid;
}

QString OAIRecord::getFormKey() const {
    return m_form_key;
}
void OAIRecord::setFormKey(const QString &form_key) {
    m_form_key = form_key;
    m_form_key_isSet = true;
}

bool OAIRecord::is_form_key_Set() const{
    return m_form_key_isSet;
}

bool OAIRecord::is_form_key_Valid() const{
    return m_form_key_isValid;
}

qint32 OAIRecord::getSiteId() const {
    return m_site_id;
}
void OAIRecord::setSiteId(const qint32 &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAIRecord::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAIRecord::is_site_id_Valid() const{
    return m_site_id_isValid;
}

qint32 OAIRecord::getRecordId() const {
    return m_record_id;
}
void OAIRecord::setRecordId(const qint32 &record_id) {
    m_record_id = record_id;
    m_record_id_isSet = true;
}

bool OAIRecord::is_record_id_Set() const{
    return m_record_id_isSet;
}

bool OAIRecord::is_record_id_Valid() const{
    return m_record_id_isValid;
}

QString OAIRecord::getRecordOid() const {
    return m_record_oid;
}
void OAIRecord::setRecordOid(const QString &record_oid) {
    m_record_oid = record_oid;
    m_record_oid_isSet = true;
}

bool OAIRecord::is_record_oid_Set() const{
    return m_record_oid_isSet;
}

bool OAIRecord::is_record_oid_Valid() const{
    return m_record_oid_isValid;
}

QString OAIRecord::getRecordType() const {
    return m_record_type;
}
void OAIRecord::setRecordType(const QString &record_type) {
    m_record_type = record_type;
    m_record_type_isSet = true;
}

bool OAIRecord::is_record_type_Set() const{
    return m_record_type_isSet;
}

bool OAIRecord::is_record_type_Valid() const{
    return m_record_type_isValid;
}

QString OAIRecord::getRecordStatus() const {
    return m_record_status;
}
void OAIRecord::setRecordStatus(const QString &record_status) {
    m_record_status = record_status;
    m_record_status_isSet = true;
}

bool OAIRecord::is_record_status_Set() const{
    return m_record_status_isSet;
}

bool OAIRecord::is_record_status_Valid() const{
    return m_record_status_isValid;
}

bool OAIRecord::isDeleted() const {
    return m_deleted;
}
void OAIRecord::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIRecord::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIRecord::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIRecord::getDateCreated() const {
    return m_date_created;
}
void OAIRecord::setDateCreated(const QString &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIRecord::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIRecord::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIRecord::getDateModified() const {
    return m_date_modified;
}
void OAIRecord::setDateModified(const QString &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIRecord::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIRecord::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

qint32 OAIRecord::getSubjectId() const {
    return m_subject_id;
}
void OAIRecord::setSubjectId(const qint32 &subject_id) {
    m_subject_id = subject_id;
    m_subject_id_isSet = true;
}

bool OAIRecord::is_subject_id_Set() const{
    return m_subject_id_isSet;
}

bool OAIRecord::is_subject_id_Valid() const{
    return m_subject_id_isValid;
}

QString OAIRecord::getSubjectOid() const {
    return m_subject_oid;
}
void OAIRecord::setSubjectOid(const QString &subject_oid) {
    m_subject_oid = subject_oid;
    m_subject_oid_isSet = true;
}

bool OAIRecord::is_subject_oid_Set() const{
    return m_subject_oid_isSet;
}

bool OAIRecord::is_subject_oid_Valid() const{
    return m_subject_oid_isValid;
}

QString OAIRecord::getSubjectKey() const {
    return m_subject_key;
}
void OAIRecord::setSubjectKey(const QString &subject_key) {
    m_subject_key = subject_key;
    m_subject_key_isSet = true;
}

bool OAIRecord::is_subject_key_Set() const{
    return m_subject_key_isSet;
}

bool OAIRecord::is_subject_key_Valid() const{
    return m_subject_key_isValid;
}

qint32 OAIRecord::getVisitId() const {
    return m_visit_id;
}
void OAIRecord::setVisitId(const qint32 &visit_id) {
    m_visit_id = visit_id;
    m_visit_id_isSet = true;
}

bool OAIRecord::is_visit_id_Set() const{
    return m_visit_id_isSet;
}

bool OAIRecord::is_visit_id_Valid() const{
    return m_visit_id_isValid;
}

qint32 OAIRecord::getParentRecordId() const {
    return m_parent_record_id;
}
void OAIRecord::setParentRecordId(const qint32 &parent_record_id) {
    m_parent_record_id = parent_record_id;
    m_parent_record_id_isSet = true;
}

bool OAIRecord::is_parent_record_id_Set() const{
    return m_parent_record_id_isSet;
}

bool OAIRecord::is_parent_record_id_Valid() const{
    return m_parent_record_id_isValid;
}

QList<OAIKeyword> OAIRecord::getKeywords() const {
    return m_keywords;
}
void OAIRecord::setKeywords(const QList<OAIKeyword> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIRecord::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIRecord::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QMap<QString, QJsonValue> OAIRecord::getRecordData() const {
    return m_record_data;
}
void OAIRecord::setRecordData(const QMap<QString, QJsonValue> &record_data) {
    m_record_data = record_data;
    m_record_data_isSet = true;
}

bool OAIRecord::is_record_data_Set() const{
    return m_record_data_isSet;
}

bool OAIRecord::is_record_data_Valid() const{
    return m_record_data_isValid;
}

bool OAIRecord::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_study_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_oid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_oid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecord::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
