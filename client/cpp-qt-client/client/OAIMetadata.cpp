/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetadata::OAIMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetadata::OAIMetadata() {
    this->initializeModel();
}

OAIMetadata::~OAIMetadata() {}

void OAIMetadata::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;
}

void OAIMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetadata::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;
}

QString OAIMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    return obj;
}

QString OAIMetadata::getStatus() const {
    return m_status;
}
void OAIMetadata::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMetadata::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMetadata::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMetadata::getMethod() const {
    return m_method;
}
void OAIMetadata::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIMetadata::is_method_Set() const{
    return m_method_isSet;
}

bool OAIMetadata::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIMetadata::getPath() const {
    return m_path;
}
void OAIMetadata::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIMetadata::is_path_Set() const{
    return m_path_isSet;
}

bool OAIMetadata::is_path_Valid() const{
    return m_path_isValid;
}

QDateTime OAIMetadata::getTimestamp() const {
    return m_timestamp;
}
void OAIMetadata::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIMetadata::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIMetadata::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

OAIComponents_schemas_Metadata_error OAIMetadata::getError() const {
    return m_error;
}
void OAIMetadata::setError(const OAIComponents_schemas_Metadata_error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIMetadata::is_error_Set() const{
    return m_error_isSet;
}

bool OAIMetadata::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
