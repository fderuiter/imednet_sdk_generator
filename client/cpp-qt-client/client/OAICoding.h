/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICoding.h
 *
 * 
 */

#ifndef OAICoding_H
#define OAICoding_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICoding : public OAIObject {
public:
    OAICoding();
    OAICoding(QString json);
    ~OAICoding() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getStudyKey() const;
    void setStudyKey(const QString &study_key);
    bool is_study_key_Set() const;
    bool is_study_key_Valid() const;

    QString getSiteName() const;
    void setSiteName(const QString &site_name);
    bool is_site_name_Set() const;
    bool is_site_name_Valid() const;

    qint32 getSiteId() const;
    void setSiteId(const qint32 &site_id);
    bool is_site_id_Set() const;
    bool is_site_id_Valid() const;

    qint32 getSubjectId() const;
    void setSubjectId(const qint32 &subject_id);
    bool is_subject_id_Set() const;
    bool is_subject_id_Valid() const;

    QString getSubjectKey() const;
    void setSubjectKey(const QString &subject_key);
    bool is_subject_key_Set() const;
    bool is_subject_key_Valid() const;

    qint32 getFormId() const;
    void setFormId(const qint32 &form_id);
    bool is_form_id_Set() const;
    bool is_form_id_Valid() const;

    QString getFormName() const;
    void setFormName(const QString &form_name);
    bool is_form_name_Set() const;
    bool is_form_name_Valid() const;

    QString getFormKey() const;
    void setFormKey(const QString &form_key);
    bool is_form_key_Set() const;
    bool is_form_key_Valid() const;

    qint32 getRevision() const;
    void setRevision(const qint32 &revision);
    bool is_revision_Set() const;
    bool is_revision_Valid() const;

    qint32 getRecordId() const;
    void setRecordId(const qint32 &record_id);
    bool is_record_id_Set() const;
    bool is_record_id_Valid() const;

    QString getVariable() const;
    void setVariable(const QString &variable);
    bool is_variable_Set() const;
    bool is_variable_Valid() const;

    QString getValue() const;
    void setValue(const QString &value);
    bool is_value_Set() const;
    bool is_value_Valid() const;

    qint32 getCodingId() const;
    void setCodingId(const qint32 &coding_id);
    bool is_coding_id_Set() const;
    bool is_coding_id_Valid() const;

    QString getCode() const;
    void setCode(const QString &code);
    bool is_code_Set() const;
    bool is_code_Valid() const;

    QString getCodedBy() const;
    void setCodedBy(const QString &coded_by);
    bool is_coded_by_Set() const;
    bool is_coded_by_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    QString getDictionaryName() const;
    void setDictionaryName(const QString &dictionary_name);
    bool is_dictionary_name_Set() const;
    bool is_dictionary_name_Valid() const;

    QString getDictionaryVersion() const;
    void setDictionaryVersion(const QString &dictionary_version);
    bool is_dictionary_version_Set() const;
    bool is_dictionary_version_Valid() const;

    QString getDateCoded() const;
    void setDateCoded(const QString &date_coded);
    bool is_date_coded_Set() const;
    bool is_date_coded_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_study_key;
    bool m_study_key_isSet;
    bool m_study_key_isValid;

    QString m_site_name;
    bool m_site_name_isSet;
    bool m_site_name_isValid;

    qint32 m_site_id;
    bool m_site_id_isSet;
    bool m_site_id_isValid;

    qint32 m_subject_id;
    bool m_subject_id_isSet;
    bool m_subject_id_isValid;

    QString m_subject_key;
    bool m_subject_key_isSet;
    bool m_subject_key_isValid;

    qint32 m_form_id;
    bool m_form_id_isSet;
    bool m_form_id_isValid;

    QString m_form_name;
    bool m_form_name_isSet;
    bool m_form_name_isValid;

    QString m_form_key;
    bool m_form_key_isSet;
    bool m_form_key_isValid;

    qint32 m_revision;
    bool m_revision_isSet;
    bool m_revision_isValid;

    qint32 m_record_id;
    bool m_record_id_isSet;
    bool m_record_id_isValid;

    QString m_variable;
    bool m_variable_isSet;
    bool m_variable_isValid;

    QString m_value;
    bool m_value_isSet;
    bool m_value_isValid;

    qint32 m_coding_id;
    bool m_coding_id_isSet;
    bool m_coding_id_isValid;

    QString m_code;
    bool m_code_isSet;
    bool m_code_isValid;

    QString m_coded_by;
    bool m_coded_by_isSet;
    bool m_coded_by_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;

    QString m_dictionary_name;
    bool m_dictionary_name_isSet;
    bool m_dictionary_name_isValid;

    QString m_dictionary_version;
    bool m_dictionary_version_isSet;
    bool m_dictionary_version_isValid;

    QString m_date_coded;
    bool m_date_coded_isSet;
    bool m_date_coded_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICoding)

#endif // OAICoding_H
