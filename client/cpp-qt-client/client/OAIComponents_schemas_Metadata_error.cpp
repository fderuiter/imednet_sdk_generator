/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponents_schemas_Metadata_error.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponents_schemas_Metadata_error::OAIComponents_schemas_Metadata_error(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponents_schemas_Metadata_error::OAIComponents_schemas_Metadata_error() {
    this->initializeModel();
}

OAIComponents_schemas_Metadata_error::~OAIComponents_schemas_Metadata_error() {}

void OAIComponents_schemas_Metadata_error::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIComponents_schemas_Metadata_error::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponents_schemas_Metadata_error::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIComponents_schemas_Metadata_error::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponents_schemas_Metadata_error::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAIComponents_schemas_Metadata_error::getMessage() const {
    return m_message;
}
void OAIComponents_schemas_Metadata_error::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIComponents_schemas_Metadata_error::is_message_Set() const{
    return m_message_isSet;
}

bool OAIComponents_schemas_Metadata_error::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIComponents_schemas_Metadata_error::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponents_schemas_Metadata_error::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
