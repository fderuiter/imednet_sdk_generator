/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRole.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRole::OAIRole(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRole::OAIRole() {
    this->initializeModel();
}

OAIRole::~OAIRole() {}

void OAIRole::initializeModel() {

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_role_id_isSet = false;
    m_role_id_isValid = false;

    m_community_id_isSet = false;
    m_community_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_inactive_isSet = false;
    m_inactive_isValid = false;
}

void OAIRole::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRole::fromJsonObject(QJsonObject json) {

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_role_id_isValid = ::OpenAPI::fromJsonValue(m_role_id, json[QString("roleId")]);
    m_role_id_isSet = !json[QString("roleId")].isNull() && m_role_id_isValid;

    m_community_id_isValid = ::OpenAPI::fromJsonValue(m_community_id, json[QString("communityId")]);
    m_community_id_isSet = !json[QString("communityId")].isNull() && m_community_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_inactive_isValid = ::OpenAPI::fromJsonValue(m_inactive, json[QString("inactive")]);
    m_inactive_isSet = !json[QString("inactive")].isNull() && m_inactive_isValid;
}

QString OAIRole::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRole::asJsonObject() const {
    QJsonObject obj;
    if (m_date_created.size() > 0) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified.size() > 0) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_role_id_isSet) {
        obj.insert(QString("roleId"), ::OpenAPI::toJsonValue(m_role_id));
    }
    if (m_community_id_isSet) {
        obj.insert(QString("communityId"), ::OpenAPI::toJsonValue(m_community_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_inactive_isSet) {
        obj.insert(QString("inactive"), ::OpenAPI::toJsonValue(m_inactive));
    }
    return obj;
}

QList<qint32> OAIRole::getDateCreated() const {
    return m_date_created;
}
void OAIRole::setDateCreated(const QList<qint32> &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIRole::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIRole::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QList<qint32> OAIRole::getDateModified() const {
    return m_date_modified;
}
void OAIRole::setDateModified(const QList<qint32> &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIRole::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIRole::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

QString OAIRole::getRoleId() const {
    return m_role_id;
}
void OAIRole::setRoleId(const QString &role_id) {
    m_role_id = role_id;
    m_role_id_isSet = true;
}

bool OAIRole::is_role_id_Set() const{
    return m_role_id_isSet;
}

bool OAIRole::is_role_id_Valid() const{
    return m_role_id_isValid;
}

qint32 OAIRole::getCommunityId() const {
    return m_community_id;
}
void OAIRole::setCommunityId(const qint32 &community_id) {
    m_community_id = community_id;
    m_community_id_isSet = true;
}

bool OAIRole::is_community_id_Set() const{
    return m_community_id_isSet;
}

bool OAIRole::is_community_id_Valid() const{
    return m_community_id_isValid;
}

QString OAIRole::getName() const {
    return m_name;
}
void OAIRole::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRole::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRole::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRole::getDescription() const {
    return m_description;
}
void OAIRole::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRole::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRole::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIRole::getLevel() const {
    return m_level;
}
void OAIRole::setLevel(const qint32 &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIRole::is_level_Set() const{
    return m_level_isSet;
}

bool OAIRole::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIRole::getType() const {
    return m_type;
}
void OAIRole::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRole::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRole::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRole::isInactive() const {
    return m_inactive;
}
void OAIRole::setInactive(const bool &inactive) {
    m_inactive = inactive;
    m_inactive_isSet = true;
}

bool OAIRole::is_inactive_Set() const{
    return m_inactive_isSet;
}

bool OAIRole::is_inactive_Valid() const{
    return m_inactive_isValid;
}

bool OAIRole::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_created.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_community_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inactive_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRole::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
