/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecordJobStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecordJobStatus::OAIRecordJobStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecordJobStatus::OAIRecordJobStatus() {
    this->initializeModel();
}

OAIRecordJobStatus::~OAIRecordJobStatus() {}

void OAIRecordJobStatus::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_batch_id_isSet = false;
    m_batch_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIRecordJobStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecordJobStatus::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_batch_id_isValid = ::OpenAPI::fromJsonValue(m_batch_id, json[QString("batchId")]);
    m_batch_id_isSet = !json[QString("batchId")].isNull() && m_batch_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIRecordJobStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecordJobStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_batch_id_isSet) {
        obj.insert(QString("batchId"), ::OpenAPI::toJsonValue(m_batch_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIRecordJobStatus::getJobId() const {
    return m_job_id;
}
void OAIRecordJobStatus::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIRecordJobStatus::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIRecordJobStatus::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIRecordJobStatus::getBatchId() const {
    return m_batch_id;
}
void OAIRecordJobStatus::setBatchId(const QString &batch_id) {
    m_batch_id = batch_id;
    m_batch_id_isSet = true;
}

bool OAIRecordJobStatus::is_batch_id_Set() const{
    return m_batch_id_isSet;
}

bool OAIRecordJobStatus::is_batch_id_Valid() const{
    return m_batch_id_isValid;
}

QString OAIRecordJobStatus::getState() const {
    return m_state;
}
void OAIRecordJobStatus::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRecordJobStatus::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRecordJobStatus::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIRecordJobStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecordJobStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
