/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryComment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryComment::OAIQueryComment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryComment::OAIQueryComment() {
    this->initializeModel();
}

OAIQueryComment::~OAIQueryComment() {}

void OAIQueryComment::initializeModel() {

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_annotation_status_isSet = false;
    m_annotation_status_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;
}

void OAIQueryComment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryComment::fromJsonObject(QJsonObject json) {

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;

    m_annotation_status_isValid = ::OpenAPI::fromJsonValue(m_annotation_status, json[QString("annotationStatus")]);
    m_annotation_status_isSet = !json[QString("annotationStatus")].isNull() && m_annotation_status_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;
}

QString OAIQueryComment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryComment::asJsonObject() const {
    QJsonObject obj;
    if (m_sequence_isSet) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_annotation_status_isSet) {
        obj.insert(QString("annotationStatus"), ::OpenAPI::toJsonValue(m_annotation_status));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    return obj;
}

qint32 OAIQueryComment::getSequence() const {
    return m_sequence;
}
void OAIQueryComment::setSequence(const qint32 &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIQueryComment::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIQueryComment::is_sequence_Valid() const{
    return m_sequence_isValid;
}

QString OAIQueryComment::getAnnotationStatus() const {
    return m_annotation_status;
}
void OAIQueryComment::setAnnotationStatus(const QString &annotation_status) {
    m_annotation_status = annotation_status;
    m_annotation_status_isSet = true;
}

bool OAIQueryComment::is_annotation_status_Set() const{
    return m_annotation_status_isSet;
}

bool OAIQueryComment::is_annotation_status_Valid() const{
    return m_annotation_status_isValid;
}

QString OAIQueryComment::getUser() const {
    return m_user;
}
void OAIQueryComment::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIQueryComment::is_user_Set() const{
    return m_user_isSet;
}

bool OAIQueryComment::is_user_Valid() const{
    return m_user_isValid;
}

QString OAIQueryComment::getComment() const {
    return m_comment;
}
void OAIQueryComment::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIQueryComment::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIQueryComment::is_comment_Valid() const{
    return m_comment_isValid;
}

bool OAIQueryComment::isClosed() const {
    return m_closed;
}
void OAIQueryComment::setClosed(const bool &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAIQueryComment::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAIQueryComment::is_closed_Valid() const{
    return m_closed_isValid;
}

QString OAIQueryComment::getDate() const {
    return m_date;
}
void OAIQueryComment::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIQueryComment::is_date_Set() const{
    return m_date_isSet;
}

bool OAIQueryComment::is_date_Valid() const{
    return m_date_isValid;
}

bool OAIQueryComment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotation_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryComment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
