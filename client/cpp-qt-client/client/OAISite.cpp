/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISite.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISite::OAISite(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISite::OAISite() {
    this->initializeModel();
}

OAISite::~OAISite() {}

void OAISite::initializeModel() {

    m_study_key_isSet = false;
    m_study_key_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_site_name_isSet = false;
    m_site_name_isValid = false;

    m_site_enrollment_status_isSet = false;
    m_site_enrollment_status_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;
}

void OAISite::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISite::fromJsonObject(QJsonObject json) {

    m_study_key_isValid = ::OpenAPI::fromJsonValue(m_study_key, json[QString("studyKey")]);
    m_study_key_isSet = !json[QString("studyKey")].isNull() && m_study_key_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("siteId")]);
    m_site_id_isSet = !json[QString("siteId")].isNull() && m_site_id_isValid;

    m_site_name_isValid = ::OpenAPI::fromJsonValue(m_site_name, json[QString("siteName")]);
    m_site_name_isSet = !json[QString("siteName")].isNull() && m_site_name_isValid;

    m_site_enrollment_status_isValid = ::OpenAPI::fromJsonValue(m_site_enrollment_status, json[QString("siteEnrollmentStatus")]);
    m_site_enrollment_status_isSet = !json[QString("siteEnrollmentStatus")].isNull() && m_site_enrollment_status_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;
}

QString OAISite::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISite::asJsonObject() const {
    QJsonObject obj;
    if (m_study_key_isSet) {
        obj.insert(QString("studyKey"), ::OpenAPI::toJsonValue(m_study_key));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("siteId"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_site_name_isSet) {
        obj.insert(QString("siteName"), ::OpenAPI::toJsonValue(m_site_name));
    }
    if (m_site_enrollment_status_isSet) {
        obj.insert(QString("siteEnrollmentStatus"), ::OpenAPI::toJsonValue(m_site_enrollment_status));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    return obj;
}

QString OAISite::getStudyKey() const {
    return m_study_key;
}
void OAISite::setStudyKey(const QString &study_key) {
    m_study_key = study_key;
    m_study_key_isSet = true;
}

bool OAISite::is_study_key_Set() const{
    return m_study_key_isSet;
}

bool OAISite::is_study_key_Valid() const{
    return m_study_key_isValid;
}

qint32 OAISite::getSiteId() const {
    return m_site_id;
}
void OAISite::setSiteId(const qint32 &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAISite::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAISite::is_site_id_Valid() const{
    return m_site_id_isValid;
}

QString OAISite::getSiteName() const {
    return m_site_name;
}
void OAISite::setSiteName(const QString &site_name) {
    m_site_name = site_name;
    m_site_name_isSet = true;
}

bool OAISite::is_site_name_Set() const{
    return m_site_name_isSet;
}

bool OAISite::is_site_name_Valid() const{
    return m_site_name_isValid;
}

QString OAISite::getSiteEnrollmentStatus() const {
    return m_site_enrollment_status;
}
void OAISite::setSiteEnrollmentStatus(const QString &site_enrollment_status) {
    m_site_enrollment_status = site_enrollment_status;
    m_site_enrollment_status_isSet = true;
}

bool OAISite::is_site_enrollment_status_Set() const{
    return m_site_enrollment_status_isSet;
}

bool OAISite::is_site_enrollment_status_Valid() const{
    return m_site_enrollment_status_isValid;
}

QString OAISite::getDateCreated() const {
    return m_date_created;
}
void OAISite::setDateCreated(const QString &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAISite::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAISite::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAISite::getDateModified() const {
    return m_date_modified;
}
void OAISite::setDateModified(const QString &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAISite::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAISite::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

bool OAISite::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_study_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_enrollment_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISite::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
