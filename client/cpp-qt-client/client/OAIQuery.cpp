/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuery::OAIQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuery::OAIQuery() {
    this->initializeModel();
}

OAIQuery::~OAIQuery() {}

void OAIQuery::initializeModel() {

    m_study_key_isSet = false;
    m_study_key_isValid = false;

    m_subject_id_isSet = false;
    m_subject_id_isValid = false;

    m_subject_oid_isSet = false;
    m_subject_oid_isValid = false;

    m_annotation_type_isSet = false;
    m_annotation_type_isValid = false;

    m_annotation_id_isSet = false;
    m_annotation_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_record_id_isSet = false;
    m_record_id_isValid = false;

    m_variable_isSet = false;
    m_variable_isValid = false;

    m_subject_key_isSet = false;
    m_subject_key_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_query_comments_isSet = false;
    m_query_comments_isValid = false;
}

void OAIQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuery::fromJsonObject(QJsonObject json) {

    m_study_key_isValid = ::OpenAPI::fromJsonValue(m_study_key, json[QString("studyKey")]);
    m_study_key_isSet = !json[QString("studyKey")].isNull() && m_study_key_isValid;

    m_subject_id_isValid = ::OpenAPI::fromJsonValue(m_subject_id, json[QString("subjectId")]);
    m_subject_id_isSet = !json[QString("subjectId")].isNull() && m_subject_id_isValid;

    m_subject_oid_isValid = ::OpenAPI::fromJsonValue(m_subject_oid, json[QString("subjectOid")]);
    m_subject_oid_isSet = !json[QString("subjectOid")].isNull() && m_subject_oid_isValid;

    m_annotation_type_isValid = ::OpenAPI::fromJsonValue(m_annotation_type, json[QString("annotationType")]);
    m_annotation_type_isSet = !json[QString("annotationType")].isNull() && m_annotation_type_isValid;

    m_annotation_id_isValid = ::OpenAPI::fromJsonValue(m_annotation_id, json[QString("annotationId")]);
    m_annotation_id_isSet = !json[QString("annotationId")].isNull() && m_annotation_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_record_id_isValid = ::OpenAPI::fromJsonValue(m_record_id, json[QString("recordId")]);
    m_record_id_isSet = !json[QString("recordId")].isNull() && m_record_id_isValid;

    m_variable_isValid = ::OpenAPI::fromJsonValue(m_variable, json[QString("variable")]);
    m_variable_isSet = !json[QString("variable")].isNull() && m_variable_isValid;

    m_subject_key_isValid = ::OpenAPI::fromJsonValue(m_subject_key, json[QString("subjectKey")]);
    m_subject_key_isSet = !json[QString("subjectKey")].isNull() && m_subject_key_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_query_comments_isValid = ::OpenAPI::fromJsonValue(m_query_comments, json[QString("queryComments")]);
    m_query_comments_isSet = !json[QString("queryComments")].isNull() && m_query_comments_isValid;
}

QString OAIQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_study_key_isSet) {
        obj.insert(QString("studyKey"), ::OpenAPI::toJsonValue(m_study_key));
    }
    if (m_subject_id_isSet) {
        obj.insert(QString("subjectId"), ::OpenAPI::toJsonValue(m_subject_id));
    }
    if (m_subject_oid_isSet) {
        obj.insert(QString("subjectOid"), ::OpenAPI::toJsonValue(m_subject_oid));
    }
    if (m_annotation_type_isSet) {
        obj.insert(QString("annotationType"), ::OpenAPI::toJsonValue(m_annotation_type));
    }
    if (m_annotation_id_isSet) {
        obj.insert(QString("annotationId"), ::OpenAPI::toJsonValue(m_annotation_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_record_id_isSet) {
        obj.insert(QString("recordId"), ::OpenAPI::toJsonValue(m_record_id));
    }
    if (m_variable_isSet) {
        obj.insert(QString("variable"), ::OpenAPI::toJsonValue(m_variable));
    }
    if (m_subject_key_isSet) {
        obj.insert(QString("subjectKey"), ::OpenAPI::toJsonValue(m_subject_key));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_query_comments.size() > 0) {
        obj.insert(QString("queryComments"), ::OpenAPI::toJsonValue(m_query_comments));
    }
    return obj;
}

QString OAIQuery::getStudyKey() const {
    return m_study_key;
}
void OAIQuery::setStudyKey(const QString &study_key) {
    m_study_key = study_key;
    m_study_key_isSet = true;
}

bool OAIQuery::is_study_key_Set() const{
    return m_study_key_isSet;
}

bool OAIQuery::is_study_key_Valid() const{
    return m_study_key_isValid;
}

qint32 OAIQuery::getSubjectId() const {
    return m_subject_id;
}
void OAIQuery::setSubjectId(const qint32 &subject_id) {
    m_subject_id = subject_id;
    m_subject_id_isSet = true;
}

bool OAIQuery::is_subject_id_Set() const{
    return m_subject_id_isSet;
}

bool OAIQuery::is_subject_id_Valid() const{
    return m_subject_id_isValid;
}

QString OAIQuery::getSubjectOid() const {
    return m_subject_oid;
}
void OAIQuery::setSubjectOid(const QString &subject_oid) {
    m_subject_oid = subject_oid;
    m_subject_oid_isSet = true;
}

bool OAIQuery::is_subject_oid_Set() const{
    return m_subject_oid_isSet;
}

bool OAIQuery::is_subject_oid_Valid() const{
    return m_subject_oid_isValid;
}

QString OAIQuery::getAnnotationType() const {
    return m_annotation_type;
}
void OAIQuery::setAnnotationType(const QString &annotation_type) {
    m_annotation_type = annotation_type;
    m_annotation_type_isSet = true;
}

bool OAIQuery::is_annotation_type_Set() const{
    return m_annotation_type_isSet;
}

bool OAIQuery::is_annotation_type_Valid() const{
    return m_annotation_type_isValid;
}

qint32 OAIQuery::getAnnotationId() const {
    return m_annotation_id;
}
void OAIQuery::setAnnotationId(const qint32 &annotation_id) {
    m_annotation_id = annotation_id;
    m_annotation_id_isSet = true;
}

bool OAIQuery::is_annotation_id_Set() const{
    return m_annotation_id_isSet;
}

bool OAIQuery::is_annotation_id_Valid() const{
    return m_annotation_id_isValid;
}

QString OAIQuery::getType() const {
    return m_type;
}
void OAIQuery::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIQuery::is_type_Set() const{
    return m_type_isSet;
}

bool OAIQuery::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIQuery::getDescription() const {
    return m_description;
}
void OAIQuery::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIQuery::is_description_Set() const{
    return m_description_isSet;
}

bool OAIQuery::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIQuery::getRecordId() const {
    return m_record_id;
}
void OAIQuery::setRecordId(const qint32 &record_id) {
    m_record_id = record_id;
    m_record_id_isSet = true;
}

bool OAIQuery::is_record_id_Set() const{
    return m_record_id_isSet;
}

bool OAIQuery::is_record_id_Valid() const{
    return m_record_id_isValid;
}

QString OAIQuery::getVariable() const {
    return m_variable;
}
void OAIQuery::setVariable(const QString &variable) {
    m_variable = variable;
    m_variable_isSet = true;
}

bool OAIQuery::is_variable_Set() const{
    return m_variable_isSet;
}

bool OAIQuery::is_variable_Valid() const{
    return m_variable_isValid;
}

QString OAIQuery::getSubjectKey() const {
    return m_subject_key;
}
void OAIQuery::setSubjectKey(const QString &subject_key) {
    m_subject_key = subject_key;
    m_subject_key_isSet = true;
}

bool OAIQuery::is_subject_key_Set() const{
    return m_subject_key_isSet;
}

bool OAIQuery::is_subject_key_Valid() const{
    return m_subject_key_isValid;
}

QString OAIQuery::getDateCreated() const {
    return m_date_created;
}
void OAIQuery::setDateCreated(const QString &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIQuery::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIQuery::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIQuery::getDateModified() const {
    return m_date_modified;
}
void OAIQuery::setDateModified(const QString &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIQuery::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIQuery::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

QList<OAIQueryComment> OAIQuery::getQueryComments() const {
    return m_query_comments;
}
void OAIQuery::setQueryComments(const QList<OAIQueryComment> &query_comments) {
    m_query_comments = query_comments;
    m_query_comments_isSet = true;
}

bool OAIQuery::is_query_comments_Set() const{
    return m_query_comments_isSet;
}

bool OAIQuery::is_query_comments_Valid() const{
    return m_query_comments_isValid;
}

bool OAIQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_study_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_oid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annotation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_comments.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
