extends Resource
class_name QueryComment

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# QueryComment Model


# Sequence number of the comment/action in the query history
# Required: False
# isArray: false
@export var sequence: int:
	set(value):
		__sequence__was__set = true
		sequence = value
var __sequence__was__set := false

# Status of the query after this comment (e.g., Open, Closed)
# Required: False
# isArray: false
@export var annotationStatus: String:
	set(value):
		__annotationStatus__was__set = true
		annotationStatus = value
var __annotationStatus__was__set := false

# Username of the user who made the comment or action
# Required: False
# isArray: false
@export var user: String:
	set(value):
		__user__was__set = true
		user = value
var __user__was__set := false

# Text of the comment
# Required: False
# isArray: false
@export var comment: String:
	set(value):
		__comment__was__set = true
		comment = value
var __comment__was__set := false

# Whether the query was marked closed at this step
# Required: False
# isArray: false
@export var closed: bool:
	set(value):
		__closed__was__set = true
		closed = value
var __closed__was__set := false

# Date of the comment or action
# Required: False
# isArray: false
@export var date: String:
	set(value):
		__date__was__set = true
		date = value
var __date__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__sequence__was__set:
		bzz_dictionary["sequence"] = self.sequence
	if self.__annotationStatus__was__set:
		bzz_dictionary["annotationStatus"] = self.annotationStatus
	if self.__user__was__set:
		bzz_dictionary["user"] = self.user
	if self.__comment__was__set:
		bzz_dictionary["comment"] = self.comment
	if self.__closed__was__set:
		bzz_dictionary["closed"] = self.closed
	if self.__date__was__set:
		bzz_dictionary["date"] = self.date
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("sequence"):
		me.sequence = from_dict["sequence"]
	if from_dict.has("annotationStatus"):
		me.annotationStatus = from_dict["annotationStatus"]
	if from_dict.has("user"):
		me.user = from_dict["user"]
	if from_dict.has("comment"):
		me.comment = from_dict["comment"]
	if from_dict.has("closed"):
		me.closed = from_dict["closed"]
	if from_dict.has("date"):
		me.date = from_dict["date"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

