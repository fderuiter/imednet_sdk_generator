extends Resource
class_name RecordRevision

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# RecordRevision Model


# Unique study key
# Required: False
# isArray: false
@export var studyKey: String:
	set(value):
		__studyKey__was__set = true
		studyKey = value
var __studyKey__was__set := false

# Unique system identifier for the record revision
# Required: False
# isArray: false
@export var recordRevisionId: int:
	set(value):
		__recordRevisionId__was__set = true
		recordRevisionId = value
var __recordRevisionId__was__set := false

# Unique system identifier of the related record
# Required: False
# isArray: false
@export var recordId: int:
	set(value):
		__recordId__was__set = true
		recordId = value
var __recordId__was__set := false

# Client-assigned record OID (if any)
# Required: False
# isArray: false
@export var recordOid: String:
	set(value):
		__recordOid__was__set = true
		recordOid = value
var __recordOid__was__set := false

# Revision number of the record (version of the record status)
# Required: False
# isArray: false
@export var recordRevision: int:
	set(value):
		__recordRevision__was__set = true
		recordRevision = value
var __recordRevision__was__set := false

# Revision number of the data within the record
# Required: False
# isArray: false
@export var dataRevision: int:
	set(value):
		__dataRevision__was__set = true
		dataRevision = value
var __dataRevision__was__set := false

# Status of the record at this revision (user-defined status label)
# Required: False
# isArray: false
@export var recordStatus: String:
	set(value):
		__recordStatus__was__set = true
		recordStatus = value
var __recordStatus__was__set := false

# Mednet subject ID related to the record
# Required: False
# isArray: false
@export var subjectId: int:
	set(value):
		__subjectId__was__set = true
		subjectId = value
var __subjectId__was__set := false

# Client-assigned subject OID related to the record
# Required: False
# isArray: false
@export var subjectOid: String:
	set(value):
		__subjectOid__was__set = true
		subjectOid = value
var __subjectOid__was__set := false

# Subject display ID related to the record
# Required: False
# isArray: false
@export var subjectKey: String:
	set(value):
		__subjectKey__was__set = true
		subjectKey = value
var __subjectKey__was__set := false

# Site ID related to the record
# Required: False
# isArray: false
@export var siteId: int:
	set(value):
		__siteId__was__set = true
		siteId = value
var __siteId__was__set := false

# Form key of the form that the record belongs to
# Required: False
# isArray: false
@export var formKey: String:
	set(value):
		__formKey__was__set = true
		formKey = value
var __formKey__was__set := false

# Interval ID (visit definition) related to the record
# Required: False
# isArray: false
@export var intervalId: int:
	set(value):
		__intervalId__was__set = true
		intervalId = value
var __intervalId__was__set := false

# Role name of the user who saved the record revision
# Required: False
# isArray: false
@export var role: String:
	set(value):
		__role__was__set = true
		role = value
var __role__was__set := false

# Username of the user who saved the record revision
# Required: False
# isArray: false
@export var user: String:
	set(value):
		__user__was__set = true
		user = value
var __user__was__set := false

# Reason for change, if provided (for audit trail)
# Required: False
# isArray: false
@export var reasonForChange: String:
	set(value):
		__reasonForChange__was__set = true
		reasonForChange = value
var __reasonForChange__was__set := false

# Whether the record was deleted in this revision
# Required: False
# isArray: false
@export var deleted: bool:
	set(value):
		__deleted__was__set = true
		deleted = value
var __deleted__was__set := false

# Date when this record revision was created
# Required: False
# isArray: false
@export var dateCreated: String:
	set(value):
		__dateCreated__was__set = true
		dateCreated = value
var __dateCreated__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__studyKey__was__set:
		bzz_dictionary["studyKey"] = self.studyKey
	if self.__recordRevisionId__was__set:
		bzz_dictionary["recordRevisionId"] = self.recordRevisionId
	if self.__recordId__was__set:
		bzz_dictionary["recordId"] = self.recordId
	if self.__recordOid__was__set:
		bzz_dictionary["recordOid"] = self.recordOid
	if self.__recordRevision__was__set:
		bzz_dictionary["recordRevision"] = self.recordRevision
	if self.__dataRevision__was__set:
		bzz_dictionary["dataRevision"] = self.dataRevision
	if self.__recordStatus__was__set:
		bzz_dictionary["recordStatus"] = self.recordStatus
	if self.__subjectId__was__set:
		bzz_dictionary["subjectId"] = self.subjectId
	if self.__subjectOid__was__set:
		bzz_dictionary["subjectOid"] = self.subjectOid
	if self.__subjectKey__was__set:
		bzz_dictionary["subjectKey"] = self.subjectKey
	if self.__siteId__was__set:
		bzz_dictionary["siteId"] = self.siteId
	if self.__formKey__was__set:
		bzz_dictionary["formKey"] = self.formKey
	if self.__intervalId__was__set:
		bzz_dictionary["intervalId"] = self.intervalId
	if self.__role__was__set:
		bzz_dictionary["role"] = self.role
	if self.__user__was__set:
		bzz_dictionary["user"] = self.user
	if self.__reasonForChange__was__set:
		bzz_dictionary["reasonForChange"] = self.reasonForChange
	if self.__deleted__was__set:
		bzz_dictionary["deleted"] = self.deleted
	if self.__dateCreated__was__set:
		bzz_dictionary["dateCreated"] = self.dateCreated
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("studyKey"):
		me.studyKey = from_dict["studyKey"]
	if from_dict.has("recordRevisionId"):
		me.recordRevisionId = from_dict["recordRevisionId"]
	if from_dict.has("recordId"):
		me.recordId = from_dict["recordId"]
	if from_dict.has("recordOid"):
		me.recordOid = from_dict["recordOid"]
	if from_dict.has("recordRevision"):
		me.recordRevision = from_dict["recordRevision"]
	if from_dict.has("dataRevision"):
		me.dataRevision = from_dict["dataRevision"]
	if from_dict.has("recordStatus"):
		me.recordStatus = from_dict["recordStatus"]
	if from_dict.has("subjectId"):
		me.subjectId = from_dict["subjectId"]
	if from_dict.has("subjectOid"):
		me.subjectOid = from_dict["subjectOid"]
	if from_dict.has("subjectKey"):
		me.subjectKey = from_dict["subjectKey"]
	if from_dict.has("siteId"):
		me.siteId = from_dict["siteId"]
	if from_dict.has("formKey"):
		me.formKey = from_dict["formKey"]
	if from_dict.has("intervalId"):
		me.intervalId = from_dict["intervalId"]
	if from_dict.has("role"):
		me.role = from_dict["role"]
	if from_dict.has("user"):
		me.user = from_dict["user"]
	if from_dict.has("reasonForChange"):
		me.reasonForChange = from_dict["reasonForChange"]
	if from_dict.has("deleted"):
		me.deleted = from_dict["deleted"]
	if from_dict.has("dateCreated"):
		me.dateCreated = from_dict["dateCreated"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

