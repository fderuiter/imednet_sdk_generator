extends Resource
class_name User

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# User Model


# Unique user ID (UUID)
# Required: False
# isArray: false
@export var userId: String:
	set(value):
		__userId__was__set = true
		userId = value
var __userId__was__set := false

# User login name
# Required: False
# isArray: false
@export var login: String:
	set(value):
		__login__was__set = true
		login = value
var __login__was__set := false

# User first name
# Required: False
# isArray: false
@export var firstName: String:
	set(value):
		__firstName__was__set = true
		firstName = value
var __firstName__was__set := false

# User last name
# Required: False
# isArray: false
@export var lastName: String:
	set(value):
		__lastName__was__set = true
		lastName = value
var __lastName__was__set := false

# User email address
# Required: False
# isArray: false
@export var email: String:
	set(value):
		__email__was__set = true
		email = value
var __email__was__set := false

# Whether the user is active in the given study
# Required: False
# isArray: false
@export var userActiveInStudy: bool:
	set(value):
		__userActiveInStudy__was__set = true
		userActiveInStudy = value
var __userActiveInStudy__was__set := false

# Roles that the user has in the study
# Required: False
# isArray: true
@export var roles: Array:
	set(value):
		__roles__was__set = true
		roles = value
var __roles__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__userId__was__set:
		bzz_dictionary["userId"] = self.userId
	if self.__login__was__set:
		bzz_dictionary["login"] = self.login
	if self.__firstName__was__set:
		bzz_dictionary["firstName"] = self.firstName
	if self.__lastName__was__set:
		bzz_dictionary["lastName"] = self.lastName
	if self.__email__was__set:
		bzz_dictionary["email"] = self.email
	if self.__userActiveInStudy__was__set:
		bzz_dictionary["userActiveInStudy"] = self.userActiveInStudy
	if self.__roles__was__set:
		bzz_dictionary["roles"] = self.roles
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("userId"):
		me.userId = from_dict["userId"]
	if from_dict.has("login"):
		me.login = from_dict["login"]
	if from_dict.has("firstName"):
		me.firstName = from_dict["firstName"]
	if from_dict.has("lastName"):
		me.lastName = from_dict["lastName"]
	if from_dict.has("email"):
		me.email = from_dict["email"]
	if from_dict.has("userActiveInStudy"):
		me.userActiveInStudy = from_dict["userActiveInStudy"]
	if from_dict.has("roles"):
		me.roles = Role.bzz_denormalize_multiple(from_dict["roles"])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

