extends Resource
class_name Subject

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, © Public Domain, 2022

# Subject Model


# Unique study key
# Required: False
# isArray: false
@export var studyKey: String:
	set(value):
		__studyKey__was__set = true
		studyKey = value
var __studyKey__was__set := false

# Mednet subject ID (internal numeric ID)
# Required: False
# isArray: false
@export var subjectId: int:
	set(value):
		__subjectId__was__set = true
		subjectId = value
var __subjectId__was__set := false

# Client-assigned subject object identifier (OID)
# Required: False
# isArray: false
@export var subjectOid: String:
	set(value):
		__subjectOid__was__set = true
		subjectOid = value
var __subjectOid__was__set := false

# Protocol-assigned subject identifier (display ID)
# Required: False
# isArray: false
@export var subjectKey: String:
	set(value):
		__subjectKey__was__set = true
		subjectKey = value
var __subjectKey__was__set := false

# Current status of the subject (e.g., Enrolled)
# Required: False
# isArray: false
@export var subjectStatus: String:
	set(value):
		__subjectStatus__was__set = true
		subjectStatus = value
var __subjectStatus__was__set := false

# Mednet site ID the subject is associated with
# Required: False
# isArray: false
@export var siteId: int:
	set(value):
		__siteId__was__set = true
		siteId = value
var __siteId__was__set := false

# Name of the site the subject is associated with
# Required: False
# isArray: false
@export var siteName: String:
	set(value):
		__siteName__was__set = true
		siteName = value
var __siteName__was__set := false

# Whether the subject is marked as deleted
# Required: False
# isArray: false
@export var deleted: bool:
	set(value):
		__deleted__was__set = true
		deleted = value
var __deleted__was__set := false

# Subject’s enrollment start date
# Required: False
# isArray: false
@export var enrollmentStartDate: String:
	set(value):
		__enrollmentStartDate__was__set = true
		enrollmentStartDate = value
var __enrollmentStartDate__was__set := false

# Date when this subject record was created
# Required: False
# isArray: false
@export var dateCreated: String:
	set(value):
		__dateCreated__was__set = true
		dateCreated = value
var __dateCreated__was__set := false

# Date when this subject record was last modified
# Required: False
# isArray: false
@export var dateModified: String:
	set(value):
		__dateModified__was__set = true
		dateModified = value
var __dateModified__was__set := false

# List of keywords associated with the subject
# Required: False
# isArray: true
@export var keywords: Array:
	set(value):
		__keywords__was__set = true
		keywords = value
var __keywords__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__studyKey__was__set:
		bzz_dictionary["studyKey"] = self.studyKey
	if self.__subjectId__was__set:
		bzz_dictionary["subjectId"] = self.subjectId
	if self.__subjectOid__was__set:
		bzz_dictionary["subjectOid"] = self.subjectOid
	if self.__subjectKey__was__set:
		bzz_dictionary["subjectKey"] = self.subjectKey
	if self.__subjectStatus__was__set:
		bzz_dictionary["subjectStatus"] = self.subjectStatus
	if self.__siteId__was__set:
		bzz_dictionary["siteId"] = self.siteId
	if self.__siteName__was__set:
		bzz_dictionary["siteName"] = self.siteName
	if self.__deleted__was__set:
		bzz_dictionary["deleted"] = self.deleted
	if self.__enrollmentStartDate__was__set:
		bzz_dictionary["enrollmentStartDate"] = self.enrollmentStartDate
	if self.__dateCreated__was__set:
		bzz_dictionary["dateCreated"] = self.dateCreated
	if self.__dateModified__was__set:
		bzz_dictionary["dateModified"] = self.dateModified
	if self.__keywords__was__set:
		bzz_dictionary["keywords"] = self.keywords
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("studyKey"):
		me.studyKey = from_dict["studyKey"]
	if from_dict.has("subjectId"):
		me.subjectId = from_dict["subjectId"]
	if from_dict.has("subjectOid"):
		me.subjectOid = from_dict["subjectOid"]
	if from_dict.has("subjectKey"):
		me.subjectKey = from_dict["subjectKey"]
	if from_dict.has("subjectStatus"):
		me.subjectStatus = from_dict["subjectStatus"]
	if from_dict.has("siteId"):
		me.siteId = from_dict["siteId"]
	if from_dict.has("siteName"):
		me.siteName = from_dict["siteName"]
	if from_dict.has("deleted"):
		me.deleted = from_dict["deleted"]
	if from_dict.has("enrollmentStartDate"):
		me.enrollmentStartDate = from_dict["enrollmentStartDate"]
	if from_dict.has("dateCreated"):
		me.dateCreated = from_dict["dateCreated"]
	if from_dict.has("dateModified"):
		me.dateModified = from_dict["dateModified"]
	if from_dict.has("keywords"):
		me.keywords = Keyword.bzz_denormalize_multiple(from_dict["keywords"])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

