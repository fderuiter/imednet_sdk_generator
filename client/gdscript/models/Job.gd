extends Resource
class_name Job

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# Job Model


# Unique job identifier
# Required: False
# isArray: false
@export var jobId: String:
	set(value):
		__jobId__was__set = true
		jobId = value
var __jobId__was__set := false

# Batch ID associated with the job (useful for linking with record creation requests)
# Required: False
# isArray: false
@export var batchId: String:
	set(value):
		__batchId__was__set = true
		batchId = value
var __batchId__was__set := false

# State of the job (e.g., completed, pending)
# Required: False
# isArray: false
@export var state: String:
	set(value):
		__state__was__set = true
		state = value
var __state__was__set := false

# Timestamp when the job was created
# Required: False
# isArray: false
@export var dateCreated: String:
	set(value):
		__dateCreated__was__set = true
		dateCreated = value
var __dateCreated__was__set := false

# Timestamp when the job started processing
# Required: False
# isArray: false
@export var dateStarted: String:
	set(value):
		__dateStarted__was__set = true
		dateStarted = value
var __dateStarted__was__set := false

# Timestamp when the job finished processing
# Required: False
# isArray: false
@export var dateFinished: String:
	set(value):
		__dateFinished__was__set = true
		dateFinished = value
var __dateFinished__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__jobId__was__set:
		bzz_dictionary["jobId"] = self.jobId
	if self.__batchId__was__set:
		bzz_dictionary["batchId"] = self.batchId
	if self.__state__was__set:
		bzz_dictionary["state"] = self.state
	if self.__dateCreated__was__set:
		bzz_dictionary["dateCreated"] = self.dateCreated
	if self.__dateStarted__was__set:
		bzz_dictionary["dateStarted"] = self.dateStarted
	if self.__dateFinished__was__set:
		bzz_dictionary["dateFinished"] = self.dateFinished
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("jobId"):
		me.jobId = from_dict["jobId"]
	if from_dict.has("batchId"):
		me.batchId = from_dict["batchId"]
	if from_dict.has("state"):
		me.state = from_dict["state"]
	if from_dict.has("dateCreated"):
		me.dateCreated = from_dict["dateCreated"]
	if from_dict.has("dateStarted"):
		me.dateStarted = from_dict["dateStarted"]
	if from_dict.has("dateFinished"):
		me.dateFinished = from_dict["dateFinished"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

