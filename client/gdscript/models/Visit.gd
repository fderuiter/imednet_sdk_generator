extends Resource
class_name Visit

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# Visit Model


# Unique study key
# Required: False
# isArray: false
@export var studyKey: String:
	set(value):
		__studyKey__was__set = true
		studyKey = value
var __studyKey__was__set := false

# Unique system identifier for the subject visit instance
# Required: False
# isArray: false
@export var visitId: int:
	set(value):
		__visitId__was__set = true
		visitId = value
var __visitId__was__set := false

# Unique system identifier of the interval definition for this visit
# Required: False
# isArray: false
@export var intervalId: int:
	set(value):
		__intervalId__was__set = true
		intervalId = value
var __intervalId__was__set := false

# Name of the interval (visit) for this visit instance
# Required: False
# isArray: false
@export var intervalName: String:
	set(value):
		__intervalName__was__set = true
		intervalName = value
var __intervalName__was__set := false

# Mednet subject ID of the subject
# Required: False
# isArray: false
@export var subjectId: int:
	set(value):
		__subjectId__was__set = true
		subjectId = value
var __subjectId__was__set := false

# Protocol-assigned subject identifier
# Required: False
# isArray: false
@export var subjectKey: String:
	set(value):
		__subjectKey__was__set = true
		subjectKey = value
var __subjectKey__was__set := false

# Start date of the visit window (in YYYY-MM-DD format)
# Required: False
# isArray: false
@export var startDate: String:
	set(value):
		__startDate__was__set = true
		startDate = value
var __startDate__was__set := false

# End date of the visit window (in YYYY-MM-DD format)
# Required: False
# isArray: false
@export var endDate: String:
	set(value):
		__endDate__was__set = true
		endDate = value
var __endDate__was__set := false

# Due date of the visit (in YYYY-MM-DD format), if applicable
# Required: False
# isArray: false
@export var dueDate: String:
	set(value):
		__dueDate__was__set = true
		dueDate = value
var __dueDate__was__set := false

# Actual date the visit took place (in YYYY-MM-DD format)
# Required: False
# isArray: false
@export var visitDate: String:
	set(value):
		__visitDate__was__set = true
		visitDate = value
var __visitDate__was__set := false

# Name of the form used to capture the actual visit date
# Required: False
# isArray: false
@export var visitDateForm: String:
	set(value):
		__visitDateForm__was__set = true
		visitDateForm = value
var __visitDateForm__was__set := false

# Variable name of the field capturing the actual visit date
# Required: False
# isArray: false
@export var visitDateQuestion: String:
	set(value):
		__visitDateQuestion__was__set = true
		visitDateQuestion = value
var __visitDateQuestion__was__set := false

# Whether the visit instance is marked as deleted
# Required: False
# isArray: false
@export var deleted: bool:
	set(value):
		__deleted__was__set = true
		deleted = value
var __deleted__was__set := false

# Date when this visit record was created
# Required: False
# isArray: false
@export var dateCreated: String:
	set(value):
		__dateCreated__was__set = true
		dateCreated = value
var __dateCreated__was__set := false

# Date when this visit record was last modified
# Required: False
# isArray: false
@export var dateModified: String:
	set(value):
		__dateModified__was__set = true
		dateModified = value
var __dateModified__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__studyKey__was__set:
		bzz_dictionary["studyKey"] = self.studyKey
	if self.__visitId__was__set:
		bzz_dictionary["visitId"] = self.visitId
	if self.__intervalId__was__set:
		bzz_dictionary["intervalId"] = self.intervalId
	if self.__intervalName__was__set:
		bzz_dictionary["intervalName"] = self.intervalName
	if self.__subjectId__was__set:
		bzz_dictionary["subjectId"] = self.subjectId
	if self.__subjectKey__was__set:
		bzz_dictionary["subjectKey"] = self.subjectKey
	if self.__startDate__was__set:
		bzz_dictionary["startDate"] = self.startDate
	if self.__endDate__was__set:
		bzz_dictionary["endDate"] = self.endDate
	if self.__dueDate__was__set:
		bzz_dictionary["dueDate"] = self.dueDate
	if self.__visitDate__was__set:
		bzz_dictionary["visitDate"] = self.visitDate
	if self.__visitDateForm__was__set:
		bzz_dictionary["visitDateForm"] = self.visitDateForm
	if self.__visitDateQuestion__was__set:
		bzz_dictionary["visitDateQuestion"] = self.visitDateQuestion
	if self.__deleted__was__set:
		bzz_dictionary["deleted"] = self.deleted
	if self.__dateCreated__was__set:
		bzz_dictionary["dateCreated"] = self.dateCreated
	if self.__dateModified__was__set:
		bzz_dictionary["dateModified"] = self.dateModified
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("studyKey"):
		me.studyKey = from_dict["studyKey"]
	if from_dict.has("visitId"):
		me.visitId = from_dict["visitId"]
	if from_dict.has("intervalId"):
		me.intervalId = from_dict["intervalId"]
	if from_dict.has("intervalName"):
		me.intervalName = from_dict["intervalName"]
	if from_dict.has("subjectId"):
		me.subjectId = from_dict["subjectId"]
	if from_dict.has("subjectKey"):
		me.subjectKey = from_dict["subjectKey"]
	if from_dict.has("startDate"):
		me.startDate = from_dict["startDate"]
	if from_dict.has("endDate"):
		me.endDate = from_dict["endDate"]
	if from_dict.has("dueDate"):
		me.dueDate = from_dict["dueDate"]
	if from_dict.has("visitDate"):
		me.visitDate = from_dict["visitDate"]
	if from_dict.has("visitDateForm"):
		me.visitDateForm = from_dict["visitDateForm"]
	if from_dict.has("visitDateQuestion"):
		me.visitDateQuestion = from_dict["visitDateQuestion"]
	if from_dict.has("deleted"):
		me.deleted = from_dict["deleted"]
	if from_dict.has("dateCreated"):
		me.dateCreated = from_dict["dateCreated"]
	if from_dict.has("dateModified"):
		me.dateModified = from_dict["dateModified"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

