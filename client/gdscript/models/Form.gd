extends Resource
class_name Form

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# Form Model


# Unique study key
# Required: False
# isArray: false
@export var studyKey: String:
	set(value):
		__studyKey__was__set = true
		studyKey = value
var __studyKey__was__set := false

# Mednet Form ID
# Required: False
# isArray: false
@export var formId: int:
	set(value):
		__formId__was__set = true
		formId = value
var __formId__was__set := false

# User-defined form key
# Required: False
# isArray: false
@export var formKey: String:
	set(value):
		__formKey__was__set = true
		formKey = value
var __formKey__was__set := false

# Name of the form (eCRF)
# Required: False
# isArray: false
@export var formName: String:
	set(value):
		__formName__was__set = true
		formName = value
var __formName__was__set := false

# Type of the form (e.g., Subject or Site)
# Required: False
# isArray: false
@export var formType: String:
	set(value):
		__formType__was__set = true
		formType = value
var __formType__was__set := false

# Number of modifications (revisions) of the form metadata
# Required: False
# isArray: false
@export var revision: int:
	set(value):
		__revision__was__set = true
		revision = value
var __revision__was__set := false

# Whether the form has an embedded log
# Required: False
# isArray: false
@export var embeddedLog: bool:
	set(value):
		__embeddedLog__was__set = true
		embeddedLog = value
var __embeddedLog__was__set := false

# Whether the form enforces record ownership
# Required: False
# isArray: false
@export var enforceOwnership: bool:
	set(value):
		__enforceOwnership__was__set = true
		enforceOwnership = value
var __enforceOwnership__was__set := false

# Whether the form requires a user agreement
# Required: False
# isArray: false
@export var userAgreement: bool:
	set(value):
		__userAgreement__was__set = true
		userAgreement = value
var __userAgreement__was__set := false

# Whether the form is marked as a subject record report
# Required: False
# isArray: false
@export var subjectRecordReport: bool:
	set(value):
		__subjectRecordReport__was__set = true
		subjectRecordReport = value
var __subjectRecordReport__was__set := false

# Whether the form is included in unscheduled visits
# Required: False
# isArray: false
@export var unscheduledVisit: bool:
	set(value):
		__unscheduledVisit__was__set = true
		unscheduledVisit = value
var __unscheduledVisit__was__set := false

# Whether the form is included in Other Forms category
# Required: False
# isArray: false
@export var otherForms: bool:
	set(value):
		__otherForms__was__set = true
		otherForms = value
var __otherForms__was__set := false

# Whether the form is an ePRO (electronic patient reported outcome) form
# Required: False
# isArray: false
@export var eproForm: bool:
	set(value):
		__eproForm__was__set = true
		eproForm = value
var __eproForm__was__set := false

# Whether the form allows copying of data
# Required: False
# isArray: false
@export var allowCopy: bool:
	set(value):
		__allowCopy__was__set = true
		allowCopy = value
var __allowCopy__was__set := false

# Whether the form is soft-deleted (disabled)
# Required: False
# isArray: false
@export var disabled: bool:
	set(value):
		__disabled__was__set = true
		disabled = value
var __disabled__was__set := false

# Date when this form was created
# Required: False
# isArray: false
@export var dateCreated: String:
	set(value):
		__dateCreated__was__set = true
		dateCreated = value
var __dateCreated__was__set := false

# Date when this form was last modified
# Required: False
# isArray: false
@export var dateModified: String:
	set(value):
		__dateModified__was__set = true
		dateModified = value
var __dateModified__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__studyKey__was__set:
		bzz_dictionary["studyKey"] = self.studyKey
	if self.__formId__was__set:
		bzz_dictionary["formId"] = self.formId
	if self.__formKey__was__set:
		bzz_dictionary["formKey"] = self.formKey
	if self.__formName__was__set:
		bzz_dictionary["formName"] = self.formName
	if self.__formType__was__set:
		bzz_dictionary["formType"] = self.formType
	if self.__revision__was__set:
		bzz_dictionary["revision"] = self.revision
	if self.__embeddedLog__was__set:
		bzz_dictionary["embeddedLog"] = self.embeddedLog
	if self.__enforceOwnership__was__set:
		bzz_dictionary["enforceOwnership"] = self.enforceOwnership
	if self.__userAgreement__was__set:
		bzz_dictionary["userAgreement"] = self.userAgreement
	if self.__subjectRecordReport__was__set:
		bzz_dictionary["subjectRecordReport"] = self.subjectRecordReport
	if self.__unscheduledVisit__was__set:
		bzz_dictionary["unscheduledVisit"] = self.unscheduledVisit
	if self.__otherForms__was__set:
		bzz_dictionary["otherForms"] = self.otherForms
	if self.__eproForm__was__set:
		bzz_dictionary["eproForm"] = self.eproForm
	if self.__allowCopy__was__set:
		bzz_dictionary["allowCopy"] = self.allowCopy
	if self.__disabled__was__set:
		bzz_dictionary["disabled"] = self.disabled
	if self.__dateCreated__was__set:
		bzz_dictionary["dateCreated"] = self.dateCreated
	if self.__dateModified__was__set:
		bzz_dictionary["dateModified"] = self.dateModified
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("studyKey"):
		me.studyKey = from_dict["studyKey"]
	if from_dict.has("formId"):
		me.formId = from_dict["formId"]
	if from_dict.has("formKey"):
		me.formKey = from_dict["formKey"]
	if from_dict.has("formName"):
		me.formName = from_dict["formName"]
	if from_dict.has("formType"):
		me.formType = from_dict["formType"]
	if from_dict.has("revision"):
		me.revision = from_dict["revision"]
	if from_dict.has("embeddedLog"):
		me.embeddedLog = from_dict["embeddedLog"]
	if from_dict.has("enforceOwnership"):
		me.enforceOwnership = from_dict["enforceOwnership"]
	if from_dict.has("userAgreement"):
		me.userAgreement = from_dict["userAgreement"]
	if from_dict.has("subjectRecordReport"):
		me.subjectRecordReport = from_dict["subjectRecordReport"]
	if from_dict.has("unscheduledVisit"):
		me.unscheduledVisit = from_dict["unscheduledVisit"]
	if from_dict.has("otherForms"):
		me.otherForms = from_dict["otherForms"]
	if from_dict.has("eproForm"):
		me.eproForm = from_dict["eproForm"]
	if from_dict.has("allowCopy"):
		me.allowCopy = from_dict["allowCopy"]
	if from_dict.has("disabled"):
		me.disabled = from_dict["disabled"]
	if from_dict.has("dateCreated"):
		me.dateCreated = from_dict["dateCreated"]
	if from_dict.has("dateModified"):
		me.dateModified = from_dict["dateModified"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

