extends Resource
class_name ComponentsSchemasIntervalFormsItem

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# ComponentsSchemasIntervalFormsItem Model


# Form ID scheduled in the interval
# Required: False
# isArray: false
@export var formId: int:
	set(value):
		__formId__was__set = true
		formId = value
var __formId__was__set := false

# Form key scheduled in the interval
# Required: False
# isArray: false
@export var formKey: String:
	set(value):
		__formKey__was__set = true
		formKey = value
var __formKey__was__set := false

# Form name scheduled in the interval
# Required: False
# isArray: false
@export var formName: String:
	set(value):
		__formName__was__set = true
		formName = value
var __formName__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__formId__was__set:
		bzz_dictionary["formId"] = self.formId
	if self.__formKey__was__set:
		bzz_dictionary["formKey"] = self.formKey
	if self.__formName__was__set:
		bzz_dictionary["formName"] = self.formName
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("formId"):
		me.formId = from_dict["formId"]
	if from_dict.has("formKey"):
		me.formKey = from_dict["formKey"]
	if from_dict.has("formName"):
		me.formName = from_dict["formName"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

