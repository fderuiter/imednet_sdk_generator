extends Resource
class_name Record

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# Record Model


# Unique study key
# Required: False
# isArray: false
@export var studyKey: String:
	set(value):
		__studyKey__was__set = true
		studyKey = value
var __studyKey__was__set := false

# Interval ID (visit definition) that this record is associated with
# Required: False
# isArray: false
@export var intervalId: int:
	set(value):
		__intervalId__was__set = true
		intervalId = value
var __intervalId__was__set := false

# Form ID of the form this record instance belongs to
# Required: False
# isArray: false
@export var formId: int:
	set(value):
		__formId__was__set = true
		formId = value
var __formId__was__set := false

# Form key of the form for this record instance
# Required: False
# isArray: false
@export var formKey: String:
	set(value):
		__formKey__was__set = true
		formKey = value
var __formKey__was__set := false

# Site ID associated with the record
# Required: False
# isArray: false
@export var siteId: int:
	set(value):
		__siteId__was__set = true
		siteId = value
var __siteId__was__set := false

# Unique record ID
# Required: False
# isArray: false
@export var recordId: int:
	set(value):
		__recordId__was__set = true
		recordId = value
var __recordId__was__set := false

# Client-assigned record OID
# Required: False
# isArray: false
@export var recordOid: String:
	set(value):
		__recordOid__was__set = true
		recordOid = value
var __recordOid__was__set := false

# Type of record (e.g., SUBJECT for subject-related forms)
# Required: False
# isArray: false
@export var recordType: String:
	set(value):
		__recordType__was__set = true
		recordType = value
var __recordType__was__set := false

# Current status of the record (e.g., Record Incomplete, Record Complete)
# Required: False
# isArray: false
@export var recordStatus: String:
	set(value):
		__recordStatus__was__set = true
		recordStatus = value
var __recordStatus__was__set := false

# Whether the record is marked as deleted
# Required: False
# isArray: false
@export var deleted: bool:
	set(value):
		__deleted__was__set = true
		deleted = value
var __deleted__was__set := false

# Date when this record was created
# Required: False
# isArray: false
@export var dateCreated: String:
	set(value):
		__dateCreated__was__set = true
		dateCreated = value
var __dateCreated__was__set := false

# Date when this record was last modified
# Required: False
# isArray: false
@export var dateModified: String:
	set(value):
		__dateModified__was__set = true
		dateModified = value
var __dateModified__was__set := false

# Mednet subject ID that this record is associated with
# Required: False
# isArray: false
@export var subjectId: int:
	set(value):
		__subjectId__was__set = true
		subjectId = value
var __subjectId__was__set := false

# Client-assigned subject OID for the subject this record is associated with
# Required: False
# isArray: false
@export var subjectOid: String:
	set(value):
		__subjectOid__was__set = true
		subjectOid = value
var __subjectOid__was__set := false

# Subject display ID that this record is associated with
# Required: False
# isArray: false
@export var subjectKey: String:
	set(value):
		__subjectKey__was__set = true
		subjectKey = value
var __subjectKey__was__set := false

# Visit instance ID that this record is associated with (if applicable)
# Required: False
# isArray: false
@export var visitId: int:
	set(value):
		__visitId__was__set = true
		visitId = value
var __visitId__was__set := false

# Record ID of the parent record if this record is a subrecord (if applicable)
# Required: False
# isArray: false
@export var parentRecordId: int:
	set(value):
		__parentRecordId__was__set = true
		parentRecordId = value
var __parentRecordId__was__set := false

# List of keywords associated with the record
# Required: False
# isArray: true
@export var keywords: Array:
	set(value):
		__keywords__was__set = true
		keywords = value
var __keywords__was__set := false

# Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.
# Required: False
# isArray: false
@export var recordData: Dictionary:
	set(value):
		__recordData__was__set = true
		recordData = value
var __recordData__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__studyKey__was__set:
		bzz_dictionary["studyKey"] = self.studyKey
	if self.__intervalId__was__set:
		bzz_dictionary["intervalId"] = self.intervalId
	if self.__formId__was__set:
		bzz_dictionary["formId"] = self.formId
	if self.__formKey__was__set:
		bzz_dictionary["formKey"] = self.formKey
	if self.__siteId__was__set:
		bzz_dictionary["siteId"] = self.siteId
	if self.__recordId__was__set:
		bzz_dictionary["recordId"] = self.recordId
	if self.__recordOid__was__set:
		bzz_dictionary["recordOid"] = self.recordOid
	if self.__recordType__was__set:
		bzz_dictionary["recordType"] = self.recordType
	if self.__recordStatus__was__set:
		bzz_dictionary["recordStatus"] = self.recordStatus
	if self.__deleted__was__set:
		bzz_dictionary["deleted"] = self.deleted
	if self.__dateCreated__was__set:
		bzz_dictionary["dateCreated"] = self.dateCreated
	if self.__dateModified__was__set:
		bzz_dictionary["dateModified"] = self.dateModified
	if self.__subjectId__was__set:
		bzz_dictionary["subjectId"] = self.subjectId
	if self.__subjectOid__was__set:
		bzz_dictionary["subjectOid"] = self.subjectOid
	if self.__subjectKey__was__set:
		bzz_dictionary["subjectKey"] = self.subjectKey
	if self.__visitId__was__set:
		bzz_dictionary["visitId"] = self.visitId
	if self.__parentRecordId__was__set:
		bzz_dictionary["parentRecordId"] = self.parentRecordId
	if self.__keywords__was__set:
		bzz_dictionary["keywords"] = self.keywords
	if self.__recordData__was__set:
		bzz_dictionary["recordData"] = self.recordData
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("studyKey"):
		me.studyKey = from_dict["studyKey"]
	if from_dict.has("intervalId"):
		me.intervalId = from_dict["intervalId"]
	if from_dict.has("formId"):
		me.formId = from_dict["formId"]
	if from_dict.has("formKey"):
		me.formKey = from_dict["formKey"]
	if from_dict.has("siteId"):
		me.siteId = from_dict["siteId"]
	if from_dict.has("recordId"):
		me.recordId = from_dict["recordId"]
	if from_dict.has("recordOid"):
		me.recordOid = from_dict["recordOid"]
	if from_dict.has("recordType"):
		me.recordType = from_dict["recordType"]
	if from_dict.has("recordStatus"):
		me.recordStatus = from_dict["recordStatus"]
	if from_dict.has("deleted"):
		me.deleted = from_dict["deleted"]
	if from_dict.has("dateCreated"):
		me.dateCreated = from_dict["dateCreated"]
	if from_dict.has("dateModified"):
		me.dateModified = from_dict["dateModified"]
	if from_dict.has("subjectId"):
		me.subjectId = from_dict["subjectId"]
	if from_dict.has("subjectOid"):
		me.subjectOid = from_dict["subjectOid"]
	if from_dict.has("subjectKey"):
		me.subjectKey = from_dict["subjectKey"]
	if from_dict.has("visitId"):
		me.visitId = from_dict["visitId"]
	if from_dict.has("parentRecordId"):
		me.parentRecordId = from_dict["parentRecordId"]
	if from_dict.has("keywords"):
		me.keywords = Keyword.bzz_denormalize_multiple(from_dict["keywords"])
	if from_dict.has("recordData"):
		me.recordData = from_dict["recordData"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

