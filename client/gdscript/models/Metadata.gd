extends Resource
class_name Metadata

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# Metadata Model


# HTTP status of the response (e.g., OK or ERROR)
# Required: False
# isArray: false
@export var status: String:
	set(value):
		__status__was__set = true
		status = value
var __status__was__set := false

# HTTP method of the request
# Required: False
# isArray: false
@export var method: String:
	set(value):
		__method__was__set = true
		method = value
var __method__was__set := false

# Requested URI path
# Required: False
# isArray: false
@export var path: String:
	set(value):
		__path__was__set = true
		path = value
var __path__was__set := false

# Timestamp when response was generated
#       (but it's actually a DateTime ; no timezones support in Gdscript)
# Required: False
# isArray: false
@export var timestamp: String:
	set(value):
		__timestamp__was__set = true
		timestamp = value
var __timestamp__was__set := false

# Required: False
# isArray: false
@export var error: ComponentsSchemasMetadataError:
	set(value):
		__error__was__set = true
		error = value
var __error__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__status__was__set:
		bzz_dictionary["status"] = self.status
	if self.__method__was__set:
		bzz_dictionary["method"] = self.method
	if self.__path__was__set:
		bzz_dictionary["path"] = self.path
	if self.__timestamp__was__set:
		bzz_dictionary["timestamp"] = self.timestamp
	if self.__error__was__set:
		bzz_dictionary["error"] = self.error
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("status"):
		me.status = from_dict["status"]
	if from_dict.has("method"):
		me.method = from_dict["method"]
	if from_dict.has("path"):
		me.path = from_dict["path"]
	if from_dict.has("timestamp"):
		me.timestamp = from_dict["timestamp"]
	if from_dict.has("error"):
		me.error = from_dict["error"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

