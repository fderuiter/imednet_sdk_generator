extends Resource
class_name CodingList

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# CodingList Model


# Required: False
# isArray: false
@export var metadata: Metadata:
	set(value):
		__metadata__was__set = true
		metadata = value
var __metadata__was__set := false

# Required: False
# isArray: false
@export var pagination: Pagination:
	set(value):
		__pagination__was__set = true
		pagination = value
var __pagination__was__set := false

# Required: False
# isArray: true
@export var data: Array:
	set(value):
		__data__was__set = true
		data = value
var __data__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__metadata__was__set:
		bzz_dictionary["metadata"] = self.metadata
	if self.__pagination__was__set:
		bzz_dictionary["pagination"] = self.pagination
	if self.__data__was__set:
		bzz_dictionary["data"] = self.data
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("metadata"):
		me.metadata = Metadata.bzz_denormalize_single(from_dict["metadata"])
	if from_dict.has("pagination"):
		me.pagination = Pagination.bzz_denormalize_single(from_dict["pagination"])
	if from_dict.has("data"):
		me.data = Coding.bzz_denormalize_multiple(from_dict["data"])
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

