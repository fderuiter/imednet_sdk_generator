extends Resource
class_name Role

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# Role Model


# Timestamp when the role assignment was created (as [year, month, day, hour, minute, second, nanosecond])
# Required: False
# isArray: true
@export var dateCreated: Array:
	set(value):
		__dateCreated__was__set = true
		dateCreated = value
var __dateCreated__was__set := false

# Timestamp when the role assignment was last modified
# Required: False
# isArray: true
@export var dateModified: Array:
	set(value):
		__dateModified__was__set = true
		dateModified = value
var __dateModified__was__set := false

# Unique role ID (UUID)
# Required: False
# isArray: false
@export var roleId: String:
	set(value):
		__roleId__was__set = true
		roleId = value
var __roleId__was__set := false

# Community ID or level associated with the role
# Required: False
# isArray: false
@export var communityId: int:
	set(value):
		__communityId__was__set = true
		communityId = value
var __communityId__was__set := false

# Name of the role
# Required: False
# isArray: false
@export var name: String:
	set(value):
		__name__was__set = true
		name = value
var __name__was__set := false

# Description of the role
# Required: False
# isArray: false
@export var description: String:
	set(value):
		__description__was__set = true
		description = value
var __description__was__set := false

# Role level or hierarchy
# Required: False
# isArray: false
@export var level: int:
	set(value):
		__level__was__set = true
		level = value
var __level__was__set := false

# Role type/category
# Required: False
# isArray: false
@export var type: String:
	set(value):
		__type__was__set = true
		type = value
var __type__was__set := false

# Whether the role is inactive
# Required: False
# isArray: false
@export var inactive: bool:
	set(value):
		__inactive__was__set = true
		inactive = value
var __inactive__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__dateCreated__was__set:
		bzz_dictionary["dateCreated"] = self.dateCreated
	if self.__dateModified__was__set:
		bzz_dictionary["dateModified"] = self.dateModified
	if self.__roleId__was__set:
		bzz_dictionary["roleId"] = self.roleId
	if self.__communityId__was__set:
		bzz_dictionary["communityId"] = self.communityId
	if self.__name__was__set:
		bzz_dictionary["name"] = self.name
	if self.__description__was__set:
		bzz_dictionary["description"] = self.description
	if self.__level__was__set:
		bzz_dictionary["level"] = self.level
	if self.__type__was__set:
		bzz_dictionary["type"] = self.type
	if self.__inactive__was__set:
		bzz_dictionary["inactive"] = self.inactive
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("dateCreated"):
		me.dateCreated = from_dict["dateCreated"]
	if from_dict.has("dateModified"):
		me.dateModified = from_dict["dateModified"]
	if from_dict.has("roleId"):
		me.roleId = from_dict["roleId"]
	if from_dict.has("communityId"):
		me.communityId = from_dict["communityId"]
	if from_dict.has("name"):
		me.name = from_dict["name"]
	if from_dict.has("description"):
		me.description = from_dict["description"]
	if from_dict.has("level"):
		me.level = from_dict["level"]
	if from_dict.has("type"):
		me.type = from_dict["type"]
	if from_dict.has("inactive"):
		me.inactive = from_dict["inactive"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

