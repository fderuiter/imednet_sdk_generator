extends Resource
class_name Variable

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# Variable Model


# Unique study key
# Required: False
# isArray: false
@export var studyKey: String:
	set(value):
		__studyKey__was__set = true
		studyKey = value
var __studyKey__was__set := false

# Mednet variable ID
# Required: False
# isArray: false
@export var variableId: int:
	set(value):
		__variableId__was__set = true
		variableId = value
var __variableId__was__set := false

# Type of the variable (field type), e.g., RADIO, TEXT, etc.
# Required: False
# isArray: false
# Allowed values: "TEXT", "TEXTAREA", "RADIO", "CHECKBOX", "DROPDOWN", "DATE", "NUMBER"
@export var variableType: String:
	set(value):
		if str(value) != "" and not (str(value) in __variableType__allowable__values):
			push_error("Variable: tried to set property `variableType` to a value that is not allowed." +
				"  Allowed values: `TEXT`, `TEXTAREA`, `RADIO`, `CHECKBOX`, `DROPDOWN`, `DATE`, `NUMBER`")
			return
		__variableType__was__set = true
		variableType = value
var __variableType__was__set := false
var __variableType__allowable__values := ["TEXT", "TEXTAREA", "RADIO", "CHECKBOX", "DROPDOWN", "DATE", "NUMBER"]

# Name of the variable (question text or label)
# Required: False
# isArray: false
@export var variableName: String:
	set(value):
		__variableName__was__set = true
		variableName = value
var __variableName__was__set := false

# Sequence of the variable on the form
# Required: False
# isArray: false
@export var sequence: int:
	set(value):
		__sequence__was__set = true
		sequence = value
var __sequence__was__set := false

# Number of modifications of the variable (via form metadata revisions)
# Required: False
# isArray: false
@export var revision: int:
	set(value):
		__revision__was__set = true
		revision = value
var __revision__was__set := false

# Whether the variable is marked as disabled (deleted)
# Required: False
# isArray: false
@export var disabled: bool:
	set(value):
		__disabled__was__set = true
		disabled = value
var __disabled__was__set := false

# Date when this variable was created
# Required: False
# isArray: false
@export var dateCreated: String:
	set(value):
		__dateCreated__was__set = true
		dateCreated = value
var __dateCreated__was__set := false

# Date when this variable was last modified
# Required: False
# isArray: false
@export var dateModified: String:
	set(value):
		__dateModified__was__set = true
		dateModified = value
var __dateModified__was__set := false

# ID of the form that this variable belongs to
# Required: False
# isArray: false
@export var formId: int:
	set(value):
		__formId__was__set = true
		formId = value
var __formId__was__set := false

# Client-assigned variable OID
# Required: False
# isArray: false
@export var variableOid: String:
	set(value):
		__variableOid__was__set = true
		variableOid = value
var __variableOid__was__set := false

# Whether the variable is marked as deleted
# Required: False
# isArray: false
@export var deleted: bool:
	set(value):
		__deleted__was__set = true
		deleted = value
var __deleted__was__set := false

# Form key of the form that this variable belongs to
# Required: False
# isArray: false
@export var formKey: String:
	set(value):
		__formKey__was__set = true
		formKey = value
var __formKey__was__set := false

# Name of the form that this variable belongs to
# Required: False
# isArray: false
@export var formName: String:
	set(value):
		__formName__was__set = true
		formName = value
var __formName__was__set := false

# User-defined identifier (field name) for the variable
# Required: False
# isArray: false
@export var some_label: String:
	set(value):
		__some_label__was__set = true
		some_label = value
var __some_label__was__set := false

# Whether the variable is flagged as blinded (hidden in certain contexts)
# Required: False
# isArray: false
@export var blinded: bool:
	set(value):
		__blinded__was__set = true
		blinded = value
var __blinded__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__studyKey__was__set:
		bzz_dictionary["studyKey"] = self.studyKey
	if self.__variableId__was__set:
		bzz_dictionary["variableId"] = self.variableId
	if self.__variableType__was__set:
		bzz_dictionary["variableType"] = self.variableType
	if self.__variableName__was__set:
		bzz_dictionary["variableName"] = self.variableName
	if self.__sequence__was__set:
		bzz_dictionary["sequence"] = self.sequence
	if self.__revision__was__set:
		bzz_dictionary["revision"] = self.revision
	if self.__disabled__was__set:
		bzz_dictionary["disabled"] = self.disabled
	if self.__dateCreated__was__set:
		bzz_dictionary["dateCreated"] = self.dateCreated
	if self.__dateModified__was__set:
		bzz_dictionary["dateModified"] = self.dateModified
	if self.__formId__was__set:
		bzz_dictionary["formId"] = self.formId
	if self.__variableOid__was__set:
		bzz_dictionary["variableOid"] = self.variableOid
	if self.__deleted__was__set:
		bzz_dictionary["deleted"] = self.deleted
	if self.__formKey__was__set:
		bzz_dictionary["formKey"] = self.formKey
	if self.__formName__was__set:
		bzz_dictionary["formName"] = self.formName
	if self.__some_label__was__set:
		bzz_dictionary["some_label"] = self.some_label
	if self.__blinded__was__set:
		bzz_dictionary["blinded"] = self.blinded
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("studyKey"):
		me.studyKey = from_dict["studyKey"]
	if from_dict.has("variableId"):
		me.variableId = from_dict["variableId"]
	if from_dict.has("variableType"):
		me.variableType = from_dict["variableType"]
	if from_dict.has("variableName"):
		me.variableName = from_dict["variableName"]
	if from_dict.has("sequence"):
		me.sequence = from_dict["sequence"]
	if from_dict.has("revision"):
		me.revision = from_dict["revision"]
	if from_dict.has("disabled"):
		me.disabled = from_dict["disabled"]
	if from_dict.has("dateCreated"):
		me.dateCreated = from_dict["dateCreated"]
	if from_dict.has("dateModified"):
		me.dateModified = from_dict["dateModified"]
	if from_dict.has("formId"):
		me.formId = from_dict["formId"]
	if from_dict.has("variableOid"):
		me.variableOid = from_dict["variableOid"]
	if from_dict.has("deleted"):
		me.deleted = from_dict["deleted"]
	if from_dict.has("formKey"):
		me.formKey = from_dict["formKey"]
	if from_dict.has("formName"):
		me.formName = from_dict["formName"]
	if from_dict.has("some_label"):
		me.some_label = from_dict["some_label"]
	if from_dict.has("blinded"):
		me.blinded = from_dict["blinded"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

