extends Resource
class_name ComponentsSchemasRecordCreateRequestItem

# THIS FILE WAS AUTOMATICALLY GENERATED by the OpenAPI Generator project.
# For more information on how to customize templates, see:
# https://openapi-generator.tech
# https://github.com/OpenAPITools/openapi-generator/tree/master/modules/openapi-generator/src/main/resources/gdscript
# The OpenAPI Generator Community, Â© Public Domain, 2022

# ComponentsSchemasRecordCreateRequestItem Model


# Form key identifying the eCRF to create or update
# Required: True
# isArray: false
@export var formKey: String:
	set(value):
		__formKey__was__set = true
		formKey = value
var __formKey__was__set := false

# Form ID identifying the eCRF to create or update (alternative to formKey)
# Required: False
# isArray: false
@export var formId: int:
	set(value):
		__formId__was__set = true
		formId = value
var __formId__was__set := false

# Name of the site where the record should be created (for new subject registration)
# Required: False
# isArray: false
@export var siteName: String:
	set(value):
		__siteName__was__set = true
		siteName = value
var __siteName__was__set := false

# Site ID for the record (alternative to siteName)
# Required: False
# isArray: false
@export var siteId: int:
	set(value):
		__siteId__was__set = true
		siteId = value
var __siteId__was__set := false

# Subject identifier (display ID) for which to create or update the record
# Required: False
# isArray: false
@export var subjectKey: String:
	set(value):
		__subjectKey__was__set = true
		subjectKey = value
var __subjectKey__was__set := false

# Subject ID for which to create or update the record (alternative to subjectKey)
# Required: False
# isArray: false
@export var subjectId: int:
	set(value):
		__subjectId__was__set = true
		subjectId = value
var __subjectId__was__set := false

# Subject OID for which to create or update the record (alternative to subjectKey)
# Required: False
# isArray: false
@export var subjectOid: String:
	set(value):
		__subjectOid__was__set = true
		subjectOid = value
var __subjectOid__was__set := false

# Name of the interval (visit) for a scheduled record update
# Required: False
# isArray: false
@export var intervalName: String:
	set(value):
		__intervalName__was__set = true
		intervalName = value
var __intervalName__was__set := false

# Interval ID for a scheduled record update (alternative to intervalName)
# Required: False
# isArray: false
@export var intervalId: int:
	set(value):
		__intervalId__was__set = true
		intervalId = value
var __intervalId__was__set := false

# Record ID for updating an existing unscheduled record (if applicable)
# Required: False
# isArray: false
@export var recordId: int:
	set(value):
		__recordId__was__set = true
		recordId = value
var __recordId__was__set := false

# Record OID for updating an existing unscheduled record (if applicable)
# Required: False
# isArray: false
@export var recordOid: String:
	set(value):
		__recordOid__was__set = true
		recordOid = value
var __recordOid__was__set := false

# Key-value pairs of field names and values for the record data
# Required: True
# isArray: false
@export var data: Dictionary:
	set(value):
		__data__was__set = true
		data = value
var __data__was__set := false


func bzz_collect_missing_properties() -> Array:
	var bzz_missing_properties := Array()
	if not self.__formKey__was__set:
		bzz_missing_properties.append("formKey")
	if not self.__data__was__set:
		bzz_missing_properties.append("data")
	return bzz_missing_properties


func bzz_normalize() -> Dictionary:
	var bzz_dictionary := Dictionary()
	if self.__formKey__was__set:
		bzz_dictionary["formKey"] = self.formKey
	if self.__formId__was__set:
		bzz_dictionary["formId"] = self.formId
	if self.__siteName__was__set:
		bzz_dictionary["siteName"] = self.siteName
	if self.__siteId__was__set:
		bzz_dictionary["siteId"] = self.siteId
	if self.__subjectKey__was__set:
		bzz_dictionary["subjectKey"] = self.subjectKey
	if self.__subjectId__was__set:
		bzz_dictionary["subjectId"] = self.subjectId
	if self.__subjectOid__was__set:
		bzz_dictionary["subjectOid"] = self.subjectOid
	if self.__intervalName__was__set:
		bzz_dictionary["intervalName"] = self.intervalName
	if self.__intervalId__was__set:
		bzz_dictionary["intervalId"] = self.intervalId
	if self.__recordId__was__set:
		bzz_dictionary["recordId"] = self.recordId
	if self.__recordOid__was__set:
		bzz_dictionary["recordOid"] = self.recordOid
	if self.__data__was__set:
		bzz_dictionary["data"] = self.data
	return bzz_dictionary


# Won't work for JSON+LD
static func bzz_denormalize_single(from_dict: Dictionary):
	var me := new()
	if from_dict.has("formKey"):
		me.formKey = from_dict["formKey"]
	if from_dict.has("formId"):
		me.formId = from_dict["formId"]
	if from_dict.has("siteName"):
		me.siteName = from_dict["siteName"]
	if from_dict.has("siteId"):
		me.siteId = from_dict["siteId"]
	if from_dict.has("subjectKey"):
		me.subjectKey = from_dict["subjectKey"]
	if from_dict.has("subjectId"):
		me.subjectId = from_dict["subjectId"]
	if from_dict.has("subjectOid"):
		me.subjectOid = from_dict["subjectOid"]
	if from_dict.has("intervalName"):
		me.intervalName = from_dict["intervalName"]
	if from_dict.has("intervalId"):
		me.intervalId = from_dict["intervalId"]
	if from_dict.has("recordId"):
		me.recordId = from_dict["recordId"]
	if from_dict.has("recordOid"):
		me.recordOid = from_dict["recordOid"]
	if from_dict.has("data"):
		me.data = from_dict["data"]
	return me


# Won't work for JSON+LD
static func bzz_denormalize_multiple(from_array: Array):
	var mes := Array()
	for element in from_array:
		if element is Array:
			mes.append(bzz_denormalize_multiple(element))
		elif element is Dictionary:
			# TODO: perhaps check first if it looks like a match or an intermediate container
			mes.append(bzz_denormalize_single(element))
		else:
			mes.append(element)
	return mes

