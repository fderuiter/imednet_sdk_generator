/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Variable.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Variable_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Variable_H_

#include <stdexcept>

#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



class  Variable
    : public ModelBase
{
public:
    Variable();
    virtual ~Variable();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Variable members

    enum class VariableTypeEnum
    {
        TEXT,
        TEXTAREA,
        RADIO,
        CHECKBOX,
        DROPDOWN,
        DATE,
        NUMBER,
    };
    /// <summary>
    /// Type of the variable (field type), e.g., RADIO, TEXT, etc.
    /// </summary>

    VariableTypeEnum toVariableTypeEnum(const utility::string_t& value) const;
    const utility::string_t fromVariableTypeEnum(const VariableTypeEnum value) const;


    /// <summary>
    /// Unique study key
    /// </summary>
    utility::string_t getStudyKey() const;
    bool studyKeyIsSet() const;
    void unsetStudyKey();
    void setStudyKey(const utility::string_t& value);

    /// <summary>
    /// Mednet variable ID
    /// </summary>
    int32_t getVariableId() const;
    bool variableIdIsSet() const;
    void unsetVariableId();
    void setVariableId(int32_t value);

    /// <summary>
    /// Type of the variable (field type), e.g., RADIO, TEXT, etc.
    /// </summary>
    VariableTypeEnum getVariableType() const;
    bool variableTypeIsSet() const;
    void unsetVariableType();
    void setVariableType(const VariableTypeEnum value);

    /// <summary>
    /// Name of the variable (question text or label)
    /// </summary>
    utility::string_t getVariableName() const;
    bool variableNameIsSet() const;
    void unsetVariableName();
    void setVariableName(const utility::string_t& value);

    /// <summary>
    /// Sequence of the variable on the form
    /// </summary>
    int32_t getSequence() const;
    bool sequenceIsSet() const;
    void unsetSequence();
    void setSequence(int32_t value);

    /// <summary>
    /// Number of modifications of the variable (via form metadata revisions)
    /// </summary>
    int32_t getRevision() const;
    bool revisionIsSet() const;
    void unsetRevision();
    void setRevision(int32_t value);

    /// <summary>
    /// Whether the variable is marked as disabled (deleted)
    /// </summary>
    bool isDisabled() const;
    bool disabledIsSet() const;
    void unsetDisabled();
    void setDisabled(bool value);

    /// <summary>
    /// Date when this variable was created
    /// </summary>
    utility::string_t getDateCreated() const;
    bool dateCreatedIsSet() const;
    void unsetDateCreated();
    void setDateCreated(const utility::string_t& value);

    /// <summary>
    /// Date when this variable was last modified
    /// </summary>
    utility::string_t getDateModified() const;
    bool dateModifiedIsSet() const;
    void unsetDateModified();
    void setDateModified(const utility::string_t& value);

    /// <summary>
    /// ID of the form that this variable belongs to
    /// </summary>
    int32_t getFormId() const;
    bool formIdIsSet() const;
    void unsetFormId();
    void setFormId(int32_t value);

    /// <summary>
    /// Client-assigned variable OID
    /// </summary>
    utility::string_t getVariableOid() const;
    bool variableOidIsSet() const;
    void unsetVariableOid();
    void setVariableOid(const utility::string_t& value);

    /// <summary>
    /// Whether the variable is marked as deleted
    /// </summary>
    bool isDeleted() const;
    bool deletedIsSet() const;
    void unsetDeleted();
    void setDeleted(bool value);

    /// <summary>
    /// Form key of the form that this variable belongs to
    /// </summary>
    utility::string_t getFormKey() const;
    bool formKeyIsSet() const;
    void unsetFormKey();
    void setFormKey(const utility::string_t& value);

    /// <summary>
    /// Name of the form that this variable belongs to
    /// </summary>
    utility::string_t getFormName() const;
    bool formNameIsSet() const;
    void unsetFormName();
    void setFormName(const utility::string_t& value);

    /// <summary>
    /// User-defined identifier (field name) for the variable
    /// </summary>
    utility::string_t getLabel() const;
    bool labelIsSet() const;
    void unsetLabel();
    void setLabel(const utility::string_t& value);

    /// <summary>
    /// Whether the variable is flagged as blinded (hidden in certain contexts)
    /// </summary>
    bool isBlinded() const;
    bool blindedIsSet() const;
    void unsetBlinded();
    void setBlinded(bool value);


protected:
    utility::string_t m_StudyKey;
    bool m_StudyKeyIsSet;

    int32_t m_VariableId;
    bool m_VariableIdIsSet;

    VariableTypeEnum m_VariableType;
    bool m_VariableTypeIsSet;

    utility::string_t m_VariableName;
    bool m_VariableNameIsSet;

    int32_t m_Sequence;
    bool m_SequenceIsSet;

    int32_t m_Revision;
    bool m_RevisionIsSet;

    bool m_Disabled;
    bool m_DisabledIsSet;

    utility::string_t m_DateCreated;
    bool m_DateCreatedIsSet;

    utility::string_t m_DateModified;
    bool m_DateModifiedIsSet;

    int32_t m_FormId;
    bool m_FormIdIsSet;

    utility::string_t m_VariableOid;
    bool m_VariableOidIsSet;

    bool m_Deleted;
    bool m_DeletedIsSet;

    utility::string_t m_FormKey;
    bool m_FormKeyIsSet;

    utility::string_t m_FormName;
    bool m_FormNameIsSet;

    utility::string_t m_Label;
    bool m_LabelIsSet;

    bool m_Blinded;
    bool m_BlindedIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Variable_H_ */
