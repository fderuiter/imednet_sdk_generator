/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Site.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Site_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Site_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



class  Site
    : public ModelBase
{
public:
    Site();
    virtual ~Site();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Site members


    /// <summary>
    /// Unique study key
    /// </summary>
    utility::string_t getStudyKey() const;
    bool studyKeyIsSet() const;
    void unsetStudyKey();
    void setStudyKey(const utility::string_t& value);

    /// <summary>
    /// Unique site ID
    /// </summary>
    int32_t getSiteId() const;
    bool siteIdIsSet() const;
    void unsetSiteId();
    void setSiteId(int32_t value);

    /// <summary>
    /// Name of the site
    /// </summary>
    utility::string_t getSiteName() const;
    bool siteNameIsSet() const;
    void unsetSiteName();
    void setSiteName(const utility::string_t& value);

    /// <summary>
    /// Enrollment status of the site
    /// </summary>
    utility::string_t getSiteEnrollmentStatus() const;
    bool siteEnrollmentStatusIsSet() const;
    void unsetSiteEnrollmentStatus();
    void setSiteEnrollmentStatus(const utility::string_t& value);

    /// <summary>
    /// Date when this site was created
    /// </summary>
    utility::string_t getDateCreated() const;
    bool dateCreatedIsSet() const;
    void unsetDateCreated();
    void setDateCreated(const utility::string_t& value);

    /// <summary>
    /// Date when this site was last modified
    /// </summary>
    utility::string_t getDateModified() const;
    bool dateModifiedIsSet() const;
    void unsetDateModified();
    void setDateModified(const utility::string_t& value);


protected:
    utility::string_t m_StudyKey;
    bool m_StudyKeyIsSet;

    int32_t m_SiteId;
    bool m_SiteIdIsSet;

    utility::string_t m_SiteName;
    bool m_SiteNameIsSet;

    utility::string_t m_SiteEnrollmentStatus;
    bool m_SiteEnrollmentStatusIsSet;

    utility::string_t m_DateCreated;
    bool m_DateCreatedIsSet;

    utility::string_t m_DateModified;
    bool m_DateModifiedIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Site_H_ */
