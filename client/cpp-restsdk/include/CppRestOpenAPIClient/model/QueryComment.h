/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * QueryComment.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_QueryComment_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_QueryComment_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



class  QueryComment
    : public ModelBase
{
public:
    QueryComment();
    virtual ~QueryComment();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// QueryComment members


    /// <summary>
    /// Sequence number of the comment/action in the query history
    /// </summary>
    int32_t getSequence() const;
    bool sequenceIsSet() const;
    void unsetSequence();
    void setSequence(int32_t value);

    /// <summary>
    /// Status of the query after this comment (e.g., Open, Closed)
    /// </summary>
    utility::string_t getAnnotationStatus() const;
    bool annotationStatusIsSet() const;
    void unsetAnnotationStatus();
    void setAnnotationStatus(const utility::string_t& value);

    /// <summary>
    /// Username of the user who made the comment or action
    /// </summary>
    utility::string_t getUser() const;
    bool userIsSet() const;
    void unsetUser();
    void setUser(const utility::string_t& value);

    /// <summary>
    /// Text of the comment
    /// </summary>
    utility::string_t getComment() const;
    bool commentIsSet() const;
    void unsetComment();
    void setComment(const utility::string_t& value);

    /// <summary>
    /// Whether the query was marked closed at this step
    /// </summary>
    bool isClosed() const;
    bool closedIsSet() const;
    void unsetClosed();
    void setClosed(bool value);

    /// <summary>
    /// Date of the comment or action
    /// </summary>
    utility::string_t getDate() const;
    bool dateIsSet() const;
    void unsetdate();
    void setDate(const utility::string_t& value);


protected:
    int32_t m_Sequence;
    bool m_SequenceIsSet;

    utility::string_t m_AnnotationStatus;
    bool m_AnnotationStatusIsSet;

    utility::string_t m_User;
    bool m_UserIsSet;

    utility::string_t m_Comment;
    bool m_CommentIsSet;

    bool m_Closed;
    bool m_ClosedIsSet;

    utility::string_t m_date;
    bool m_dateIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_QueryComment_H_ */
