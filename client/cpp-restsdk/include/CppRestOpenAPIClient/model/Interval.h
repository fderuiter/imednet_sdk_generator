/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Interval.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Interval_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Interval_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/Components_schemas_Interval_forms_item.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Components_schemas_Interval_forms_item;


class  Interval
    : public ModelBase
{
public:
    Interval();
    virtual ~Interval();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Interval members


    /// <summary>
    /// Unique study key
    /// </summary>
    utility::string_t getStudyKey() const;
    bool studyKeyIsSet() const;
    void unsetStudyKey();
    void setStudyKey(const utility::string_t& value);

    /// <summary>
    /// Unique system identifier for the interval (visit definition)
    /// </summary>
    int32_t getIntervalId() const;
    bool intervalIdIsSet() const;
    void unsetIntervalId();
    void setIntervalId(int32_t value);

    /// <summary>
    /// Name of the interval (visit) as defined in the study
    /// </summary>
    utility::string_t getIntervalName() const;
    bool intervalNameIsSet() const;
    void unsetIntervalName();
    void setIntervalName(const utility::string_t& value);

    /// <summary>
    /// Description of the interval (visit)
    /// </summary>
    utility::string_t getIntervalDescription() const;
    bool intervalDescriptionIsSet() const;
    void unsetIntervalDescription();
    void setIntervalDescription(const utility::string_t& value);

    /// <summary>
    /// Sequence number of the interval in the schedule
    /// </summary>
    int32_t getIntervalSequence() const;
    bool intervalSequenceIsSet() const;
    void unsetIntervalSequence();
    void setIntervalSequence(int32_t value);

    /// <summary>
    /// Identifier for the interval group (if intervals are grouped)
    /// </summary>
    int32_t getIntervalGroupId() const;
    bool intervalGroupIdIsSet() const;
    void unsetIntervalGroupId();
    void setIntervalGroupId(int32_t value);

    /// <summary>
    /// Name of the interval group
    /// </summary>
    utility::string_t getIntervalGroupName() const;
    bool intervalGroupNameIsSet() const;
    void unsetIntervalGroupName();
    void setIntervalGroupName(const utility::string_t& value);

    /// <summary>
    /// Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
    /// </summary>
    utility::string_t getTimeline() const;
    bool timelineIsSet() const;
    void unsetTimeline();
    void setTimeline(const utility::string_t& value);

    /// <summary>
    /// Baseline interval used for calculating this intervalâ€™s dates
    /// </summary>
    utility::string_t getDefinedUsingInterval() const;
    bool definedUsingIntervalIsSet() const;
    void unsetDefinedUsingInterval();
    void setDefinedUsingInterval(const utility::string_t& value);

    /// <summary>
    /// Baseline form (name) from which the calculation date is taken
    /// </summary>
    utility::string_t getWindowCalculationForm() const;
    bool windowCalculationFormIsSet() const;
    void unsetWindowCalculationForm();
    void setWindowCalculationForm(const utility::string_t& value);

    /// <summary>
    /// Baseline field (variable name) from which the calculation date is taken
    /// </summary>
    utility::string_t getWindowCalculationDate() const;
    bool windowCalculationDateIsSet() const;
    void unsetWindowCalculationDate();
    void setWindowCalculationDate(const utility::string_t& value);

    /// <summary>
    /// Form used to capture the actual date for this interval
    /// </summary>
    utility::string_t getActualDateForm() const;
    bool actualDateFormIsSet() const;
    void unsetActualDateForm();
    void setActualDateForm(const utility::string_t& value);

    /// <summary>
    /// Field (variable name) used to capture the actual date for this interval
    /// </summary>
    utility::string_t getActualDate() const;
    bool actualDateIsSet() const;
    void unsetActualDate();
    void setActualDate(const utility::string_t& value);

    /// <summary>
    /// Number of days from the calculation date when the interval is due
    /// </summary>
    int32_t getDueDateWillBeIn() const;
    bool dueDateWillBeInIsSet() const;
    void unsetDueDateWillBeIn();
    void setDueDateWillBeIn(int32_t value);

    /// <summary>
    /// Number of days before the due date that are allowed (negative window)
    /// </summary>
    int32_t getNegativeSlack() const;
    bool negativeSlackIsSet() const;
    void unsetNegativeSlack();
    void setNegativeSlack(int32_t value);

    /// <summary>
    /// Number of days after the due date that are allowed (positive window)
    /// </summary>
    int32_t getPositiveSlack() const;
    bool positiveSlackIsSet() const;
    void unsetPositiveSlack();
    void setPositiveSlack(int32_t value);

    /// <summary>
    /// Number of days of grace period for ePRO completion after due date
    /// </summary>
    int32_t getEproGracePeriod() const;
    bool eproGracePeriodIsSet() const;
    void unsetEproGracePeriod();
    void setEproGracePeriod(int32_t value);

    /// <summary>
    /// List of forms that are scheduled in this interval
    /// </summary>
    std::vector<std::shared_ptr<Components_schemas_Interval_forms_item>> getForms() const;
    bool formsIsSet() const;
    void unsetForms();
    void setForms(const std::vector<std::shared_ptr<Components_schemas_Interval_forms_item>>& value);

    /// <summary>
    /// Whether the interval is soft-deleted (disabled)
    /// </summary>
    bool isDisabled() const;
    bool disabledIsSet() const;
    void unsetDisabled();
    void setDisabled(bool value);

    /// <summary>
    /// Date when this interval was created
    /// </summary>
    utility::string_t getDateCreated() const;
    bool dateCreatedIsSet() const;
    void unsetDateCreated();
    void setDateCreated(const utility::string_t& value);

    /// <summary>
    /// Date when this interval was last modified
    /// </summary>
    utility::string_t getDateModified() const;
    bool dateModifiedIsSet() const;
    void unsetDateModified();
    void setDateModified(const utility::string_t& value);


protected:
    utility::string_t m_StudyKey;
    bool m_StudyKeyIsSet;

    int32_t m_IntervalId;
    bool m_IntervalIdIsSet;

    utility::string_t m_IntervalName;
    bool m_IntervalNameIsSet;

    utility::string_t m_IntervalDescription;
    bool m_IntervalDescriptionIsSet;

    int32_t m_IntervalSequence;
    bool m_IntervalSequenceIsSet;

    int32_t m_IntervalGroupId;
    bool m_IntervalGroupIdIsSet;

    utility::string_t m_IntervalGroupName;
    bool m_IntervalGroupNameIsSet;

    utility::string_t m_Timeline;
    bool m_TimelineIsSet;

    utility::string_t m_DefinedUsingInterval;
    bool m_DefinedUsingIntervalIsSet;

    utility::string_t m_WindowCalculationForm;
    bool m_WindowCalculationFormIsSet;

    utility::string_t m_WindowCalculationDate;
    bool m_WindowCalculationDateIsSet;

    utility::string_t m_ActualDateForm;
    bool m_ActualDateFormIsSet;

    utility::string_t m_ActualDate;
    bool m_ActualDateIsSet;

    int32_t m_DueDateWillBeIn;
    bool m_DueDateWillBeInIsSet;

    int32_t m_NegativeSlack;
    bool m_NegativeSlackIsSet;

    int32_t m_PositiveSlack;
    bool m_PositiveSlackIsSet;

    int32_t m_EproGracePeriod;
    bool m_EproGracePeriodIsSet;

    std::vector<std::shared_ptr<Components_schemas_Interval_forms_item>> m_Forms;
    bool m_FormsIsSet;

    bool m_Disabled;
    bool m_DisabledIsSet;

    utility::string_t m_DateCreated;
    bool m_DateCreatedIsSet;

    utility::string_t m_DateModified;
    bool m_DateModifiedIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Interval_H_ */
