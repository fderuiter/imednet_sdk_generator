/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Subject.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Subject_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Subject_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Keyword.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Keyword;


class  Subject
    : public ModelBase
{
public:
    Subject();
    virtual ~Subject();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Subject members


    /// <summary>
    /// Unique study key
    /// </summary>
    utility::string_t getStudyKey() const;
    bool studyKeyIsSet() const;
    void unsetStudyKey();
    void setStudyKey(const utility::string_t& value);

    /// <summary>
    /// Mednet subject ID (internal numeric ID)
    /// </summary>
    int32_t getSubjectId() const;
    bool subjectIdIsSet() const;
    void unsetSubjectId();
    void setSubjectId(int32_t value);

    /// <summary>
    /// Client-assigned subject object identifier (OID)
    /// </summary>
    utility::string_t getSubjectOid() const;
    bool subjectOidIsSet() const;
    void unsetSubjectOid();
    void setSubjectOid(const utility::string_t& value);

    /// <summary>
    /// Protocol-assigned subject identifier (display ID)
    /// </summary>
    utility::string_t getSubjectKey() const;
    bool subjectKeyIsSet() const;
    void unsetSubjectKey();
    void setSubjectKey(const utility::string_t& value);

    /// <summary>
    /// Current status of the subject (e.g., Enrolled)
    /// </summary>
    utility::string_t getSubjectStatus() const;
    bool subjectStatusIsSet() const;
    void unsetSubjectStatus();
    void setSubjectStatus(const utility::string_t& value);

    /// <summary>
    /// Mednet site ID the subject is associated with
    /// </summary>
    int32_t getSiteId() const;
    bool siteIdIsSet() const;
    void unsetSiteId();
    void setSiteId(int32_t value);

    /// <summary>
    /// Name of the site the subject is associated with
    /// </summary>
    utility::string_t getSiteName() const;
    bool siteNameIsSet() const;
    void unsetSiteName();
    void setSiteName(const utility::string_t& value);

    /// <summary>
    /// Whether the subject is marked as deleted
    /// </summary>
    bool isDeleted() const;
    bool deletedIsSet() const;
    void unsetDeleted();
    void setDeleted(bool value);

    /// <summary>
    /// Subjectâ€™s enrollment start date
    /// </summary>
    utility::string_t getEnrollmentStartDate() const;
    bool enrollmentStartDateIsSet() const;
    void unsetEnrollmentStartDate();
    void setEnrollmentStartDate(const utility::string_t& value);

    /// <summary>
    /// Date when this subject record was created
    /// </summary>
    utility::string_t getDateCreated() const;
    bool dateCreatedIsSet() const;
    void unsetDateCreated();
    void setDateCreated(const utility::string_t& value);

    /// <summary>
    /// Date when this subject record was last modified
    /// </summary>
    utility::string_t getDateModified() const;
    bool dateModifiedIsSet() const;
    void unsetDateModified();
    void setDateModified(const utility::string_t& value);

    /// <summary>
    /// List of keywords associated with the subject
    /// </summary>
    std::vector<std::shared_ptr<Keyword>> getKeywords() const;
    bool keywordsIsSet() const;
    void unsetKeywords();
    void setKeywords(const std::vector<std::shared_ptr<Keyword>>& value);


protected:
    utility::string_t m_StudyKey;
    bool m_StudyKeyIsSet;

    int32_t m_SubjectId;
    bool m_SubjectIdIsSet;

    utility::string_t m_SubjectOid;
    bool m_SubjectOidIsSet;

    utility::string_t m_SubjectKey;
    bool m_SubjectKeyIsSet;

    utility::string_t m_SubjectStatus;
    bool m_SubjectStatusIsSet;

    int32_t m_SiteId;
    bool m_SiteIdIsSet;

    utility::string_t m_SiteName;
    bool m_SiteNameIsSet;

    bool m_Deleted;
    bool m_DeletedIsSet;

    utility::string_t m_EnrollmentStartDate;
    bool m_EnrollmentStartDateIsSet;

    utility::string_t m_DateCreated;
    bool m_DateCreatedIsSet;

    utility::string_t m_DateModified;
    bool m_DateModifiedIsSet;

    std::vector<std::shared_ptr<Keyword>> m_Keywords;
    bool m_KeywordsIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Subject_H_ */
