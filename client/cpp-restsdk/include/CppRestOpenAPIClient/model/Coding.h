/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Coding.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Coding_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Coding_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



class  Coding
    : public ModelBase
{
public:
    Coding();
    virtual ~Coding();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// Coding members


    /// <summary>
    /// Unique study key
    /// </summary>
    utility::string_t getStudyKey() const;
    bool studyKeyIsSet() const;
    void unsetStudyKey();
    void setStudyKey(const utility::string_t& value);

    /// <summary>
    /// Name of the site associated with the coded data
    /// </summary>
    utility::string_t getSiteName() const;
    bool siteNameIsSet() const;
    void unsetSiteName();
    void setSiteName(const utility::string_t& value);

    /// <summary>
    /// Site ID associated with the coded data
    /// </summary>
    int32_t getSiteId() const;
    bool siteIdIsSet() const;
    void unsetSiteId();
    void setSiteId(int32_t value);

    /// <summary>
    /// Subject ID associated with the coded data
    /// </summary>
    int32_t getSubjectId() const;
    bool subjectIdIsSet() const;
    void unsetSubjectId();
    void setSubjectId(int32_t value);

    /// <summary>
    /// Subject key (display ID) associated with the coded data
    /// </summary>
    utility::string_t getSubjectKey() const;
    bool subjectKeyIsSet() const;
    void unsetSubjectKey();
    void setSubjectKey(const utility::string_t& value);

    /// <summary>
    /// Form ID where the coded data originates
    /// </summary>
    int32_t getFormId() const;
    bool formIdIsSet() const;
    void unsetFormId();
    void setFormId(int32_t value);

    /// <summary>
    /// Name of the form where the coded data originates
    /// </summary>
    utility::string_t getFormName() const;
    bool formNameIsSet() const;
    void unsetFormName();
    void setFormName(const utility::string_t& value);

    /// <summary>
    /// Form key where the coded data originates
    /// </summary>
    utility::string_t getFormKey() const;
    bool formKeyIsSet() const;
    void unsetFormKey();
    void setFormKey(const utility::string_t& value);

    /// <summary>
    /// Revision number of the coding entry
    /// </summary>
    int32_t getRevision() const;
    bool revisionIsSet() const;
    void unsetRevision();
    void setRevision(int32_t value);

    /// <summary>
    /// Record ID associated with the coded data
    /// </summary>
    int32_t getRecordId() const;
    bool recordIdIsSet() const;
    void unsetRecordId();
    void setRecordId(int32_t value);

    /// <summary>
    /// Variable name (field) that was coded
    /// </summary>
    utility::string_t getVariable() const;
    bool variableIsSet() const;
    void unsetVariable();
    void setVariable(const utility::string_t& value);

    /// <summary>
    /// Original value entered that required coding
    /// </summary>
    utility::string_t getValue() const;
    bool valueIsSet() const;
    void unsetValue();
    void setValue(const utility::string_t& value);

    /// <summary>
    /// Mednet coding ID
    /// </summary>
    int32_t getCodingId() const;
    bool codingIdIsSet() const;
    void unsetCodingId();
    void setCodingId(int32_t value);

    /// <summary>
    /// Standardized code assigned (e.g., dictionary term)
    /// </summary>
    utility::string_t getCode() const;
    bool codeIsSet() const;
    void unsetCode();
    void setCode(const utility::string_t& value);

    /// <summary>
    /// Name of the user who performed the coding
    /// </summary>
    utility::string_t getCodedBy() const;
    bool codedByIsSet() const;
    void unsetCodedBy();
    void setCodedBy(const utility::string_t& value);

    /// <summary>
    /// Reason for coding or any notes on changes
    /// </summary>
    utility::string_t getReason() const;
    bool reasonIsSet() const;
    void unsetReason();
    void setReason(const utility::string_t& value);

    /// <summary>
    /// Name of the dictionary used (e.g., MedDRA)
    /// </summary>
    utility::string_t getDictionaryName() const;
    bool dictionaryNameIsSet() const;
    void unsetDictionaryName();
    void setDictionaryName(const utility::string_t& value);

    /// <summary>
    /// Version of the dictionary used
    /// </summary>
    utility::string_t getDictionaryVersion() const;
    bool dictionaryVersionIsSet() const;
    void unsetDictionaryVersion();
    void setDictionaryVersion(const utility::string_t& value);

    /// <summary>
    /// Date when the coding was performed
    /// </summary>
    utility::string_t getDateCoded() const;
    bool dateCodedIsSet() const;
    void unsetDateCoded();
    void setDateCoded(const utility::string_t& value);


protected:
    utility::string_t m_StudyKey;
    bool m_StudyKeyIsSet;

    utility::string_t m_SiteName;
    bool m_SiteNameIsSet;

    int32_t m_SiteId;
    bool m_SiteIdIsSet;

    int32_t m_SubjectId;
    bool m_SubjectIdIsSet;

    utility::string_t m_SubjectKey;
    bool m_SubjectKeyIsSet;

    int32_t m_FormId;
    bool m_FormIdIsSet;

    utility::string_t m_FormName;
    bool m_FormNameIsSet;

    utility::string_t m_FormKey;
    bool m_FormKeyIsSet;

    int32_t m_Revision;
    bool m_RevisionIsSet;

    int32_t m_RecordId;
    bool m_RecordIdIsSet;

    utility::string_t m_Variable;
    bool m_VariableIsSet;

    utility::string_t m_Value;
    bool m_ValueIsSet;

    int32_t m_CodingId;
    bool m_CodingIdIsSet;

    utility::string_t m_Code;
    bool m_CodeIsSet;

    utility::string_t m_CodedBy;
    bool m_CodedByIsSet;

    utility::string_t m_Reason;
    bool m_ReasonIsSet;

    utility::string_t m_DictionaryName;
    bool m_DictionaryNameIsSet;

    utility::string_t m_DictionaryVersion;
    bool m_DictionaryVersionIsSet;

    utility::string_t m_DateCoded;
    bool m_DateCodedIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Coding_H_ */
