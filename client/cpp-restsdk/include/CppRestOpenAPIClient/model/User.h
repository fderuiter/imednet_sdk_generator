/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * User.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_User_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_User_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Role.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Role;


class  User
    : public ModelBase
{
public:
    User();
    virtual ~User();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// User members


    /// <summary>
    /// Unique user ID (UUID)
    /// </summary>
    utility::string_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUserId();
    void setUserId(const utility::string_t& value);

    /// <summary>
    /// User login name
    /// </summary>
    utility::string_t getLogin() const;
    bool loginIsSet() const;
    void unsetLogin();
    void setLogin(const utility::string_t& value);

    /// <summary>
    /// User first name
    /// </summary>
    utility::string_t getFirstName() const;
    bool firstNameIsSet() const;
    void unsetFirstName();
    void setFirstName(const utility::string_t& value);

    /// <summary>
    /// User last name
    /// </summary>
    utility::string_t getLastName() const;
    bool lastNameIsSet() const;
    void unsetLastName();
    void setLastName(const utility::string_t& value);

    /// <summary>
    /// User email address
    /// </summary>
    utility::string_t getEmail() const;
    bool emailIsSet() const;
    void unsetEmail();
    void setEmail(const utility::string_t& value);

    /// <summary>
    /// Whether the user is active in the given study
    /// </summary>
    bool isUserActiveInStudy() const;
    bool userActiveInStudyIsSet() const;
    void unsetUserActiveInStudy();
    void setUserActiveInStudy(bool value);

    /// <summary>
    /// Roles that the user has in the study
    /// </summary>
    std::vector<std::shared_ptr<Role>> getRoles() const;
    bool rolesIsSet() const;
    void unsetRoles();
    void setRoles(const std::vector<std::shared_ptr<Role>>& value);


protected:
    utility::string_t m_UserId;
    bool m_UserIdIsSet;

    utility::string_t m_Login;
    bool m_LoginIsSet;

    utility::string_t m_FirstName;
    bool m_FirstNameIsSet;

    utility::string_t m_LastName;
    bool m_LastNameIsSet;

    utility::string_t m_Email;
    bool m_EmailIsSet;

    bool m_UserActiveInStudy;
    bool m_UserActiveInStudyIsSet;

    std::vector<std::shared_ptr<Role>> m_Roles;
    bool m_RolesIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_User_H_ */
