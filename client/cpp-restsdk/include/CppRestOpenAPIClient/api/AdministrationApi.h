/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AdministrationApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_AdministrationApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_AdministrationApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/Inline_object.h"
#include "CppRestOpenAPIClient/model/Inline_object_1.h"
#include "CppRestOpenAPIClient/model/Inline_object_2.h"
#include "CppRestOpenAPIClient/model/Inline_object_3.h"
#include "CppRestOpenAPIClient/model/Inline_object_5.h"
#include "CppRestOpenAPIClient/model/UserList.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  AdministrationApi 
{
public:

    explicit AdministrationApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~AdministrationApi();

    /// <summary>
    /// List users and their roles in a study
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="studyKey">Study key identifying the study context for the request</param>
    /// <param name="page">Page index to retrieve (0-based) (optional, default to 0)</param>
    /// <param name="size">Number of items to return per page (max 500) (optional, default to 0)</param>
    /// <param name="sort">Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="includeInactive">For user listing, whether to include inactive users (optional, default to false)</param>
    pplx::task<std::shared_ptr<UserList>> listUsers(
        utility::string_t studyKey,
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort,
        boost::optional<bool> includeInactive
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_AdministrationApi_H_ */

