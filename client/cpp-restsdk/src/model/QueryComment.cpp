/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/QueryComment.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

QueryComment::QueryComment()
{
    m_Sequence = 0;
    m_SequenceIsSet = false;
    m_AnnotationStatus = utility::conversions::to_string_t("");
    m_AnnotationStatusIsSet = false;
    m_User = utility::conversions::to_string_t("");
    m_UserIsSet = false;
    m_Comment = utility::conversions::to_string_t("");
    m_CommentIsSet = false;
    m_Closed = false;
    m_ClosedIsSet = false;
    m_date = utility::conversions::to_string_t("");
    m_dateIsSet = false;
}

QueryComment::~QueryComment()
{
}

void QueryComment::validate()
{
    // TODO: implement validation
}

web::json::value QueryComment::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SequenceIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("sequence"))] = ModelBase::toJson(m_Sequence);
    }
    if(m_AnnotationStatusIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("annotationStatus"))] = ModelBase::toJson(m_AnnotationStatus);
    }
    if(m_UserIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("user"))] = ModelBase::toJson(m_User);
    }
    if(m_CommentIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("comment"))] = ModelBase::toJson(m_Comment);
    }
    if(m_ClosedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("closed"))] = ModelBase::toJson(m_Closed);
    }
    if(m_dateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("date"))] = ModelBase::toJson(m_date);
    }

    return val;
}

bool QueryComment::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("sequence"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("sequence")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSequence;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSequence);
            setSequence(refVal_setSequence);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("annotationStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("annotationStatus")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAnnotationStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAnnotationStatus);
            setAnnotationStatus(refVal_setAnnotationStatus);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("user")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUser);
            setUser(refVal_setUser);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("comment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("comment")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setComment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComment);
            setComment(refVal_setComment);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("closed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("closed")));
        if(!fieldValue.is_null())
        {
            bool refVal_setClosed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClosed);
            setClosed(refVal_setClosed);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("date"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("date")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDate);
            setDate(refVal_setDate);
            
        }
    }
    return ok;
}

void QueryComment::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SequenceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("sequence")), m_Sequence));
    }
    if(m_AnnotationStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("annotationStatus")), m_AnnotationStatus));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("user")), m_User));
    }
    if(m_CommentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("comment")), m_Comment));
    }
    if(m_ClosedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("closed")), m_Closed));
    }
    if(m_dateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("date")), m_date));
    }
}

bool QueryComment::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("sequence"))))
    {
        int32_t refVal_setSequence;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("sequence"))), refVal_setSequence );
        setSequence(refVal_setSequence);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("annotationStatus"))))
    {
        utility::string_t refVal_setAnnotationStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("annotationStatus"))), refVal_setAnnotationStatus );
        setAnnotationStatus(refVal_setAnnotationStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("user"))))
    {
        utility::string_t refVal_setUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("user"))), refVal_setUser );
        setUser(refVal_setUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("comment"))))
    {
        utility::string_t refVal_setComment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("comment"))), refVal_setComment );
        setComment(refVal_setComment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("closed"))))
    {
        bool refVal_setClosed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("closed"))), refVal_setClosed );
        setClosed(refVal_setClosed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("date"))))
    {
        utility::string_t refVal_setDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("date"))), refVal_setDate );
        setDate(refVal_setDate);
    }
    return ok;
}


int32_t QueryComment::getSequence() const
{
    return m_Sequence;
}

void QueryComment::setSequence(int32_t value)
{
    m_Sequence = value;
    m_SequenceIsSet = true;
}

bool QueryComment::sequenceIsSet() const
{
    return m_SequenceIsSet;
}

void QueryComment::unsetSequence()
{
    m_SequenceIsSet = false;
}
utility::string_t QueryComment::getAnnotationStatus() const
{
    return m_AnnotationStatus;
}


void QueryComment::setAnnotationStatus(const utility::string_t& value)
{
    m_AnnotationStatus = value;
    m_AnnotationStatusIsSet = true;
}

bool QueryComment::annotationStatusIsSet() const
{
    return m_AnnotationStatusIsSet;
}

void QueryComment::unsetAnnotationStatus()
{
    m_AnnotationStatusIsSet = false;
}
utility::string_t QueryComment::getUser() const
{
    return m_User;
}


void QueryComment::setUser(const utility::string_t& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool QueryComment::userIsSet() const
{
    return m_UserIsSet;
}

void QueryComment::unsetUser()
{
    m_UserIsSet = false;
}
utility::string_t QueryComment::getComment() const
{
    return m_Comment;
}


void QueryComment::setComment(const utility::string_t& value)
{
    m_Comment = value;
    m_CommentIsSet = true;
}

bool QueryComment::commentIsSet() const
{
    return m_CommentIsSet;
}

void QueryComment::unsetComment()
{
    m_CommentIsSet = false;
}
bool QueryComment::isClosed() const
{
    return m_Closed;
}

void QueryComment::setClosed(bool value)
{
    m_Closed = value;
    m_ClosedIsSet = true;
}

bool QueryComment::closedIsSet() const
{
    return m_ClosedIsSet;
}

void QueryComment::unsetClosed()
{
    m_ClosedIsSet = false;
}
utility::string_t QueryComment::getDate() const
{
    return m_date;
}


void QueryComment::setDate(const utility::string_t& value)
{
    m_date = value;
    m_dateIsSet = true;
}

bool QueryComment::dateIsSet() const
{
    return m_dateIsSet;
}

void QueryComment::unsetdate()
{
    m_dateIsSet = false;
}

}
}
}
}


