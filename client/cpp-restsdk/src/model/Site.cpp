/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Site.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Site::Site()
{
    m_StudyKey = utility::conversions::to_string_t("");
    m_StudyKeyIsSet = false;
    m_SiteId = 0;
    m_SiteIdIsSet = false;
    m_SiteName = utility::conversions::to_string_t("");
    m_SiteNameIsSet = false;
    m_SiteEnrollmentStatus = utility::conversions::to_string_t("");
    m_SiteEnrollmentStatusIsSet = false;
    m_DateCreated = utility::conversions::to_string_t("");
    m_DateCreatedIsSet = false;
    m_DateModified = utility::conversions::to_string_t("");
    m_DateModifiedIsSet = false;
}

Site::~Site()
{
}

void Site::validate()
{
    // TODO: implement validation
}

web::json::value Site::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_StudyKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("studyKey"))] = ModelBase::toJson(m_StudyKey);
    }
    if(m_SiteIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("siteId"))] = ModelBase::toJson(m_SiteId);
    }
    if(m_SiteNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("siteName"))] = ModelBase::toJson(m_SiteName);
    }
    if(m_SiteEnrollmentStatusIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("siteEnrollmentStatus"))] = ModelBase::toJson(m_SiteEnrollmentStatus);
    }
    if(m_DateCreatedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateCreated"))] = ModelBase::toJson(m_DateCreated);
    }
    if(m_DateModifiedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateModified"))] = ModelBase::toJson(m_DateModified);
    }

    return val;
}

bool Site::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("studyKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStudyKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStudyKey);
            setStudyKey(refVal_setStudyKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("siteId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("siteId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSiteId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSiteId);
            setSiteId(refVal_setSiteId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("siteName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("siteName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSiteName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSiteName);
            setSiteName(refVal_setSiteName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("siteEnrollmentStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("siteEnrollmentStatus")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSiteEnrollmentStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSiteEnrollmentStatus);
            setSiteEnrollmentStatus(refVal_setSiteEnrollmentStatus);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateCreated")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateCreated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateCreated);
            setDateCreated(refVal_setDateCreated);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateModified")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateModified;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateModified);
            setDateModified(refVal_setDateModified);
            
        }
    }
    return ok;
}

void Site::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_StudyKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("studyKey")), m_StudyKey));
    }
    if(m_SiteIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("siteId")), m_SiteId));
    }
    if(m_SiteNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("siteName")), m_SiteName));
    }
    if(m_SiteEnrollmentStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("siteEnrollmentStatus")), m_SiteEnrollmentStatus));
    }
    if(m_DateCreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateCreated")), m_DateCreated));
    }
    if(m_DateModifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateModified")), m_DateModified));
    }
}

bool Site::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        utility::string_t refVal_setStudyKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))), refVal_setStudyKey );
        setStudyKey(refVal_setStudyKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("siteId"))))
    {
        int32_t refVal_setSiteId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("siteId"))), refVal_setSiteId );
        setSiteId(refVal_setSiteId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("siteName"))))
    {
        utility::string_t refVal_setSiteName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("siteName"))), refVal_setSiteName );
        setSiteName(refVal_setSiteName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("siteEnrollmentStatus"))))
    {
        utility::string_t refVal_setSiteEnrollmentStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("siteEnrollmentStatus"))), refVal_setSiteEnrollmentStatus );
        setSiteEnrollmentStatus(refVal_setSiteEnrollmentStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        utility::string_t refVal_setDateCreated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))), refVal_setDateCreated );
        setDateCreated(refVal_setDateCreated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        utility::string_t refVal_setDateModified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))), refVal_setDateModified );
        setDateModified(refVal_setDateModified);
    }
    return ok;
}


utility::string_t Site::getStudyKey() const
{
    return m_StudyKey;
}


void Site::setStudyKey(const utility::string_t& value)
{
    m_StudyKey = value;
    m_StudyKeyIsSet = true;
}

bool Site::studyKeyIsSet() const
{
    return m_StudyKeyIsSet;
}

void Site::unsetStudyKey()
{
    m_StudyKeyIsSet = false;
}
int32_t Site::getSiteId() const
{
    return m_SiteId;
}

void Site::setSiteId(int32_t value)
{
    m_SiteId = value;
    m_SiteIdIsSet = true;
}

bool Site::siteIdIsSet() const
{
    return m_SiteIdIsSet;
}

void Site::unsetSiteId()
{
    m_SiteIdIsSet = false;
}
utility::string_t Site::getSiteName() const
{
    return m_SiteName;
}


void Site::setSiteName(const utility::string_t& value)
{
    m_SiteName = value;
    m_SiteNameIsSet = true;
}

bool Site::siteNameIsSet() const
{
    return m_SiteNameIsSet;
}

void Site::unsetSiteName()
{
    m_SiteNameIsSet = false;
}
utility::string_t Site::getSiteEnrollmentStatus() const
{
    return m_SiteEnrollmentStatus;
}


void Site::setSiteEnrollmentStatus(const utility::string_t& value)
{
    m_SiteEnrollmentStatus = value;
    m_SiteEnrollmentStatusIsSet = true;
}

bool Site::siteEnrollmentStatusIsSet() const
{
    return m_SiteEnrollmentStatusIsSet;
}

void Site::unsetSiteEnrollmentStatus()
{
    m_SiteEnrollmentStatusIsSet = false;
}
utility::string_t Site::getDateCreated() const
{
    return m_DateCreated;
}


void Site::setDateCreated(const utility::string_t& value)
{
    m_DateCreated = value;
    m_DateCreatedIsSet = true;
}

bool Site::dateCreatedIsSet() const
{
    return m_DateCreatedIsSet;
}

void Site::unsetDateCreated()
{
    m_DateCreatedIsSet = false;
}
utility::string_t Site::getDateModified() const
{
    return m_DateModified;
}


void Site::setDateModified(const utility::string_t& value)
{
    m_DateModified = value;
    m_DateModifiedIsSet = true;
}

bool Site::dateModifiedIsSet() const
{
    return m_DateModifiedIsSet;
}

void Site::unsetDateModified()
{
    m_DateModifiedIsSet = false;
}

}
}
}
}


