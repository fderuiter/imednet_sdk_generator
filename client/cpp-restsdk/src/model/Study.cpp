/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Study.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Study::Study()
{
    m_SponsorKey = utility::conversions::to_string_t("");
    m_SponsorKeyIsSet = false;
    m_StudyKey = utility::conversions::to_string_t("");
    m_StudyKeyIsSet = false;
    m_StudyId = 0;
    m_StudyIdIsSet = false;
    m_StudyName = utility::conversions::to_string_t("");
    m_StudyNameIsSet = false;
    m_StudyDescription = utility::conversions::to_string_t("");
    m_StudyDescriptionIsSet = false;
    m_StudyType = utility::conversions::to_string_t("");
    m_StudyTypeIsSet = false;
    m_DateCreated = utility::conversions::to_string_t("");
    m_DateCreatedIsSet = false;
    m_DateModified = utility::conversions::to_string_t("");
    m_DateModifiedIsSet = false;
}

Study::~Study()
{
}

void Study::validate()
{
    // TODO: implement validation
}

web::json::value Study::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_SponsorKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("sponsorKey"))] = ModelBase::toJson(m_SponsorKey);
    }
    if(m_StudyKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("studyKey"))] = ModelBase::toJson(m_StudyKey);
    }
    if(m_StudyIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("studyId"))] = ModelBase::toJson(m_StudyId);
    }
    if(m_StudyNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("studyName"))] = ModelBase::toJson(m_StudyName);
    }
    if(m_StudyDescriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("studyDescription"))] = ModelBase::toJson(m_StudyDescription);
    }
    if(m_StudyTypeIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("studyType"))] = ModelBase::toJson(m_StudyType);
    }
    if(m_DateCreatedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateCreated"))] = ModelBase::toJson(m_DateCreated);
    }
    if(m_DateModifiedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateModified"))] = ModelBase::toJson(m_DateModified);
    }

    return val;
}

bool Study::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("sponsorKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("sponsorKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSponsorKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSponsorKey);
            setSponsorKey(refVal_setSponsorKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("studyKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStudyKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStudyKey);
            setStudyKey(refVal_setStudyKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("studyId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("studyId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setStudyId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStudyId);
            setStudyId(refVal_setStudyId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("studyName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("studyName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStudyName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStudyName);
            setStudyName(refVal_setStudyName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("studyDescription"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("studyDescription")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStudyDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStudyDescription);
            setStudyDescription(refVal_setStudyDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("studyType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("studyType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStudyType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStudyType);
            setStudyType(refVal_setStudyType);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateCreated")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateCreated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateCreated);
            setDateCreated(refVal_setDateCreated);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateModified")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateModified;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateModified);
            setDateModified(refVal_setDateModified);
            
        }
    }
    return ok;
}

void Study::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_SponsorKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("sponsorKey")), m_SponsorKey));
    }
    if(m_StudyKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("studyKey")), m_StudyKey));
    }
    if(m_StudyIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("studyId")), m_StudyId));
    }
    if(m_StudyNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("studyName")), m_StudyName));
    }
    if(m_StudyDescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("studyDescription")), m_StudyDescription));
    }
    if(m_StudyTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("studyType")), m_StudyType));
    }
    if(m_DateCreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateCreated")), m_DateCreated));
    }
    if(m_DateModifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateModified")), m_DateModified));
    }
}

bool Study::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("sponsorKey"))))
    {
        utility::string_t refVal_setSponsorKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("sponsorKey"))), refVal_setSponsorKey );
        setSponsorKey(refVal_setSponsorKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        utility::string_t refVal_setStudyKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))), refVal_setStudyKey );
        setStudyKey(refVal_setStudyKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("studyId"))))
    {
        int32_t refVal_setStudyId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("studyId"))), refVal_setStudyId );
        setStudyId(refVal_setStudyId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("studyName"))))
    {
        utility::string_t refVal_setStudyName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("studyName"))), refVal_setStudyName );
        setStudyName(refVal_setStudyName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("studyDescription"))))
    {
        utility::string_t refVal_setStudyDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("studyDescription"))), refVal_setStudyDescription );
        setStudyDescription(refVal_setStudyDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("studyType"))))
    {
        utility::string_t refVal_setStudyType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("studyType"))), refVal_setStudyType );
        setStudyType(refVal_setStudyType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        utility::string_t refVal_setDateCreated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))), refVal_setDateCreated );
        setDateCreated(refVal_setDateCreated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        utility::string_t refVal_setDateModified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))), refVal_setDateModified );
        setDateModified(refVal_setDateModified);
    }
    return ok;
}


utility::string_t Study::getSponsorKey() const
{
    return m_SponsorKey;
}


void Study::setSponsorKey(const utility::string_t& value)
{
    m_SponsorKey = value;
    m_SponsorKeyIsSet = true;
}

bool Study::sponsorKeyIsSet() const
{
    return m_SponsorKeyIsSet;
}

void Study::unsetSponsorKey()
{
    m_SponsorKeyIsSet = false;
}
utility::string_t Study::getStudyKey() const
{
    return m_StudyKey;
}


void Study::setStudyKey(const utility::string_t& value)
{
    m_StudyKey = value;
    m_StudyKeyIsSet = true;
}

bool Study::studyKeyIsSet() const
{
    return m_StudyKeyIsSet;
}

void Study::unsetStudyKey()
{
    m_StudyKeyIsSet = false;
}
int32_t Study::getStudyId() const
{
    return m_StudyId;
}

void Study::setStudyId(int32_t value)
{
    m_StudyId = value;
    m_StudyIdIsSet = true;
}

bool Study::studyIdIsSet() const
{
    return m_StudyIdIsSet;
}

void Study::unsetStudyId()
{
    m_StudyIdIsSet = false;
}
utility::string_t Study::getStudyName() const
{
    return m_StudyName;
}


void Study::setStudyName(const utility::string_t& value)
{
    m_StudyName = value;
    m_StudyNameIsSet = true;
}

bool Study::studyNameIsSet() const
{
    return m_StudyNameIsSet;
}

void Study::unsetStudyName()
{
    m_StudyNameIsSet = false;
}
utility::string_t Study::getStudyDescription() const
{
    return m_StudyDescription;
}


void Study::setStudyDescription(const utility::string_t& value)
{
    m_StudyDescription = value;
    m_StudyDescriptionIsSet = true;
}

bool Study::studyDescriptionIsSet() const
{
    return m_StudyDescriptionIsSet;
}

void Study::unsetStudyDescription()
{
    m_StudyDescriptionIsSet = false;
}
utility::string_t Study::getStudyType() const
{
    return m_StudyType;
}


void Study::setStudyType(const utility::string_t& value)
{
    m_StudyType = value;
    m_StudyTypeIsSet = true;
}

bool Study::studyTypeIsSet() const
{
    return m_StudyTypeIsSet;
}

void Study::unsetStudyType()
{
    m_StudyTypeIsSet = false;
}
utility::string_t Study::getDateCreated() const
{
    return m_DateCreated;
}


void Study::setDateCreated(const utility::string_t& value)
{
    m_DateCreated = value;
    m_DateCreatedIsSet = true;
}

bool Study::dateCreatedIsSet() const
{
    return m_DateCreatedIsSet;
}

void Study::unsetDateCreated()
{
    m_DateCreatedIsSet = false;
}
utility::string_t Study::getDateModified() const
{
    return m_DateModified;
}


void Study::setDateModified(const utility::string_t& value)
{
    m_DateModified = value;
    m_DateModifiedIsSet = true;
}

bool Study::dateModifiedIsSet() const
{
    return m_DateModifiedIsSet;
}

void Study::unsetDateModified()
{
    m_DateModifiedIsSet = false;
}

}
}
}
}


