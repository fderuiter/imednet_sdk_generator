/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Components_schemas_RecordCreateRequest_item.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Components_schemas_RecordCreateRequest_item::Components_schemas_RecordCreateRequest_item()
{
    m_FormKey = utility::conversions::to_string_t("");
    m_FormKeyIsSet = false;
    m_FormId = 0;
    m_FormIdIsSet = false;
    m_SiteName = utility::conversions::to_string_t("");
    m_SiteNameIsSet = false;
    m_SiteId = 0;
    m_SiteIdIsSet = false;
    m_SubjectKey = utility::conversions::to_string_t("");
    m_SubjectKeyIsSet = false;
    m_SubjectId = 0;
    m_SubjectIdIsSet = false;
    m_SubjectOid = utility::conversions::to_string_t("");
    m_SubjectOidIsSet = false;
    m_IntervalName = utility::conversions::to_string_t("");
    m_IntervalNameIsSet = false;
    m_IntervalId = 0;
    m_IntervalIdIsSet = false;
    m_RecordId = 0;
    m_RecordIdIsSet = false;
    m_RecordOid = utility::conversions::to_string_t("");
    m_RecordOidIsSet = false;
    m_DataIsSet = false;
}

Components_schemas_RecordCreateRequest_item::~Components_schemas_RecordCreateRequest_item()
{
}

void Components_schemas_RecordCreateRequest_item::validate()
{
    // TODO: implement validation
}

web::json::value Components_schemas_RecordCreateRequest_item::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_FormKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("formKey"))] = ModelBase::toJson(m_FormKey);
    }
    if(m_FormIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("formId"))] = ModelBase::toJson(m_FormId);
    }
    if(m_SiteNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("siteName"))] = ModelBase::toJson(m_SiteName);
    }
    if(m_SiteIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("siteId"))] = ModelBase::toJson(m_SiteId);
    }
    if(m_SubjectKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectKey"))] = ModelBase::toJson(m_SubjectKey);
    }
    if(m_SubjectIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectId"))] = ModelBase::toJson(m_SubjectId);
    }
    if(m_SubjectOidIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectOid"))] = ModelBase::toJson(m_SubjectOid);
    }
    if(m_IntervalNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("intervalName"))] = ModelBase::toJson(m_IntervalName);
    }
    if(m_IntervalIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("intervalId"))] = ModelBase::toJson(m_IntervalId);
    }
    if(m_RecordIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("recordId"))] = ModelBase::toJson(m_RecordId);
    }
    if(m_RecordOidIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("recordOid"))] = ModelBase::toJson(m_RecordOid);
    }
    if(m_DataIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("data"))] = ModelBase::toJson(m_Data);
    }

    return val;
}

bool Components_schemas_RecordCreateRequest_item::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("formKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("formKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFormKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormKey);
            setFormKey(refVal_setFormKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("formId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("formId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFormId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFormId);
            setFormId(refVal_setFormId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("siteName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("siteName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSiteName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSiteName);
            setSiteName(refVal_setSiteName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("siteId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("siteId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSiteId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSiteId);
            setSiteId(refVal_setSiteId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubjectKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectKey);
            setSubjectKey(refVal_setSubjectKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSubjectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectId);
            setSubjectId(refVal_setSubjectId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectOid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectOid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubjectOid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectOid);
            setSubjectOid(refVal_setSubjectOid);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("intervalName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("intervalName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIntervalName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIntervalName);
            setIntervalName(refVal_setIntervalName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("intervalId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("intervalId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setIntervalId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIntervalId);
            setIntervalId(refVal_setIntervalId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("recordId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("recordId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRecordId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordId);
            setRecordId(refVal_setRecordId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("recordOid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("recordOid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRecordOid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordOid);
            setRecordOid(refVal_setRecordOid);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("data"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("data")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_setData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setData);
            setData(refVal_setData);
            
        }
    }
    return ok;
}

void Components_schemas_RecordCreateRequest_item::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_FormKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("formKey")), m_FormKey));
    }
    if(m_FormIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("formId")), m_FormId));
    }
    if(m_SiteNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("siteName")), m_SiteName));
    }
    if(m_SiteIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("siteId")), m_SiteId));
    }
    if(m_SubjectKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectKey")), m_SubjectKey));
    }
    if(m_SubjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectId")), m_SubjectId));
    }
    if(m_SubjectOidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectOid")), m_SubjectOid));
    }
    if(m_IntervalNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("intervalName")), m_IntervalName));
    }
    if(m_IntervalIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("intervalId")), m_IntervalId));
    }
    if(m_RecordIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("recordId")), m_RecordId));
    }
    if(m_RecordOidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("recordOid")), m_RecordOid));
    }
    if(m_DataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("data")), m_Data));
    }
}

bool Components_schemas_RecordCreateRequest_item::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("formKey"))))
    {
        utility::string_t refVal_setFormKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("formKey"))), refVal_setFormKey );
        setFormKey(refVal_setFormKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("formId"))))
    {
        int32_t refVal_setFormId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("formId"))), refVal_setFormId );
        setFormId(refVal_setFormId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("siteName"))))
    {
        utility::string_t refVal_setSiteName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("siteName"))), refVal_setSiteName );
        setSiteName(refVal_setSiteName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("siteId"))))
    {
        int32_t refVal_setSiteId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("siteId"))), refVal_setSiteId );
        setSiteId(refVal_setSiteId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))))
    {
        utility::string_t refVal_setSubjectKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))), refVal_setSubjectKey );
        setSubjectKey(refVal_setSubjectKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectId"))))
    {
        int32_t refVal_setSubjectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectId"))), refVal_setSubjectId );
        setSubjectId(refVal_setSubjectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectOid"))))
    {
        utility::string_t refVal_setSubjectOid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectOid"))), refVal_setSubjectOid );
        setSubjectOid(refVal_setSubjectOid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("intervalName"))))
    {
        utility::string_t refVal_setIntervalName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("intervalName"))), refVal_setIntervalName );
        setIntervalName(refVal_setIntervalName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("intervalId"))))
    {
        int32_t refVal_setIntervalId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("intervalId"))), refVal_setIntervalId );
        setIntervalId(refVal_setIntervalId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("recordId"))))
    {
        int32_t refVal_setRecordId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("recordId"))), refVal_setRecordId );
        setRecordId(refVal_setRecordId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("recordOid"))))
    {
        utility::string_t refVal_setRecordOid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("recordOid"))), refVal_setRecordOid );
        setRecordOid(refVal_setRecordOid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("data"))))
    {
        std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_setData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("data"))), refVal_setData );
        setData(refVal_setData);
    }
    return ok;
}


utility::string_t Components_schemas_RecordCreateRequest_item::getFormKey() const
{
    return m_FormKey;
}


void Components_schemas_RecordCreateRequest_item::setFormKey(const utility::string_t& value)
{
    m_FormKey = value;
    m_FormKeyIsSet = true;
}

bool Components_schemas_RecordCreateRequest_item::formKeyIsSet() const
{
    return m_FormKeyIsSet;
}

void Components_schemas_RecordCreateRequest_item::unsetFormKey()
{
    m_FormKeyIsSet = false;
}
int32_t Components_schemas_RecordCreateRequest_item::getFormId() const
{
    return m_FormId;
}

void Components_schemas_RecordCreateRequest_item::setFormId(int32_t value)
{
    m_FormId = value;
    m_FormIdIsSet = true;
}

bool Components_schemas_RecordCreateRequest_item::formIdIsSet() const
{
    return m_FormIdIsSet;
}

void Components_schemas_RecordCreateRequest_item::unsetFormId()
{
    m_FormIdIsSet = false;
}
utility::string_t Components_schemas_RecordCreateRequest_item::getSiteName() const
{
    return m_SiteName;
}


void Components_schemas_RecordCreateRequest_item::setSiteName(const utility::string_t& value)
{
    m_SiteName = value;
    m_SiteNameIsSet = true;
}

bool Components_schemas_RecordCreateRequest_item::siteNameIsSet() const
{
    return m_SiteNameIsSet;
}

void Components_schemas_RecordCreateRequest_item::unsetSiteName()
{
    m_SiteNameIsSet = false;
}
int32_t Components_schemas_RecordCreateRequest_item::getSiteId() const
{
    return m_SiteId;
}

void Components_schemas_RecordCreateRequest_item::setSiteId(int32_t value)
{
    m_SiteId = value;
    m_SiteIdIsSet = true;
}

bool Components_schemas_RecordCreateRequest_item::siteIdIsSet() const
{
    return m_SiteIdIsSet;
}

void Components_schemas_RecordCreateRequest_item::unsetSiteId()
{
    m_SiteIdIsSet = false;
}
utility::string_t Components_schemas_RecordCreateRequest_item::getSubjectKey() const
{
    return m_SubjectKey;
}


void Components_schemas_RecordCreateRequest_item::setSubjectKey(const utility::string_t& value)
{
    m_SubjectKey = value;
    m_SubjectKeyIsSet = true;
}

bool Components_schemas_RecordCreateRequest_item::subjectKeyIsSet() const
{
    return m_SubjectKeyIsSet;
}

void Components_schemas_RecordCreateRequest_item::unsetSubjectKey()
{
    m_SubjectKeyIsSet = false;
}
int32_t Components_schemas_RecordCreateRequest_item::getSubjectId() const
{
    return m_SubjectId;
}

void Components_schemas_RecordCreateRequest_item::setSubjectId(int32_t value)
{
    m_SubjectId = value;
    m_SubjectIdIsSet = true;
}

bool Components_schemas_RecordCreateRequest_item::subjectIdIsSet() const
{
    return m_SubjectIdIsSet;
}

void Components_schemas_RecordCreateRequest_item::unsetSubjectId()
{
    m_SubjectIdIsSet = false;
}
utility::string_t Components_schemas_RecordCreateRequest_item::getSubjectOid() const
{
    return m_SubjectOid;
}


void Components_schemas_RecordCreateRequest_item::setSubjectOid(const utility::string_t& value)
{
    m_SubjectOid = value;
    m_SubjectOidIsSet = true;
}

bool Components_schemas_RecordCreateRequest_item::subjectOidIsSet() const
{
    return m_SubjectOidIsSet;
}

void Components_schemas_RecordCreateRequest_item::unsetSubjectOid()
{
    m_SubjectOidIsSet = false;
}
utility::string_t Components_schemas_RecordCreateRequest_item::getIntervalName() const
{
    return m_IntervalName;
}


void Components_schemas_RecordCreateRequest_item::setIntervalName(const utility::string_t& value)
{
    m_IntervalName = value;
    m_IntervalNameIsSet = true;
}

bool Components_schemas_RecordCreateRequest_item::intervalNameIsSet() const
{
    return m_IntervalNameIsSet;
}

void Components_schemas_RecordCreateRequest_item::unsetIntervalName()
{
    m_IntervalNameIsSet = false;
}
int32_t Components_schemas_RecordCreateRequest_item::getIntervalId() const
{
    return m_IntervalId;
}

void Components_schemas_RecordCreateRequest_item::setIntervalId(int32_t value)
{
    m_IntervalId = value;
    m_IntervalIdIsSet = true;
}

bool Components_schemas_RecordCreateRequest_item::intervalIdIsSet() const
{
    return m_IntervalIdIsSet;
}

void Components_schemas_RecordCreateRequest_item::unsetIntervalId()
{
    m_IntervalIdIsSet = false;
}
int32_t Components_schemas_RecordCreateRequest_item::getRecordId() const
{
    return m_RecordId;
}

void Components_schemas_RecordCreateRequest_item::setRecordId(int32_t value)
{
    m_RecordId = value;
    m_RecordIdIsSet = true;
}

bool Components_schemas_RecordCreateRequest_item::recordIdIsSet() const
{
    return m_RecordIdIsSet;
}

void Components_schemas_RecordCreateRequest_item::unsetRecordId()
{
    m_RecordIdIsSet = false;
}
utility::string_t Components_schemas_RecordCreateRequest_item::getRecordOid() const
{
    return m_RecordOid;
}


void Components_schemas_RecordCreateRequest_item::setRecordOid(const utility::string_t& value)
{
    m_RecordOid = value;
    m_RecordOidIsSet = true;
}

bool Components_schemas_RecordCreateRequest_item::recordOidIsSet() const
{
    return m_RecordOidIsSet;
}

void Components_schemas_RecordCreateRequest_item::unsetRecordOid()
{
    m_RecordOidIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<AnyType>> Components_schemas_RecordCreateRequest_item::getData() const
{
    return m_Data;
}


void Components_schemas_RecordCreateRequest_item::setData(const std::map<utility::string_t, std::shared_ptr<AnyType>>& value)
{
    m_Data = value;
    m_DataIsSet = true;
}

bool Components_schemas_RecordCreateRequest_item::dataIsSet() const
{
    return m_DataIsSet;
}

void Components_schemas_RecordCreateRequest_item::unsetData()
{
    m_DataIsSet = false;
}

}
}
}
}


