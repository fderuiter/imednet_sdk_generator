/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Visit.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Visit::Visit()
{
    m_StudyKey = utility::conversions::to_string_t("");
    m_StudyKeyIsSet = false;
    m_VisitId = 0;
    m_VisitIdIsSet = false;
    m_IntervalId = 0;
    m_IntervalIdIsSet = false;
    m_IntervalName = utility::conversions::to_string_t("");
    m_IntervalNameIsSet = false;
    m_SubjectId = 0;
    m_SubjectIdIsSet = false;
    m_SubjectKey = utility::conversions::to_string_t("");
    m_SubjectKeyIsSet = false;
    m_StartDate = utility::conversions::to_string_t("");
    m_StartDateIsSet = false;
    m_EndDate = utility::conversions::to_string_t("");
    m_EndDateIsSet = false;
    m_DueDate = utility::conversions::to_string_t("");
    m_DueDateIsSet = false;
    m_VisitDate = utility::conversions::to_string_t("");
    m_VisitDateIsSet = false;
    m_VisitDateForm = utility::conversions::to_string_t("");
    m_VisitDateFormIsSet = false;
    m_VisitDateQuestion = utility::conversions::to_string_t("");
    m_VisitDateQuestionIsSet = false;
    m_Deleted = false;
    m_DeletedIsSet = false;
    m_DateCreated = utility::conversions::to_string_t("");
    m_DateCreatedIsSet = false;
    m_DateModified = utility::conversions::to_string_t("");
    m_DateModifiedIsSet = false;
}

Visit::~Visit()
{
}

void Visit::validate()
{
    // TODO: implement validation
}

web::json::value Visit::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_StudyKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("studyKey"))] = ModelBase::toJson(m_StudyKey);
    }
    if(m_VisitIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("visitId"))] = ModelBase::toJson(m_VisitId);
    }
    if(m_IntervalIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("intervalId"))] = ModelBase::toJson(m_IntervalId);
    }
    if(m_IntervalNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("intervalName"))] = ModelBase::toJson(m_IntervalName);
    }
    if(m_SubjectIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectId"))] = ModelBase::toJson(m_SubjectId);
    }
    if(m_SubjectKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectKey"))] = ModelBase::toJson(m_SubjectKey);
    }
    if(m_StartDateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("startDate"))] = ModelBase::toJson(m_StartDate);
    }
    if(m_EndDateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("endDate"))] = ModelBase::toJson(m_EndDate);
    }
    if(m_DueDateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dueDate"))] = ModelBase::toJson(m_DueDate);
    }
    if(m_VisitDateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("visitDate"))] = ModelBase::toJson(m_VisitDate);
    }
    if(m_VisitDateFormIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("visitDateForm"))] = ModelBase::toJson(m_VisitDateForm);
    }
    if(m_VisitDateQuestionIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("visitDateQuestion"))] = ModelBase::toJson(m_VisitDateQuestion);
    }
    if(m_DeletedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("deleted"))] = ModelBase::toJson(m_Deleted);
    }
    if(m_DateCreatedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateCreated"))] = ModelBase::toJson(m_DateCreated);
    }
    if(m_DateModifiedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateModified"))] = ModelBase::toJson(m_DateModified);
    }

    return val;
}

bool Visit::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("studyKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStudyKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStudyKey);
            setStudyKey(refVal_setStudyKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("visitId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("visitId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setVisitId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVisitId);
            setVisitId(refVal_setVisitId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("intervalId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("intervalId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setIntervalId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIntervalId);
            setIntervalId(refVal_setIntervalId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("intervalName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("intervalName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIntervalName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIntervalName);
            setIntervalName(refVal_setIntervalName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSubjectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectId);
            setSubjectId(refVal_setSubjectId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubjectKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectKey);
            setSubjectKey(refVal_setSubjectKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("startDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("startDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStartDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartDate);
            setStartDate(refVal_setStartDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("endDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("endDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEndDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEndDate);
            setEndDate(refVal_setEndDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dueDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dueDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDueDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDueDate);
            setDueDate(refVal_setDueDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("visitDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("visitDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVisitDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVisitDate);
            setVisitDate(refVal_setVisitDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("visitDateForm"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("visitDateForm")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVisitDateForm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVisitDateForm);
            setVisitDateForm(refVal_setVisitDateForm);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("visitDateQuestion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("visitDateQuestion")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVisitDateQuestion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVisitDateQuestion);
            setVisitDateQuestion(refVal_setVisitDateQuestion);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("deleted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("deleted")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDeleted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeleted);
            setDeleted(refVal_setDeleted);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateCreated")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateCreated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateCreated);
            setDateCreated(refVal_setDateCreated);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateModified")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateModified;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateModified);
            setDateModified(refVal_setDateModified);
            
        }
    }
    return ok;
}

void Visit::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_StudyKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("studyKey")), m_StudyKey));
    }
    if(m_VisitIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("visitId")), m_VisitId));
    }
    if(m_IntervalIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("intervalId")), m_IntervalId));
    }
    if(m_IntervalNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("intervalName")), m_IntervalName));
    }
    if(m_SubjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectId")), m_SubjectId));
    }
    if(m_SubjectKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectKey")), m_SubjectKey));
    }
    if(m_StartDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("startDate")), m_StartDate));
    }
    if(m_EndDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("endDate")), m_EndDate));
    }
    if(m_DueDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dueDate")), m_DueDate));
    }
    if(m_VisitDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("visitDate")), m_VisitDate));
    }
    if(m_VisitDateFormIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("visitDateForm")), m_VisitDateForm));
    }
    if(m_VisitDateQuestionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("visitDateQuestion")), m_VisitDateQuestion));
    }
    if(m_DeletedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("deleted")), m_Deleted));
    }
    if(m_DateCreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateCreated")), m_DateCreated));
    }
    if(m_DateModifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateModified")), m_DateModified));
    }
}

bool Visit::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        utility::string_t refVal_setStudyKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))), refVal_setStudyKey );
        setStudyKey(refVal_setStudyKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("visitId"))))
    {
        int32_t refVal_setVisitId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("visitId"))), refVal_setVisitId );
        setVisitId(refVal_setVisitId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("intervalId"))))
    {
        int32_t refVal_setIntervalId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("intervalId"))), refVal_setIntervalId );
        setIntervalId(refVal_setIntervalId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("intervalName"))))
    {
        utility::string_t refVal_setIntervalName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("intervalName"))), refVal_setIntervalName );
        setIntervalName(refVal_setIntervalName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectId"))))
    {
        int32_t refVal_setSubjectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectId"))), refVal_setSubjectId );
        setSubjectId(refVal_setSubjectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))))
    {
        utility::string_t refVal_setSubjectKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))), refVal_setSubjectKey );
        setSubjectKey(refVal_setSubjectKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("startDate"))))
    {
        utility::string_t refVal_setStartDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("startDate"))), refVal_setStartDate );
        setStartDate(refVal_setStartDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("endDate"))))
    {
        utility::string_t refVal_setEndDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("endDate"))), refVal_setEndDate );
        setEndDate(refVal_setEndDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dueDate"))))
    {
        utility::string_t refVal_setDueDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dueDate"))), refVal_setDueDate );
        setDueDate(refVal_setDueDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("visitDate"))))
    {
        utility::string_t refVal_setVisitDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("visitDate"))), refVal_setVisitDate );
        setVisitDate(refVal_setVisitDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("visitDateForm"))))
    {
        utility::string_t refVal_setVisitDateForm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("visitDateForm"))), refVal_setVisitDateForm );
        setVisitDateForm(refVal_setVisitDateForm);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("visitDateQuestion"))))
    {
        utility::string_t refVal_setVisitDateQuestion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("visitDateQuestion"))), refVal_setVisitDateQuestion );
        setVisitDateQuestion(refVal_setVisitDateQuestion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("deleted"))))
    {
        bool refVal_setDeleted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("deleted"))), refVal_setDeleted );
        setDeleted(refVal_setDeleted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        utility::string_t refVal_setDateCreated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))), refVal_setDateCreated );
        setDateCreated(refVal_setDateCreated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        utility::string_t refVal_setDateModified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))), refVal_setDateModified );
        setDateModified(refVal_setDateModified);
    }
    return ok;
}


utility::string_t Visit::getStudyKey() const
{
    return m_StudyKey;
}


void Visit::setStudyKey(const utility::string_t& value)
{
    m_StudyKey = value;
    m_StudyKeyIsSet = true;
}

bool Visit::studyKeyIsSet() const
{
    return m_StudyKeyIsSet;
}

void Visit::unsetStudyKey()
{
    m_StudyKeyIsSet = false;
}
int32_t Visit::getVisitId() const
{
    return m_VisitId;
}

void Visit::setVisitId(int32_t value)
{
    m_VisitId = value;
    m_VisitIdIsSet = true;
}

bool Visit::visitIdIsSet() const
{
    return m_VisitIdIsSet;
}

void Visit::unsetVisitId()
{
    m_VisitIdIsSet = false;
}
int32_t Visit::getIntervalId() const
{
    return m_IntervalId;
}

void Visit::setIntervalId(int32_t value)
{
    m_IntervalId = value;
    m_IntervalIdIsSet = true;
}

bool Visit::intervalIdIsSet() const
{
    return m_IntervalIdIsSet;
}

void Visit::unsetIntervalId()
{
    m_IntervalIdIsSet = false;
}
utility::string_t Visit::getIntervalName() const
{
    return m_IntervalName;
}


void Visit::setIntervalName(const utility::string_t& value)
{
    m_IntervalName = value;
    m_IntervalNameIsSet = true;
}

bool Visit::intervalNameIsSet() const
{
    return m_IntervalNameIsSet;
}

void Visit::unsetIntervalName()
{
    m_IntervalNameIsSet = false;
}
int32_t Visit::getSubjectId() const
{
    return m_SubjectId;
}

void Visit::setSubjectId(int32_t value)
{
    m_SubjectId = value;
    m_SubjectIdIsSet = true;
}

bool Visit::subjectIdIsSet() const
{
    return m_SubjectIdIsSet;
}

void Visit::unsetSubjectId()
{
    m_SubjectIdIsSet = false;
}
utility::string_t Visit::getSubjectKey() const
{
    return m_SubjectKey;
}


void Visit::setSubjectKey(const utility::string_t& value)
{
    m_SubjectKey = value;
    m_SubjectKeyIsSet = true;
}

bool Visit::subjectKeyIsSet() const
{
    return m_SubjectKeyIsSet;
}

void Visit::unsetSubjectKey()
{
    m_SubjectKeyIsSet = false;
}
utility::string_t Visit::getStartDate() const
{
    return m_StartDate;
}


void Visit::setStartDate(const utility::string_t& value)
{
    m_StartDate = value;
    m_StartDateIsSet = true;
}

bool Visit::startDateIsSet() const
{
    return m_StartDateIsSet;
}

void Visit::unsetStartDate()
{
    m_StartDateIsSet = false;
}
utility::string_t Visit::getEndDate() const
{
    return m_EndDate;
}


void Visit::setEndDate(const utility::string_t& value)
{
    m_EndDate = value;
    m_EndDateIsSet = true;
}

bool Visit::endDateIsSet() const
{
    return m_EndDateIsSet;
}

void Visit::unsetEndDate()
{
    m_EndDateIsSet = false;
}
utility::string_t Visit::getDueDate() const
{
    return m_DueDate;
}


void Visit::setDueDate(const utility::string_t& value)
{
    m_DueDate = value;
    m_DueDateIsSet = true;
}

bool Visit::dueDateIsSet() const
{
    return m_DueDateIsSet;
}

void Visit::unsetDueDate()
{
    m_DueDateIsSet = false;
}
utility::string_t Visit::getVisitDate() const
{
    return m_VisitDate;
}


void Visit::setVisitDate(const utility::string_t& value)
{
    m_VisitDate = value;
    m_VisitDateIsSet = true;
}

bool Visit::visitDateIsSet() const
{
    return m_VisitDateIsSet;
}

void Visit::unsetVisitDate()
{
    m_VisitDateIsSet = false;
}
utility::string_t Visit::getVisitDateForm() const
{
    return m_VisitDateForm;
}


void Visit::setVisitDateForm(const utility::string_t& value)
{
    m_VisitDateForm = value;
    m_VisitDateFormIsSet = true;
}

bool Visit::visitDateFormIsSet() const
{
    return m_VisitDateFormIsSet;
}

void Visit::unsetVisitDateForm()
{
    m_VisitDateFormIsSet = false;
}
utility::string_t Visit::getVisitDateQuestion() const
{
    return m_VisitDateQuestion;
}


void Visit::setVisitDateQuestion(const utility::string_t& value)
{
    m_VisitDateQuestion = value;
    m_VisitDateQuestionIsSet = true;
}

bool Visit::visitDateQuestionIsSet() const
{
    return m_VisitDateQuestionIsSet;
}

void Visit::unsetVisitDateQuestion()
{
    m_VisitDateQuestionIsSet = false;
}
bool Visit::isDeleted() const
{
    return m_Deleted;
}

void Visit::setDeleted(bool value)
{
    m_Deleted = value;
    m_DeletedIsSet = true;
}

bool Visit::deletedIsSet() const
{
    return m_DeletedIsSet;
}

void Visit::unsetDeleted()
{
    m_DeletedIsSet = false;
}
utility::string_t Visit::getDateCreated() const
{
    return m_DateCreated;
}


void Visit::setDateCreated(const utility::string_t& value)
{
    m_DateCreated = value;
    m_DateCreatedIsSet = true;
}

bool Visit::dateCreatedIsSet() const
{
    return m_DateCreatedIsSet;
}

void Visit::unsetDateCreated()
{
    m_DateCreatedIsSet = false;
}
utility::string_t Visit::getDateModified() const
{
    return m_DateModified;
}


void Visit::setDateModified(const utility::string_t& value)
{
    m_DateModified = value;
    m_DateModifiedIsSet = true;
}

bool Visit::dateModifiedIsSet() const
{
    return m_DateModifiedIsSet;
}

void Visit::unsetDateModified()
{
    m_DateModifiedIsSet = false;
}

}
}
}
}


