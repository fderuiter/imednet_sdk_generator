/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.14.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Subject.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

Subject::Subject()
{
    m_StudyKey = utility::conversions::to_string_t("");
    m_StudyKeyIsSet = false;
    m_SubjectId = 0;
    m_SubjectIdIsSet = false;
    m_SubjectOid = utility::conversions::to_string_t("");
    m_SubjectOidIsSet = false;
    m_SubjectKey = utility::conversions::to_string_t("");
    m_SubjectKeyIsSet = false;
    m_SubjectStatus = utility::conversions::to_string_t("");
    m_SubjectStatusIsSet = false;
    m_SiteId = 0;
    m_SiteIdIsSet = false;
    m_SiteName = utility::conversions::to_string_t("");
    m_SiteNameIsSet = false;
    m_Deleted = false;
    m_DeletedIsSet = false;
    m_EnrollmentStartDate = utility::conversions::to_string_t("");
    m_EnrollmentStartDateIsSet = false;
    m_DateCreated = utility::conversions::to_string_t("");
    m_DateCreatedIsSet = false;
    m_DateModified = utility::conversions::to_string_t("");
    m_DateModifiedIsSet = false;
    m_KeywordsIsSet = false;
}

Subject::~Subject()
{
}

void Subject::validate()
{
    // TODO: implement validation
}

web::json::value Subject::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_StudyKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("studyKey"))] = ModelBase::toJson(m_StudyKey);
    }
    if(m_SubjectIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectId"))] = ModelBase::toJson(m_SubjectId);
    }
    if(m_SubjectOidIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectOid"))] = ModelBase::toJson(m_SubjectOid);
    }
    if(m_SubjectKeyIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectKey"))] = ModelBase::toJson(m_SubjectKey);
    }
    if(m_SubjectStatusIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("subjectStatus"))] = ModelBase::toJson(m_SubjectStatus);
    }
    if(m_SiteIdIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("siteId"))] = ModelBase::toJson(m_SiteId);
    }
    if(m_SiteNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("siteName"))] = ModelBase::toJson(m_SiteName);
    }
    if(m_DeletedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("deleted"))] = ModelBase::toJson(m_Deleted);
    }
    if(m_EnrollmentStartDateIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("enrollmentStartDate"))] = ModelBase::toJson(m_EnrollmentStartDate);
    }
    if(m_DateCreatedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateCreated"))] = ModelBase::toJson(m_DateCreated);
    }
    if(m_DateModifiedIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("dateModified"))] = ModelBase::toJson(m_DateModified);
    }
    if(m_KeywordsIsSet)
    {   
        
        val[utility::conversions::to_string_t(_XPLATSTR("keywords"))] = ModelBase::toJson(m_Keywords);
    }

    return val;
}

bool Subject::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("studyKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStudyKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStudyKey);
            setStudyKey(refVal_setStudyKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSubjectId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectId);
            setSubjectId(refVal_setSubjectId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectOid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectOid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubjectOid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectOid);
            setSubjectOid(refVal_setSubjectOid);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubjectKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectKey);
            setSubjectKey(refVal_setSubjectKey);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("subjectStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("subjectStatus")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubjectStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubjectStatus);
            setSubjectStatus(refVal_setSubjectStatus);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("siteId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("siteId")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSiteId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSiteId);
            setSiteId(refVal_setSiteId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("siteName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("siteName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSiteName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSiteName);
            setSiteName(refVal_setSiteName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("deleted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("deleted")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDeleted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeleted);
            setDeleted(refVal_setDeleted);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("enrollmentStartDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("enrollmentStartDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEnrollmentStartDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnrollmentStartDate);
            setEnrollmentStartDate(refVal_setEnrollmentStartDate);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateCreated")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateCreated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateCreated);
            setDateCreated(refVal_setDateCreated);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("dateModified")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDateModified;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDateModified);
            setDateModified(refVal_setDateModified);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(_XPLATSTR("keywords"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(_XPLATSTR("keywords")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Keyword>> refVal_setKeywords;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKeywords);
            setKeywords(refVal_setKeywords);
            
        }
    }
    return ok;
}

void Subject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }
    if(m_StudyKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("studyKey")), m_StudyKey));
    }
    if(m_SubjectIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectId")), m_SubjectId));
    }
    if(m_SubjectOidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectOid")), m_SubjectOid));
    }
    if(m_SubjectKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectKey")), m_SubjectKey));
    }
    if(m_SubjectStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("subjectStatus")), m_SubjectStatus));
    }
    if(m_SiteIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("siteId")), m_SiteId));
    }
    if(m_SiteNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("siteName")), m_SiteName));
    }
    if(m_DeletedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("deleted")), m_Deleted));
    }
    if(m_EnrollmentStartDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("enrollmentStartDate")), m_EnrollmentStartDate));
    }
    if(m_DateCreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateCreated")), m_DateCreated));
    }
    if(m_DateModifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("dateModified")), m_DateModified));
    }
    if(m_KeywordsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(_XPLATSTR("keywords")), m_Keywords));
    }
}

bool Subject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(_XPLATSTR(".")))
    {
        namePrefix += utility::conversions::to_string_t(_XPLATSTR("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))))
    {
        utility::string_t refVal_setStudyKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("studyKey"))), refVal_setStudyKey );
        setStudyKey(refVal_setStudyKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectId"))))
    {
        int32_t refVal_setSubjectId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectId"))), refVal_setSubjectId );
        setSubjectId(refVal_setSubjectId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectOid"))))
    {
        utility::string_t refVal_setSubjectOid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectOid"))), refVal_setSubjectOid );
        setSubjectOid(refVal_setSubjectOid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))))
    {
        utility::string_t refVal_setSubjectKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectKey"))), refVal_setSubjectKey );
        setSubjectKey(refVal_setSubjectKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("subjectStatus"))))
    {
        utility::string_t refVal_setSubjectStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("subjectStatus"))), refVal_setSubjectStatus );
        setSubjectStatus(refVal_setSubjectStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("siteId"))))
    {
        int32_t refVal_setSiteId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("siteId"))), refVal_setSiteId );
        setSiteId(refVal_setSiteId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("siteName"))))
    {
        utility::string_t refVal_setSiteName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("siteName"))), refVal_setSiteName );
        setSiteName(refVal_setSiteName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("deleted"))))
    {
        bool refVal_setDeleted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("deleted"))), refVal_setDeleted );
        setDeleted(refVal_setDeleted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("enrollmentStartDate"))))
    {
        utility::string_t refVal_setEnrollmentStartDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("enrollmentStartDate"))), refVal_setEnrollmentStartDate );
        setEnrollmentStartDate(refVal_setEnrollmentStartDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))))
    {
        utility::string_t refVal_setDateCreated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateCreated"))), refVal_setDateCreated );
        setDateCreated(refVal_setDateCreated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))))
    {
        utility::string_t refVal_setDateModified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("dateModified"))), refVal_setDateModified );
        setDateModified(refVal_setDateModified);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(_XPLATSTR("keywords"))))
    {
        std::vector<std::shared_ptr<Keyword>> refVal_setKeywords;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(_XPLATSTR("keywords"))), refVal_setKeywords );
        setKeywords(refVal_setKeywords);
    }
    return ok;
}


utility::string_t Subject::getStudyKey() const
{
    return m_StudyKey;
}


void Subject::setStudyKey(const utility::string_t& value)
{
    m_StudyKey = value;
    m_StudyKeyIsSet = true;
}

bool Subject::studyKeyIsSet() const
{
    return m_StudyKeyIsSet;
}

void Subject::unsetStudyKey()
{
    m_StudyKeyIsSet = false;
}
int32_t Subject::getSubjectId() const
{
    return m_SubjectId;
}

void Subject::setSubjectId(int32_t value)
{
    m_SubjectId = value;
    m_SubjectIdIsSet = true;
}

bool Subject::subjectIdIsSet() const
{
    return m_SubjectIdIsSet;
}

void Subject::unsetSubjectId()
{
    m_SubjectIdIsSet = false;
}
utility::string_t Subject::getSubjectOid() const
{
    return m_SubjectOid;
}


void Subject::setSubjectOid(const utility::string_t& value)
{
    m_SubjectOid = value;
    m_SubjectOidIsSet = true;
}

bool Subject::subjectOidIsSet() const
{
    return m_SubjectOidIsSet;
}

void Subject::unsetSubjectOid()
{
    m_SubjectOidIsSet = false;
}
utility::string_t Subject::getSubjectKey() const
{
    return m_SubjectKey;
}


void Subject::setSubjectKey(const utility::string_t& value)
{
    m_SubjectKey = value;
    m_SubjectKeyIsSet = true;
}

bool Subject::subjectKeyIsSet() const
{
    return m_SubjectKeyIsSet;
}

void Subject::unsetSubjectKey()
{
    m_SubjectKeyIsSet = false;
}
utility::string_t Subject::getSubjectStatus() const
{
    return m_SubjectStatus;
}


void Subject::setSubjectStatus(const utility::string_t& value)
{
    m_SubjectStatus = value;
    m_SubjectStatusIsSet = true;
}

bool Subject::subjectStatusIsSet() const
{
    return m_SubjectStatusIsSet;
}

void Subject::unsetSubjectStatus()
{
    m_SubjectStatusIsSet = false;
}
int32_t Subject::getSiteId() const
{
    return m_SiteId;
}

void Subject::setSiteId(int32_t value)
{
    m_SiteId = value;
    m_SiteIdIsSet = true;
}

bool Subject::siteIdIsSet() const
{
    return m_SiteIdIsSet;
}

void Subject::unsetSiteId()
{
    m_SiteIdIsSet = false;
}
utility::string_t Subject::getSiteName() const
{
    return m_SiteName;
}


void Subject::setSiteName(const utility::string_t& value)
{
    m_SiteName = value;
    m_SiteNameIsSet = true;
}

bool Subject::siteNameIsSet() const
{
    return m_SiteNameIsSet;
}

void Subject::unsetSiteName()
{
    m_SiteNameIsSet = false;
}
bool Subject::isDeleted() const
{
    return m_Deleted;
}

void Subject::setDeleted(bool value)
{
    m_Deleted = value;
    m_DeletedIsSet = true;
}

bool Subject::deletedIsSet() const
{
    return m_DeletedIsSet;
}

void Subject::unsetDeleted()
{
    m_DeletedIsSet = false;
}
utility::string_t Subject::getEnrollmentStartDate() const
{
    return m_EnrollmentStartDate;
}


void Subject::setEnrollmentStartDate(const utility::string_t& value)
{
    m_EnrollmentStartDate = value;
    m_EnrollmentStartDateIsSet = true;
}

bool Subject::enrollmentStartDateIsSet() const
{
    return m_EnrollmentStartDateIsSet;
}

void Subject::unsetEnrollmentStartDate()
{
    m_EnrollmentStartDateIsSet = false;
}
utility::string_t Subject::getDateCreated() const
{
    return m_DateCreated;
}


void Subject::setDateCreated(const utility::string_t& value)
{
    m_DateCreated = value;
    m_DateCreatedIsSet = true;
}

bool Subject::dateCreatedIsSet() const
{
    return m_DateCreatedIsSet;
}

void Subject::unsetDateCreated()
{
    m_DateCreatedIsSet = false;
}
utility::string_t Subject::getDateModified() const
{
    return m_DateModified;
}


void Subject::setDateModified(const utility::string_t& value)
{
    m_DateModified = value;
    m_DateModifiedIsSet = true;
}

bool Subject::dateModifiedIsSet() const
{
    return m_DateModifiedIsSet;
}

void Subject::unsetDateModified()
{
    m_DateModifiedIsSet = false;
}
std::vector<std::shared_ptr<Keyword>> Subject::getKeywords() const
{
    return m_Keywords;
}


void Subject::setKeywords(const std::vector<std::shared_ptr<Keyword>>& value)
{
    m_Keywords = value;
    m_KeywordsIsSet = true;
}

bool Subject::keywordsIsSet() const
{
    return m_KeywordsIsSet;
}

void Subject::unsetKeywords()
{
    m_KeywordsIsSet = false;
}

}
}
}
}


