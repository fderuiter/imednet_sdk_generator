<?php
/**
 * Variable
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API.
 *
 * The version of the OpenAPI document: 1.3.6
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * Variable Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Variable implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Variable';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'study_key' => 'string',
        'variable_id' => 'int',
        'variable_type' => 'string',
        'variable_name' => 'string',
        'sequence' => 'int',
        'revision' => 'int',
        'disabled' => 'bool',
        'date_created' => 'string',
        'date_modified' => 'string',
        'form_id' => 'int',
        'variable_oid' => 'string',
        'deleted' => 'bool',
        'form_key' => 'string',
        'form_name' => 'string',
        'label' => 'string',
        'blinded' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'study_key' => null,
        'variable_id' => null,
        'variable_type' => null,
        'variable_name' => null,
        'sequence' => null,
        'revision' => null,
        'disabled' => null,
        'date_created' => null,
        'date_modified' => null,
        'form_id' => null,
        'variable_oid' => null,
        'deleted' => null,
        'form_key' => null,
        'form_name' => null,
        'label' => null,
        'blinded' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'study_key' => false,
        'variable_id' => false,
        'variable_type' => false,
        'variable_name' => false,
        'sequence' => false,
        'revision' => false,
        'disabled' => false,
        'date_created' => false,
        'date_modified' => false,
        'form_id' => false,
        'variable_oid' => false,
        'deleted' => false,
        'form_key' => false,
        'form_name' => false,
        'label' => false,
        'blinded' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'study_key' => 'studyKey',
        'variable_id' => 'variableId',
        'variable_type' => 'variableType',
        'variable_name' => 'variableName',
        'sequence' => 'sequence',
        'revision' => 'revision',
        'disabled' => 'disabled',
        'date_created' => 'dateCreated',
        'date_modified' => 'dateModified',
        'form_id' => 'formId',
        'variable_oid' => 'variableOid',
        'deleted' => 'deleted',
        'form_key' => 'formKey',
        'form_name' => 'formName',
        'label' => 'label',
        'blinded' => 'blinded'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'study_key' => 'setStudyKey',
        'variable_id' => 'setVariableId',
        'variable_type' => 'setVariableType',
        'variable_name' => 'setVariableName',
        'sequence' => 'setSequence',
        'revision' => 'setRevision',
        'disabled' => 'setDisabled',
        'date_created' => 'setDateCreated',
        'date_modified' => 'setDateModified',
        'form_id' => 'setFormId',
        'variable_oid' => 'setVariableOid',
        'deleted' => 'setDeleted',
        'form_key' => 'setFormKey',
        'form_name' => 'setFormName',
        'label' => 'setLabel',
        'blinded' => 'setBlinded'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'study_key' => 'getStudyKey',
        'variable_id' => 'getVariableId',
        'variable_type' => 'getVariableType',
        'variable_name' => 'getVariableName',
        'sequence' => 'getSequence',
        'revision' => 'getRevision',
        'disabled' => 'getDisabled',
        'date_created' => 'getDateCreated',
        'date_modified' => 'getDateModified',
        'form_id' => 'getFormId',
        'variable_oid' => 'getVariableOid',
        'deleted' => 'getDeleted',
        'form_key' => 'getFormKey',
        'form_name' => 'getFormName',
        'label' => 'getLabel',
        'blinded' => 'getBlinded'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const VARIABLE_TYPE_TEXT = 'TEXT';
    public const VARIABLE_TYPE_TEXTAREA = 'TEXTAREA';
    public const VARIABLE_TYPE_RADIO = 'RADIO';
    public const VARIABLE_TYPE_CHECKBOX = 'CHECKBOX';
    public const VARIABLE_TYPE_DROPDOWN = 'DROPDOWN';
    public const VARIABLE_TYPE_DATE = 'DATE';
    public const VARIABLE_TYPE_NUMBER = 'NUMBER';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public static function getVariableTypeAllowableValues()
    {
        return [
            self::VARIABLE_TYPE_TEXT,
            self::VARIABLE_TYPE_TEXTAREA,
            self::VARIABLE_TYPE_RADIO,
            self::VARIABLE_TYPE_CHECKBOX,
            self::VARIABLE_TYPE_DROPDOWN,
            self::VARIABLE_TYPE_DATE,
            self::VARIABLE_TYPE_NUMBER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('study_key', $data ?? [], null);
        $this->setIfExists('variable_id', $data ?? [], null);
        $this->setIfExists('variable_type', $data ?? [], null);
        $this->setIfExists('variable_name', $data ?? [], null);
        $this->setIfExists('sequence', $data ?? [], null);
        $this->setIfExists('revision', $data ?? [], null);
        $this->setIfExists('disabled', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('date_modified', $data ?? [], null);
        $this->setIfExists('form_id', $data ?? [], null);
        $this->setIfExists('variable_oid', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('form_key', $data ?? [], null);
        $this->setIfExists('form_name', $data ?? [], null);
        $this->setIfExists('label', $data ?? [], null);
        $this->setIfExists('blinded', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = self::getVariableTypeAllowableValues();
        if (!is_null($this->container['variable_type']) && !in_array($this->container['variable_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'variable_type', must be one of '%s'",
                $this->container['variable_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets study_key
     *
     * @return string|null
     */
    public function getStudyKey(): ?string
    {
        return $this->container['study_key'];
    }

    /**
     * Sets study_key
     *
     * @param string|null $study_key Unique study key
     *
     * @return $this
     */
    public function setStudyKey(?string $study_key): static
    {
        if (is_null($study_key)) {
            throw new InvalidArgumentException('non-nullable study_key cannot be null');
        }
        $this->container['study_key'] = $study_key;

        return $this;
    }

    /**
     * Gets variable_id
     *
     * @return int|null
     */
    public function getVariableId(): ?int
    {
        return $this->container['variable_id'];
    }

    /**
     * Sets variable_id
     *
     * @param int|null $variable_id Mednet variable ID
     *
     * @return $this
     */
    public function setVariableId(?int $variable_id): static
    {
        if (is_null($variable_id)) {
            throw new InvalidArgumentException('non-nullable variable_id cannot be null');
        }
        $this->container['variable_id'] = $variable_id;

        return $this;
    }

    /**
     * Gets variable_type
     *
     * @return string|null
     */
    public function getVariableType(): ?string
    {
        return $this->container['variable_type'];
    }

    /**
     * Sets variable_type
     *
     * @param string|null $variable_type Type of the variable (field type), e.g., RADIO, TEXT, etc.
     *
     * @return $this
     */
    public function setVariableType(?string $variable_type): static
    {
        if (is_null($variable_type)) {
            throw new InvalidArgumentException('non-nullable variable_type cannot be null');
        }
        $allowedValues = self::getVariableTypeAllowableValues();
        if (!in_array($variable_type, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'variable_type', must be one of '%s'",
                    $variable_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['variable_type'] = $variable_type;

        return $this;
    }

    /**
     * Gets variable_name
     *
     * @return string|null
     */
    public function getVariableName(): ?string
    {
        return $this->container['variable_name'];
    }

    /**
     * Sets variable_name
     *
     * @param string|null $variable_name Name of the variable (question text or label)
     *
     * @return $this
     */
    public function setVariableName(?string $variable_name): static
    {
        if (is_null($variable_name)) {
            throw new InvalidArgumentException('non-nullable variable_name cannot be null');
        }
        $this->container['variable_name'] = $variable_name;

        return $this;
    }

    /**
     * Gets sequence
     *
     * @return int|null
     */
    public function getSequence(): ?int
    {
        return $this->container['sequence'];
    }

    /**
     * Sets sequence
     *
     * @param int|null $sequence Sequence of the variable on the form
     *
     * @return $this
     */
    public function setSequence(?int $sequence): static
    {
        if (is_null($sequence)) {
            throw new InvalidArgumentException('non-nullable sequence cannot be null');
        }
        $this->container['sequence'] = $sequence;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int|null
     */
    public function getRevision(): ?int
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int|null $revision Number of modifications of the variable (via form metadata revisions)
     *
     * @return $this
     */
    public function setRevision(?int $revision): static
    {
        if (is_null($revision)) {
            throw new InvalidArgumentException('non-nullable revision cannot be null');
        }
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool|null
     */
    public function getDisabled(): ?bool
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool|null $disabled Whether the variable is marked as disabled (deleted)
     *
     * @return $this
     */
    public function setDisabled(?bool $disabled): static
    {
        if (is_null($disabled)) {
            throw new InvalidArgumentException('non-nullable disabled cannot be null');
        }
        $this->container['disabled'] = $disabled;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string|null
     */
    public function getDateCreated(): ?string
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string|null $date_created Date when this variable was created
     *
     * @return $this
     */
    public function setDateCreated(?string $date_created): static
    {
        if (is_null($date_created)) {
            throw new InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return string|null
     */
    public function getDateModified(): ?string
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param string|null $date_modified Date when this variable was last modified
     *
     * @return $this
     */
    public function setDateModified(?string $date_modified): static
    {
        if (is_null($date_modified)) {
            throw new InvalidArgumentException('non-nullable date_modified cannot be null');
        }
        $this->container['date_modified'] = $date_modified;

        return $this;
    }

    /**
     * Gets form_id
     *
     * @return int|null
     */
    public function getFormId(): ?int
    {
        return $this->container['form_id'];
    }

    /**
     * Sets form_id
     *
     * @param int|null $form_id ID of the form that this variable belongs to
     *
     * @return $this
     */
    public function setFormId(?int $form_id): static
    {
        if (is_null($form_id)) {
            throw new InvalidArgumentException('non-nullable form_id cannot be null');
        }
        $this->container['form_id'] = $form_id;

        return $this;
    }

    /**
     * Gets variable_oid
     *
     * @return string|null
     */
    public function getVariableOid(): ?string
    {
        return $this->container['variable_oid'];
    }

    /**
     * Sets variable_oid
     *
     * @param string|null $variable_oid Client-assigned variable OID
     *
     * @return $this
     */
    public function setVariableOid(?string $variable_oid): static
    {
        if (is_null($variable_oid)) {
            throw new InvalidArgumentException('non-nullable variable_oid cannot be null');
        }
        $this->container['variable_oid'] = $variable_oid;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted(): ?bool
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted Whether the variable is marked as deleted
     *
     * @return $this
     */
    public function setDeleted(?bool $deleted): static
    {
        if (is_null($deleted)) {
            throw new InvalidArgumentException('non-nullable deleted cannot be null');
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets form_key
     *
     * @return string|null
     */
    public function getFormKey(): ?string
    {
        return $this->container['form_key'];
    }

    /**
     * Sets form_key
     *
     * @param string|null $form_key Form key of the form that this variable belongs to
     *
     * @return $this
     */
    public function setFormKey(?string $form_key): static
    {
        if (is_null($form_key)) {
            throw new InvalidArgumentException('non-nullable form_key cannot be null');
        }
        $this->container['form_key'] = $form_key;

        return $this;
    }

    /**
     * Gets form_name
     *
     * @return string|null
     */
    public function getFormName(): ?string
    {
        return $this->container['form_name'];
    }

    /**
     * Sets form_name
     *
     * @param string|null $form_name Name of the form that this variable belongs to
     *
     * @return $this
     */
    public function setFormName(?string $form_name): static
    {
        if (is_null($form_name)) {
            throw new InvalidArgumentException('non-nullable form_name cannot be null');
        }
        $this->container['form_name'] = $form_name;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel(): ?string
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label User-defined identifier (field name) for the variable
     *
     * @return $this
     */
    public function setLabel(?string $label): static
    {
        if (is_null($label)) {
            throw new InvalidArgumentException('non-nullable label cannot be null');
        }
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets blinded
     *
     * @return bool|null
     */
    public function getBlinded(): ?bool
    {
        return $this->container['blinded'];
    }

    /**
     * Sets blinded
     *
     * @param bool|null $blinded Whether the variable is flagged as blinded (hidden in certain contexts)
     *
     * @return $this
     */
    public function setBlinded(?bool $blinded): static
    {
        if (is_null($blinded)) {
            throw new InvalidArgumentException('non-nullable blinded cannot be null');
        }
        $this->container['blinded'] = $blinded;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


