<?php
/**
 * Subject
 *
 * PHP version 8.1
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Mednet EDC API
 *
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API.
 *
 * The version of the OpenAPI document: 1.3.6
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use OpenAPI\Client\ObjectSerializer;

/**
 * Subject Class Doc Comment
 *
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Subject implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Subject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'study_key' => 'string',
        'subject_id' => 'int',
        'subject_oid' => 'string',
        'subject_key' => 'string',
        'subject_status' => 'string',
        'site_id' => 'int',
        'site_name' => 'string',
        'deleted' => 'bool',
        'enrollment_start_date' => 'string',
        'date_created' => 'string',
        'date_modified' => 'string',
        'keywords' => '\OpenAPI\Client\Model\Keyword[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'study_key' => null,
        'subject_id' => null,
        'subject_oid' => null,
        'subject_key' => null,
        'subject_status' => null,
        'site_id' => null,
        'site_name' => null,
        'deleted' => null,
        'enrollment_start_date' => null,
        'date_created' => null,
        'date_modified' => null,
        'keywords' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'study_key' => false,
        'subject_id' => false,
        'subject_oid' => false,
        'subject_key' => false,
        'subject_status' => false,
        'site_id' => false,
        'site_name' => false,
        'deleted' => false,
        'enrollment_start_date' => false,
        'date_created' => false,
        'date_modified' => false,
        'keywords' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'study_key' => 'studyKey',
        'subject_id' => 'subjectId',
        'subject_oid' => 'subjectOid',
        'subject_key' => 'subjectKey',
        'subject_status' => 'subjectStatus',
        'site_id' => 'siteId',
        'site_name' => 'siteName',
        'deleted' => 'deleted',
        'enrollment_start_date' => 'enrollmentStartDate',
        'date_created' => 'dateCreated',
        'date_modified' => 'dateModified',
        'keywords' => 'keywords'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'study_key' => 'setStudyKey',
        'subject_id' => 'setSubjectId',
        'subject_oid' => 'setSubjectOid',
        'subject_key' => 'setSubjectKey',
        'subject_status' => 'setSubjectStatus',
        'site_id' => 'setSiteId',
        'site_name' => 'setSiteName',
        'deleted' => 'setDeleted',
        'enrollment_start_date' => 'setEnrollmentStartDate',
        'date_created' => 'setDateCreated',
        'date_modified' => 'setDateModified',
        'keywords' => 'setKeywords'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'study_key' => 'getStudyKey',
        'subject_id' => 'getSubjectId',
        'subject_oid' => 'getSubjectOid',
        'subject_key' => 'getSubjectKey',
        'subject_status' => 'getSubjectStatus',
        'site_id' => 'getSiteId',
        'site_name' => 'getSiteName',
        'deleted' => 'getDeleted',
        'enrollment_start_date' => 'getEnrollmentStartDate',
        'date_created' => 'getDateCreated',
        'date_modified' => 'getDateModified',
        'keywords' => 'getKeywords'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('study_key', $data ?? [], null);
        $this->setIfExists('subject_id', $data ?? [], null);
        $this->setIfExists('subject_oid', $data ?? [], null);
        $this->setIfExists('subject_key', $data ?? [], null);
        $this->setIfExists('subject_status', $data ?? [], null);
        $this->setIfExists('site_id', $data ?? [], null);
        $this->setIfExists('site_name', $data ?? [], null);
        $this->setIfExists('deleted', $data ?? [], null);
        $this->setIfExists('enrollment_start_date', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('date_modified', $data ?? [], null);
        $this->setIfExists('keywords', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets study_key
     *
     * @return string|null
     */
    public function getStudyKey(): ?string
    {
        return $this->container['study_key'];
    }

    /**
     * Sets study_key
     *
     * @param string|null $study_key Unique study key
     *
     * @return $this
     */
    public function setStudyKey(?string $study_key): static
    {
        if (is_null($study_key)) {
            throw new InvalidArgumentException('non-nullable study_key cannot be null');
        }
        $this->container['study_key'] = $study_key;

        return $this;
    }

    /**
     * Gets subject_id
     *
     * @return int|null
     */
    public function getSubjectId(): ?int
    {
        return $this->container['subject_id'];
    }

    /**
     * Sets subject_id
     *
     * @param int|null $subject_id Mednet subject ID (internal numeric ID)
     *
     * @return $this
     */
    public function setSubjectId(?int $subject_id): static
    {
        if (is_null($subject_id)) {
            throw new InvalidArgumentException('non-nullable subject_id cannot be null');
        }
        $this->container['subject_id'] = $subject_id;

        return $this;
    }

    /**
     * Gets subject_oid
     *
     * @return string|null
     */
    public function getSubjectOid(): ?string
    {
        return $this->container['subject_oid'];
    }

    /**
     * Sets subject_oid
     *
     * @param string|null $subject_oid Client-assigned subject object identifier (OID)
     *
     * @return $this
     */
    public function setSubjectOid(?string $subject_oid): static
    {
        if (is_null($subject_oid)) {
            throw new InvalidArgumentException('non-nullable subject_oid cannot be null');
        }
        $this->container['subject_oid'] = $subject_oid;

        return $this;
    }

    /**
     * Gets subject_key
     *
     * @return string|null
     */
    public function getSubjectKey(): ?string
    {
        return $this->container['subject_key'];
    }

    /**
     * Sets subject_key
     *
     * @param string|null $subject_key Protocol-assigned subject identifier (display ID)
     *
     * @return $this
     */
    public function setSubjectKey(?string $subject_key): static
    {
        if (is_null($subject_key)) {
            throw new InvalidArgumentException('non-nullable subject_key cannot be null');
        }
        $this->container['subject_key'] = $subject_key;

        return $this;
    }

    /**
     * Gets subject_status
     *
     * @return string|null
     */
    public function getSubjectStatus(): ?string
    {
        return $this->container['subject_status'];
    }

    /**
     * Sets subject_status
     *
     * @param string|null $subject_status Current status of the subject (e.g., Enrolled)
     *
     * @return $this
     */
    public function setSubjectStatus(?string $subject_status): static
    {
        if (is_null($subject_status)) {
            throw new InvalidArgumentException('non-nullable subject_status cannot be null');
        }
        $this->container['subject_status'] = $subject_status;

        return $this;
    }

    /**
     * Gets site_id
     *
     * @return int|null
     */
    public function getSiteId(): ?int
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     *
     * @param int|null $site_id Mednet site ID the subject is associated with
     *
     * @return $this
     */
    public function setSiteId(?int $site_id): static
    {
        if (is_null($site_id)) {
            throw new InvalidArgumentException('non-nullable site_id cannot be null');
        }
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets site_name
     *
     * @return string|null
     */
    public function getSiteName(): ?string
    {
        return $this->container['site_name'];
    }

    /**
     * Sets site_name
     *
     * @param string|null $site_name Name of the site the subject is associated with
     *
     * @return $this
     */
    public function setSiteName(?string $site_name): static
    {
        if (is_null($site_name)) {
            throw new InvalidArgumentException('non-nullable site_name cannot be null');
        }
        $this->container['site_name'] = $site_name;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool|null
     */
    public function getDeleted(): ?bool
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool|null $deleted Whether the subject is marked as deleted
     *
     * @return $this
     */
    public function setDeleted(?bool $deleted): static
    {
        if (is_null($deleted)) {
            throw new InvalidArgumentException('non-nullable deleted cannot be null');
        }
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets enrollment_start_date
     *
     * @return string|null
     */
    public function getEnrollmentStartDate(): ?string
    {
        return $this->container['enrollment_start_date'];
    }

    /**
     * Sets enrollment_start_date
     *
     * @param string|null $enrollment_start_date Subject’s enrollment start date
     *
     * @return $this
     */
    public function setEnrollmentStartDate(?string $enrollment_start_date): static
    {
        if (is_null($enrollment_start_date)) {
            throw new InvalidArgumentException('non-nullable enrollment_start_date cannot be null');
        }
        $this->container['enrollment_start_date'] = $enrollment_start_date;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return string|null
     */
    public function getDateCreated(): ?string
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param string|null $date_created Date when this subject record was created
     *
     * @return $this
     */
    public function setDateCreated(?string $date_created): static
    {
        if (is_null($date_created)) {
            throw new InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_modified
     *
     * @return string|null
     */
    public function getDateModified(): ?string
    {
        return $this->container['date_modified'];
    }

    /**
     * Sets date_modified
     *
     * @param string|null $date_modified Date when this subject record was last modified
     *
     * @return $this
     */
    public function setDateModified(?string $date_modified): static
    {
        if (is_null($date_modified)) {
            throw new InvalidArgumentException('non-nullable date_modified cannot be null');
        }
        $this->container['date_modified'] = $date_modified;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return \OpenAPI\Client\Model\Keyword[]|null
     */
    public function getKeywords(): ?array
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param \OpenAPI\Client\Model\Keyword[]|null $keywords List of keywords associated with the subject
     *
     * @return $this
     */
    public function setKeywords(?array $keywords): static
    {
        if (is_null($keywords)) {
            throw new InvalidArgumentException('non-nullable keywords cannot be null');
        }
        $this->container['keywords'] = $keywords;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


