/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * QueryComment
 */
@JsonPropertyOrder({
  QueryComment.JSON_PROPERTY_SEQUENCE,
  QueryComment.JSON_PROPERTY_ANNOTATION_STATUS,
  QueryComment.JSON_PROPERTY_USER,
  QueryComment.JSON_PROPERTY_COMMENT,
  QueryComment.JSON_PROPERTY_CLOSED,
  QueryComment.JSON_PROPERTY_DATE
})
@JsonTypeName("QueryComment")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2025-07-14T13:50:33.483639736Z[Etc/UTC]", comments = "Generator version: 7.14.0")
@Introspected
public class QueryComment {
    public static final String JSON_PROPERTY_SEQUENCE = "sequence";
    private Integer sequence;

    public static final String JSON_PROPERTY_ANNOTATION_STATUS = "annotationStatus";
    private String annotationStatus;

    public static final String JSON_PROPERTY_USER = "user";
    private String user;

    public static final String JSON_PROPERTY_COMMENT = "comment";
    private String comment;

    public static final String JSON_PROPERTY_CLOSED = "closed";
    private Boolean closed;

    public static final String JSON_PROPERTY_DATE = "date";
    private String date;

    public QueryComment() {
    }

    public QueryComment sequence(Integer sequence) {
        this.sequence = sequence;
        return this;
    }

    /**
     * Sequence number of the comment/action in the query history
     * @return sequence
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_SEQUENCE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getSequence() {
        return sequence;
    }

    @JsonProperty(JSON_PROPERTY_SEQUENCE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setSequence(Integer sequence) {
        this.sequence = sequence;
    }

    public QueryComment annotationStatus(String annotationStatus) {
        this.annotationStatus = annotationStatus;
        return this;
    }

    /**
     * Status of the query after this comment (e.g., Open, Closed)
     * @return annotationStatus
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_ANNOTATION_STATUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getAnnotationStatus() {
        return annotationStatus;
    }

    @JsonProperty(JSON_PROPERTY_ANNOTATION_STATUS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAnnotationStatus(String annotationStatus) {
        this.annotationStatus = annotationStatus;
    }

    public QueryComment user(String user) {
        this.user = user;
        return this;
    }

    /**
     * Username of the user who made the comment or action
     * @return user
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_USER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getUser() {
        return user;
    }

    @JsonProperty(JSON_PROPERTY_USER)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setUser(String user) {
        this.user = user;
    }

    public QueryComment comment(String comment) {
        this.comment = comment;
        return this;
    }

    /**
     * Text of the comment
     * @return comment
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_COMMENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getComment() {
        return comment;
    }

    @JsonProperty(JSON_PROPERTY_COMMENT)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setComment(String comment) {
        this.comment = comment;
    }

    public QueryComment closed(Boolean closed) {
        this.closed = closed;
        return this;
    }

    /**
     * Whether the query was marked closed at this step
     * @return closed
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_CLOSED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Boolean getClosed() {
        return closed;
    }

    @JsonProperty(JSON_PROPERTY_CLOSED)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setClosed(Boolean closed) {
        this.closed = closed;
    }

    public QueryComment date(String date) {
        this.date = date;
        return this;
    }

    /**
     * Date of the comment or action
     * @return date
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getDate() {
        return date;
    }

    @JsonProperty(JSON_PROPERTY_DATE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDate(String date) {
        this.date = date;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryComment queryComment = (QueryComment) o;
        return Objects.equals(this.sequence, queryComment.sequence) &&
            Objects.equals(this.annotationStatus, queryComment.annotationStatus) &&
            Objects.equals(this.user, queryComment.user) &&
            Objects.equals(this.comment, queryComment.comment) &&
            Objects.equals(this.closed, queryComment.closed) &&
            Objects.equals(this.date, queryComment.date);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sequence, annotationStatus, user, comment, closed, date);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class QueryComment {\n");
        sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
        sb.append("    annotationStatus: ").append(toIndentedString(annotationStatus)).append("\n");
        sb.append("    user: ").append(toIndentedString(user)).append("\n");
        sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
        sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
        sb.append("    date: ").append(toIndentedString(date)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

