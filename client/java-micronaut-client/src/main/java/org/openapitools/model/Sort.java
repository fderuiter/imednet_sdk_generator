/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * Sort
 */
@JsonPropertyOrder({
  Sort.JSON_PROPERTY_PROPERTY,
  Sort.JSON_PROPERTY_DIRECTION
})
@JsonTypeName("Sort")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2025-07-14T13:50:33.483639736Z[Etc/UTC]", comments = "Generator version: 7.14.0")
@Introspected
public class Sort {
    public static final String JSON_PROPERTY_PROPERTY = "property";
    private String property;

    /**
     * Sort direction (ASC or DESC)
     */
    public enum DirectionEnum {
        ASC("ASC"),
        DESC("DESC");

        private String value;

        DirectionEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static DirectionEnum fromValue(String value) {
            for (DirectionEnum b : DirectionEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }
    public static final String JSON_PROPERTY_DIRECTION = "direction";
    private DirectionEnum direction;

    public Sort() {
    }

    public Sort property(String property) {
        this.property = property;
        return this;
    }

    /**
     * Name of the property by which the result is sorted
     * @return property
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROPERTY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getProperty() {
        return property;
    }

    @JsonProperty(JSON_PROPERTY_PROPERTY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setProperty(String property) {
        this.property = property;
    }

    public Sort direction(DirectionEnum direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Sort direction (ASC or DESC)
     * @return direction
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_DIRECTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public DirectionEnum getDirection() {
        return direction;
    }

    @JsonProperty(JSON_PROPERTY_DIRECTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDirection(DirectionEnum direction) {
        this.direction = direction;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Sort sort = (Sort) o;
        return Objects.equals(this.property, sort.property) &&
            Objects.equals(this.direction, sort.direction);
    }

    @Override
    public int hashCode() {
        return Objects.hash(property, direction);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Sort {\n");
        sb.append("    property: ").append(toIndentedString(property)).append("\n");
        sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

