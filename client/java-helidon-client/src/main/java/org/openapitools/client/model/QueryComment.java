/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;




public class QueryComment  {
  
 /**
   * Sequence number of the comment/action in the query history
  **/
  private Integer sequence;

 /**
   * Status of the query after this comment (e.g., Open, Closed)
  **/
  private String annotationStatus;

 /**
   * Username of the user who made the comment or action
  **/
  private String user;

 /**
   * Text of the comment
  **/
  private String comment;

 /**
   * Whether the query was marked closed at this step
  **/
  private Boolean closed;

 /**
   * Date of the comment or action
  **/
  private String date;

 /**
   * Sequence number of the comment/action in the query history
   * @return sequence
  **/
  public Integer getSequence() {
    return sequence;
  }

  /**
    * Set sequence
  **/
  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }

  public QueryComment sequence(Integer sequence) {
    this.sequence = sequence;
    return this;
  }

 /**
   * Status of the query after this comment (e.g., Open, Closed)
   * @return annotationStatus
  **/
  public String getAnnotationStatus() {
    return annotationStatus;
  }

  /**
    * Set annotationStatus
  **/
  public void setAnnotationStatus(String annotationStatus) {
    this.annotationStatus = annotationStatus;
  }

  public QueryComment annotationStatus(String annotationStatus) {
    this.annotationStatus = annotationStatus;
    return this;
  }

 /**
   * Username of the user who made the comment or action
   * @return user
  **/
  public String getUser() {
    return user;
  }

  /**
    * Set user
  **/
  public void setUser(String user) {
    this.user = user;
  }

  public QueryComment user(String user) {
    this.user = user;
    return this;
  }

 /**
   * Text of the comment
   * @return comment
  **/
  public String getComment() {
    return comment;
  }

  /**
    * Set comment
  **/
  public void setComment(String comment) {
    this.comment = comment;
  }

  public QueryComment comment(String comment) {
    this.comment = comment;
    return this;
  }

 /**
   * Whether the query was marked closed at this step
   * @return closed
  **/
  public Boolean getClosed() {
    return closed;
  }

  /**
    * Set closed
  **/
  public void setClosed(Boolean closed) {
    this.closed = closed;
  }

  public QueryComment closed(Boolean closed) {
    this.closed = closed;
    return this;
  }

 /**
   * Date of the comment or action
   * @return date
  **/
  public String getDate() {
    return date;
  }

  /**
    * Set date
  **/
  public void setDate(String date) {
    this.date = date;
  }

  public QueryComment date(String date) {
    this.date = date;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryComment {\n");
    
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    annotationStatus: ").append(toIndentedString(annotationStatus)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

