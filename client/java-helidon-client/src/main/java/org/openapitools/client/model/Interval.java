/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ComponentsSchemasIntervalFormsItem;




public class Interval  {
  
 /**
   * Unique study key
  **/
  private String studyKey;

 /**
   * Unique system identifier for the interval (visit definition)
  **/
  private Integer intervalId;

 /**
   * Name of the interval (visit) as defined in the study
  **/
  private String intervalName;

 /**
   * Description of the interval (visit)
  **/
  private String intervalDescription;

 /**
   * Sequence number of the interval in the schedule
  **/
  private Integer intervalSequence;

 /**
   * Identifier for the interval group (if intervals are grouped)
  **/
  private Integer intervalGroupId;

 /**
   * Name of the interval group
  **/
  private String intervalGroupName;

 /**
   * Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
  **/
  private String timeline;

 /**
   * Baseline interval used for calculating this interval’s dates
  **/
  private String definedUsingInterval;

 /**
   * Baseline form (name) from which the calculation date is taken
  **/
  private String windowCalculationForm;

 /**
   * Baseline field (variable name) from which the calculation date is taken
  **/
  private String windowCalculationDate;

 /**
   * Form used to capture the actual date for this interval
  **/
  private String actualDateForm;

 /**
   * Field (variable name) used to capture the actual date for this interval
  **/
  private String actualDate;

 /**
   * Number of days from the calculation date when the interval is due
  **/
  private Integer dueDateWillBeIn;

 /**
   * Number of days before the due date that are allowed (negative window)
  **/
  private Integer negativeSlack;

 /**
   * Number of days after the due date that are allowed (positive window)
  **/
  private Integer positiveSlack;

 /**
   * Number of days of grace period for ePRO completion after due date
  **/
  private Integer eproGracePeriod;

 /**
   * List of forms that are scheduled in this interval
  **/
  private List<ComponentsSchemasIntervalFormsItem> forms = null;

 /**
   * Whether the interval is soft-deleted (disabled)
  **/
  private Boolean disabled;

 /**
   * Date when this interval was created
  **/
  private String dateCreated;

 /**
   * Date when this interval was last modified
  **/
  private String dateModified;

 /**
   * Unique study key
   * @return studyKey
  **/
  public String getStudyKey() {
    return studyKey;
  }

  /**
    * Set studyKey
  **/
  public void setStudyKey(String studyKey) {
    this.studyKey = studyKey;
  }

  public Interval studyKey(String studyKey) {
    this.studyKey = studyKey;
    return this;
  }

 /**
   * Unique system identifier for the interval (visit definition)
   * @return intervalId
  **/
  public Integer getIntervalId() {
    return intervalId;
  }

  /**
    * Set intervalId
  **/
  public void setIntervalId(Integer intervalId) {
    this.intervalId = intervalId;
  }

  public Interval intervalId(Integer intervalId) {
    this.intervalId = intervalId;
    return this;
  }

 /**
   * Name of the interval (visit) as defined in the study
   * @return intervalName
  **/
  public String getIntervalName() {
    return intervalName;
  }

  /**
    * Set intervalName
  **/
  public void setIntervalName(String intervalName) {
    this.intervalName = intervalName;
  }

  public Interval intervalName(String intervalName) {
    this.intervalName = intervalName;
    return this;
  }

 /**
   * Description of the interval (visit)
   * @return intervalDescription
  **/
  public String getIntervalDescription() {
    return intervalDescription;
  }

  /**
    * Set intervalDescription
  **/
  public void setIntervalDescription(String intervalDescription) {
    this.intervalDescription = intervalDescription;
  }

  public Interval intervalDescription(String intervalDescription) {
    this.intervalDescription = intervalDescription;
    return this;
  }

 /**
   * Sequence number of the interval in the schedule
   * @return intervalSequence
  **/
  public Integer getIntervalSequence() {
    return intervalSequence;
  }

  /**
    * Set intervalSequence
  **/
  public void setIntervalSequence(Integer intervalSequence) {
    this.intervalSequence = intervalSequence;
  }

  public Interval intervalSequence(Integer intervalSequence) {
    this.intervalSequence = intervalSequence;
    return this;
  }

 /**
   * Identifier for the interval group (if intervals are grouped)
   * @return intervalGroupId
  **/
  public Integer getIntervalGroupId() {
    return intervalGroupId;
  }

  /**
    * Set intervalGroupId
  **/
  public void setIntervalGroupId(Integer intervalGroupId) {
    this.intervalGroupId = intervalGroupId;
  }

  public Interval intervalGroupId(Integer intervalGroupId) {
    this.intervalGroupId = intervalGroupId;
    return this;
  }

 /**
   * Name of the interval group
   * @return intervalGroupName
  **/
  public String getIntervalGroupName() {
    return intervalGroupName;
  }

  /**
    * Set intervalGroupName
  **/
  public void setIntervalGroupName(String intervalGroupName) {
    this.intervalGroupName = intervalGroupName;
  }

  public Interval intervalGroupName(String intervalGroupName) {
    this.intervalGroupName = intervalGroupName;
    return this;
  }

 /**
   * Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
   * @return timeline
  **/
  public String getTimeline() {
    return timeline;
  }

  /**
    * Set timeline
  **/
  public void setTimeline(String timeline) {
    this.timeline = timeline;
  }

  public Interval timeline(String timeline) {
    this.timeline = timeline;
    return this;
  }

 /**
   * Baseline interval used for calculating this interval’s dates
   * @return definedUsingInterval
  **/
  public String getDefinedUsingInterval() {
    return definedUsingInterval;
  }

  /**
    * Set definedUsingInterval
  **/
  public void setDefinedUsingInterval(String definedUsingInterval) {
    this.definedUsingInterval = definedUsingInterval;
  }

  public Interval definedUsingInterval(String definedUsingInterval) {
    this.definedUsingInterval = definedUsingInterval;
    return this;
  }

 /**
   * Baseline form (name) from which the calculation date is taken
   * @return windowCalculationForm
  **/
  public String getWindowCalculationForm() {
    return windowCalculationForm;
  }

  /**
    * Set windowCalculationForm
  **/
  public void setWindowCalculationForm(String windowCalculationForm) {
    this.windowCalculationForm = windowCalculationForm;
  }

  public Interval windowCalculationForm(String windowCalculationForm) {
    this.windowCalculationForm = windowCalculationForm;
    return this;
  }

 /**
   * Baseline field (variable name) from which the calculation date is taken
   * @return windowCalculationDate
  **/
  public String getWindowCalculationDate() {
    return windowCalculationDate;
  }

  /**
    * Set windowCalculationDate
  **/
  public void setWindowCalculationDate(String windowCalculationDate) {
    this.windowCalculationDate = windowCalculationDate;
  }

  public Interval windowCalculationDate(String windowCalculationDate) {
    this.windowCalculationDate = windowCalculationDate;
    return this;
  }

 /**
   * Form used to capture the actual date for this interval
   * @return actualDateForm
  **/
  public String getActualDateForm() {
    return actualDateForm;
  }

  /**
    * Set actualDateForm
  **/
  public void setActualDateForm(String actualDateForm) {
    this.actualDateForm = actualDateForm;
  }

  public Interval actualDateForm(String actualDateForm) {
    this.actualDateForm = actualDateForm;
    return this;
  }

 /**
   * Field (variable name) used to capture the actual date for this interval
   * @return actualDate
  **/
  public String getActualDate() {
    return actualDate;
  }

  /**
    * Set actualDate
  **/
  public void setActualDate(String actualDate) {
    this.actualDate = actualDate;
  }

  public Interval actualDate(String actualDate) {
    this.actualDate = actualDate;
    return this;
  }

 /**
   * Number of days from the calculation date when the interval is due
   * @return dueDateWillBeIn
  **/
  public Integer getDueDateWillBeIn() {
    return dueDateWillBeIn;
  }

  /**
    * Set dueDateWillBeIn
  **/
  public void setDueDateWillBeIn(Integer dueDateWillBeIn) {
    this.dueDateWillBeIn = dueDateWillBeIn;
  }

  public Interval dueDateWillBeIn(Integer dueDateWillBeIn) {
    this.dueDateWillBeIn = dueDateWillBeIn;
    return this;
  }

 /**
   * Number of days before the due date that are allowed (negative window)
   * @return negativeSlack
  **/
  public Integer getNegativeSlack() {
    return negativeSlack;
  }

  /**
    * Set negativeSlack
  **/
  public void setNegativeSlack(Integer negativeSlack) {
    this.negativeSlack = negativeSlack;
  }

  public Interval negativeSlack(Integer negativeSlack) {
    this.negativeSlack = negativeSlack;
    return this;
  }

 /**
   * Number of days after the due date that are allowed (positive window)
   * @return positiveSlack
  **/
  public Integer getPositiveSlack() {
    return positiveSlack;
  }

  /**
    * Set positiveSlack
  **/
  public void setPositiveSlack(Integer positiveSlack) {
    this.positiveSlack = positiveSlack;
  }

  public Interval positiveSlack(Integer positiveSlack) {
    this.positiveSlack = positiveSlack;
    return this;
  }

 /**
   * Number of days of grace period for ePRO completion after due date
   * @return eproGracePeriod
  **/
  public Integer getEproGracePeriod() {
    return eproGracePeriod;
  }

  /**
    * Set eproGracePeriod
  **/
  public void setEproGracePeriod(Integer eproGracePeriod) {
    this.eproGracePeriod = eproGracePeriod;
  }

  public Interval eproGracePeriod(Integer eproGracePeriod) {
    this.eproGracePeriod = eproGracePeriod;
    return this;
  }

 /**
   * List of forms that are scheduled in this interval
   * @return forms
  **/
  public List<ComponentsSchemasIntervalFormsItem> getForms() {
    return forms;
  }

  /**
    * Set forms
  **/
  public void setForms(List<ComponentsSchemasIntervalFormsItem> forms) {
    this.forms = forms;
  }

  public Interval forms(List<ComponentsSchemasIntervalFormsItem> forms) {
    this.forms = forms;
    return this;
  }

  public Interval addFormsItem(ComponentsSchemasIntervalFormsItem formsItem) {
    this.forms.add(formsItem);
    return this;
  }

 /**
   * Whether the interval is soft-deleted (disabled)
   * @return disabled
  **/
  public Boolean getDisabled() {
    return disabled;
  }

  /**
    * Set disabled
  **/
  public void setDisabled(Boolean disabled) {
    this.disabled = disabled;
  }

  public Interval disabled(Boolean disabled) {
    this.disabled = disabled;
    return this;
  }

 /**
   * Date when this interval was created
   * @return dateCreated
  **/
  public String getDateCreated() {
    return dateCreated;
  }

  /**
    * Set dateCreated
  **/
  public void setDateCreated(String dateCreated) {
    this.dateCreated = dateCreated;
  }

  public Interval dateCreated(String dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

 /**
   * Date when this interval was last modified
   * @return dateModified
  **/
  public String getDateModified() {
    return dateModified;
  }

  /**
    * Set dateModified
  **/
  public void setDateModified(String dateModified) {
    this.dateModified = dateModified;
  }

  public Interval dateModified(String dateModified) {
    this.dateModified = dateModified;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Interval {\n");
    
    sb.append("    studyKey: ").append(toIndentedString(studyKey)).append("\n");
    sb.append("    intervalId: ").append(toIndentedString(intervalId)).append("\n");
    sb.append("    intervalName: ").append(toIndentedString(intervalName)).append("\n");
    sb.append("    intervalDescription: ").append(toIndentedString(intervalDescription)).append("\n");
    sb.append("    intervalSequence: ").append(toIndentedString(intervalSequence)).append("\n");
    sb.append("    intervalGroupId: ").append(toIndentedString(intervalGroupId)).append("\n");
    sb.append("    intervalGroupName: ").append(toIndentedString(intervalGroupName)).append("\n");
    sb.append("    timeline: ").append(toIndentedString(timeline)).append("\n");
    sb.append("    definedUsingInterval: ").append(toIndentedString(definedUsingInterval)).append("\n");
    sb.append("    windowCalculationForm: ").append(toIndentedString(windowCalculationForm)).append("\n");
    sb.append("    windowCalculationDate: ").append(toIndentedString(windowCalculationDate)).append("\n");
    sb.append("    actualDateForm: ").append(toIndentedString(actualDateForm)).append("\n");
    sb.append("    actualDate: ").append(toIndentedString(actualDate)).append("\n");
    sb.append("    dueDateWillBeIn: ").append(toIndentedString(dueDateWillBeIn)).append("\n");
    sb.append("    negativeSlack: ").append(toIndentedString(negativeSlack)).append("\n");
    sb.append("    positiveSlack: ").append(toIndentedString(positiveSlack)).append("\n");
    sb.append("    eproGracePeriod: ").append(toIndentedString(eproGracePeriod)).append("\n");
    sb.append("    forms: ").append(toIndentedString(forms)).append("\n");
    sb.append("    disabled: ").append(toIndentedString(disabled)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

