/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;




public class Coding  {
  
 /**
   * Unique study key
  **/
  private String studyKey;

 /**
   * Name of the site associated with the coded data
  **/
  private String siteName;

 /**
   * Site ID associated with the coded data
  **/
  private Integer siteId;

 /**
   * Subject ID associated with the coded data
  **/
  private Integer subjectId;

 /**
   * Subject key (display ID) associated with the coded data
  **/
  private String subjectKey;

 /**
   * Form ID where the coded data originates
  **/
  private Integer formId;

 /**
   * Name of the form where the coded data originates
  **/
  private String formName;

 /**
   * Form key where the coded data originates
  **/
  private String formKey;

 /**
   * Revision number of the coding entry
  **/
  private Integer revision;

 /**
   * Record ID associated with the coded data
  **/
  private Integer recordId;

 /**
   * Variable name (field) that was coded
  **/
  private String variable;

 /**
   * Original value entered that required coding
  **/
  private String value;

 /**
   * Mednet coding ID
  **/
  private Integer codingId;

 /**
   * Standardized code assigned (e.g., dictionary term)
  **/
  private String code;

 /**
   * Name of the user who performed the coding
  **/
  private String codedBy;

 /**
   * Reason for coding or any notes on changes
  **/
  private String reason;

 /**
   * Name of the dictionary used (e.g., MedDRA)
  **/
  private String dictionaryName;

 /**
   * Version of the dictionary used
  **/
  private String dictionaryVersion;

 /**
   * Date when the coding was performed
  **/
  private String dateCoded;

 /**
   * Unique study key
   * @return studyKey
  **/
  public String getStudyKey() {
    return studyKey;
  }

  /**
    * Set studyKey
  **/
  public void setStudyKey(String studyKey) {
    this.studyKey = studyKey;
  }

  public Coding studyKey(String studyKey) {
    this.studyKey = studyKey;
    return this;
  }

 /**
   * Name of the site associated with the coded data
   * @return siteName
  **/
  public String getSiteName() {
    return siteName;
  }

  /**
    * Set siteName
  **/
  public void setSiteName(String siteName) {
    this.siteName = siteName;
  }

  public Coding siteName(String siteName) {
    this.siteName = siteName;
    return this;
  }

 /**
   * Site ID associated with the coded data
   * @return siteId
  **/
  public Integer getSiteId() {
    return siteId;
  }

  /**
    * Set siteId
  **/
  public void setSiteId(Integer siteId) {
    this.siteId = siteId;
  }

  public Coding siteId(Integer siteId) {
    this.siteId = siteId;
    return this;
  }

 /**
   * Subject ID associated with the coded data
   * @return subjectId
  **/
  public Integer getSubjectId() {
    return subjectId;
  }

  /**
    * Set subjectId
  **/
  public void setSubjectId(Integer subjectId) {
    this.subjectId = subjectId;
  }

  public Coding subjectId(Integer subjectId) {
    this.subjectId = subjectId;
    return this;
  }

 /**
   * Subject key (display ID) associated with the coded data
   * @return subjectKey
  **/
  public String getSubjectKey() {
    return subjectKey;
  }

  /**
    * Set subjectKey
  **/
  public void setSubjectKey(String subjectKey) {
    this.subjectKey = subjectKey;
  }

  public Coding subjectKey(String subjectKey) {
    this.subjectKey = subjectKey;
    return this;
  }

 /**
   * Form ID where the coded data originates
   * @return formId
  **/
  public Integer getFormId() {
    return formId;
  }

  /**
    * Set formId
  **/
  public void setFormId(Integer formId) {
    this.formId = formId;
  }

  public Coding formId(Integer formId) {
    this.formId = formId;
    return this;
  }

 /**
   * Name of the form where the coded data originates
   * @return formName
  **/
  public String getFormName() {
    return formName;
  }

  /**
    * Set formName
  **/
  public void setFormName(String formName) {
    this.formName = formName;
  }

  public Coding formName(String formName) {
    this.formName = formName;
    return this;
  }

 /**
   * Form key where the coded data originates
   * @return formKey
  **/
  public String getFormKey() {
    return formKey;
  }

  /**
    * Set formKey
  **/
  public void setFormKey(String formKey) {
    this.formKey = formKey;
  }

  public Coding formKey(String formKey) {
    this.formKey = formKey;
    return this;
  }

 /**
   * Revision number of the coding entry
   * @return revision
  **/
  public Integer getRevision() {
    return revision;
  }

  /**
    * Set revision
  **/
  public void setRevision(Integer revision) {
    this.revision = revision;
  }

  public Coding revision(Integer revision) {
    this.revision = revision;
    return this;
  }

 /**
   * Record ID associated with the coded data
   * @return recordId
  **/
  public Integer getRecordId() {
    return recordId;
  }

  /**
    * Set recordId
  **/
  public void setRecordId(Integer recordId) {
    this.recordId = recordId;
  }

  public Coding recordId(Integer recordId) {
    this.recordId = recordId;
    return this;
  }

 /**
   * Variable name (field) that was coded
   * @return variable
  **/
  public String getVariable() {
    return variable;
  }

  /**
    * Set variable
  **/
  public void setVariable(String variable) {
    this.variable = variable;
  }

  public Coding variable(String variable) {
    this.variable = variable;
    return this;
  }

 /**
   * Original value entered that required coding
   * @return value
  **/
  public String getValue() {
    return value;
  }

  /**
    * Set value
  **/
  public void setValue(String value) {
    this.value = value;
  }

  public Coding value(String value) {
    this.value = value;
    return this;
  }

 /**
   * Mednet coding ID
   * @return codingId
  **/
  public Integer getCodingId() {
    return codingId;
  }

  /**
    * Set codingId
  **/
  public void setCodingId(Integer codingId) {
    this.codingId = codingId;
  }

  public Coding codingId(Integer codingId) {
    this.codingId = codingId;
    return this;
  }

 /**
   * Standardized code assigned (e.g., dictionary term)
   * @return code
  **/
  public String getCode() {
    return code;
  }

  /**
    * Set code
  **/
  public void setCode(String code) {
    this.code = code;
  }

  public Coding code(String code) {
    this.code = code;
    return this;
  }

 /**
   * Name of the user who performed the coding
   * @return codedBy
  **/
  public String getCodedBy() {
    return codedBy;
  }

  /**
    * Set codedBy
  **/
  public void setCodedBy(String codedBy) {
    this.codedBy = codedBy;
  }

  public Coding codedBy(String codedBy) {
    this.codedBy = codedBy;
    return this;
  }

 /**
   * Reason for coding or any notes on changes
   * @return reason
  **/
  public String getReason() {
    return reason;
  }

  /**
    * Set reason
  **/
  public void setReason(String reason) {
    this.reason = reason;
  }

  public Coding reason(String reason) {
    this.reason = reason;
    return this;
  }

 /**
   * Name of the dictionary used (e.g., MedDRA)
   * @return dictionaryName
  **/
  public String getDictionaryName() {
    return dictionaryName;
  }

  /**
    * Set dictionaryName
  **/
  public void setDictionaryName(String dictionaryName) {
    this.dictionaryName = dictionaryName;
  }

  public Coding dictionaryName(String dictionaryName) {
    this.dictionaryName = dictionaryName;
    return this;
  }

 /**
   * Version of the dictionary used
   * @return dictionaryVersion
  **/
  public String getDictionaryVersion() {
    return dictionaryVersion;
  }

  /**
    * Set dictionaryVersion
  **/
  public void setDictionaryVersion(String dictionaryVersion) {
    this.dictionaryVersion = dictionaryVersion;
  }

  public Coding dictionaryVersion(String dictionaryVersion) {
    this.dictionaryVersion = dictionaryVersion;
    return this;
  }

 /**
   * Date when the coding was performed
   * @return dateCoded
  **/
  public String getDateCoded() {
    return dateCoded;
  }

  /**
    * Set dateCoded
  **/
  public void setDateCoded(String dateCoded) {
    this.dateCoded = dateCoded;
  }

  public Coding dateCoded(String dateCoded) {
    this.dateCoded = dateCoded;
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Coding {\n");
    
    sb.append("    studyKey: ").append(toIndentedString(studyKey)).append("\n");
    sb.append("    siteName: ").append(toIndentedString(siteName)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    subjectId: ").append(toIndentedString(subjectId)).append("\n");
    sb.append("    subjectKey: ").append(toIndentedString(subjectKey)).append("\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    formName: ").append(toIndentedString(formName)).append("\n");
    sb.append("    formKey: ").append(toIndentedString(formKey)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    recordId: ").append(toIndentedString(recordId)).append("\n");
    sb.append("    variable: ").append(toIndentedString(variable)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    codingId: ").append(toIndentedString(codingId)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    codedBy: ").append(toIndentedString(codedBy)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    dictionaryName: ").append(toIndentedString(dictionaryName)).append("\n");
    sb.append("    dictionaryVersion: ").append(toIndentedString(dictionaryVersion)).append("\n");
    sb.append("    dateCoded: ").append(toIndentedString(dateCoded)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

