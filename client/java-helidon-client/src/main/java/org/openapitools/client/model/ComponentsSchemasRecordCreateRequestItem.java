/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.HashMap;
import java.util.Map;




public class ComponentsSchemasRecordCreateRequestItem  {
  
 /**
   * Form key identifying the eCRF to create or update
  **/
  private String formKey;

 /**
   * Form ID identifying the eCRF to create or update (alternative to formKey)
  **/
  private Integer formId;

 /**
   * Name of the site where the record should be created (for new subject registration)
  **/
  private String siteName;

 /**
   * Site ID for the record (alternative to siteName)
  **/
  private Integer siteId;

 /**
   * Subject identifier (display ID) for which to create or update the record
  **/
  private String subjectKey;

 /**
   * Subject ID for which to create or update the record (alternative to subjectKey)
  **/
  private Integer subjectId;

 /**
   * Subject OID for which to create or update the record (alternative to subjectKey)
  **/
  private String subjectOid;

 /**
   * Name of the interval (visit) for a scheduled record update
  **/
  private String intervalName;

 /**
   * Interval ID for a scheduled record update (alternative to intervalName)
  **/
  private Integer intervalId;

 /**
   * Record ID for updating an existing unscheduled record (if applicable)
  **/
  private Integer recordId;

 /**
   * Record OID for updating an existing unscheduled record (if applicable)
  **/
  private String recordOid;

 /**
   * Key-value pairs of field names and values for the record data
  **/
  private Map<String, Object> data = new HashMap<>();

 /**
   * Form key identifying the eCRF to create or update
   * @return formKey
  **/
  public String getFormKey() {
    return formKey;
  }

  /**
    * Set formKey
  **/
  public void setFormKey(String formKey) {
    this.formKey = formKey;
  }

  public ComponentsSchemasRecordCreateRequestItem formKey(String formKey) {
    this.formKey = formKey;
    return this;
  }

 /**
   * Form ID identifying the eCRF to create or update (alternative to formKey)
   * @return formId
  **/
  public Integer getFormId() {
    return formId;
  }

  /**
    * Set formId
  **/
  public void setFormId(Integer formId) {
    this.formId = formId;
  }

  public ComponentsSchemasRecordCreateRequestItem formId(Integer formId) {
    this.formId = formId;
    return this;
  }

 /**
   * Name of the site where the record should be created (for new subject registration)
   * @return siteName
  **/
  public String getSiteName() {
    return siteName;
  }

  /**
    * Set siteName
  **/
  public void setSiteName(String siteName) {
    this.siteName = siteName;
  }

  public ComponentsSchemasRecordCreateRequestItem siteName(String siteName) {
    this.siteName = siteName;
    return this;
  }

 /**
   * Site ID for the record (alternative to siteName)
   * @return siteId
  **/
  public Integer getSiteId() {
    return siteId;
  }

  /**
    * Set siteId
  **/
  public void setSiteId(Integer siteId) {
    this.siteId = siteId;
  }

  public ComponentsSchemasRecordCreateRequestItem siteId(Integer siteId) {
    this.siteId = siteId;
    return this;
  }

 /**
   * Subject identifier (display ID) for which to create or update the record
   * @return subjectKey
  **/
  public String getSubjectKey() {
    return subjectKey;
  }

  /**
    * Set subjectKey
  **/
  public void setSubjectKey(String subjectKey) {
    this.subjectKey = subjectKey;
  }

  public ComponentsSchemasRecordCreateRequestItem subjectKey(String subjectKey) {
    this.subjectKey = subjectKey;
    return this;
  }

 /**
   * Subject ID for which to create or update the record (alternative to subjectKey)
   * @return subjectId
  **/
  public Integer getSubjectId() {
    return subjectId;
  }

  /**
    * Set subjectId
  **/
  public void setSubjectId(Integer subjectId) {
    this.subjectId = subjectId;
  }

  public ComponentsSchemasRecordCreateRequestItem subjectId(Integer subjectId) {
    this.subjectId = subjectId;
    return this;
  }

 /**
   * Subject OID for which to create or update the record (alternative to subjectKey)
   * @return subjectOid
  **/
  public String getSubjectOid() {
    return subjectOid;
  }

  /**
    * Set subjectOid
  **/
  public void setSubjectOid(String subjectOid) {
    this.subjectOid = subjectOid;
  }

  public ComponentsSchemasRecordCreateRequestItem subjectOid(String subjectOid) {
    this.subjectOid = subjectOid;
    return this;
  }

 /**
   * Name of the interval (visit) for a scheduled record update
   * @return intervalName
  **/
  public String getIntervalName() {
    return intervalName;
  }

  /**
    * Set intervalName
  **/
  public void setIntervalName(String intervalName) {
    this.intervalName = intervalName;
  }

  public ComponentsSchemasRecordCreateRequestItem intervalName(String intervalName) {
    this.intervalName = intervalName;
    return this;
  }

 /**
   * Interval ID for a scheduled record update (alternative to intervalName)
   * @return intervalId
  **/
  public Integer getIntervalId() {
    return intervalId;
  }

  /**
    * Set intervalId
  **/
  public void setIntervalId(Integer intervalId) {
    this.intervalId = intervalId;
  }

  public ComponentsSchemasRecordCreateRequestItem intervalId(Integer intervalId) {
    this.intervalId = intervalId;
    return this;
  }

 /**
   * Record ID for updating an existing unscheduled record (if applicable)
   * @return recordId
  **/
  public Integer getRecordId() {
    return recordId;
  }

  /**
    * Set recordId
  **/
  public void setRecordId(Integer recordId) {
    this.recordId = recordId;
  }

  public ComponentsSchemasRecordCreateRequestItem recordId(Integer recordId) {
    this.recordId = recordId;
    return this;
  }

 /**
   * Record OID for updating an existing unscheduled record (if applicable)
   * @return recordOid
  **/
  public String getRecordOid() {
    return recordOid;
  }

  /**
    * Set recordOid
  **/
  public void setRecordOid(String recordOid) {
    this.recordOid = recordOid;
  }

  public ComponentsSchemasRecordCreateRequestItem recordOid(String recordOid) {
    this.recordOid = recordOid;
    return this;
  }

 /**
   * Key-value pairs of field names and values for the record data
   * @return data
  **/
  public Map<String, Object> getData() {
    return data;
  }

  /**
    * Set data
  **/
  public void setData(Map<String, Object> data) {
    this.data = data;
  }

  public ComponentsSchemasRecordCreateRequestItem data(Map<String, Object> data) {
    this.data = data;
    return this;
  }

  public ComponentsSchemasRecordCreateRequestItem putDataItem(String key, Object dataItem) {
    this.data.put(key, dataItem);
    return this;
  }


  /**
    * Create a string representation of this pojo.
  **/
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComponentsSchemasRecordCreateRequestItem {\n");
    
    sb.append("    formKey: ").append(toIndentedString(formKey)).append("\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    siteName: ").append(toIndentedString(siteName)).append("\n");
    sb.append("    siteId: ").append(toIndentedString(siteId)).append("\n");
    sb.append("    subjectKey: ").append(toIndentedString(subjectKey)).append("\n");
    sb.append("    subjectId: ").append(toIndentedString(subjectId)).append("\n");
    sb.append("    subjectOid: ").append(toIndentedString(subjectOid)).append("\n");
    sb.append("    intervalName: ").append(toIndentedString(intervalName)).append("\n");
    sb.append("    intervalId: ").append(toIndentedString(intervalId)).append("\n");
    sb.append("    recordId: ").append(toIndentedString(recordId)).append("\n");
    sb.append("    recordOid: ").append(toIndentedString(recordOid)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private static String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

