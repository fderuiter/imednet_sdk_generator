/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.Record
import org.openapitools.client.models.Keyword

class RecordTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Record
        //val modelInstance = Record()

        // to test the property `studyKey` - Unique study key
        should("test studyKey") {
            // uncomment below to test the property
            //modelInstance.studyKey shouldBe ("TODO")
        }

        // to test the property `intervalId` - Interval ID (visit definition) that this record is associated with
        should("test intervalId") {
            // uncomment below to test the property
            //modelInstance.intervalId shouldBe ("TODO")
        }

        // to test the property `formId` - Form ID of the form this record instance belongs to
        should("test formId") {
            // uncomment below to test the property
            //modelInstance.formId shouldBe ("TODO")
        }

        // to test the property `formKey` - Form key of the form for this record instance
        should("test formKey") {
            // uncomment below to test the property
            //modelInstance.formKey shouldBe ("TODO")
        }

        // to test the property `siteId` - Site ID associated with the record
        should("test siteId") {
            // uncomment below to test the property
            //modelInstance.siteId shouldBe ("TODO")
        }

        // to test the property `recordId` - Unique record ID
        should("test recordId") {
            // uncomment below to test the property
            //modelInstance.recordId shouldBe ("TODO")
        }

        // to test the property `recordOid` - Client-assigned record OID
        should("test recordOid") {
            // uncomment below to test the property
            //modelInstance.recordOid shouldBe ("TODO")
        }

        // to test the property `recordType` - Type of record (e.g., SUBJECT for subject-related forms)
        should("test recordType") {
            // uncomment below to test the property
            //modelInstance.recordType shouldBe ("TODO")
        }

        // to test the property `recordStatus` - Current status of the record (e.g., Record Incomplete, Record Complete)
        should("test recordStatus") {
            // uncomment below to test the property
            //modelInstance.recordStatus shouldBe ("TODO")
        }

        // to test the property `deleted` - Whether the record is marked as deleted
        should("test deleted") {
            // uncomment below to test the property
            //modelInstance.deleted shouldBe ("TODO")
        }

        // to test the property `dateCreated` - Date when this record was created
        should("test dateCreated") {
            // uncomment below to test the property
            //modelInstance.dateCreated shouldBe ("TODO")
        }

        // to test the property `dateModified` - Date when this record was last modified
        should("test dateModified") {
            // uncomment below to test the property
            //modelInstance.dateModified shouldBe ("TODO")
        }

        // to test the property `subjectId` - Mednet subject ID that this record is associated with
        should("test subjectId") {
            // uncomment below to test the property
            //modelInstance.subjectId shouldBe ("TODO")
        }

        // to test the property `subjectOid` - Client-assigned subject OID for the subject this record is associated with
        should("test subjectOid") {
            // uncomment below to test the property
            //modelInstance.subjectOid shouldBe ("TODO")
        }

        // to test the property `subjectKey` - Subject display ID that this record is associated with
        should("test subjectKey") {
            // uncomment below to test the property
            //modelInstance.subjectKey shouldBe ("TODO")
        }

        // to test the property `visitId` - Visit instance ID that this record is associated with (if applicable)
        should("test visitId") {
            // uncomment below to test the property
            //modelInstance.visitId shouldBe ("TODO")
        }

        // to test the property `parentRecordId` - Record ID of the parent record if this record is a subrecord (if applicable)
        should("test parentRecordId") {
            // uncomment below to test the property
            //modelInstance.parentRecordId shouldBe ("TODO")
        }

        // to test the property `keywords` - List of keywords associated with the record
        should("test keywords") {
            // uncomment below to test the property
            //modelInstance.keywords shouldBe ("TODO")
        }

        // to test the property `recordData` - Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.
        should("test recordData") {
            // uncomment below to test the property
            //modelInstance.recordData shouldBe ("TODO")
        }

    }
}
