/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.Form

class FormTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Form
        //val modelInstance = Form()

        // to test the property `studyKey` - Unique study key
        should("test studyKey") {
            // uncomment below to test the property
            //modelInstance.studyKey shouldBe ("TODO")
        }

        // to test the property `formId` - Mednet Form ID
        should("test formId") {
            // uncomment below to test the property
            //modelInstance.formId shouldBe ("TODO")
        }

        // to test the property `formKey` - User-defined form key
        should("test formKey") {
            // uncomment below to test the property
            //modelInstance.formKey shouldBe ("TODO")
        }

        // to test the property `formName` - Name of the form (eCRF)
        should("test formName") {
            // uncomment below to test the property
            //modelInstance.formName shouldBe ("TODO")
        }

        // to test the property `formType` - Type of the form (e.g., Subject or Site)
        should("test formType") {
            // uncomment below to test the property
            //modelInstance.formType shouldBe ("TODO")
        }

        // to test the property `revision` - Number of modifications (revisions) of the form metadata
        should("test revision") {
            // uncomment below to test the property
            //modelInstance.revision shouldBe ("TODO")
        }

        // to test the property `embeddedLog` - Whether the form has an embedded log
        should("test embeddedLog") {
            // uncomment below to test the property
            //modelInstance.embeddedLog shouldBe ("TODO")
        }

        // to test the property `enforceOwnership` - Whether the form enforces record ownership
        should("test enforceOwnership") {
            // uncomment below to test the property
            //modelInstance.enforceOwnership shouldBe ("TODO")
        }

        // to test the property `userAgreement` - Whether the form requires a user agreement
        should("test userAgreement") {
            // uncomment below to test the property
            //modelInstance.userAgreement shouldBe ("TODO")
        }

        // to test the property `subjectRecordReport` - Whether the form is marked as a subject record report
        should("test subjectRecordReport") {
            // uncomment below to test the property
            //modelInstance.subjectRecordReport shouldBe ("TODO")
        }

        // to test the property `unscheduledVisit` - Whether the form is included in unscheduled visits
        should("test unscheduledVisit") {
            // uncomment below to test the property
            //modelInstance.unscheduledVisit shouldBe ("TODO")
        }

        // to test the property `otherForms` - Whether the form is included in Other Forms category
        should("test otherForms") {
            // uncomment below to test the property
            //modelInstance.otherForms shouldBe ("TODO")
        }

        // to test the property `eproForm` - Whether the form is an ePRO (electronic patient reported outcome) form
        should("test eproForm") {
            // uncomment below to test the property
            //modelInstance.eproForm shouldBe ("TODO")
        }

        // to test the property `allowCopy` - Whether the form allows copying of data
        should("test allowCopy") {
            // uncomment below to test the property
            //modelInstance.allowCopy shouldBe ("TODO")
        }

        // to test the property `disabled` - Whether the form is soft-deleted (disabled)
        should("test disabled") {
            // uncomment below to test the property
            //modelInstance.disabled shouldBe ("TODO")
        }

        // to test the property `dateCreated` - Date when this form was created
        should("test dateCreated") {
            // uncomment below to test the property
            //modelInstance.dateCreated shouldBe ("TODO")
        }

        // to test the property `dateModified` - Date when this form was last modified
        should("test dateModified") {
            // uncomment below to test the property
            //modelInstance.dateModified shouldBe ("TODO")
        }

    }
}
