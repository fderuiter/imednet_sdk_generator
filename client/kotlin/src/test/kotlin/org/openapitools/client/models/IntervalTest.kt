/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.Interval
import org.openapitools.client.models.ComponentsSchemasIntervalFormsItem

class IntervalTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Interval
        //val modelInstance = Interval()

        // to test the property `studyKey` - Unique study key
        should("test studyKey") {
            // uncomment below to test the property
            //modelInstance.studyKey shouldBe ("TODO")
        }

        // to test the property `intervalId` - Unique system identifier for the interval (visit definition)
        should("test intervalId") {
            // uncomment below to test the property
            //modelInstance.intervalId shouldBe ("TODO")
        }

        // to test the property `intervalName` - Name of the interval (visit) as defined in the study
        should("test intervalName") {
            // uncomment below to test the property
            //modelInstance.intervalName shouldBe ("TODO")
        }

        // to test the property `intervalDescription` - Description of the interval (visit)
        should("test intervalDescription") {
            // uncomment below to test the property
            //modelInstance.intervalDescription shouldBe ("TODO")
        }

        // to test the property `intervalSequence` - Sequence number of the interval in the schedule
        should("test intervalSequence") {
            // uncomment below to test the property
            //modelInstance.intervalSequence shouldBe ("TODO")
        }

        // to test the property `intervalGroupId` - Identifier for the interval group (if intervals are grouped)
        should("test intervalGroupId") {
            // uncomment below to test the property
            //modelInstance.intervalGroupId shouldBe ("TODO")
        }

        // to test the property `intervalGroupName` - Name of the interval group
        should("test intervalGroupName") {
            // uncomment below to test the property
            //modelInstance.intervalGroupName shouldBe ("TODO")
        }

        // to test the property `timeline` - Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
        should("test timeline") {
            // uncomment below to test the property
            //modelInstance.timeline shouldBe ("TODO")
        }

        // to test the property `definedUsingInterval` - Baseline interval used for calculating this intervalâ€™s dates
        should("test definedUsingInterval") {
            // uncomment below to test the property
            //modelInstance.definedUsingInterval shouldBe ("TODO")
        }

        // to test the property `windowCalculationForm` - Baseline form (name) from which the calculation date is taken
        should("test windowCalculationForm") {
            // uncomment below to test the property
            //modelInstance.windowCalculationForm shouldBe ("TODO")
        }

        // to test the property `windowCalculationDate` - Baseline field (variable name) from which the calculation date is taken
        should("test windowCalculationDate") {
            // uncomment below to test the property
            //modelInstance.windowCalculationDate shouldBe ("TODO")
        }

        // to test the property `actualDateForm` - Form used to capture the actual date for this interval
        should("test actualDateForm") {
            // uncomment below to test the property
            //modelInstance.actualDateForm shouldBe ("TODO")
        }

        // to test the property `actualDate` - Field (variable name) used to capture the actual date for this interval
        should("test actualDate") {
            // uncomment below to test the property
            //modelInstance.actualDate shouldBe ("TODO")
        }

        // to test the property `dueDateWillBeIn` - Number of days from the calculation date when the interval is due
        should("test dueDateWillBeIn") {
            // uncomment below to test the property
            //modelInstance.dueDateWillBeIn shouldBe ("TODO")
        }

        // to test the property `negativeSlack` - Number of days before the due date that are allowed (negative window)
        should("test negativeSlack") {
            // uncomment below to test the property
            //modelInstance.negativeSlack shouldBe ("TODO")
        }

        // to test the property `positiveSlack` - Number of days after the due date that are allowed (positive window)
        should("test positiveSlack") {
            // uncomment below to test the property
            //modelInstance.positiveSlack shouldBe ("TODO")
        }

        // to test the property `eproGracePeriod` - Number of days of grace period for ePRO completion after due date
        should("test eproGracePeriod") {
            // uncomment below to test the property
            //modelInstance.eproGracePeriod shouldBe ("TODO")
        }

        // to test the property `forms` - List of forms that are scheduled in this interval
        should("test forms") {
            // uncomment below to test the property
            //modelInstance.forms shouldBe ("TODO")
        }

        // to test the property `disabled` - Whether the interval is soft-deleted (disabled)
        should("test disabled") {
            // uncomment below to test the property
            //modelInstance.disabled shouldBe ("TODO")
        }

        // to test the property `dateCreated` - Date when this interval was created
        should("test dateCreated") {
            // uncomment below to test the property
            //modelInstance.dateCreated shouldBe ("TODO")
        }

        // to test the property `dateModified` - Date when this interval was last modified
        should("test dateModified") {
            // uncomment below to test the property
            //modelInstance.dateModified shouldBe ("TODO")
        }

    }
}
