/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.models.Variable

class VariableTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of Variable
        //val modelInstance = Variable()

        // to test the property `studyKey` - Unique study key
        should("test studyKey") {
            // uncomment below to test the property
            //modelInstance.studyKey shouldBe ("TODO")
        }

        // to test the property `variableId` - Mednet variable ID
        should("test variableId") {
            // uncomment below to test the property
            //modelInstance.variableId shouldBe ("TODO")
        }

        // to test the property `variableType` - Type of the variable (field type), e.g., RADIO, TEXT, etc.
        should("test variableType") {
            // uncomment below to test the property
            //modelInstance.variableType shouldBe ("TODO")
        }

        // to test the property `variableName` - Name of the variable (question text or label)
        should("test variableName") {
            // uncomment below to test the property
            //modelInstance.variableName shouldBe ("TODO")
        }

        // to test the property `sequence` - Sequence of the variable on the form
        should("test sequence") {
            // uncomment below to test the property
            //modelInstance.sequence shouldBe ("TODO")
        }

        // to test the property `revision` - Number of modifications of the variable (via form metadata revisions)
        should("test revision") {
            // uncomment below to test the property
            //modelInstance.revision shouldBe ("TODO")
        }

        // to test the property `disabled` - Whether the variable is marked as disabled (deleted)
        should("test disabled") {
            // uncomment below to test the property
            //modelInstance.disabled shouldBe ("TODO")
        }

        // to test the property `dateCreated` - Date when this variable was created
        should("test dateCreated") {
            // uncomment below to test the property
            //modelInstance.dateCreated shouldBe ("TODO")
        }

        // to test the property `dateModified` - Date when this variable was last modified
        should("test dateModified") {
            // uncomment below to test the property
            //modelInstance.dateModified shouldBe ("TODO")
        }

        // to test the property `formId` - ID of the form that this variable belongs to
        should("test formId") {
            // uncomment below to test the property
            //modelInstance.formId shouldBe ("TODO")
        }

        // to test the property `variableOid` - Client-assigned variable OID
        should("test variableOid") {
            // uncomment below to test the property
            //modelInstance.variableOid shouldBe ("TODO")
        }

        // to test the property `deleted` - Whether the variable is marked as deleted
        should("test deleted") {
            // uncomment below to test the property
            //modelInstance.deleted shouldBe ("TODO")
        }

        // to test the property `formKey` - Form key of the form that this variable belongs to
        should("test formKey") {
            // uncomment below to test the property
            //modelInstance.formKey shouldBe ("TODO")
        }

        // to test the property `formName` - Name of the form that this variable belongs to
        should("test formName") {
            // uncomment below to test the property
            //modelInstance.formName shouldBe ("TODO")
        }

        // to test the property `label` - User-defined identifier (field name) for the variable
        should("test label") {
            // uncomment below to test the property
            //modelInstance.label shouldBe ("TODO")
        }

        // to test the property `blinded` - Whether the variable is flagged as blinded (hidden in certain contexts)
        should("test blinded") {
            // uncomment below to test the property
            //modelInstance.blinded shouldBe ("TODO")
        }

    }
}
