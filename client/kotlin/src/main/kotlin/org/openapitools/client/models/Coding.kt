/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param studyKey Unique study key
 * @param siteName Name of the site associated with the coded data
 * @param siteId Site ID associated with the coded data
 * @param subjectId Subject ID associated with the coded data
 * @param subjectKey Subject key (display ID) associated with the coded data
 * @param formId Form ID where the coded data originates
 * @param formName Name of the form where the coded data originates
 * @param formKey Form key where the coded data originates
 * @param revision Revision number of the coding entry
 * @param recordId Record ID associated with the coded data
 * @param variable Variable name (field) that was coded
 * @param `value` Original value entered that required coding
 * @param codingId Mednet coding ID
 * @param code Standardized code assigned (e.g., dictionary term)
 * @param codedBy Name of the user who performed the coding
 * @param reason Reason for coding or any notes on changes
 * @param dictionaryName Name of the dictionary used (e.g., MedDRA)
 * @param dictionaryVersion Version of the dictionary used
 * @param dateCoded Date when the coding was performed
 */


data class Coding (

    /* Unique study key */
    @Json(name = "studyKey")
    val studyKey: kotlin.String? = null,

    /* Name of the site associated with the coded data */
    @Json(name = "siteName")
    val siteName: kotlin.String? = null,

    /* Site ID associated with the coded data */
    @Json(name = "siteId")
    val siteId: kotlin.Int? = null,

    /* Subject ID associated with the coded data */
    @Json(name = "subjectId")
    val subjectId: kotlin.Int? = null,

    /* Subject key (display ID) associated with the coded data */
    @Json(name = "subjectKey")
    val subjectKey: kotlin.String? = null,

    /* Form ID where the coded data originates */
    @Json(name = "formId")
    val formId: kotlin.Int? = null,

    /* Name of the form where the coded data originates */
    @Json(name = "formName")
    val formName: kotlin.String? = null,

    /* Form key where the coded data originates */
    @Json(name = "formKey")
    val formKey: kotlin.String? = null,

    /* Revision number of the coding entry */
    @Json(name = "revision")
    val revision: kotlin.Int? = null,

    /* Record ID associated with the coded data */
    @Json(name = "recordId")
    val recordId: kotlin.Int? = null,

    /* Variable name (field) that was coded */
    @Json(name = "variable")
    val variable: kotlin.String? = null,

    /* Original value entered that required coding */
    @Json(name = "value")
    val `value`: kotlin.String? = null,

    /* Mednet coding ID */
    @Json(name = "codingId")
    val codingId: kotlin.Int? = null,

    /* Standardized code assigned (e.g., dictionary term) */
    @Json(name = "code")
    val code: kotlin.String? = null,

    /* Name of the user who performed the coding */
    @Json(name = "codedBy")
    val codedBy: kotlin.String? = null,

    /* Reason for coding or any notes on changes */
    @Json(name = "reason")
    val reason: kotlin.String? = null,

    /* Name of the dictionary used (e.g., MedDRA) */
    @Json(name = "dictionaryName")
    val dictionaryName: kotlin.String? = null,

    /* Version of the dictionary used */
    @Json(name = "dictionaryVersion")
    val dictionaryVersion: kotlin.String? = null,

    /* Date when the coding was performed */
    @Json(name = "dateCoded")
    val dateCoded: kotlin.String? = null

) {


}

