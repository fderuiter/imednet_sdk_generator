/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.ComponentsSchemasIntervalFormsItem

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param studyKey Unique study key
 * @param intervalId Unique system identifier for the interval (visit definition)
 * @param intervalName Name of the interval (visit) as defined in the study
 * @param intervalDescription Description of the interval (visit)
 * @param intervalSequence Sequence number of the interval in the schedule
 * @param intervalGroupId Identifier for the interval group (if intervals are grouped)
 * @param intervalGroupName Name of the interval group
 * @param timeline Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
 * @param definedUsingInterval Baseline interval used for calculating this interval’s dates
 * @param windowCalculationForm Baseline form (name) from which the calculation date is taken
 * @param windowCalculationDate Baseline field (variable name) from which the calculation date is taken
 * @param actualDateForm Form used to capture the actual date for this interval
 * @param actualDate Field (variable name) used to capture the actual date for this interval
 * @param dueDateWillBeIn Number of days from the calculation date when the interval is due
 * @param negativeSlack Number of days before the due date that are allowed (negative window)
 * @param positiveSlack Number of days after the due date that are allowed (positive window)
 * @param eproGracePeriod Number of days of grace period for ePRO completion after due date
 * @param forms List of forms that are scheduled in this interval
 * @param disabled Whether the interval is soft-deleted (disabled)
 * @param dateCreated Date when this interval was created
 * @param dateModified Date when this interval was last modified
 */


data class Interval (

    /* Unique study key */
    @Json(name = "studyKey")
    val studyKey: kotlin.String? = null,

    /* Unique system identifier for the interval (visit definition) */
    @Json(name = "intervalId")
    val intervalId: kotlin.Int? = null,

    /* Name of the interval (visit) as defined in the study */
    @Json(name = "intervalName")
    val intervalName: kotlin.String? = null,

    /* Description of the interval (visit) */
    @Json(name = "intervalDescription")
    val intervalDescription: kotlin.String? = null,

    /* Sequence number of the interval in the schedule */
    @Json(name = "intervalSequence")
    val intervalSequence: kotlin.Int? = null,

    /* Identifier for the interval group (if intervals are grouped) */
    @Json(name = "intervalGroupId")
    val intervalGroupId: kotlin.Int? = null,

    /* Name of the interval group */
    @Json(name = "intervalGroupName")
    val intervalGroupName: kotlin.String? = null,

    /* Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date) */
    @Json(name = "timeline")
    val timeline: kotlin.String? = null,

    /* Baseline interval used for calculating this interval’s dates */
    @Json(name = "definedUsingInterval")
    val definedUsingInterval: kotlin.String? = null,

    /* Baseline form (name) from which the calculation date is taken */
    @Json(name = "windowCalculationForm")
    val windowCalculationForm: kotlin.String? = null,

    /* Baseline field (variable name) from which the calculation date is taken */
    @Json(name = "windowCalculationDate")
    val windowCalculationDate: kotlin.String? = null,

    /* Form used to capture the actual date for this interval */
    @Json(name = "actualDateForm")
    val actualDateForm: kotlin.String? = null,

    /* Field (variable name) used to capture the actual date for this interval */
    @Json(name = "actualDate")
    val actualDate: kotlin.String? = null,

    /* Number of days from the calculation date when the interval is due */
    @Json(name = "dueDateWillBeIn")
    val dueDateWillBeIn: kotlin.Int? = null,

    /* Number of days before the due date that are allowed (negative window) */
    @Json(name = "negativeSlack")
    val negativeSlack: kotlin.Int? = null,

    /* Number of days after the due date that are allowed (positive window) */
    @Json(name = "positiveSlack")
    val positiveSlack: kotlin.Int? = null,

    /* Number of days of grace period for ePRO completion after due date */
    @Json(name = "eproGracePeriod")
    val eproGracePeriod: kotlin.Int? = null,

    /* List of forms that are scheduled in this interval */
    @Json(name = "forms")
    val forms: kotlin.collections.List<ComponentsSchemasIntervalFormsItem>? = null,

    /* Whether the interval is soft-deleted (disabled) */
    @Json(name = "disabled")
    val disabled: kotlin.Boolean? = null,

    /* Date when this interval was created */
    @Json(name = "dateCreated")
    val dateCreated: kotlin.String? = null,

    /* Date when this interval was last modified */
    @Json(name = "dateModified")
    val dateModified: kotlin.String? = null

) {


}

