# NOTE: This file is auto generated by OpenAPI Generator 7.14.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule MednetEDCAPI.Model.Record do
  @moduledoc """
  
  """

  @derive JSON.Encoder
  defstruct [
    :studyKey,
    :intervalId,
    :formId,
    :formKey,
    :siteId,
    :recordId,
    :recordOid,
    :recordType,
    :recordStatus,
    :deleted,
    :dateCreated,
    :dateModified,
    :subjectId,
    :subjectOid,
    :subjectKey,
    :visitId,
    :parentRecordId,
    :keywords,
    :recordData
  ]

  @type t :: %__MODULE__{
    :studyKey => String.t | nil,
    :intervalId => integer() | nil,
    :formId => integer() | nil,
    :formKey => String.t | nil,
    :siteId => integer() | nil,
    :recordId => integer() | nil,
    :recordOid => String.t | nil,
    :recordType => String.t | nil,
    :recordStatus => String.t | nil,
    :deleted => boolean() | nil,
    :dateCreated => String.t | nil,
    :dateModified => String.t | nil,
    :subjectId => integer() | nil,
    :subjectOid => String.t | nil,
    :subjectKey => String.t | nil,
    :visitId => integer() | nil,
    :parentRecordId => integer() | nil,
    :keywords => [MednetEDCAPI.Model.Keyword.t] | nil,
    :recordData => %{optional(String.t) => any()} | nil
  }

  alias MednetEDCAPI.Deserializer

  def decode(value) do
    value
     |> Deserializer.deserialize(:keywords, :list, MednetEDCAPI.Model.Keyword)
     |> Deserializer.deserialize(:recordData, :map, MednetEDCAPI.Model.AnyType)
  end
end

