/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKeyword.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKeyword::OAIKeyword(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKeyword::OAIKeyword() {
    this->initializeModel();
}

OAIKeyword::~OAIKeyword() {}

void OAIKeyword::initializeModel() {

    m_keyword_name_isSet = false;
    m_keyword_name_isValid = false;

    m_keyword_key_isSet = false;
    m_keyword_key_isValid = false;

    m_keyword_id_isSet = false;
    m_keyword_id_isValid = false;

    m_date_added_isSet = false;
    m_date_added_isValid = false;
}

void OAIKeyword::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKeyword::fromJsonObject(QJsonObject json) {

    m_keyword_name_isValid = ::OpenAPI::fromJsonValue(m_keyword_name, json[QString("keywordName")]);
    m_keyword_name_isSet = !json[QString("keywordName")].isNull() && m_keyword_name_isValid;

    m_keyword_key_isValid = ::OpenAPI::fromJsonValue(m_keyword_key, json[QString("keywordKey")]);
    m_keyword_key_isSet = !json[QString("keywordKey")].isNull() && m_keyword_key_isValid;

    m_keyword_id_isValid = ::OpenAPI::fromJsonValue(m_keyword_id, json[QString("keywordId")]);
    m_keyword_id_isSet = !json[QString("keywordId")].isNull() && m_keyword_id_isValid;

    m_date_added_isValid = ::OpenAPI::fromJsonValue(m_date_added, json[QString("dateAdded")]);
    m_date_added_isSet = !json[QString("dateAdded")].isNull() && m_date_added_isValid;
}

QString OAIKeyword::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKeyword::asJsonObject() const {
    QJsonObject obj;
    if (m_keyword_name_isSet) {
        obj.insert(QString("keywordName"), ::OpenAPI::toJsonValue(m_keyword_name));
    }
    if (m_keyword_key_isSet) {
        obj.insert(QString("keywordKey"), ::OpenAPI::toJsonValue(m_keyword_key));
    }
    if (m_keyword_id_isSet) {
        obj.insert(QString("keywordId"), ::OpenAPI::toJsonValue(m_keyword_id));
    }
    if (m_date_added_isSet) {
        obj.insert(QString("dateAdded"), ::OpenAPI::toJsonValue(m_date_added));
    }
    return obj;
}

QString OAIKeyword::getKeywordName() const {
    return m_keyword_name;
}
void OAIKeyword::setKeywordName(const QString &keyword_name) {
    m_keyword_name = keyword_name;
    m_keyword_name_isSet = true;
}

bool OAIKeyword::is_keyword_name_Set() const{
    return m_keyword_name_isSet;
}

bool OAIKeyword::is_keyword_name_Valid() const{
    return m_keyword_name_isValid;
}

QString OAIKeyword::getKeywordKey() const {
    return m_keyword_key;
}
void OAIKeyword::setKeywordKey(const QString &keyword_key) {
    m_keyword_key = keyword_key;
    m_keyword_key_isSet = true;
}

bool OAIKeyword::is_keyword_key_Set() const{
    return m_keyword_key_isSet;
}

bool OAIKeyword::is_keyword_key_Valid() const{
    return m_keyword_key_isValid;
}

qint32 OAIKeyword::getKeywordId() const {
    return m_keyword_id;
}
void OAIKeyword::setKeywordId(const qint32 &keyword_id) {
    m_keyword_id = keyword_id;
    m_keyword_id_isSet = true;
}

bool OAIKeyword::is_keyword_id_Set() const{
    return m_keyword_id_isSet;
}

bool OAIKeyword::is_keyword_id_Valid() const{
    return m_keyword_id_isValid;
}

QString OAIKeyword::getDateAdded() const {
    return m_date_added;
}
void OAIKeyword::setDateAdded(const QString &date_added) {
    m_date_added = date_added;
    m_date_added_isSet = true;
}

bool OAIKeyword::is_date_added_Set() const{
    return m_date_added_isSet;
}

bool OAIKeyword::is_date_added_Valid() const{
    return m_date_added_isValid;
}

bool OAIKeyword::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_keyword_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_added_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKeyword::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
