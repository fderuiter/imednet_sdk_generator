/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVariable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVariable::OAIVariable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVariable::OAIVariable() {
    this->initializeModel();
}

OAIVariable::~OAIVariable() {}

void OAIVariable::initializeModel() {

    m_study_key_isSet = false;
    m_study_key_isValid = false;

    m_variable_id_isSet = false;
    m_variable_id_isValid = false;

    m_variable_type_isSet = false;
    m_variable_type_isValid = false;

    m_variable_name_isSet = false;
    m_variable_name_isValid = false;

    m_sequence_isSet = false;
    m_sequence_isValid = false;

    m_revision_isSet = false;
    m_revision_isValid = false;

    m_disabled_isSet = false;
    m_disabled_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_form_id_isSet = false;
    m_form_id_isValid = false;

    m_variable_oid_isSet = false;
    m_variable_oid_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_form_key_isSet = false;
    m_form_key_isValid = false;

    m_form_name_isSet = false;
    m_form_name_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_blinded_isSet = false;
    m_blinded_isValid = false;
}

void OAIVariable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVariable::fromJsonObject(QJsonObject json) {

    m_study_key_isValid = ::OpenAPI::fromJsonValue(m_study_key, json[QString("studyKey")]);
    m_study_key_isSet = !json[QString("studyKey")].isNull() && m_study_key_isValid;

    m_variable_id_isValid = ::OpenAPI::fromJsonValue(m_variable_id, json[QString("variableId")]);
    m_variable_id_isSet = !json[QString("variableId")].isNull() && m_variable_id_isValid;

    m_variable_type_isValid = ::OpenAPI::fromJsonValue(m_variable_type, json[QString("variableType")]);
    m_variable_type_isSet = !json[QString("variableType")].isNull() && m_variable_type_isValid;

    m_variable_name_isValid = ::OpenAPI::fromJsonValue(m_variable_name, json[QString("variableName")]);
    m_variable_name_isSet = !json[QString("variableName")].isNull() && m_variable_name_isValid;

    m_sequence_isValid = ::OpenAPI::fromJsonValue(m_sequence, json[QString("sequence")]);
    m_sequence_isSet = !json[QString("sequence")].isNull() && m_sequence_isValid;

    m_revision_isValid = ::OpenAPI::fromJsonValue(m_revision, json[QString("revision")]);
    m_revision_isSet = !json[QString("revision")].isNull() && m_revision_isValid;

    m_disabled_isValid = ::OpenAPI::fromJsonValue(m_disabled, json[QString("disabled")]);
    m_disabled_isSet = !json[QString("disabled")].isNull() && m_disabled_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_form_id_isValid = ::OpenAPI::fromJsonValue(m_form_id, json[QString("formId")]);
    m_form_id_isSet = !json[QString("formId")].isNull() && m_form_id_isValid;

    m_variable_oid_isValid = ::OpenAPI::fromJsonValue(m_variable_oid, json[QString("variableOid")]);
    m_variable_oid_isSet = !json[QString("variableOid")].isNull() && m_variable_oid_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_form_key_isValid = ::OpenAPI::fromJsonValue(m_form_key, json[QString("formKey")]);
    m_form_key_isSet = !json[QString("formKey")].isNull() && m_form_key_isValid;

    m_form_name_isValid = ::OpenAPI::fromJsonValue(m_form_name, json[QString("formName")]);
    m_form_name_isSet = !json[QString("formName")].isNull() && m_form_name_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_blinded_isValid = ::OpenAPI::fromJsonValue(m_blinded, json[QString("blinded")]);
    m_blinded_isSet = !json[QString("blinded")].isNull() && m_blinded_isValid;
}

QString OAIVariable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVariable::asJsonObject() const {
    QJsonObject obj;
    if (m_study_key_isSet) {
        obj.insert(QString("studyKey"), ::OpenAPI::toJsonValue(m_study_key));
    }
    if (m_variable_id_isSet) {
        obj.insert(QString("variableId"), ::OpenAPI::toJsonValue(m_variable_id));
    }
    if (m_variable_type_isSet) {
        obj.insert(QString("variableType"), ::OpenAPI::toJsonValue(m_variable_type));
    }
    if (m_variable_name_isSet) {
        obj.insert(QString("variableName"), ::OpenAPI::toJsonValue(m_variable_name));
    }
    if (m_sequence_isSet) {
        obj.insert(QString("sequence"), ::OpenAPI::toJsonValue(m_sequence));
    }
    if (m_revision_isSet) {
        obj.insert(QString("revision"), ::OpenAPI::toJsonValue(m_revision));
    }
    if (m_disabled_isSet) {
        obj.insert(QString("disabled"), ::OpenAPI::toJsonValue(m_disabled));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_form_id_isSet) {
        obj.insert(QString("formId"), ::OpenAPI::toJsonValue(m_form_id));
    }
    if (m_variable_oid_isSet) {
        obj.insert(QString("variableOid"), ::OpenAPI::toJsonValue(m_variable_oid));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_form_key_isSet) {
        obj.insert(QString("formKey"), ::OpenAPI::toJsonValue(m_form_key));
    }
    if (m_form_name_isSet) {
        obj.insert(QString("formName"), ::OpenAPI::toJsonValue(m_form_name));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_blinded_isSet) {
        obj.insert(QString("blinded"), ::OpenAPI::toJsonValue(m_blinded));
    }
    return obj;
}

QString OAIVariable::getStudyKey() const {
    return m_study_key;
}
void OAIVariable::setStudyKey(const QString &study_key) {
    m_study_key = study_key;
    m_study_key_isSet = true;
}

bool OAIVariable::is_study_key_Set() const{
    return m_study_key_isSet;
}

bool OAIVariable::is_study_key_Valid() const{
    return m_study_key_isValid;
}

qint32 OAIVariable::getVariableId() const {
    return m_variable_id;
}
void OAIVariable::setVariableId(const qint32 &variable_id) {
    m_variable_id = variable_id;
    m_variable_id_isSet = true;
}

bool OAIVariable::is_variable_id_Set() const{
    return m_variable_id_isSet;
}

bool OAIVariable::is_variable_id_Valid() const{
    return m_variable_id_isValid;
}

QString OAIVariable::getVariableType() const {
    return m_variable_type;
}
void OAIVariable::setVariableType(const QString &variable_type) {
    m_variable_type = variable_type;
    m_variable_type_isSet = true;
}

bool OAIVariable::is_variable_type_Set() const{
    return m_variable_type_isSet;
}

bool OAIVariable::is_variable_type_Valid() const{
    return m_variable_type_isValid;
}

QString OAIVariable::getVariableName() const {
    return m_variable_name;
}
void OAIVariable::setVariableName(const QString &variable_name) {
    m_variable_name = variable_name;
    m_variable_name_isSet = true;
}

bool OAIVariable::is_variable_name_Set() const{
    return m_variable_name_isSet;
}

bool OAIVariable::is_variable_name_Valid() const{
    return m_variable_name_isValid;
}

qint32 OAIVariable::getSequence() const {
    return m_sequence;
}
void OAIVariable::setSequence(const qint32 &sequence) {
    m_sequence = sequence;
    m_sequence_isSet = true;
}

bool OAIVariable::is_sequence_Set() const{
    return m_sequence_isSet;
}

bool OAIVariable::is_sequence_Valid() const{
    return m_sequence_isValid;
}

qint32 OAIVariable::getRevision() const {
    return m_revision;
}
void OAIVariable::setRevision(const qint32 &revision) {
    m_revision = revision;
    m_revision_isSet = true;
}

bool OAIVariable::is_revision_Set() const{
    return m_revision_isSet;
}

bool OAIVariable::is_revision_Valid() const{
    return m_revision_isValid;
}

bool OAIVariable::isDisabled() const {
    return m_disabled;
}
void OAIVariable::setDisabled(const bool &disabled) {
    m_disabled = disabled;
    m_disabled_isSet = true;
}

bool OAIVariable::is_disabled_Set() const{
    return m_disabled_isSet;
}

bool OAIVariable::is_disabled_Valid() const{
    return m_disabled_isValid;
}

QString OAIVariable::getDateCreated() const {
    return m_date_created;
}
void OAIVariable::setDateCreated(const QString &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIVariable::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIVariable::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIVariable::getDateModified() const {
    return m_date_modified;
}
void OAIVariable::setDateModified(const QString &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIVariable::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIVariable::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

qint32 OAIVariable::getFormId() const {
    return m_form_id;
}
void OAIVariable::setFormId(const qint32 &form_id) {
    m_form_id = form_id;
    m_form_id_isSet = true;
}

bool OAIVariable::is_form_id_Set() const{
    return m_form_id_isSet;
}

bool OAIVariable::is_form_id_Valid() const{
    return m_form_id_isValid;
}

QString OAIVariable::getVariableOid() const {
    return m_variable_oid;
}
void OAIVariable::setVariableOid(const QString &variable_oid) {
    m_variable_oid = variable_oid;
    m_variable_oid_isSet = true;
}

bool OAIVariable::is_variable_oid_Set() const{
    return m_variable_oid_isSet;
}

bool OAIVariable::is_variable_oid_Valid() const{
    return m_variable_oid_isValid;
}

bool OAIVariable::isDeleted() const {
    return m_deleted;
}
void OAIVariable::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIVariable::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIVariable::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIVariable::getFormKey() const {
    return m_form_key;
}
void OAIVariable::setFormKey(const QString &form_key) {
    m_form_key = form_key;
    m_form_key_isSet = true;
}

bool OAIVariable::is_form_key_Set() const{
    return m_form_key_isSet;
}

bool OAIVariable::is_form_key_Valid() const{
    return m_form_key_isValid;
}

QString OAIVariable::getFormName() const {
    return m_form_name;
}
void OAIVariable::setFormName(const QString &form_name) {
    m_form_name = form_name;
    m_form_name_isSet = true;
}

bool OAIVariable::is_form_name_Set() const{
    return m_form_name_isSet;
}

bool OAIVariable::is_form_name_Valid() const{
    return m_form_name_isValid;
}

QString OAIVariable::getLabel() const {
    return m_label;
}
void OAIVariable::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIVariable::is_label_Set() const{
    return m_label_isSet;
}

bool OAIVariable::is_label_Valid() const{
    return m_label_isValid;
}

bool OAIVariable::isBlinded() const {
    return m_blinded;
}
void OAIVariable::setBlinded(const bool &blinded) {
    m_blinded = blinded;
    m_blinded_isSet = true;
}

bool OAIVariable::is_blinded_Set() const{
    return m_blinded_isSet;
}

bool OAIVariable::is_blinded_Valid() const{
    return m_blinded_isValid;
}

bool OAIVariable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_study_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_oid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blinded_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVariable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
