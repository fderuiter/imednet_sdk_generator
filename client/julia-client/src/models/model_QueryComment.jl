# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""QueryComment

    QueryComment(;
        sequence=nothing,
        annotationStatus=nothing,
        user=nothing,
        comment=nothing,
        closed=nothing,
        date=nothing,
    )

    - sequence::Int64 : Sequence number of the comment/action in the query history
    - annotationStatus::String : Status of the query after this comment (e.g., Open, Closed)
    - user::String : Username of the user who made the comment or action
    - comment::String : Text of the comment
    - closed::Bool : Whether the query was marked closed at this step
    - date::String : Date of the comment or action
"""
Base.@kwdef mutable struct QueryComment <: OpenAPI.APIModel
    sequence::Union{Nothing, Int64} = nothing
    annotationStatus::Union{Nothing, String} = nothing
    user::Union{Nothing, String} = nothing
    comment::Union{Nothing, String} = nothing
    closed::Union{Nothing, Bool} = nothing
    date::Union{Nothing, String} = nothing

    function QueryComment(sequence, annotationStatus, user, comment, closed, date, )
        o = new(sequence, annotationStatus, user, comment, closed, date, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type QueryComment

const _property_types_QueryComment = Dict{Symbol,String}(Symbol("sequence")=>"Int64", Symbol("annotationStatus")=>"String", Symbol("user")=>"String", Symbol("comment")=>"String", Symbol("closed")=>"Bool", Symbol("date")=>"String", )
OpenAPI.property_type(::Type{ QueryComment }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_QueryComment[name]))}

function OpenAPI.check_required(o::QueryComment)
    true
end

function OpenAPI.validate_properties(o::QueryComment)
    OpenAPI.validate_property(QueryComment, Symbol("sequence"), o.sequence)
    OpenAPI.validate_property(QueryComment, Symbol("annotationStatus"), o.annotationStatus)
    OpenAPI.validate_property(QueryComment, Symbol("user"), o.user)
    OpenAPI.validate_property(QueryComment, Symbol("comment"), o.comment)
    OpenAPI.validate_property(QueryComment, Symbol("closed"), o.closed)
    OpenAPI.validate_property(QueryComment, Symbol("date"), o.date)
end

function OpenAPI.validate_property(::Type{ QueryComment }, name::Symbol, val)






end
