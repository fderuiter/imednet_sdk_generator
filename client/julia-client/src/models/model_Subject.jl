# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Subject

    Subject(;
        studyKey=nothing,
        subjectId=nothing,
        subjectOid=nothing,
        subjectKey=nothing,
        subjectStatus=nothing,
        siteId=nothing,
        siteName=nothing,
        deleted=nothing,
        enrollmentStartDate=nothing,
        dateCreated=nothing,
        dateModified=nothing,
        keywords=nothing,
    )

    - studyKey::String : Unique study key
    - subjectId::Int64 : Mednet subject ID (internal numeric ID)
    - subjectOid::String : Client-assigned subject object identifier (OID)
    - subjectKey::String : Protocol-assigned subject identifier (display ID)
    - subjectStatus::String : Current status of the subject (e.g., Enrolled)
    - siteId::Int64 : Mednet site ID the subject is associated with
    - siteName::String : Name of the site the subject is associated with
    - deleted::Bool : Whether the subject is marked as deleted
    - enrollmentStartDate::String : Subjectâ€™s enrollment start date
    - dateCreated::String : Date when this subject record was created
    - dateModified::String : Date when this subject record was last modified
    - keywords::Vector{Keyword} : List of keywords associated with the subject
"""
Base.@kwdef mutable struct Subject <: OpenAPI.APIModel
    studyKey::Union{Nothing, String} = nothing
    subjectId::Union{Nothing, Int64} = nothing
    subjectOid::Union{Nothing, String} = nothing
    subjectKey::Union{Nothing, String} = nothing
    subjectStatus::Union{Nothing, String} = nothing
    siteId::Union{Nothing, Int64} = nothing
    siteName::Union{Nothing, String} = nothing
    deleted::Union{Nothing, Bool} = nothing
    enrollmentStartDate::Union{Nothing, String} = nothing
    dateCreated::Union{Nothing, String} = nothing
    dateModified::Union{Nothing, String} = nothing
    keywords::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Keyword} }

    function Subject(studyKey, subjectId, subjectOid, subjectKey, subjectStatus, siteId, siteName, deleted, enrollmentStartDate, dateCreated, dateModified, keywords, )
        o = new(studyKey, subjectId, subjectOid, subjectKey, subjectStatus, siteId, siteName, deleted, enrollmentStartDate, dateCreated, dateModified, keywords, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Subject

const _property_types_Subject = Dict{Symbol,String}(Symbol("studyKey")=>"String", Symbol("subjectId")=>"Int64", Symbol("subjectOid")=>"String", Symbol("subjectKey")=>"String", Symbol("subjectStatus")=>"String", Symbol("siteId")=>"Int64", Symbol("siteName")=>"String", Symbol("deleted")=>"Bool", Symbol("enrollmentStartDate")=>"String", Symbol("dateCreated")=>"String", Symbol("dateModified")=>"String", Symbol("keywords")=>"Vector{Keyword}", )
OpenAPI.property_type(::Type{ Subject }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Subject[name]))}

function OpenAPI.check_required(o::Subject)
    true
end

function OpenAPI.validate_properties(o::Subject)
    OpenAPI.validate_property(Subject, Symbol("studyKey"), o.studyKey)
    OpenAPI.validate_property(Subject, Symbol("subjectId"), o.subjectId)
    OpenAPI.validate_property(Subject, Symbol("subjectOid"), o.subjectOid)
    OpenAPI.validate_property(Subject, Symbol("subjectKey"), o.subjectKey)
    OpenAPI.validate_property(Subject, Symbol("subjectStatus"), o.subjectStatus)
    OpenAPI.validate_property(Subject, Symbol("siteId"), o.siteId)
    OpenAPI.validate_property(Subject, Symbol("siteName"), o.siteName)
    OpenAPI.validate_property(Subject, Symbol("deleted"), o.deleted)
    OpenAPI.validate_property(Subject, Symbol("enrollmentStartDate"), o.enrollmentStartDate)
    OpenAPI.validate_property(Subject, Symbol("dateCreated"), o.dateCreated)
    OpenAPI.validate_property(Subject, Symbol("dateModified"), o.dateModified)
    OpenAPI.validate_property(Subject, Symbol("keywords"), o.keywords)
end

function OpenAPI.validate_property(::Type{ Subject }, name::Symbol, val)












end
