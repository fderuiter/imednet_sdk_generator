# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Interval

    Interval(;
        studyKey=nothing,
        intervalId=nothing,
        intervalName=nothing,
        intervalDescription=nothing,
        intervalSequence=nothing,
        intervalGroupId=nothing,
        intervalGroupName=nothing,
        timeline=nothing,
        definedUsingInterval=nothing,
        windowCalculationForm=nothing,
        windowCalculationDate=nothing,
        actualDateForm=nothing,
        actualDate=nothing,
        dueDateWillBeIn=nothing,
        negativeSlack=nothing,
        positiveSlack=nothing,
        eproGracePeriod=nothing,
        forms=nothing,
        disabled=nothing,
        dateCreated=nothing,
        dateModified=nothing,
    )

    - studyKey::String : Unique study key
    - intervalId::Int64 : Unique system identifier for the interval (visit definition)
    - intervalName::String : Name of the interval (visit) as defined in the study
    - intervalDescription::String : Description of the interval (visit)
    - intervalSequence::Int64 : Sequence number of the interval in the schedule
    - intervalGroupId::Int64 : Identifier for the interval group (if intervals are grouped)
    - intervalGroupName::String : Name of the interval group
    - timeline::String : Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
    - definedUsingInterval::String : Baseline interval used for calculating this intervalâ€™s dates
    - windowCalculationForm::String : Baseline form (name) from which the calculation date is taken
    - windowCalculationDate::String : Baseline field (variable name) from which the calculation date is taken
    - actualDateForm::String : Form used to capture the actual date for this interval
    - actualDate::String : Field (variable name) used to capture the actual date for this interval
    - dueDateWillBeIn::Int64 : Number of days from the calculation date when the interval is due
    - negativeSlack::Int64 : Number of days before the due date that are allowed (negative window)
    - positiveSlack::Int64 : Number of days after the due date that are allowed (positive window)
    - eproGracePeriod::Int64 : Number of days of grace period for ePRO completion after due date
    - forms::Vector{ComponentsSchemasIntervalFormsItem} : List of forms that are scheduled in this interval
    - disabled::Bool : Whether the interval is soft-deleted (disabled)
    - dateCreated::String : Date when this interval was created
    - dateModified::String : Date when this interval was last modified
"""
Base.@kwdef mutable struct Interval <: OpenAPI.APIModel
    studyKey::Union{Nothing, String} = nothing
    intervalId::Union{Nothing, Int64} = nothing
    intervalName::Union{Nothing, String} = nothing
    intervalDescription::Union{Nothing, String} = nothing
    intervalSequence::Union{Nothing, Int64} = nothing
    intervalGroupId::Union{Nothing, Int64} = nothing
    intervalGroupName::Union{Nothing, String} = nothing
    timeline::Union{Nothing, String} = nothing
    definedUsingInterval::Union{Nothing, String} = nothing
    windowCalculationForm::Union{Nothing, String} = nothing
    windowCalculationDate::Union{Nothing, String} = nothing
    actualDateForm::Union{Nothing, String} = nothing
    actualDate::Union{Nothing, String} = nothing
    dueDateWillBeIn::Union{Nothing, Int64} = nothing
    negativeSlack::Union{Nothing, Int64} = nothing
    positiveSlack::Union{Nothing, Int64} = nothing
    eproGracePeriod::Union{Nothing, Int64} = nothing
    forms::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{ComponentsSchemasIntervalFormsItem} }
    disabled::Union{Nothing, Bool} = nothing
    dateCreated::Union{Nothing, String} = nothing
    dateModified::Union{Nothing, String} = nothing

    function Interval(studyKey, intervalId, intervalName, intervalDescription, intervalSequence, intervalGroupId, intervalGroupName, timeline, definedUsingInterval, windowCalculationForm, windowCalculationDate, actualDateForm, actualDate, dueDateWillBeIn, negativeSlack, positiveSlack, eproGracePeriod, forms, disabled, dateCreated, dateModified, )
        o = new(studyKey, intervalId, intervalName, intervalDescription, intervalSequence, intervalGroupId, intervalGroupName, timeline, definedUsingInterval, windowCalculationForm, windowCalculationDate, actualDateForm, actualDate, dueDateWillBeIn, negativeSlack, positiveSlack, eproGracePeriod, forms, disabled, dateCreated, dateModified, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Interval

const _property_types_Interval = Dict{Symbol,String}(Symbol("studyKey")=>"String", Symbol("intervalId")=>"Int64", Symbol("intervalName")=>"String", Symbol("intervalDescription")=>"String", Symbol("intervalSequence")=>"Int64", Symbol("intervalGroupId")=>"Int64", Symbol("intervalGroupName")=>"String", Symbol("timeline")=>"String", Symbol("definedUsingInterval")=>"String", Symbol("windowCalculationForm")=>"String", Symbol("windowCalculationDate")=>"String", Symbol("actualDateForm")=>"String", Symbol("actualDate")=>"String", Symbol("dueDateWillBeIn")=>"Int64", Symbol("negativeSlack")=>"Int64", Symbol("positiveSlack")=>"Int64", Symbol("eproGracePeriod")=>"Int64", Symbol("forms")=>"Vector{ComponentsSchemasIntervalFormsItem}", Symbol("disabled")=>"Bool", Symbol("dateCreated")=>"String", Symbol("dateModified")=>"String", )
OpenAPI.property_type(::Type{ Interval }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Interval[name]))}

function OpenAPI.check_required(o::Interval)
    true
end

function OpenAPI.validate_properties(o::Interval)
    OpenAPI.validate_property(Interval, Symbol("studyKey"), o.studyKey)
    OpenAPI.validate_property(Interval, Symbol("intervalId"), o.intervalId)
    OpenAPI.validate_property(Interval, Symbol("intervalName"), o.intervalName)
    OpenAPI.validate_property(Interval, Symbol("intervalDescription"), o.intervalDescription)
    OpenAPI.validate_property(Interval, Symbol("intervalSequence"), o.intervalSequence)
    OpenAPI.validate_property(Interval, Symbol("intervalGroupId"), o.intervalGroupId)
    OpenAPI.validate_property(Interval, Symbol("intervalGroupName"), o.intervalGroupName)
    OpenAPI.validate_property(Interval, Symbol("timeline"), o.timeline)
    OpenAPI.validate_property(Interval, Symbol("definedUsingInterval"), o.definedUsingInterval)
    OpenAPI.validate_property(Interval, Symbol("windowCalculationForm"), o.windowCalculationForm)
    OpenAPI.validate_property(Interval, Symbol("windowCalculationDate"), o.windowCalculationDate)
    OpenAPI.validate_property(Interval, Symbol("actualDateForm"), o.actualDateForm)
    OpenAPI.validate_property(Interval, Symbol("actualDate"), o.actualDate)
    OpenAPI.validate_property(Interval, Symbol("dueDateWillBeIn"), o.dueDateWillBeIn)
    OpenAPI.validate_property(Interval, Symbol("negativeSlack"), o.negativeSlack)
    OpenAPI.validate_property(Interval, Symbol("positiveSlack"), o.positiveSlack)
    OpenAPI.validate_property(Interval, Symbol("eproGracePeriod"), o.eproGracePeriod)
    OpenAPI.validate_property(Interval, Symbol("forms"), o.forms)
    OpenAPI.validate_property(Interval, Symbol("disabled"), o.disabled)
    OpenAPI.validate_property(Interval, Symbol("dateCreated"), o.dateCreated)
    OpenAPI.validate_property(Interval, Symbol("dateModified"), o.dateModified)
end

function OpenAPI.validate_property(::Type{ Interval }, name::Symbol, val)





















end
