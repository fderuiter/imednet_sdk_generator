# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Record

    Record(;
        studyKey=nothing,
        intervalId=nothing,
        formId=nothing,
        formKey=nothing,
        siteId=nothing,
        recordId=nothing,
        recordOid=nothing,
        recordType=nothing,
        recordStatus=nothing,
        deleted=nothing,
        dateCreated=nothing,
        dateModified=nothing,
        subjectId=nothing,
        subjectOid=nothing,
        subjectKey=nothing,
        visitId=nothing,
        parentRecordId=nothing,
        keywords=nothing,
        recordData=nothing,
    )

    - studyKey::String : Unique study key
    - intervalId::Int64 : Interval ID (visit definition) that this record is associated with
    - formId::Int64 : Form ID of the form this record instance belongs to
    - formKey::String : Form key of the form for this record instance
    - siteId::Int64 : Site ID associated with the record
    - recordId::Int64 : Unique record ID
    - recordOid::String : Client-assigned record OID
    - recordType::String : Type of record (e.g., SUBJECT for subject-related forms)
    - recordStatus::String : Current status of the record (e.g., Record Incomplete, Record Complete)
    - deleted::Bool : Whether the record is marked as deleted
    - dateCreated::String : Date when this record was created
    - dateModified::String : Date when this record was last modified
    - subjectId::Int64 : Mednet subject ID that this record is associated with
    - subjectOid::String : Client-assigned subject OID for the subject this record is associated with
    - subjectKey::String : Subject display ID that this record is associated with
    - visitId::Int64 : Visit instance ID that this record is associated with (if applicable)
    - parentRecordId::Int64 : Record ID of the parent record if this record is a subrecord (if applicable)
    - keywords::Vector{Keyword} : List of keywords associated with the record
    - recordData::Dict{String, Any} : Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.
"""
Base.@kwdef mutable struct Record <: OpenAPI.APIModel
    studyKey::Union{Nothing, String} = nothing
    intervalId::Union{Nothing, Int64} = nothing
    formId::Union{Nothing, Int64} = nothing
    formKey::Union{Nothing, String} = nothing
    siteId::Union{Nothing, Int64} = nothing
    recordId::Union{Nothing, Int64} = nothing
    recordOid::Union{Nothing, String} = nothing
    recordType::Union{Nothing, String} = nothing
    recordStatus::Union{Nothing, String} = nothing
    deleted::Union{Nothing, Bool} = nothing
    dateCreated::Union{Nothing, String} = nothing
    dateModified::Union{Nothing, String} = nothing
    subjectId::Union{Nothing, Int64} = nothing
    subjectOid::Union{Nothing, String} = nothing
    subjectKey::Union{Nothing, String} = nothing
    visitId::Union{Nothing, Int64} = nothing
    parentRecordId::Union{Nothing, Int64} = nothing
    keywords::Union{Nothing, Vector} = nothing # spec type: Union{ Nothing, Vector{Keyword} }
    recordData::Union{Nothing, Dict{String, Any}} = nothing

    function Record(studyKey, intervalId, formId, formKey, siteId, recordId, recordOid, recordType, recordStatus, deleted, dateCreated, dateModified, subjectId, subjectOid, subjectKey, visitId, parentRecordId, keywords, recordData, )
        o = new(studyKey, intervalId, formId, formKey, siteId, recordId, recordOid, recordType, recordStatus, deleted, dateCreated, dateModified, subjectId, subjectOid, subjectKey, visitId, parentRecordId, keywords, recordData, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Record

const _property_types_Record = Dict{Symbol,String}(Symbol("studyKey")=>"String", Symbol("intervalId")=>"Int64", Symbol("formId")=>"Int64", Symbol("formKey")=>"String", Symbol("siteId")=>"Int64", Symbol("recordId")=>"Int64", Symbol("recordOid")=>"String", Symbol("recordType")=>"String", Symbol("recordStatus")=>"String", Symbol("deleted")=>"Bool", Symbol("dateCreated")=>"String", Symbol("dateModified")=>"String", Symbol("subjectId")=>"Int64", Symbol("subjectOid")=>"String", Symbol("subjectKey")=>"String", Symbol("visitId")=>"Int64", Symbol("parentRecordId")=>"Int64", Symbol("keywords")=>"Vector{Keyword}", Symbol("recordData")=>"Dict{String, Any}", )
OpenAPI.property_type(::Type{ Record }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Record[name]))}

function OpenAPI.check_required(o::Record)
    true
end

function OpenAPI.validate_properties(o::Record)
    OpenAPI.validate_property(Record, Symbol("studyKey"), o.studyKey)
    OpenAPI.validate_property(Record, Symbol("intervalId"), o.intervalId)
    OpenAPI.validate_property(Record, Symbol("formId"), o.formId)
    OpenAPI.validate_property(Record, Symbol("formKey"), o.formKey)
    OpenAPI.validate_property(Record, Symbol("siteId"), o.siteId)
    OpenAPI.validate_property(Record, Symbol("recordId"), o.recordId)
    OpenAPI.validate_property(Record, Symbol("recordOid"), o.recordOid)
    OpenAPI.validate_property(Record, Symbol("recordType"), o.recordType)
    OpenAPI.validate_property(Record, Symbol("recordStatus"), o.recordStatus)
    OpenAPI.validate_property(Record, Symbol("deleted"), o.deleted)
    OpenAPI.validate_property(Record, Symbol("dateCreated"), o.dateCreated)
    OpenAPI.validate_property(Record, Symbol("dateModified"), o.dateModified)
    OpenAPI.validate_property(Record, Symbol("subjectId"), o.subjectId)
    OpenAPI.validate_property(Record, Symbol("subjectOid"), o.subjectOid)
    OpenAPI.validate_property(Record, Symbol("subjectKey"), o.subjectKey)
    OpenAPI.validate_property(Record, Symbol("visitId"), o.visitId)
    OpenAPI.validate_property(Record, Symbol("parentRecordId"), o.parentRecordId)
    OpenAPI.validate_property(Record, Symbol("keywords"), o.keywords)
    OpenAPI.validate_property(Record, Symbol("recordData"), o.recordData)
end

function OpenAPI.validate_property(::Type{ Record }, name::Symbol, val)



















end
