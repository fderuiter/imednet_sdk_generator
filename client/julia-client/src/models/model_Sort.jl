# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Sort

    Sort(;
        property=nothing,
        direction=nothing,
    )

    - property::String : Name of the property by which the result is sorted
    - direction::String : Sort direction (ASC or DESC)
"""
Base.@kwdef mutable struct Sort <: OpenAPI.APIModel
    property::Union{Nothing, String} = nothing
    direction::Union{Nothing, String} = nothing

    function Sort(property, direction, )
        o = new(property, direction, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Sort

const _property_types_Sort = Dict{Symbol,String}(Symbol("property")=>"String", Symbol("direction")=>"String", )
OpenAPI.property_type(::Type{ Sort }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Sort[name]))}

function OpenAPI.check_required(o::Sort)
    true
end

function OpenAPI.validate_properties(o::Sort)
    OpenAPI.validate_property(Sort, Symbol("property"), o.property)
    OpenAPI.validate_property(Sort, Symbol("direction"), o.direction)
end

function OpenAPI.validate_property(::Type{ Sort }, name::Symbol, val)


    if name === Symbol("direction")
        OpenAPI.validate_param(name, "Sort", :enum, val, ["ASC", "DESC"])
    end

end
