# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""Variable

    Variable(;
        studyKey=nothing,
        variableId=nothing,
        variableType=nothing,
        variableName=nothing,
        sequence=nothing,
        revision=nothing,
        disabled=nothing,
        dateCreated=nothing,
        dateModified=nothing,
        formId=nothing,
        variableOid=nothing,
        deleted=nothing,
        formKey=nothing,
        formName=nothing,
        label=nothing,
        blinded=nothing,
    )

    - studyKey::String : Unique study key
    - variableId::Int64 : Mednet variable ID
    - variableType::String : Type of the variable (field type), e.g., RADIO, TEXT, etc.
    - variableName::String : Name of the variable (question text or label)
    - sequence::Int64 : Sequence of the variable on the form
    - revision::Int64 : Number of modifications of the variable (via form metadata revisions)
    - disabled::Bool : Whether the variable is marked as disabled (deleted)
    - dateCreated::String : Date when this variable was created
    - dateModified::String : Date when this variable was last modified
    - formId::Int64 : ID of the form that this variable belongs to
    - variableOid::String : Client-assigned variable OID
    - deleted::Bool : Whether the variable is marked as deleted
    - formKey::String : Form key of the form that this variable belongs to
    - formName::String : Name of the form that this variable belongs to
    - label::String : User-defined identifier (field name) for the variable
    - blinded::Bool : Whether the variable is flagged as blinded (hidden in certain contexts)
"""
Base.@kwdef mutable struct Variable <: OpenAPI.APIModel
    studyKey::Union{Nothing, String} = nothing
    variableId::Union{Nothing, Int64} = nothing
    variableType::Union{Nothing, String} = nothing
    variableName::Union{Nothing, String} = nothing
    sequence::Union{Nothing, Int64} = nothing
    revision::Union{Nothing, Int64} = nothing
    disabled::Union{Nothing, Bool} = nothing
    dateCreated::Union{Nothing, String} = nothing
    dateModified::Union{Nothing, String} = nothing
    formId::Union{Nothing, Int64} = nothing
    variableOid::Union{Nothing, String} = nothing
    deleted::Union{Nothing, Bool} = nothing
    formKey::Union{Nothing, String} = nothing
    formName::Union{Nothing, String} = nothing
    label::Union{Nothing, String} = nothing
    blinded::Union{Nothing, Bool} = nothing

    function Variable(studyKey, variableId, variableType, variableName, sequence, revision, disabled, dateCreated, dateModified, formId, variableOid, deleted, formKey, formName, label, blinded, )
        o = new(studyKey, variableId, variableType, variableName, sequence, revision, disabled, dateCreated, dateModified, formId, variableOid, deleted, formKey, formName, label, blinded, )
        OpenAPI.validate_properties(o)
        return o
    end
end # type Variable

const _property_types_Variable = Dict{Symbol,String}(Symbol("studyKey")=>"String", Symbol("variableId")=>"Int64", Symbol("variableType")=>"String", Symbol("variableName")=>"String", Symbol("sequence")=>"Int64", Symbol("revision")=>"Int64", Symbol("disabled")=>"Bool", Symbol("dateCreated")=>"String", Symbol("dateModified")=>"String", Symbol("formId")=>"Int64", Symbol("variableOid")=>"String", Symbol("deleted")=>"Bool", Symbol("formKey")=>"String", Symbol("formName")=>"String", Symbol("label")=>"String", Symbol("blinded")=>"Bool", )
OpenAPI.property_type(::Type{ Variable }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Variable[name]))}

function OpenAPI.check_required(o::Variable)
    true
end

function OpenAPI.validate_properties(o::Variable)
    OpenAPI.validate_property(Variable, Symbol("studyKey"), o.studyKey)
    OpenAPI.validate_property(Variable, Symbol("variableId"), o.variableId)
    OpenAPI.validate_property(Variable, Symbol("variableType"), o.variableType)
    OpenAPI.validate_property(Variable, Symbol("variableName"), o.variableName)
    OpenAPI.validate_property(Variable, Symbol("sequence"), o.sequence)
    OpenAPI.validate_property(Variable, Symbol("revision"), o.revision)
    OpenAPI.validate_property(Variable, Symbol("disabled"), o.disabled)
    OpenAPI.validate_property(Variable, Symbol("dateCreated"), o.dateCreated)
    OpenAPI.validate_property(Variable, Symbol("dateModified"), o.dateModified)
    OpenAPI.validate_property(Variable, Symbol("formId"), o.formId)
    OpenAPI.validate_property(Variable, Symbol("variableOid"), o.variableOid)
    OpenAPI.validate_property(Variable, Symbol("deleted"), o.deleted)
    OpenAPI.validate_property(Variable, Symbol("formKey"), o.formKey)
    OpenAPI.validate_property(Variable, Symbol("formName"), o.formName)
    OpenAPI.validate_property(Variable, Symbol("label"), o.label)
    OpenAPI.validate_property(Variable, Symbol("blinded"), o.blinded)
end

function OpenAPI.validate_property(::Type{ Variable }, name::Symbol, val)



    if name === Symbol("variableType")
        OpenAPI.validate_param(name, "Variable", :enum, val, ["TEXT", "TEXTAREA", "RADIO", "CHECKBOX", "DROPDOWN", "DATE", "NUMBER"])
    end














end
