/** Mednet EDC API
  * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  *
  * The version of the OpenAPI document: 1.3.6
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** 
  * @param dateCreated Timestamp when the role assignment was created (as [year, month, day, hour, minute, second, nanosecond])
  * @param dateModified Timestamp when the role assignment was last modified
  * @param roleId Unique role ID (UUID)
  * @param communityId Community ID or level associated with the role
  * @param name Name of the role
  * @param description Description of the role
  * @param level Role level or hierarchy
  * @param `type` Role type/category
  * @param inactive Whether the role is inactive
  */
case class Role(
    dateCreated: Option[Seq[Int]] = None,
    dateModified: Option[Seq[Int]] = None,
    roleId: Option[String] = None,
    communityId: Option[Int] = None,
    name: Option[String] = None,
    description: Option[String] = None,
    level: Option[Int] = None,
    `type`: Option[String] = None,
    inactive: Option[Boolean] = None
)
  
object Role {
  given encoderRole: Encoder[Role] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.dateCreated.map(v => "dateCreated" -> v.asJson),
        t.dateModified.map(v => "dateModified" -> v.asJson),
        t.roleId.map(v => "roleId" -> v.asJson),
        t.communityId.map(v => "communityId" -> v.asJson),
        t.name.map(v => "name" -> v.asJson),
        t.description.map(v => "description" -> v.asJson),
        t.level.map(v => "level" -> v.asJson),
        t.`type`.map(v => "type" -> v.asJson),
        t.inactive.map(v => "inactive" -> v.asJson)
      ).flatten
    }
  }
  given decoderRole: Decoder[Role] = Decoder.instance { c =>
    for {
      dateCreated <- c.downField("dateCreated").as[Option[Seq[Int]]]
      dateModified <- c.downField("dateModified").as[Option[Seq[Int]]]
      roleId <- c.downField("roleId").as[Option[String]]
      communityId <- c.downField("communityId").as[Option[Int]]
      name <- c.downField("name").as[Option[String]]
      description <- c.downField("description").as[Option[String]]
      level <- c.downField("level").as[Option[Int]]
      `type` <- c.downField("type").as[Option[String]]
      inactive <- c.downField("inactive").as[Option[Boolean]]
    } yield Role(
      dateCreated = dateCreated,
      dateModified = dateModified,
      roleId = roleId,
      communityId = communityId,
      name = name,
      description = description,
      level = level,
      `type` = `type`,
      inactive = inactive
    )
  }
}

