/** Mednet EDC API
  * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  *
  * The version of the OpenAPI document: 1.3.6
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param studyKey Unique study key
  * @param variableId Mednet variable ID
  * @param variableType 
  * @param variableName Name of the variable (question text or label)
  * @param sequence Sequence of the variable on the form
  * @param revision Number of modifications of the variable (via form metadata revisions)
  * @param disabled Whether the variable is marked as disabled (deleted)
  * @param dateCreated Date when this variable was created
  * @param dateModified Date when this variable was last modified
  * @param formId ID of the form that this variable belongs to
  * @param variableOid Client-assigned variable OID
  * @param deleted Whether the variable is marked as deleted
  * @param formKey Form key of the form that this variable belongs to
  * @param formName Name of the form that this variable belongs to
  * @param label User-defined identifier (field name) for the variable
  * @param blinded Whether the variable is flagged as blinded (hidden in certain contexts)
  */
case class Variable(
    studyKey: Option[String] = None,
    variableId: Option[Int] = None,
    variableType: Option[VariableVariableType] = None,
    variableName: Option[String] = None,
    sequence: Option[Int] = None,
    revision: Option[Int] = None,
    disabled: Option[Boolean] = None,
    dateCreated: Option[String] = None,
    dateModified: Option[String] = None,
    formId: Option[Int] = None,
    variableOid: Option[String] = None,
    deleted: Option[Boolean] = None,
    formKey: Option[String] = None,
    formName: Option[String] = None,
    label: Option[String] = None,
    blinded: Option[Boolean] = None
)
  
object Variable {
  given encoderVariable: Encoder[Variable] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.studyKey.map(v => "studyKey" -> v.asJson),
        t.variableId.map(v => "variableId" -> v.asJson),
        t.variableType.map(v => "variableType" -> v.asJson),
        t.variableName.map(v => "variableName" -> v.asJson),
        t.sequence.map(v => "sequence" -> v.asJson),
        t.revision.map(v => "revision" -> v.asJson),
        t.disabled.map(v => "disabled" -> v.asJson),
        t.dateCreated.map(v => "dateCreated" -> v.asJson),
        t.dateModified.map(v => "dateModified" -> v.asJson),
        t.formId.map(v => "formId" -> v.asJson),
        t.variableOid.map(v => "variableOid" -> v.asJson),
        t.deleted.map(v => "deleted" -> v.asJson),
        t.formKey.map(v => "formKey" -> v.asJson),
        t.formName.map(v => "formName" -> v.asJson),
        t.label.map(v => "label" -> v.asJson),
        t.blinded.map(v => "blinded" -> v.asJson)
      ).flatten
    }
  }
  given decoderVariable: Decoder[Variable] = Decoder.instance { c =>
    for {
      studyKey <- c.downField("studyKey").as[Option[String]]
      variableId <- c.downField("variableId").as[Option[Int]]
      variableType <- mapEmptyStringToNull(c.downField("variableType")).as[Option[VariableVariableType]]
      variableName <- c.downField("variableName").as[Option[String]]
      sequence <- c.downField("sequence").as[Option[Int]]
      revision <- c.downField("revision").as[Option[Int]]
      disabled <- c.downField("disabled").as[Option[Boolean]]
      dateCreated <- c.downField("dateCreated").as[Option[String]]
      dateModified <- c.downField("dateModified").as[Option[String]]
      formId <- c.downField("formId").as[Option[Int]]
      variableOid <- c.downField("variableOid").as[Option[String]]
      deleted <- c.downField("deleted").as[Option[Boolean]]
      formKey <- c.downField("formKey").as[Option[String]]
      formName <- c.downField("formName").as[Option[String]]
      label <- c.downField("label").as[Option[String]]
      blinded <- c.downField("blinded").as[Option[Boolean]]
    } yield Variable(
      studyKey = studyKey,
      variableId = variableId,
      variableType = variableType,
      variableName = variableName,
      sequence = sequence,
      revision = revision,
      disabled = disabled,
      dateCreated = dateCreated,
      dateModified = dateModified,
      formId = formId,
      variableOid = variableOid,
      deleted = deleted,
      formKey = formKey,
      formName = formName,
      label = label,
      blinded = blinded
    )
  }
}

