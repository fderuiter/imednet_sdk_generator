/** Mednet EDC API
  * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  *
  * The version of the OpenAPI document: 1.3.6
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** 
  * @param studyKey Unique study key
  * @param subjectId Mednet subject ID associated with the query (if applicable)
  * @param subjectOid Client-assigned subject OID (if applicable)
  * @param annotationType Category/type of the query (e.g., subject, record, question)
  * @param annotationId Unique system identifier for the query
  * @param `type` System text identifier for the query type/location (subject, record, question)
  * @param description Description of the query (e.g., reason or context)
  * @param recordId Record ID associated with the query (if applicable)
  * @param variable Variable name (field) associated with the query (if applicable)
  * @param subjectKey Subject display ID associated with the query (if applicable)
  * @param dateCreated Date when the query was created
  * @param dateModified Date when the query was last modified
  * @param queryComments History of comments/actions on the query
  */
case class Query(
    studyKey: Option[String] = None,
    subjectId: Option[Int] = None,
    subjectOid: Option[String] = None,
    annotationType: Option[String] = None,
    annotationId: Option[Int] = None,
    `type`: Option[String] = None,
    description: Option[String] = None,
    recordId: Option[Int] = None,
    variable: Option[String] = None,
    subjectKey: Option[String] = None,
    dateCreated: Option[String] = None,
    dateModified: Option[String] = None,
    queryComments: Option[Seq[QueryComment]] = None
)
  
object Query {
  given encoderQuery: Encoder[Query] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.studyKey.map(v => "studyKey" -> v.asJson),
        t.subjectId.map(v => "subjectId" -> v.asJson),
        t.subjectOid.map(v => "subjectOid" -> v.asJson),
        t.annotationType.map(v => "annotationType" -> v.asJson),
        t.annotationId.map(v => "annotationId" -> v.asJson),
        t.`type`.map(v => "type" -> v.asJson),
        t.description.map(v => "description" -> v.asJson),
        t.recordId.map(v => "recordId" -> v.asJson),
        t.variable.map(v => "variable" -> v.asJson),
        t.subjectKey.map(v => "subjectKey" -> v.asJson),
        t.dateCreated.map(v => "dateCreated" -> v.asJson),
        t.dateModified.map(v => "dateModified" -> v.asJson),
        t.queryComments.map(v => "queryComments" -> v.asJson)
      ).flatten
    }
  }
  given decoderQuery: Decoder[Query] = Decoder.instance { c =>
    for {
      studyKey <- c.downField("studyKey").as[Option[String]]
      subjectId <- c.downField("subjectId").as[Option[Int]]
      subjectOid <- c.downField("subjectOid").as[Option[String]]
      annotationType <- c.downField("annotationType").as[Option[String]]
      annotationId <- c.downField("annotationId").as[Option[Int]]
      `type` <- c.downField("type").as[Option[String]]
      description <- c.downField("description").as[Option[String]]
      recordId <- c.downField("recordId").as[Option[Int]]
      variable <- c.downField("variable").as[Option[String]]
      subjectKey <- c.downField("subjectKey").as[Option[String]]
      dateCreated <- c.downField("dateCreated").as[Option[String]]
      dateModified <- c.downField("dateModified").as[Option[String]]
      queryComments <- c.downField("queryComments").as[Option[Seq[QueryComment]]]
    } yield Query(
      studyKey = studyKey,
      subjectId = subjectId,
      subjectOid = subjectOid,
      annotationType = annotationType,
      annotationId = annotationId,
      `type` = `type`,
      description = description,
      recordId = recordId,
      variable = variable,
      subjectKey = subjectKey,
      dateCreated = dateCreated,
      dateModified = dateModified,
      queryComments = queryComments
    )
  }
}

