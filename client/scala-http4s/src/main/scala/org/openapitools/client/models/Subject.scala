/** Mednet EDC API
  * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  *
  * The version of the OpenAPI document: 1.3.6
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** 
  * @param studyKey Unique study key
  * @param subjectId Mednet subject ID (internal numeric ID)
  * @param subjectOid Client-assigned subject object identifier (OID)
  * @param subjectKey Protocol-assigned subject identifier (display ID)
  * @param subjectStatus Current status of the subject (e.g., Enrolled)
  * @param siteId Mednet site ID the subject is associated with
  * @param siteName Name of the site the subject is associated with
  * @param deleted Whether the subject is marked as deleted
  * @param enrollmentStartDate Subjectâ€™s enrollment start date
  * @param dateCreated Date when this subject record was created
  * @param dateModified Date when this subject record was last modified
  * @param keywords List of keywords associated with the subject
  */
case class Subject(
    studyKey: Option[String] = None,
    subjectId: Option[Int] = None,
    subjectOid: Option[String] = None,
    subjectKey: Option[String] = None,
    subjectStatus: Option[String] = None,
    siteId: Option[Int] = None,
    siteName: Option[String] = None,
    deleted: Option[Boolean] = None,
    enrollmentStartDate: Option[String] = None,
    dateCreated: Option[String] = None,
    dateModified: Option[String] = None,
    keywords: Option[Seq[Keyword]] = None
)
  
object Subject {
  given encoderSubject: Encoder[Subject] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.studyKey.map(v => "studyKey" -> v.asJson),
        t.subjectId.map(v => "subjectId" -> v.asJson),
        t.subjectOid.map(v => "subjectOid" -> v.asJson),
        t.subjectKey.map(v => "subjectKey" -> v.asJson),
        t.subjectStatus.map(v => "subjectStatus" -> v.asJson),
        t.siteId.map(v => "siteId" -> v.asJson),
        t.siteName.map(v => "siteName" -> v.asJson),
        t.deleted.map(v => "deleted" -> v.asJson),
        t.enrollmentStartDate.map(v => "enrollmentStartDate" -> v.asJson),
        t.dateCreated.map(v => "dateCreated" -> v.asJson),
        t.dateModified.map(v => "dateModified" -> v.asJson),
        t.keywords.map(v => "keywords" -> v.asJson)
      ).flatten
    }
  }
  given decoderSubject: Decoder[Subject] = Decoder.instance { c =>
    for {
      studyKey <- c.downField("studyKey").as[Option[String]]
      subjectId <- c.downField("subjectId").as[Option[Int]]
      subjectOid <- c.downField("subjectOid").as[Option[String]]
      subjectKey <- c.downField("subjectKey").as[Option[String]]
      subjectStatus <- c.downField("subjectStatus").as[Option[String]]
      siteId <- c.downField("siteId").as[Option[Int]]
      siteName <- c.downField("siteName").as[Option[String]]
      deleted <- c.downField("deleted").as[Option[Boolean]]
      enrollmentStartDate <- c.downField("enrollmentStartDate").as[Option[String]]
      dateCreated <- c.downField("dateCreated").as[Option[String]]
      dateModified <- c.downField("dateModified").as[Option[String]]
      keywords <- c.downField("keywords").as[Option[Seq[Keyword]]]
    } yield Subject(
      studyKey = studyKey,
      subjectId = subjectId,
      subjectOid = subjectOid,
      subjectKey = subjectKey,
      subjectStatus = subjectStatus,
      siteId = siteId,
      siteName = siteName,
      deleted = deleted,
      enrollmentStartDate = enrollmentStartDate,
      dateCreated = dateCreated,
      dateModified = dateModified,
      keywords = keywords
    )
  }
}

