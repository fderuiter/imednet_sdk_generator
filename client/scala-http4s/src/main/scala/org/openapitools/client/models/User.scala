/** Mednet EDC API
  * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  *
  * The version of the OpenAPI document: 1.3.6
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** 
  * @param userId Unique user ID (UUID)
  * @param login User login name
  * @param firstName User first name
  * @param lastName User last name
  * @param email User email address
  * @param userActiveInStudy Whether the user is active in the given study
  * @param roles Roles that the user has in the study
  */
case class User(
    userId: Option[String] = None,
    login: Option[String] = None,
    firstName: Option[String] = None,
    lastName: Option[String] = None,
    email: Option[String] = None,
    userActiveInStudy: Option[Boolean] = None,
    roles: Option[Seq[Role]] = None
)
  
object User {
  given encoderUser: Encoder[User] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.userId.map(v => "userId" -> v.asJson),
        t.login.map(v => "login" -> v.asJson),
        t.firstName.map(v => "firstName" -> v.asJson),
        t.lastName.map(v => "lastName" -> v.asJson),
        t.email.map(v => "email" -> v.asJson),
        t.userActiveInStudy.map(v => "userActiveInStudy" -> v.asJson),
        t.roles.map(v => "roles" -> v.asJson)
      ).flatten
    }
  }
  given decoderUser: Decoder[User] = Decoder.instance { c =>
    for {
      userId <- c.downField("userId").as[Option[String]]
      login <- c.downField("login").as[Option[String]]
      firstName <- c.downField("firstName").as[Option[String]]
      lastName <- c.downField("lastName").as[Option[String]]
      email <- c.downField("email").as[Option[String]]
      userActiveInStudy <- c.downField("userActiveInStudy").as[Option[Boolean]]
      roles <- c.downField("roles").as[Option[Seq[Role]]]
    } yield User(
      userId = userId,
      login = login,
      firstName = firstName,
      lastName = lastName,
      email = email,
      userActiveInStudy = userActiveInStudy,
      roles = roles
    )
  }
}

