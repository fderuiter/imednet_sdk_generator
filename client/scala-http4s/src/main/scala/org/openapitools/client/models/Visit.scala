/** Mednet EDC API
  * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  *
  * The version of the OpenAPI document: 1.3.6
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param studyKey Unique study key
  * @param visitId Unique system identifier for the subject visit instance
  * @param intervalId Unique system identifier of the interval definition for this visit
  * @param intervalName Name of the interval (visit) for this visit instance
  * @param subjectId Mednet subject ID of the subject
  * @param subjectKey Protocol-assigned subject identifier
  * @param startDate Start date of the visit window (in YYYY-MM-DD format)
  * @param endDate End date of the visit window (in YYYY-MM-DD format)
  * @param dueDate Due date of the visit (in YYYY-MM-DD format), if applicable
  * @param visitDate Actual date the visit took place (in YYYY-MM-DD format)
  * @param visitDateForm Name of the form used to capture the actual visit date
  * @param visitDateQuestion Variable name of the field capturing the actual visit date
  * @param deleted Whether the visit instance is marked as deleted
  * @param dateCreated Date when this visit record was created
  * @param dateModified Date when this visit record was last modified
  */
case class Visit(
    studyKey: Option[String] = None,
    visitId: Option[Int] = None,
    intervalId: Option[Int] = None,
    intervalName: Option[String] = None,
    subjectId: Option[Int] = None,
    subjectKey: Option[String] = None,
    startDate: Option[String] = None,
    endDate: Option[String] = None,
    dueDate: Option[String] = None,
    visitDate: Option[String] = None,
    visitDateForm: Option[String] = None,
    visitDateQuestion: Option[String] = None,
    deleted: Option[Boolean] = None,
    dateCreated: Option[String] = None,
    dateModified: Option[String] = None
)
  
object Visit {
  given encoderVisit: Encoder[Visit] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.studyKey.map(v => "studyKey" -> v.asJson),
        t.visitId.map(v => "visitId" -> v.asJson),
        t.intervalId.map(v => "intervalId" -> v.asJson),
        t.intervalName.map(v => "intervalName" -> v.asJson),
        t.subjectId.map(v => "subjectId" -> v.asJson),
        t.subjectKey.map(v => "subjectKey" -> v.asJson),
        t.startDate.map(v => "startDate" -> v.asJson),
        t.endDate.map(v => "endDate" -> v.asJson),
        t.dueDate.map(v => "dueDate" -> v.asJson),
        t.visitDate.map(v => "visitDate" -> v.asJson),
        t.visitDateForm.map(v => "visitDateForm" -> v.asJson),
        t.visitDateQuestion.map(v => "visitDateQuestion" -> v.asJson),
        t.deleted.map(v => "deleted" -> v.asJson),
        t.dateCreated.map(v => "dateCreated" -> v.asJson),
        t.dateModified.map(v => "dateModified" -> v.asJson)
      ).flatten
    }
  }
  given decoderVisit: Decoder[Visit] = Decoder.instance { c =>
    for {
      studyKey <- c.downField("studyKey").as[Option[String]]
      visitId <- c.downField("visitId").as[Option[Int]]
      intervalId <- c.downField("intervalId").as[Option[Int]]
      intervalName <- c.downField("intervalName").as[Option[String]]
      subjectId <- c.downField("subjectId").as[Option[Int]]
      subjectKey <- c.downField("subjectKey").as[Option[String]]
      startDate <- c.downField("startDate").as[Option[String]]
      endDate <- c.downField("endDate").as[Option[String]]
      dueDate <- c.downField("dueDate").as[Option[String]]
      visitDate <- c.downField("visitDate").as[Option[String]]
      visitDateForm <- c.downField("visitDateForm").as[Option[String]]
      visitDateQuestion <- c.downField("visitDateQuestion").as[Option[String]]
      deleted <- c.downField("deleted").as[Option[Boolean]]
      dateCreated <- c.downField("dateCreated").as[Option[String]]
      dateModified <- c.downField("dateModified").as[Option[String]]
    } yield Visit(
      studyKey = studyKey,
      visitId = visitId,
      intervalId = intervalId,
      intervalName = intervalName,
      subjectId = subjectId,
      subjectKey = subjectKey,
      startDate = startDate,
      endDate = endDate,
      dueDate = dueDate,
      visitDate = visitDate,
      visitDateForm = visitDateForm,
      visitDateQuestion = visitDateQuestion,
      deleted = deleted,
      dateCreated = dateCreated,
      dateModified = dateModified
    )
  }
}

