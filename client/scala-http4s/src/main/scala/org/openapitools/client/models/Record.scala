/** Mednet EDC API
  * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  *
  * The version of the OpenAPI document: 1.3.6
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}

import scala.collection.immutable.Seq

/** 
  * @param studyKey Unique study key
  * @param intervalId Interval ID (visit definition) that this record is associated with
  * @param formId Form ID of the form this record instance belongs to
  * @param formKey Form key of the form for this record instance
  * @param siteId Site ID associated with the record
  * @param recordId Unique record ID
  * @param recordOid Client-assigned record OID
  * @param recordType Type of record (e.g., SUBJECT for subject-related forms)
  * @param recordStatus Current status of the record (e.g., Record Incomplete, Record Complete)
  * @param deleted Whether the record is marked as deleted
  * @param dateCreated Date when this record was created
  * @param dateModified Date when this record was last modified
  * @param subjectId Mednet subject ID that this record is associated with
  * @param subjectOid Client-assigned subject OID for the subject this record is associated with
  * @param subjectKey Subject display ID that this record is associated with
  * @param visitId Visit instance ID that this record is associated with (if applicable)
  * @param parentRecordId Record ID of the parent record if this record is a subrecord (if applicable)
  * @param keywords List of keywords associated with the record
  * @param recordData Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.
  */
case class Record(
    studyKey: Option[String] = None,
    intervalId: Option[Int] = None,
    formId: Option[Int] = None,
    formKey: Option[String] = None,
    siteId: Option[Int] = None,
    recordId: Option[Int] = None,
    recordOid: Option[String] = None,
    recordType: Option[String] = None,
    recordStatus: Option[String] = None,
    deleted: Option[Boolean] = None,
    dateCreated: Option[String] = None,
    dateModified: Option[String] = None,
    subjectId: Option[Int] = None,
    subjectOid: Option[String] = None,
    subjectKey: Option[String] = None,
    visitId: Option[Int] = None,
    parentRecordId: Option[Int] = None,
    keywords: Option[Seq[Keyword]] = None,
    recordData: Option[Map[String, AnyType]] = None
)
  
object Record {
  given encoderRecord: Encoder[Record] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.studyKey.map(v => "studyKey" -> v.asJson),
        t.intervalId.map(v => "intervalId" -> v.asJson),
        t.formId.map(v => "formId" -> v.asJson),
        t.formKey.map(v => "formKey" -> v.asJson),
        t.siteId.map(v => "siteId" -> v.asJson),
        t.recordId.map(v => "recordId" -> v.asJson),
        t.recordOid.map(v => "recordOid" -> v.asJson),
        t.recordType.map(v => "recordType" -> v.asJson),
        t.recordStatus.map(v => "recordStatus" -> v.asJson),
        t.deleted.map(v => "deleted" -> v.asJson),
        t.dateCreated.map(v => "dateCreated" -> v.asJson),
        t.dateModified.map(v => "dateModified" -> v.asJson),
        t.subjectId.map(v => "subjectId" -> v.asJson),
        t.subjectOid.map(v => "subjectOid" -> v.asJson),
        t.subjectKey.map(v => "subjectKey" -> v.asJson),
        t.visitId.map(v => "visitId" -> v.asJson),
        t.parentRecordId.map(v => "parentRecordId" -> v.asJson),
        t.keywords.map(v => "keywords" -> v.asJson),
        t.recordData.map(v => "recordData" -> v.asJson)
      ).flatten
    }
  }
  given decoderRecord: Decoder[Record] = Decoder.instance { c =>
    for {
      studyKey <- c.downField("studyKey").as[Option[String]]
      intervalId <- c.downField("intervalId").as[Option[Int]]
      formId <- c.downField("formId").as[Option[Int]]
      formKey <- c.downField("formKey").as[Option[String]]
      siteId <- c.downField("siteId").as[Option[Int]]
      recordId <- c.downField("recordId").as[Option[Int]]
      recordOid <- c.downField("recordOid").as[Option[String]]
      recordType <- c.downField("recordType").as[Option[String]]
      recordStatus <- c.downField("recordStatus").as[Option[String]]
      deleted <- c.downField("deleted").as[Option[Boolean]]
      dateCreated <- c.downField("dateCreated").as[Option[String]]
      dateModified <- c.downField("dateModified").as[Option[String]]
      subjectId <- c.downField("subjectId").as[Option[Int]]
      subjectOid <- c.downField("subjectOid").as[Option[String]]
      subjectKey <- c.downField("subjectKey").as[Option[String]]
      visitId <- c.downField("visitId").as[Option[Int]]
      parentRecordId <- c.downField("parentRecordId").as[Option[Int]]
      keywords <- c.downField("keywords").as[Option[Seq[Keyword]]]
      recordData <- c.downField("recordData").as[Option[Map[String, AnyType]]]
    } yield Record(
      studyKey = studyKey,
      intervalId = intervalId,
      formId = formId,
      formKey = formKey,
      siteId = siteId,
      recordId = recordId,
      recordOid = recordOid,
      recordType = recordType,
      recordStatus = recordStatus,
      deleted = deleted,
      dateCreated = dateCreated,
      dateModified = dateModified,
      subjectId = subjectId,
      subjectOid = subjectOid,
      subjectKey = subjectKey,
      visitId = visitId,
      parentRecordId = parentRecordId,
      keywords = keywords,
      recordData = recordData
    )
  }
}

