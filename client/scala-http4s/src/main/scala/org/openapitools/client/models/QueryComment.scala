/** Mednet EDC API
  * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  *
  * The version of the OpenAPI document: 1.3.6
  * Contact: team@openapitools.org
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech
  * Do not edit the class manually.
  */
package org.openapitools.client.models

import io.circe.*
import io.circe.syntax.*
import io.circe.{Decoder, Encoder}


/** 
  * @param sequence Sequence number of the comment/action in the query history
  * @param annotationStatus Status of the query after this comment (e.g., Open, Closed)
  * @param user Username of the user who made the comment or action
  * @param comment Text of the comment
  * @param closed Whether the query was marked closed at this step
  * @param date Date of the comment or action
  */
case class QueryComment(
    sequence: Option[Int] = None,
    annotationStatus: Option[String] = None,
    user: Option[String] = None,
    comment: Option[String] = None,
    closed: Option[Boolean] = None,
    date: Option[String] = None
)
  
object QueryComment {
  given encoderQueryComment: Encoder[QueryComment] = Encoder.instance { t =>
    Json.fromFields{
      Seq(
        t.sequence.map(v => "sequence" -> v.asJson),
        t.annotationStatus.map(v => "annotationStatus" -> v.asJson),
        t.user.map(v => "user" -> v.asJson),
        t.comment.map(v => "comment" -> v.asJson),
        t.closed.map(v => "closed" -> v.asJson),
        t.date.map(v => "date" -> v.asJson)
      ).flatten
    }
  }
  given decoderQueryComment: Decoder[QueryComment] = Decoder.instance { c =>
    for {
      sequence <- c.downField("sequence").as[Option[Int]]
      annotationStatus <- c.downField("annotationStatus").as[Option[String]]
      user <- c.downField("user").as[Option[String]]
      comment <- c.downField("comment").as[Option[String]]
      closed <- c.downField("closed").as[Option[Boolean]]
      date <- c.downField("date").as[Option[String]]
    } yield QueryComment(
      sequence = sequence,
      annotationStatus = annotationStatus,
      user = user,
      comment = comment,
      closed = closed,
      date = date
    )
  }
}

