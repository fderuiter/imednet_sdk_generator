/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJob::OAIJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJob::OAIJob() {
    this->initializeModel();
}

OAIJob::~OAIJob() {}

void OAIJob::initializeModel() {

    m_job_id_isSet = false;
    m_job_id_isValid = false;

    m_batch_id_isSet = false;
    m_batch_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_started_isSet = false;
    m_date_started_isValid = false;

    m_date_finished_isSet = false;
    m_date_finished_isValid = false;
}

void OAIJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJob::fromJsonObject(QJsonObject json) {

    m_job_id_isValid = ::OpenAPI::fromJsonValue(m_job_id, json[QString("jobId")]);
    m_job_id_isSet = !json[QString("jobId")].isNull() && m_job_id_isValid;

    m_batch_id_isValid = ::OpenAPI::fromJsonValue(m_batch_id, json[QString("batchId")]);
    m_batch_id_isSet = !json[QString("batchId")].isNull() && m_batch_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_started_isValid = ::OpenAPI::fromJsonValue(m_date_started, json[QString("dateStarted")]);
    m_date_started_isSet = !json[QString("dateStarted")].isNull() && m_date_started_isValid;

    m_date_finished_isValid = ::OpenAPI::fromJsonValue(m_date_finished, json[QString("dateFinished")]);
    m_date_finished_isSet = !json[QString("dateFinished")].isNull() && m_date_finished_isValid;
}

QString OAIJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJob::asJsonObject() const {
    QJsonObject obj;
    if (m_job_id_isSet) {
        obj.insert(QString("jobId"), ::OpenAPI::toJsonValue(m_job_id));
    }
    if (m_batch_id_isSet) {
        obj.insert(QString("batchId"), ::OpenAPI::toJsonValue(m_batch_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_started_isSet) {
        obj.insert(QString("dateStarted"), ::OpenAPI::toJsonValue(m_date_started));
    }
    if (m_date_finished_isSet) {
        obj.insert(QString("dateFinished"), ::OpenAPI::toJsonValue(m_date_finished));
    }
    return obj;
}

QString OAIJob::getJobId() const {
    return m_job_id;
}
void OAIJob::setJobId(const QString &job_id) {
    m_job_id = job_id;
    m_job_id_isSet = true;
}

bool OAIJob::is_job_id_Set() const{
    return m_job_id_isSet;
}

bool OAIJob::is_job_id_Valid() const{
    return m_job_id_isValid;
}

QString OAIJob::getBatchId() const {
    return m_batch_id;
}
void OAIJob::setBatchId(const QString &batch_id) {
    m_batch_id = batch_id;
    m_batch_id_isSet = true;
}

bool OAIJob::is_batch_id_Set() const{
    return m_batch_id_isSet;
}

bool OAIJob::is_batch_id_Valid() const{
    return m_batch_id_isValid;
}

QString OAIJob::getState() const {
    return m_state;
}
void OAIJob::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIJob::is_state_Set() const{
    return m_state_isSet;
}

bool OAIJob::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIJob::getDateCreated() const {
    return m_date_created;
}
void OAIJob::setDateCreated(const QString &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIJob::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIJob::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIJob::getDateStarted() const {
    return m_date_started;
}
void OAIJob::setDateStarted(const QString &date_started) {
    m_date_started = date_started;
    m_date_started_isSet = true;
}

bool OAIJob::is_date_started_Set() const{
    return m_date_started_isSet;
}

bool OAIJob::is_date_started_Valid() const{
    return m_date_started_isValid;
}

QString OAIJob::getDateFinished() const {
    return m_date_finished;
}
void OAIJob::setDateFinished(const QString &date_finished) {
    m_date_finished = date_finished;
    m_date_finished_isSet = true;
}

bool OAIJob::is_date_finished_Set() const{
    return m_date_finished_isSet;
}

bool OAIJob::is_date_finished_Valid() const{
    return m_date_finished_isValid;
}

bool OAIJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_batch_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_finished_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
