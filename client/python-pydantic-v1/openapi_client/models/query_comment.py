# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class QueryComment(BaseModel):
    """
    QueryComment
    """
    sequence: Optional[StrictInt] = Field(default=None, description="Sequence number of the comment/action in the query history")
    annotation_status: Optional[StrictStr] = Field(default=None, alias="annotationStatus", description="Status of the query after this comment (e.g., Open, Closed)")
    user: Optional[StrictStr] = Field(default=None, description="Username of the user who made the comment or action")
    comment: Optional[StrictStr] = Field(default=None, description="Text of the comment")
    closed: Optional[StrictBool] = Field(default=None, description="Whether the query was marked closed at this step")
    var_date: Optional[StrictStr] = Field(default=None, alias="date", description="Date of the comment or action")
    __properties = ["sequence", "annotationStatus", "user", "comment", "closed", "date"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QueryComment:
        """Create an instance of QueryComment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QueryComment:
        """Create an instance of QueryComment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QueryComment.parse_obj(obj)

        _obj = QueryComment.parse_obj({
            "sequence": obj.get("sequence"),
            "annotation_status": obj.get("annotationStatus"),
            "user": obj.get("user"),
            "comment": obj.get("comment"),
            "closed": obj.get("closed"),
            "var_date": obj.get("date")
        })
        return _obj


