# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class Visit(BaseModel):
    """
    Visit
    """
    study_key: Optional[StrictStr] = Field(default=None, alias="studyKey", description="Unique study key")
    visit_id: Optional[StrictInt] = Field(default=None, alias="visitId", description="Unique system identifier for the subject visit instance")
    interval_id: Optional[StrictInt] = Field(default=None, alias="intervalId", description="Unique system identifier of the interval definition for this visit")
    interval_name: Optional[StrictStr] = Field(default=None, alias="intervalName", description="Name of the interval (visit) for this visit instance")
    subject_id: Optional[StrictInt] = Field(default=None, alias="subjectId", description="Mednet subject ID of the subject")
    subject_key: Optional[StrictStr] = Field(default=None, alias="subjectKey", description="Protocol-assigned subject identifier")
    start_date: Optional[StrictStr] = Field(default=None, alias="startDate", description="Start date of the visit window (in YYYY-MM-DD format)")
    end_date: Optional[StrictStr] = Field(default=None, alias="endDate", description="End date of the visit window (in YYYY-MM-DD format)")
    due_date: Optional[StrictStr] = Field(default=None, alias="dueDate", description="Due date of the visit (in YYYY-MM-DD format), if applicable")
    visit_date: Optional[StrictStr] = Field(default=None, alias="visitDate", description="Actual date the visit took place (in YYYY-MM-DD format)")
    visit_date_form: Optional[StrictStr] = Field(default=None, alias="visitDateForm", description="Name of the form used to capture the actual visit date")
    visit_date_question: Optional[StrictStr] = Field(default=None, alias="visitDateQuestion", description="Variable name of the field capturing the actual visit date")
    deleted: Optional[StrictBool] = Field(default=None, description="Whether the visit instance is marked as deleted")
    date_created: Optional[StrictStr] = Field(default=None, alias="dateCreated", description="Date when this visit record was created")
    date_modified: Optional[StrictStr] = Field(default=None, alias="dateModified", description="Date when this visit record was last modified")
    __properties = ["studyKey", "visitId", "intervalId", "intervalName", "subjectId", "subjectKey", "startDate", "endDate", "dueDate", "visitDate", "visitDateForm", "visitDateQuestion", "deleted", "dateCreated", "dateModified"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Visit:
        """Create an instance of Visit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Visit:
        """Create an instance of Visit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Visit.parse_obj(obj)

        _obj = Visit.parse_obj({
            "study_key": obj.get("studyKey"),
            "visit_id": obj.get("visitId"),
            "interval_id": obj.get("intervalId"),
            "interval_name": obj.get("intervalName"),
            "subject_id": obj.get("subjectId"),
            "subject_key": obj.get("subjectKey"),
            "start_date": obj.get("startDate"),
            "end_date": obj.get("endDate"),
            "due_date": obj.get("dueDate"),
            "visit_date": obj.get("visitDate"),
            "visit_date_form": obj.get("visitDateForm"),
            "visit_date_question": obj.get("visitDateQuestion"),
            "deleted": obj.get("deleted"),
            "date_created": obj.get("dateCreated"),
            "date_modified": obj.get("dateModified")
        })
        return _obj


