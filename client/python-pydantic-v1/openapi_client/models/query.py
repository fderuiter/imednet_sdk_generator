# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from openapi_client.models.query_comment import QueryComment

class Query(BaseModel):
    """
    Query
    """
    study_key: Optional[StrictStr] = Field(default=None, alias="studyKey", description="Unique study key")
    subject_id: Optional[StrictInt] = Field(default=None, alias="subjectId", description="Mednet subject ID associated with the query (if applicable)")
    subject_oid: Optional[StrictStr] = Field(default=None, alias="subjectOid", description="Client-assigned subject OID (if applicable)")
    annotation_type: Optional[StrictStr] = Field(default=None, alias="annotationType", description="Category/type of the query (e.g., subject, record, question)")
    annotation_id: Optional[StrictInt] = Field(default=None, alias="annotationId", description="Unique system identifier for the query")
    type: Optional[StrictStr] = Field(default=None, description="System text identifier for the query type/location (subject, record, question)")
    description: Optional[StrictStr] = Field(default=None, description="Description of the query (e.g., reason or context)")
    record_id: Optional[StrictInt] = Field(default=None, alias="recordId", description="Record ID associated with the query (if applicable)")
    variable: Optional[StrictStr] = Field(default=None, description="Variable name (field) associated with the query (if applicable)")
    subject_key: Optional[StrictStr] = Field(default=None, alias="subjectKey", description="Subject display ID associated with the query (if applicable)")
    date_created: Optional[StrictStr] = Field(default=None, alias="dateCreated", description="Date when the query was created")
    date_modified: Optional[StrictStr] = Field(default=None, alias="dateModified", description="Date when the query was last modified")
    query_comments: Optional[conlist(QueryComment)] = Field(default=None, alias="queryComments", description="History of comments/actions on the query")
    __properties = ["studyKey", "subjectId", "subjectOid", "annotationType", "annotationId", "type", "description", "recordId", "variable", "subjectKey", "dateCreated", "dateModified", "queryComments"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Query:
        """Create an instance of Query from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in query_comments (list)
        _items = []
        if self.query_comments:
            for _item in self.query_comments:
                if _item:
                    _items.append(_item.to_dict())
            _dict['queryComments'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Query:
        """Create an instance of Query from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Query.parse_obj(obj)

        _obj = Query.parse_obj({
            "study_key": obj.get("studyKey"),
            "subject_id": obj.get("subjectId"),
            "subject_oid": obj.get("subjectOid"),
            "annotation_type": obj.get("annotationType"),
            "annotation_id": obj.get("annotationId"),
            "type": obj.get("type"),
            "description": obj.get("description"),
            "record_id": obj.get("recordId"),
            "variable": obj.get("variable"),
            "subject_key": obj.get("subjectKey"),
            "date_created": obj.get("dateCreated"),
            "date_modified": obj.get("dateModified"),
            "query_comments": [QueryComment.from_dict(_item) for _item in obj.get("queryComments")] if obj.get("queryComments") is not None else None
        })
        return _obj


