# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class Site(BaseModel):
    """
    Site
    """
    study_key: Optional[StrictStr] = Field(default=None, alias="studyKey", description="Unique study key")
    site_id: Optional[StrictInt] = Field(default=None, alias="siteId", description="Unique site ID")
    site_name: Optional[StrictStr] = Field(default=None, alias="siteName", description="Name of the site")
    site_enrollment_status: Optional[StrictStr] = Field(default=None, alias="siteEnrollmentStatus", description="Enrollment status of the site")
    date_created: Optional[StrictStr] = Field(default=None, alias="dateCreated", description="Date when this site was created")
    date_modified: Optional[StrictStr] = Field(default=None, alias="dateModified", description="Date when this site was last modified")
    __properties = ["studyKey", "siteId", "siteName", "siteEnrollmentStatus", "dateCreated", "dateModified"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Site:
        """Create an instance of Site from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Site:
        """Create an instance of Site from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Site.parse_obj(obj)

        _obj = Site.parse_obj({
            "study_key": obj.get("studyKey"),
            "site_id": obj.get("siteId"),
            "site_name": obj.get("siteName"),
            "site_enrollment_status": obj.get("siteEnrollmentStatus"),
            "date_created": obj.get("dateCreated"),
            "date_modified": obj.get("dateModified")
        })
        return _obj


