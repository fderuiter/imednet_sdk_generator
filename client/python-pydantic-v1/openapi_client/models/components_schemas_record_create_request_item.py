# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class ComponentsSchemasRecordCreateRequestItem(BaseModel):
    """
    ComponentsSchemasRecordCreateRequestItem
    """
    form_key: StrictStr = Field(default=..., alias="formKey", description="Form key identifying the eCRF to create or update")
    form_id: Optional[StrictInt] = Field(default=None, alias="formId", description="Form ID identifying the eCRF to create or update (alternative to formKey)")
    site_name: Optional[StrictStr] = Field(default=None, alias="siteName", description="Name of the site where the record should be created (for new subject registration)")
    site_id: Optional[StrictInt] = Field(default=None, alias="siteId", description="Site ID for the record (alternative to siteName)")
    subject_key: Optional[StrictStr] = Field(default=None, alias="subjectKey", description="Subject identifier (display ID) for which to create or update the record")
    subject_id: Optional[StrictInt] = Field(default=None, alias="subjectId", description="Subject ID for which to create or update the record (alternative to subjectKey)")
    subject_oid: Optional[StrictStr] = Field(default=None, alias="subjectOid", description="Subject OID for which to create or update the record (alternative to subjectKey)")
    interval_name: Optional[StrictStr] = Field(default=None, alias="intervalName", description="Name of the interval (visit) for a scheduled record update")
    interval_id: Optional[StrictInt] = Field(default=None, alias="intervalId", description="Interval ID for a scheduled record update (alternative to intervalName)")
    record_id: Optional[StrictInt] = Field(default=None, alias="recordId", description="Record ID for updating an existing unscheduled record (if applicable)")
    record_oid: Optional[StrictStr] = Field(default=None, alias="recordOid", description="Record OID for updating an existing unscheduled record (if applicable)")
    data: Dict[str, Any] = Field(default=..., description="Key-value pairs of field names and values for the record data")
    __properties = ["formKey", "formId", "siteName", "siteId", "subjectKey", "subjectId", "subjectOid", "intervalName", "intervalId", "recordId", "recordOid", "data"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ComponentsSchemasRecordCreateRequestItem:
        """Create an instance of ComponentsSchemasRecordCreateRequestItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ComponentsSchemasRecordCreateRequestItem:
        """Create an instance of ComponentsSchemasRecordCreateRequestItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ComponentsSchemasRecordCreateRequestItem.parse_obj(obj)

        _obj = ComponentsSchemasRecordCreateRequestItem.parse_obj({
            "form_key": obj.get("formKey"),
            "form_id": obj.get("formId"),
            "site_name": obj.get("siteName"),
            "site_id": obj.get("siteId"),
            "subject_key": obj.get("subjectKey"),
            "subject_id": obj.get("subjectId"),
            "subject_oid": obj.get("subjectOid"),
            "interval_name": obj.get("intervalName"),
            "interval_id": obj.get("intervalId"),
            "record_id": obj.get("recordId"),
            "record_oid": obj.get("recordOid"),
            "data": obj.get("data")
        })
        return _obj


