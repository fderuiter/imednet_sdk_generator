# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from openapi_client.models.keyword import Keyword

class Record(BaseModel):
    """
    Record
    """
    study_key: Optional[StrictStr] = Field(default=None, alias="studyKey", description="Unique study key")
    interval_id: Optional[StrictInt] = Field(default=None, alias="intervalId", description="Interval ID (visit definition) that this record is associated with")
    form_id: Optional[StrictInt] = Field(default=None, alias="formId", description="Form ID of the form this record instance belongs to")
    form_key: Optional[StrictStr] = Field(default=None, alias="formKey", description="Form key of the form for this record instance")
    site_id: Optional[StrictInt] = Field(default=None, alias="siteId", description="Site ID associated with the record")
    record_id: Optional[StrictInt] = Field(default=None, alias="recordId", description="Unique record ID")
    record_oid: Optional[StrictStr] = Field(default=None, alias="recordOid", description="Client-assigned record OID")
    record_type: Optional[StrictStr] = Field(default=None, alias="recordType", description="Type of record (e.g., SUBJECT for subject-related forms)")
    record_status: Optional[StrictStr] = Field(default=None, alias="recordStatus", description="Current status of the record (e.g., Record Incomplete, Record Complete)")
    deleted: Optional[StrictBool] = Field(default=None, description="Whether the record is marked as deleted")
    date_created: Optional[StrictStr] = Field(default=None, alias="dateCreated", description="Date when this record was created")
    date_modified: Optional[StrictStr] = Field(default=None, alias="dateModified", description="Date when this record was last modified")
    subject_id: Optional[StrictInt] = Field(default=None, alias="subjectId", description="Mednet subject ID that this record is associated with")
    subject_oid: Optional[StrictStr] = Field(default=None, alias="subjectOid", description="Client-assigned subject OID for the subject this record is associated with")
    subject_key: Optional[StrictStr] = Field(default=None, alias="subjectKey", description="Subject display ID that this record is associated with")
    visit_id: Optional[StrictInt] = Field(default=None, alias="visitId", description="Visit instance ID that this record is associated with (if applicable)")
    parent_record_id: Optional[StrictInt] = Field(default=None, alias="parentRecordId", description="Record ID of the parent record if this record is a subrecord (if applicable)")
    keywords: Optional[conlist(Keyword)] = Field(default=None, description="List of keywords associated with the record")
    record_data: Optional[Dict[str, Any]] = Field(default=None, alias="recordData", description="Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.")
    __properties = ["studyKey", "intervalId", "formId", "formKey", "siteId", "recordId", "recordOid", "recordType", "recordStatus", "deleted", "dateCreated", "dateModified", "subjectId", "subjectOid", "subjectKey", "visitId", "parentRecordId", "keywords", "recordData"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Record:
        """Create an instance of Record from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in keywords (list)
        _items = []
        if self.keywords:
            for _item in self.keywords:
                if _item:
                    _items.append(_item.to_dict())
            _dict['keywords'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Record:
        """Create an instance of Record from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Record.parse_obj(obj)

        _obj = Record.parse_obj({
            "study_key": obj.get("studyKey"),
            "interval_id": obj.get("intervalId"),
            "form_id": obj.get("formId"),
            "form_key": obj.get("formKey"),
            "site_id": obj.get("siteId"),
            "record_id": obj.get("recordId"),
            "record_oid": obj.get("recordOid"),
            "record_type": obj.get("recordType"),
            "record_status": obj.get("recordStatus"),
            "deleted": obj.get("deleted"),
            "date_created": obj.get("dateCreated"),
            "date_modified": obj.get("dateModified"),
            "subject_id": obj.get("subjectId"),
            "subject_oid": obj.get("subjectOid"),
            "subject_key": obj.get("subjectKey"),
            "visit_id": obj.get("visitId"),
            "parent_record_id": obj.get("parentRecordId"),
            "keywords": [Keyword.from_dict(_item) for _item in obj.get("keywords")] if obj.get("keywords") is not None else None,
            "record_data": obj.get("recordData")
        })
        return _obj


