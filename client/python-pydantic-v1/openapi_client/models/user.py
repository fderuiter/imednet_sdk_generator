# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from openapi_client.models.role import Role

class User(BaseModel):
    """
    User
    """
    user_id: Optional[StrictStr] = Field(default=None, alias="userId", description="Unique user ID (UUID)")
    login: Optional[StrictStr] = Field(default=None, description="User login name")
    first_name: Optional[StrictStr] = Field(default=None, alias="firstName", description="User first name")
    last_name: Optional[StrictStr] = Field(default=None, alias="lastName", description="User last name")
    email: Optional[StrictStr] = Field(default=None, description="User email address")
    user_active_in_study: Optional[StrictBool] = Field(default=None, alias="userActiveInStudy", description="Whether the user is active in the given study")
    roles: Optional[conlist(Role)] = Field(default=None, description="Roles that the user has in the study")
    __properties = ["userId", "login", "firstName", "lastName", "email", "userActiveInStudy", "roles"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> User:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in roles (list)
        _items = []
        if self.roles:
            for _item in self.roles:
                if _item:
                    _items.append(_item.to_dict())
            _dict['roles'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> User:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return User.parse_obj(obj)

        _obj = User.parse_obj({
            "user_id": obj.get("userId"),
            "login": obj.get("login"),
            "first_name": obj.get("firstName"),
            "last_name": obj.get("lastName"),
            "email": obj.get("email"),
            "user_active_in_study": obj.get("userActiveInStudy"),
            "roles": [Role.from_dict(_item) for _item in obj.get("roles")] if obj.get("roles") is not None else None
        })
        return _obj


