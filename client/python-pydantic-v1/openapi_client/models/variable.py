# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator

class Variable(BaseModel):
    """
    Variable
    """
    study_key: Optional[StrictStr] = Field(default=None, alias="studyKey", description="Unique study key")
    variable_id: Optional[StrictInt] = Field(default=None, alias="variableId", description="Mednet variable ID")
    variable_type: Optional[StrictStr] = Field(default=None, alias="variableType", description="Type of the variable (field type), e.g., RADIO, TEXT, etc.")
    variable_name: Optional[StrictStr] = Field(default=None, alias="variableName", description="Name of the variable (question text or label)")
    sequence: Optional[StrictInt] = Field(default=None, description="Sequence of the variable on the form")
    revision: Optional[StrictInt] = Field(default=None, description="Number of modifications of the variable (via form metadata revisions)")
    disabled: Optional[StrictBool] = Field(default=None, description="Whether the variable is marked as disabled (deleted)")
    date_created: Optional[StrictStr] = Field(default=None, alias="dateCreated", description="Date when this variable was created")
    date_modified: Optional[StrictStr] = Field(default=None, alias="dateModified", description="Date when this variable was last modified")
    form_id: Optional[StrictInt] = Field(default=None, alias="formId", description="ID of the form that this variable belongs to")
    variable_oid: Optional[StrictStr] = Field(default=None, alias="variableOid", description="Client-assigned variable OID")
    deleted: Optional[StrictBool] = Field(default=None, description="Whether the variable is marked as deleted")
    form_key: Optional[StrictStr] = Field(default=None, alias="formKey", description="Form key of the form that this variable belongs to")
    form_name: Optional[StrictStr] = Field(default=None, alias="formName", description="Name of the form that this variable belongs to")
    label: Optional[StrictStr] = Field(default=None, description="User-defined identifier (field name) for the variable")
    blinded: Optional[StrictBool] = Field(default=None, description="Whether the variable is flagged as blinded (hidden in certain contexts)")
    __properties = ["studyKey", "variableId", "variableType", "variableName", "sequence", "revision", "disabled", "dateCreated", "dateModified", "formId", "variableOid", "deleted", "formKey", "formName", "label", "blinded"]

    @validator('variable_type')
    def variable_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('TEXT', 'TEXTAREA', 'RADIO', 'CHECKBOX', 'DROPDOWN', 'DATE', 'NUMBER',):
            raise ValueError("must be one of enum values ('TEXT', 'TEXTAREA', 'RADIO', 'CHECKBOX', 'DROPDOWN', 'DATE', 'NUMBER')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Variable:
        """Create an instance of Variable from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Variable:
        """Create an instance of Variable from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Variable.parse_obj(obj)

        _obj = Variable.parse_obj({
            "study_key": obj.get("studyKey"),
            "variable_id": obj.get("variableId"),
            "variable_type": obj.get("variableType"),
            "variable_name": obj.get("variableName"),
            "sequence": obj.get("sequence"),
            "revision": obj.get("revision"),
            "disabled": obj.get("disabled"),
            "date_created": obj.get("dateCreated"),
            "date_modified": obj.get("dateModified"),
            "form_id": obj.get("formId"),
            "variable_oid": obj.get("variableOid"),
            "deleted": obj.get("deleted"),
            "form_key": obj.get("formKey"),
            "form_name": obj.get("formName"),
            "label": obj.get("label"),
            "blinded": obj.get("blinded")
        })
        return _obj


