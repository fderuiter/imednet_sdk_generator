# coding: utf-8

"""
    Mednet EDC API

    The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 

    The version of the OpenAPI document: 1.3.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class Keyword(BaseModel):
    """
    Keyword
    """
    keyword_name: Optional[StrictStr] = Field(default=None, alias="keywordName", description="Name of the keyword")
    keyword_key: Optional[StrictStr] = Field(default=None, alias="keywordKey", description="Key of the keyword (short code)")
    keyword_id: Optional[StrictInt] = Field(default=None, alias="keywordId", description="Internal keyword ID")
    date_added: Optional[StrictStr] = Field(default=None, alias="dateAdded", description="Date when this keyword was added")
    __properties = ["keywordName", "keywordKey", "keywordId", "dateAdded"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Keyword:
        """Create an instance of Keyword from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Keyword:
        """Create an instance of Keyword from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Keyword.parse_obj(obj)

        _obj = Keyword.parse_obj({
            "keyword_name": obj.get("keywordName"),
            "keyword_key": obj.get("keywordKey"),
            "keyword_id": obj.get("keywordId"),
            "date_added": obj.get("dateAdded")
        })
        return _obj


