//
// ComponentsSchemasRecordCreateRequestItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ComponentsSchemasRecordCreateRequestItem: Codable {
    /// Form key identifying the eCRF to create or update
    public var formKey: String
    /// Form ID identifying the eCRF to create or update (alternative to formKey)
    public var formId: Int?
    /// Name of the site where the record should be created (for new subject registration)
    public var siteName: String?
    /// Site ID for the record (alternative to siteName)
    public var siteId: Int?
    /// Subject identifier (display ID) for which to create or update the record
    public var subjectKey: String?
    /// Subject ID for which to create or update the record (alternative to subjectKey)
    public var subjectId: Int?
    /// Subject OID for which to create or update the record (alternative to subjectKey)
    public var subjectOid: String?
    /// Name of the interval (visit) for a scheduled record update
    public var intervalName: String?
    /// Interval ID for a scheduled record update (alternative to intervalName)
    public var intervalId: Int?
    /// Record ID for updating an existing unscheduled record (if applicable)
    public var recordId: Int?
    /// Record OID for updating an existing unscheduled record (if applicable)
    public var recordOid: String?
    /// Key-value pairs of field names and values for the record data
    public var data: [String: Any]

    public init(formKey: String, formId: Int? = nil, siteName: String? = nil, siteId: Int? = nil, subjectKey: String? = nil, subjectId: Int? = nil, subjectOid: String? = nil, intervalName: String? = nil, intervalId: Int? = nil, recordId: Int? = nil, recordOid: String? = nil, data: [String: Any]) {
        self.formKey = formKey
        self.formId = formId
        self.siteName = siteName
        self.siteId = siteId
        self.subjectKey = subjectKey
        self.subjectId = subjectId
        self.subjectOid = subjectOid
        self.intervalName = intervalName
        self.intervalId = intervalId
        self.recordId = recordId
        self.recordOid = recordOid
        self.data = data
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case formKey
        case formId
        case siteName
        case siteId
        case subjectKey
        case subjectId
        case subjectOid
        case intervalName
        case intervalId
        case recordId
        case recordOid
        case data
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        formKey = try container.decode(String.self, forKey: .formKey)
        formId = try container.decodeIfPresent(Int.self, forKey: .formId)
        siteName = try container.decodeIfPresent(String.self, forKey: .siteName)
        siteId = try container.decodeIfPresent(Int.self, forKey: .siteId)
        subjectKey = try container.decodeIfPresent(String.self, forKey: .subjectKey)
        subjectId = try container.decodeIfPresent(Int.self, forKey: .subjectId)
        subjectOid = try container.decodeIfPresent(String.self, forKey: .subjectOid)
        intervalName = try container.decodeIfPresent(String.self, forKey: .intervalName)
        intervalId = try container.decodeIfPresent(Int.self, forKey: .intervalId)
        recordId = try container.decodeIfPresent(Int.self, forKey: .recordId)
        recordOid = try container.decodeIfPresent(String.self, forKey: .recordOid)
        data = try container.decode([String: Any].self, forKey: .data)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(formKey, forKey: .formKey)
        try container.encodeIfPresent(formId, forKey: .formId)
        try container.encodeIfPresent(siteName, forKey: .siteName)
        try container.encodeIfPresent(siteId, forKey: .siteId)
        try container.encodeIfPresent(subjectKey, forKey: .subjectKey)
        try container.encodeIfPresent(subjectId, forKey: .subjectId)
        try container.encodeIfPresent(subjectOid, forKey: .subjectOid)
        try container.encodeIfPresent(intervalName, forKey: .intervalName)
        try container.encodeIfPresent(intervalId, forKey: .intervalId)
        try container.encodeIfPresent(recordId, forKey: .recordId)
        try container.encodeIfPresent(recordOid, forKey: .recordOid)
        try container.encode(try JSONSerialization.data(withJSONObject: data), forKey: .data)
    }
}
