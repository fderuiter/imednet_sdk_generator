//
// Record.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Record: Codable {
    /// Unique study key
    public var studyKey: String?
    /// Interval ID (visit definition) that this record is associated with
    public var intervalId: Int?
    /// Form ID of the form this record instance belongs to
    public var formId: Int?
    /// Form key of the form for this record instance
    public var formKey: String?
    /// Site ID associated with the record
    public var siteId: Int?
    /// Unique record ID
    public var recordId: Int?
    /// Client-assigned record OID
    public var recordOid: String?
    /// Type of record (e.g., SUBJECT for subject-related forms)
    public var recordType: String?
    /// Current status of the record (e.g., Record Incomplete, Record Complete)
    public var recordStatus: String?
    /// Whether the record is marked as deleted
    public var deleted: Bool?
    /// Date when this record was created
    public var dateCreated: String?
    /// Date when this record was last modified
    public var dateModified: String?
    /// Mednet subject ID that this record is associated with
    public var subjectId: Int?
    /// Client-assigned subject OID for the subject this record is associated with
    public var subjectOid: String?
    /// Subject display ID that this record is associated with
    public var subjectKey: String?
    /// Visit instance ID that this record is associated with (if applicable)
    public var visitId: Int?
    /// Record ID of the parent record if this record is a subrecord (if applicable)
    public var parentRecordId: Int?
    /// List of keywords associated with the record
    public var keywords: [Keyword]?
    /// Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.
    public var recordData: [String: Any]?

    public init(studyKey: String? = nil, intervalId: Int? = nil, formId: Int? = nil, formKey: String? = nil, siteId: Int? = nil, recordId: Int? = nil, recordOid: String? = nil, recordType: String? = nil, recordStatus: String? = nil, deleted: Bool? = nil, dateCreated: String? = nil, dateModified: String? = nil, subjectId: Int? = nil, subjectOid: String? = nil, subjectKey: String? = nil, visitId: Int? = nil, parentRecordId: Int? = nil, keywords: [Keyword]? = nil, recordData: [String: Any]? = nil) {
        self.studyKey = studyKey
        self.intervalId = intervalId
        self.formId = formId
        self.formKey = formKey
        self.siteId = siteId
        self.recordId = recordId
        self.recordOid = recordOid
        self.recordType = recordType
        self.recordStatus = recordStatus
        self.deleted = deleted
        self.dateCreated = dateCreated
        self.dateModified = dateModified
        self.subjectId = subjectId
        self.subjectOid = subjectOid
        self.subjectKey = subjectKey
        self.visitId = visitId
        self.parentRecordId = parentRecordId
        self.keywords = keywords
        self.recordData = recordData
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case studyKey
        case intervalId
        case formId
        case formKey
        case siteId
        case recordId
        case recordOid
        case recordType
        case recordStatus
        case deleted
        case dateCreated
        case dateModified
        case subjectId
        case subjectOid
        case subjectKey
        case visitId
        case parentRecordId
        case keywords
        case recordData
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        studyKey = try container.decodeIfPresent(String.self, forKey: .studyKey)
        intervalId = try container.decodeIfPresent(Int.self, forKey: .intervalId)
        formId = try container.decodeIfPresent(Int.self, forKey: .formId)
        formKey = try container.decodeIfPresent(String.self, forKey: .formKey)
        siteId = try container.decodeIfPresent(Int.self, forKey: .siteId)
        recordId = try container.decodeIfPresent(Int.self, forKey: .recordId)
        recordOid = try container.decodeIfPresent(String.self, forKey: .recordOid)
        recordType = try container.decodeIfPresent(String.self, forKey: .recordType)
        recordStatus = try container.decodeIfPresent(String.self, forKey: .recordStatus)
        deleted = try container.decodeIfPresent(Bool.self, forKey: .deleted)
        dateCreated = try container.decodeIfPresent(String.self, forKey: .dateCreated)
        dateModified = try container.decodeIfPresent(String.self, forKey: .dateModified)
        subjectId = try container.decodeIfPresent(Int.self, forKey: .subjectId)
        subjectOid = try container.decodeIfPresent(String.self, forKey: .subjectOid)
        subjectKey = try container.decodeIfPresent(String.self, forKey: .subjectKey)
        visitId = try container.decodeIfPresent(Int.self, forKey: .visitId)
        parentRecordId = try container.decodeIfPresent(Int.self, forKey: .parentRecordId)
        keywords = try container.decodeIfPresent([Keyword].self, forKey: .keywords)
        recordData = try container.decodeIfPresent([String: Any].self, forKey: .recordData)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(studyKey, forKey: .studyKey)
        try container.encodeIfPresent(intervalId, forKey: .intervalId)
        try container.encodeIfPresent(formId, forKey: .formId)
        try container.encodeIfPresent(formKey, forKey: .formKey)
        try container.encodeIfPresent(siteId, forKey: .siteId)
        try container.encodeIfPresent(recordId, forKey: .recordId)
        try container.encodeIfPresent(recordOid, forKey: .recordOid)
        try container.encodeIfPresent(recordType, forKey: .recordType)
        try container.encodeIfPresent(recordStatus, forKey: .recordStatus)
        try container.encodeIfPresent(deleted, forKey: .deleted)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateModified, forKey: .dateModified)
        try container.encodeIfPresent(subjectId, forKey: .subjectId)
        try container.encodeIfPresent(subjectOid, forKey: .subjectOid)
        try container.encodeIfPresent(subjectKey, forKey: .subjectKey)
        try container.encodeIfPresent(visitId, forKey: .visitId)
        try container.encodeIfPresent(parentRecordId, forKey: .parentRecordId)
        try container.encodeIfPresent(keywords, forKey: .keywords)
        if let recordData = recordData {
            try container.encodeIfPresent(try JSONSerialization.data(withJSONObject: recordData), forKey: .recordData)
        }
    }
}
