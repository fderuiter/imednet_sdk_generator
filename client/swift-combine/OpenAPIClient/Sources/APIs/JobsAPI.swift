//
// JobsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class JobsAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "https://edc.prod.imednetapi.com/api/v1/edc")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum GetJobStatusError: Error, CustomStringConvertible {
        // Bad request (malformed or invalid input)
        case code400Error(InlineObject)
        // Authentication failed or was not provided
        case code401Error(InlineObject1)
        // Authenticated but not allowed to access the resource
        case code403Error(InlineObject2)
        // The requested resource was not found
        case code404Error(InlineObject3)
        // Internal server error (unexpected condition encountered)
        case code500Error(InlineObject5)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "GetJobStatusError: Bad request (malformed or invalid input): \(object)"
            case .code401Error(let object):
                return "GetJobStatusError: Authentication failed or was not provided: \(object)"
            case .code403Error(let object):
                return "GetJobStatusError: Authenticated but not allowed to access the resource: \(object)"
            case .code404Error(let object):
                return "GetJobStatusError: The requested resource was not found: \(object)"
            case .code500Error(let object):
                return "GetJobStatusError: Internal server error (unexpected condition encountered): \(object)"
            }
        }
    }

    /// Retrieve job status by batch ID
    /// - GET /studies/{studyKey}/jobs/{batchId}
    /// - API Key:
    /// - type: apiKey x-api-key (HEADER)
    /// - name: apiKeyAuth
    /// - API Key:
    /// - type: apiKey x-imn-security-key (HEADER)
    /// - name: securityKeyAuth
    /// - parameter studyKey: (path) Study key identifying the study context for the request 
    /// - parameter batchId: (path) Batch ID of the job to retrieve 
    /// - returns: AnyPublisher<Job, Error> 
    open func getJobStatus(studyKey: String, batchId: String) -> AnyPublisher<Job, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var localVarPath = "/studies/{studyKey}/jobs/{batchId}"
                localVarPath = localVarPath.replacingOccurrences(of: "{studyKey}", with: studyKey)
                localVarPath = localVarPath.replacingOccurrences(of: "{batchId}", with: batchId)
                let localVarURL = baseURL.appendingPathComponent(localVarPath)
                let components = URLComponents(url: localVarURL, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Job, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(InlineObject.self, from: transportError.data)
                            return GetJobStatusError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 401 {
                        do {
                            let error = try self.decoder.decode(InlineObject1.self, from: transportError.data)
                            return GetJobStatusError.code401Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 403 {
                        do {
                            let error = try self.decoder.decode(InlineObject2.self, from: transportError.data)
                            return GetJobStatusError.code403Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(InlineObject3.self, from: transportError.data)
                            return GetJobStatusError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(InlineObject5.self, from: transportError.data)
                            return GetJobStatusError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(Job.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
