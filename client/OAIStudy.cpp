/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStudy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStudy::OAIStudy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStudy::OAIStudy() {
    this->initializeModel();
}

OAIStudy::~OAIStudy() {}

void OAIStudy::initializeModel() {

    m_sponsor_key_isSet = false;
    m_sponsor_key_isValid = false;

    m_study_key_isSet = false;
    m_study_key_isValid = false;

    m_study_id_isSet = false;
    m_study_id_isValid = false;

    m_study_name_isSet = false;
    m_study_name_isValid = false;

    m_study_description_isSet = false;
    m_study_description_isValid = false;

    m_study_type_isSet = false;
    m_study_type_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;
}

void OAIStudy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStudy::fromJsonObject(QJsonObject json) {

    m_sponsor_key_isValid = ::OpenAPI::fromJsonValue(m_sponsor_key, json[QString("sponsorKey")]);
    m_sponsor_key_isSet = !json[QString("sponsorKey")].isNull() && m_sponsor_key_isValid;

    m_study_key_isValid = ::OpenAPI::fromJsonValue(m_study_key, json[QString("studyKey")]);
    m_study_key_isSet = !json[QString("studyKey")].isNull() && m_study_key_isValid;

    m_study_id_isValid = ::OpenAPI::fromJsonValue(m_study_id, json[QString("studyId")]);
    m_study_id_isSet = !json[QString("studyId")].isNull() && m_study_id_isValid;

    m_study_name_isValid = ::OpenAPI::fromJsonValue(m_study_name, json[QString("studyName")]);
    m_study_name_isSet = !json[QString("studyName")].isNull() && m_study_name_isValid;

    m_study_description_isValid = ::OpenAPI::fromJsonValue(m_study_description, json[QString("studyDescription")]);
    m_study_description_isSet = !json[QString("studyDescription")].isNull() && m_study_description_isValid;

    m_study_type_isValid = ::OpenAPI::fromJsonValue(m_study_type, json[QString("studyType")]);
    m_study_type_isSet = !json[QString("studyType")].isNull() && m_study_type_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;
}

QString OAIStudy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStudy::asJsonObject() const {
    QJsonObject obj;
    if (m_sponsor_key_isSet) {
        obj.insert(QString("sponsorKey"), ::OpenAPI::toJsonValue(m_sponsor_key));
    }
    if (m_study_key_isSet) {
        obj.insert(QString("studyKey"), ::OpenAPI::toJsonValue(m_study_key));
    }
    if (m_study_id_isSet) {
        obj.insert(QString("studyId"), ::OpenAPI::toJsonValue(m_study_id));
    }
    if (m_study_name_isSet) {
        obj.insert(QString("studyName"), ::OpenAPI::toJsonValue(m_study_name));
    }
    if (m_study_description_isSet) {
        obj.insert(QString("studyDescription"), ::OpenAPI::toJsonValue(m_study_description));
    }
    if (m_study_type_isSet) {
        obj.insert(QString("studyType"), ::OpenAPI::toJsonValue(m_study_type));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    return obj;
}

QString OAIStudy::getSponsorKey() const {
    return m_sponsor_key;
}
void OAIStudy::setSponsorKey(const QString &sponsor_key) {
    m_sponsor_key = sponsor_key;
    m_sponsor_key_isSet = true;
}

bool OAIStudy::is_sponsor_key_Set() const{
    return m_sponsor_key_isSet;
}

bool OAIStudy::is_sponsor_key_Valid() const{
    return m_sponsor_key_isValid;
}

QString OAIStudy::getStudyKey() const {
    return m_study_key;
}
void OAIStudy::setStudyKey(const QString &study_key) {
    m_study_key = study_key;
    m_study_key_isSet = true;
}

bool OAIStudy::is_study_key_Set() const{
    return m_study_key_isSet;
}

bool OAIStudy::is_study_key_Valid() const{
    return m_study_key_isValid;
}

qint32 OAIStudy::getStudyId() const {
    return m_study_id;
}
void OAIStudy::setStudyId(const qint32 &study_id) {
    m_study_id = study_id;
    m_study_id_isSet = true;
}

bool OAIStudy::is_study_id_Set() const{
    return m_study_id_isSet;
}

bool OAIStudy::is_study_id_Valid() const{
    return m_study_id_isValid;
}

QString OAIStudy::getStudyName() const {
    return m_study_name;
}
void OAIStudy::setStudyName(const QString &study_name) {
    m_study_name = study_name;
    m_study_name_isSet = true;
}

bool OAIStudy::is_study_name_Set() const{
    return m_study_name_isSet;
}

bool OAIStudy::is_study_name_Valid() const{
    return m_study_name_isValid;
}

QString OAIStudy::getStudyDescription() const {
    return m_study_description;
}
void OAIStudy::setStudyDescription(const QString &study_description) {
    m_study_description = study_description;
    m_study_description_isSet = true;
}

bool OAIStudy::is_study_description_Set() const{
    return m_study_description_isSet;
}

bool OAIStudy::is_study_description_Valid() const{
    return m_study_description_isValid;
}

QString OAIStudy::getStudyType() const {
    return m_study_type;
}
void OAIStudy::setStudyType(const QString &study_type) {
    m_study_type = study_type;
    m_study_type_isSet = true;
}

bool OAIStudy::is_study_type_Set() const{
    return m_study_type_isSet;
}

bool OAIStudy::is_study_type_Valid() const{
    return m_study_type_isValid;
}

QString OAIStudy::getDateCreated() const {
    return m_date_created;
}
void OAIStudy::setDateCreated(const QString &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAIStudy::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAIStudy::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAIStudy::getDateModified() const {
    return m_date_modified;
}
void OAIStudy::setDateModified(const QString &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAIStudy::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAIStudy::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

bool OAIStudy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sponsor_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_study_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_study_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_study_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_study_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_study_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStudy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
