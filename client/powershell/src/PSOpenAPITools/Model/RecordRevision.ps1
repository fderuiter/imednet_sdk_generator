#
# Mednet EDC API
# The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
# Version: 1.3.6
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER StudyKey
Unique study key
.PARAMETER RecordRevisionId
Unique system identifier for the record revision
.PARAMETER RecordId
Unique system identifier of the related record
.PARAMETER RecordOid
Client-assigned record OID (if any)
.PARAMETER RecordRevision
Revision number of the record (version of the record status)
.PARAMETER DataRevision
Revision number of the data within the record
.PARAMETER RecordStatus
Status of the record at this revision (user-defined status label)
.PARAMETER SubjectId
Mednet subject ID related to the record
.PARAMETER SubjectOid
Client-assigned subject OID related to the record
.PARAMETER SubjectKey
Subject display ID related to the record
.PARAMETER SiteId
Site ID related to the record
.PARAMETER FormKey
Form key of the form that the record belongs to
.PARAMETER IntervalId
Interval ID (visit definition) related to the record
.PARAMETER Role
Role name of the user who saved the record revision
.PARAMETER User
Username of the user who saved the record revision
.PARAMETER ReasonForChange
Reason for change, if provided (for audit trail)
.PARAMETER Deleted
Whether the record was deleted in this revision
.PARAMETER DateCreated
Date when this record revision was created
.OUTPUTS

RecordRevision<PSCustomObject>
#>

function Initialize-RecordRevision {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StudyKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RecordRevisionId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RecordId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RecordOid},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RecordRevision},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DataRevision},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RecordStatus},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SubjectId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubjectOid},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubjectKey},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SiteId},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FormKey},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${IntervalId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Role},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${User},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ReasonForChange},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Deleted},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateCreated}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => RecordRevision' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "recordRevisionId" = ${RecordRevisionId}
            "recordId" = ${RecordId}
            "recordOid" = ${RecordOid}
            "recordRevision" = ${RecordRevision}
            "dataRevision" = ${DataRevision}
            "recordStatus" = ${RecordStatus}
            "subjectId" = ${SubjectId}
            "subjectOid" = ${SubjectOid}
            "subjectKey" = ${SubjectKey}
            "siteId" = ${SiteId}
            "formKey" = ${FormKey}
            "intervalId" = ${IntervalId}
            "role" = ${Role}
            "user" = ${User}
            "reasonForChange" = ${ReasonForChange}
            "deleted" = ${Deleted}
            "dateCreated" = ${DateCreated}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to RecordRevision<PSCustomObject>

.DESCRIPTION

Convert from JSON to RecordRevision<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

RecordRevision<PSCustomObject>
#>
function ConvertFrom-JsonToRecordRevision {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => RecordRevision' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in RecordRevision
        $AllProperties = ("studyKey", "recordRevisionId", "recordId", "recordOid", "recordRevision", "dataRevision", "recordStatus", "subjectId", "subjectOid", "subjectKey", "siteId", "formKey", "intervalId", "role", "user", "reasonForChange", "deleted", "dateCreated")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "studyKey"))) { #optional property not found
            $StudyKey = $null
        } else {
            $StudyKey = $JsonParameters.PSobject.Properties["studyKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recordRevisionId"))) { #optional property not found
            $RecordRevisionId = $null
        } else {
            $RecordRevisionId = $JsonParameters.PSobject.Properties["recordRevisionId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recordId"))) { #optional property not found
            $RecordId = $null
        } else {
            $RecordId = $JsonParameters.PSobject.Properties["recordId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recordOid"))) { #optional property not found
            $RecordOid = $null
        } else {
            $RecordOid = $JsonParameters.PSobject.Properties["recordOid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recordRevision"))) { #optional property not found
            $RecordRevision = $null
        } else {
            $RecordRevision = $JsonParameters.PSobject.Properties["recordRevision"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dataRevision"))) { #optional property not found
            $DataRevision = $null
        } else {
            $DataRevision = $JsonParameters.PSobject.Properties["dataRevision"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recordStatus"))) { #optional property not found
            $RecordStatus = $null
        } else {
            $RecordStatus = $JsonParameters.PSobject.Properties["recordStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectId"))) { #optional property not found
            $SubjectId = $null
        } else {
            $SubjectId = $JsonParameters.PSobject.Properties["subjectId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectOid"))) { #optional property not found
            $SubjectOid = $null
        } else {
            $SubjectOid = $JsonParameters.PSobject.Properties["subjectOid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectKey"))) { #optional property not found
            $SubjectKey = $null
        } else {
            $SubjectKey = $JsonParameters.PSobject.Properties["subjectKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "siteId"))) { #optional property not found
            $SiteId = $null
        } else {
            $SiteId = $JsonParameters.PSobject.Properties["siteId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formKey"))) { #optional property not found
            $FormKey = $null
        } else {
            $FormKey = $JsonParameters.PSobject.Properties["formKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "intervalId"))) { #optional property not found
            $IntervalId = $null
        } else {
            $IntervalId = $JsonParameters.PSobject.Properties["intervalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "role"))) { #optional property not found
            $Role = $null
        } else {
            $Role = $JsonParameters.PSobject.Properties["role"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user"))) { #optional property not found
            $User = $null
        } else {
            $User = $JsonParameters.PSobject.Properties["user"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "reasonForChange"))) { #optional property not found
            $ReasonForChange = $null
        } else {
            $ReasonForChange = $JsonParameters.PSobject.Properties["reasonForChange"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deleted"))) { #optional property not found
            $Deleted = $null
        } else {
            $Deleted = $JsonParameters.PSobject.Properties["deleted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "recordRevisionId" = ${RecordRevisionId}
            "recordId" = ${RecordId}
            "recordOid" = ${RecordOid}
            "recordRevision" = ${RecordRevision}
            "dataRevision" = ${DataRevision}
            "recordStatus" = ${RecordStatus}
            "subjectId" = ${SubjectId}
            "subjectOid" = ${SubjectOid}
            "subjectKey" = ${SubjectKey}
            "siteId" = ${SiteId}
            "formKey" = ${FormKey}
            "intervalId" = ${IntervalId}
            "role" = ${Role}
            "user" = ${User}
            "reasonForChange" = ${ReasonForChange}
            "deleted" = ${Deleted}
            "dateCreated" = ${DateCreated}
        }

        return $PSO
    }

}

