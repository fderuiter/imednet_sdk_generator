#
# Mednet EDC API
# The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
# Version: 1.3.6
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER FormKey
Form key identifying the eCRF to create or update
.PARAMETER FormId
Form ID identifying the eCRF to create or update (alternative to formKey)
.PARAMETER SiteName
Name of the site where the record should be created (for new subject registration)
.PARAMETER SiteId
Site ID for the record (alternative to siteName)
.PARAMETER SubjectKey
Subject identifier (display ID) for which to create or update the record
.PARAMETER SubjectId
Subject ID for which to create or update the record (alternative to subjectKey)
.PARAMETER SubjectOid
Subject OID for which to create or update the record (alternative to subjectKey)
.PARAMETER IntervalName
Name of the interval (visit) for a scheduled record update
.PARAMETER IntervalId
Interval ID for a scheduled record update (alternative to intervalName)
.PARAMETER RecordId
Record ID for updating an existing unscheduled record (if applicable)
.PARAMETER RecordOid
Record OID for updating an existing unscheduled record (if applicable)
.PARAMETER VarData
Key-value pairs of field names and values for the record data
.OUTPUTS

ComponentsSchemasRecordCreateRequestItem<PSCustomObject>
#>

function Initialize-ComponentsSchemasRecordCreateRequestItem {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FormKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FormId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SiteName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SiteId},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubjectKey},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SubjectId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubjectOid},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IntervalName},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${IntervalId},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RecordId},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RecordOid},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${VarData}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ComponentsSchemasRecordCreateRequestItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        if ($null -eq $FormKey) {
            throw "invalid value for 'FormKey', 'FormKey' cannot be null."
        }

        if ($null -eq $VarData) {
            throw "invalid value for 'VarData', 'VarData' cannot be null."
        }


        $PSO = [PSCustomObject]@{
            "formKey" = ${FormKey}
            "formId" = ${FormId}
            "siteName" = ${SiteName}
            "siteId" = ${SiteId}
            "subjectKey" = ${SubjectKey}
            "subjectId" = ${SubjectId}
            "subjectOid" = ${SubjectOid}
            "intervalName" = ${IntervalName}
            "intervalId" = ${IntervalId}
            "recordId" = ${RecordId}
            "recordOid" = ${RecordOid}
            "data" = ${VarData}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ComponentsSchemasRecordCreateRequestItem<PSCustomObject>

.DESCRIPTION

Convert from JSON to ComponentsSchemasRecordCreateRequestItem<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ComponentsSchemasRecordCreateRequestItem<PSCustomObject>
#>
function ConvertFrom-JsonToComponentsSchemasRecordCreateRequestItem {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ComponentsSchemasRecordCreateRequestItem' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ComponentsSchemasRecordCreateRequestItem
        $AllProperties = ("formKey", "formId", "siteName", "siteId", "subjectKey", "subjectId", "subjectOid", "intervalName", "intervalId", "recordId", "recordOid", "data")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        If ([string]::IsNullOrEmpty($Json) -or $Json -eq "{}") { # empty json
            throw "Error! Empty JSON cannot be serialized due to the required property 'formKey' missing."
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formKey"))) {
            throw "Error! JSON cannot be serialized due to the required property 'formKey' missing."
        } else {
            $FormKey = $JsonParameters.PSobject.Properties["formKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "data"))) {
            throw "Error! JSON cannot be serialized due to the required property 'data' missing."
        } else {
            $VarData = $JsonParameters.PSobject.Properties["data"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formId"))) { #optional property not found
            $FormId = $null
        } else {
            $FormId = $JsonParameters.PSobject.Properties["formId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "siteName"))) { #optional property not found
            $SiteName = $null
        } else {
            $SiteName = $JsonParameters.PSobject.Properties["siteName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "siteId"))) { #optional property not found
            $SiteId = $null
        } else {
            $SiteId = $JsonParameters.PSobject.Properties["siteId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectKey"))) { #optional property not found
            $SubjectKey = $null
        } else {
            $SubjectKey = $JsonParameters.PSobject.Properties["subjectKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectId"))) { #optional property not found
            $SubjectId = $null
        } else {
            $SubjectId = $JsonParameters.PSobject.Properties["subjectId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectOid"))) { #optional property not found
            $SubjectOid = $null
        } else {
            $SubjectOid = $JsonParameters.PSobject.Properties["subjectOid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "intervalName"))) { #optional property not found
            $IntervalName = $null
        } else {
            $IntervalName = $JsonParameters.PSobject.Properties["intervalName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "intervalId"))) { #optional property not found
            $IntervalId = $null
        } else {
            $IntervalId = $JsonParameters.PSobject.Properties["intervalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recordId"))) { #optional property not found
            $RecordId = $null
        } else {
            $RecordId = $JsonParameters.PSobject.Properties["recordId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recordOid"))) { #optional property not found
            $RecordOid = $null
        } else {
            $RecordOid = $JsonParameters.PSobject.Properties["recordOid"].value
        }

        $PSO = [PSCustomObject]@{
            "formKey" = ${FormKey}
            "formId" = ${FormId}
            "siteName" = ${SiteName}
            "siteId" = ${SiteId}
            "subjectKey" = ${SubjectKey}
            "subjectId" = ${SubjectId}
            "subjectOid" = ${SubjectOid}
            "intervalName" = ${IntervalName}
            "intervalId" = ${IntervalId}
            "recordId" = ${RecordId}
            "recordOid" = ${RecordOid}
            "data" = ${VarData}
        }

        return $PSO
    }

}

