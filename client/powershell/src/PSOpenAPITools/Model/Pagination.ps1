#
# Mednet EDC API
# The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
# Version: 1.3.6
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER CurrentPage
Current index page returned
.PARAMETER Size
Number of items per page returned
.PARAMETER TotalPages
Total number of pages available
.PARAMETER TotalElements
Total number of elements (items) available
.PARAMETER Sort
No description available.
.OUTPUTS

Pagination<PSCustomObject>
#>

function Initialize-Pagination {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${CurrentPage},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Size},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TotalPages},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${TotalElements},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Sort}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Pagination' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "currentPage" = ${CurrentPage}
            "size" = ${Size}
            "totalPages" = ${TotalPages}
            "totalElements" = ${TotalElements}
            "sort" = ${Sort}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Pagination<PSCustomObject>

.DESCRIPTION

Convert from JSON to Pagination<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Pagination<PSCustomObject>
#>
function ConvertFrom-JsonToPagination {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Pagination' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Pagination
        $AllProperties = ("currentPage", "size", "totalPages", "totalElements", "sort")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "currentPage"))) { #optional property not found
            $CurrentPage = $null
        } else {
            $CurrentPage = $JsonParameters.PSobject.Properties["currentPage"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalPages"))) { #optional property not found
            $TotalPages = $null
        } else {
            $TotalPages = $JsonParameters.PSobject.Properties["totalPages"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "totalElements"))) { #optional property not found
            $TotalElements = $null
        } else {
            $TotalElements = $JsonParameters.PSobject.Properties["totalElements"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sort"))) { #optional property not found
            $Sort = $null
        } else {
            $Sort = $JsonParameters.PSobject.Properties["sort"].value
        }

        $PSO = [PSCustomObject]@{
            "currentPage" = ${CurrentPage}
            "size" = ${Size}
            "totalPages" = ${TotalPages}
            "totalElements" = ${TotalElements}
            "sort" = ${Sort}
        }

        return $PSO
    }

}

