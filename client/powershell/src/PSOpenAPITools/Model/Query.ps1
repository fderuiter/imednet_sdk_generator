#
# Mednet EDC API
# The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
# Version: 1.3.6
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER StudyKey
Unique study key
.PARAMETER SubjectId
Mednet subject ID associated with the query (if applicable)
.PARAMETER SubjectOid
Client-assigned subject OID (if applicable)
.PARAMETER AnnotationType
Category/type of the query (e.g., subject, record, question)
.PARAMETER AnnotationId
Unique system identifier for the query
.PARAMETER Type
System text identifier for the query type/location (subject, record, question)
.PARAMETER Description
Description of the query (e.g., reason or context)
.PARAMETER RecordId
Record ID associated with the query (if applicable)
.PARAMETER Variable
Variable name (field) associated with the query (if applicable)
.PARAMETER SubjectKey
Subject display ID associated with the query (if applicable)
.PARAMETER DateCreated
Date when the query was created
.PARAMETER DateModified
Date when the query was last modified
.PARAMETER QueryComments
History of comments/actions on the query
.OUTPUTS

Query<PSCustomObject>
#>

function Initialize-Query {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StudyKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SubjectId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubjectOid},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AnnotationType},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${AnnotationId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Type},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RecordId},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Variable},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubjectKey},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateCreated},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateModified},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${QueryComments}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Query' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "subjectId" = ${SubjectId}
            "subjectOid" = ${SubjectOid}
            "annotationType" = ${AnnotationType}
            "annotationId" = ${AnnotationId}
            "type" = ${Type}
            "description" = ${Description}
            "recordId" = ${RecordId}
            "variable" = ${Variable}
            "subjectKey" = ${SubjectKey}
            "dateCreated" = ${DateCreated}
            "dateModified" = ${DateModified}
            "queryComments" = ${QueryComments}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Query<PSCustomObject>

.DESCRIPTION

Convert from JSON to Query<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Query<PSCustomObject>
#>
function ConvertFrom-JsonToQuery {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Query' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Query
        $AllProperties = ("studyKey", "subjectId", "subjectOid", "annotationType", "annotationId", "type", "description", "recordId", "variable", "subjectKey", "dateCreated", "dateModified", "queryComments")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "studyKey"))) { #optional property not found
            $StudyKey = $null
        } else {
            $StudyKey = $JsonParameters.PSobject.Properties["studyKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectId"))) { #optional property not found
            $SubjectId = $null
        } else {
            $SubjectId = $JsonParameters.PSobject.Properties["subjectId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectOid"))) { #optional property not found
            $SubjectOid = $null
        } else {
            $SubjectOid = $JsonParameters.PSobject.Properties["subjectOid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "annotationType"))) { #optional property not found
            $AnnotationType = $null
        } else {
            $AnnotationType = $JsonParameters.PSobject.Properties["annotationType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "annotationId"))) { #optional property not found
            $AnnotationId = $null
        } else {
            $AnnotationId = $JsonParameters.PSobject.Properties["annotationId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "type"))) { #optional property not found
            $Type = $null
        } else {
            $Type = $JsonParameters.PSobject.Properties["type"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recordId"))) { #optional property not found
            $RecordId = $null
        } else {
            $RecordId = $JsonParameters.PSobject.Properties["recordId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "variable"))) { #optional property not found
            $Variable = $null
        } else {
            $Variable = $JsonParameters.PSobject.Properties["variable"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectKey"))) { #optional property not found
            $SubjectKey = $null
        } else {
            $SubjectKey = $JsonParameters.PSobject.Properties["subjectKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateModified"))) { #optional property not found
            $DateModified = $null
        } else {
            $DateModified = $JsonParameters.PSobject.Properties["dateModified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "queryComments"))) { #optional property not found
            $QueryComments = $null
        } else {
            $QueryComments = $JsonParameters.PSobject.Properties["queryComments"].value
        }

        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "subjectId" = ${SubjectId}
            "subjectOid" = ${SubjectOid}
            "annotationType" = ${AnnotationType}
            "annotationId" = ${AnnotationId}
            "type" = ${Type}
            "description" = ${Description}
            "recordId" = ${RecordId}
            "variable" = ${Variable}
            "subjectKey" = ${SubjectKey}
            "dateCreated" = ${DateCreated}
            "dateModified" = ${DateModified}
            "queryComments" = ${QueryComments}
        }

        return $PSO
    }

}

