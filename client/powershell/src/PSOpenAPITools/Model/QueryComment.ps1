#
# Mednet EDC API
# The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
# Version: 1.3.6
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Sequence
Sequence number of the comment/action in the query history
.PARAMETER AnnotationStatus
Status of the query after this comment (e.g., Open, Closed)
.PARAMETER User
Username of the user who made the comment or action
.PARAMETER Comment
Text of the comment
.PARAMETER Closed
Whether the query was marked closed at this step
.PARAMETER Date
Date of the comment or action
.OUTPUTS

QueryComment<PSCustomObject>
#>

function Initialize-QueryComment {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Sequence},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${AnnotationStatus},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${User},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Comment},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Closed},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Date}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => QueryComment' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "sequence" = ${Sequence}
            "annotationStatus" = ${AnnotationStatus}
            "user" = ${User}
            "comment" = ${Comment}
            "closed" = ${Closed}
            "date" = ${Date}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to QueryComment<PSCustomObject>

.DESCRIPTION

Convert from JSON to QueryComment<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

QueryComment<PSCustomObject>
#>
function ConvertFrom-JsonToQueryComment {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => QueryComment' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in QueryComment
        $AllProperties = ("sequence", "annotationStatus", "user", "comment", "closed", "date")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sequence"))) { #optional property not found
            $Sequence = $null
        } else {
            $Sequence = $JsonParameters.PSobject.Properties["sequence"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "annotationStatus"))) { #optional property not found
            $AnnotationStatus = $null
        } else {
            $AnnotationStatus = $JsonParameters.PSobject.Properties["annotationStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "user"))) { #optional property not found
            $User = $null
        } else {
            $User = $JsonParameters.PSobject.Properties["user"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "comment"))) { #optional property not found
            $Comment = $null
        } else {
            $Comment = $JsonParameters.PSobject.Properties["comment"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "closed"))) { #optional property not found
            $Closed = $null
        } else {
            $Closed = $JsonParameters.PSobject.Properties["closed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "date"))) { #optional property not found
            $Date = $null
        } else {
            $Date = $JsonParameters.PSobject.Properties["date"].value
        }

        $PSO = [PSCustomObject]@{
            "sequence" = ${Sequence}
            "annotationStatus" = ${AnnotationStatus}
            "user" = ${User}
            "comment" = ${Comment}
            "closed" = ${Closed}
            "date" = ${Date}
        }

        return $PSO
    }

}

