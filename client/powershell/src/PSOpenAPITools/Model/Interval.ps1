#
# Mednet EDC API
# The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
# Version: 1.3.6
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER StudyKey
Unique study key
.PARAMETER IntervalId
Unique system identifier for the interval (visit definition)
.PARAMETER IntervalName
Name of the interval (visit) as defined in the study
.PARAMETER IntervalDescription
Description of the interval (visit)
.PARAMETER IntervalSequence
Sequence number of the interval in the schedule
.PARAMETER IntervalGroupId
Identifier for the interval group (if intervals are grouped)
.PARAMETER IntervalGroupName
Name of the interval group
.PARAMETER Timeline
Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
.PARAMETER DefinedUsingInterval
Baseline interval used for calculating this intervalâ€™s dates
.PARAMETER WindowCalculationForm
Baseline form (name) from which the calculation date is taken
.PARAMETER WindowCalculationDate
Baseline field (variable name) from which the calculation date is taken
.PARAMETER ActualDateForm
Form used to capture the actual date for this interval
.PARAMETER ActualDate
Field (variable name) used to capture the actual date for this interval
.PARAMETER DueDateWillBeIn
Number of days from the calculation date when the interval is due
.PARAMETER NegativeSlack
Number of days before the due date that are allowed (negative window)
.PARAMETER PositiveSlack
Number of days after the due date that are allowed (positive window)
.PARAMETER EproGracePeriod
Number of days of grace period for ePRO completion after due date
.PARAMETER Forms
List of forms that are scheduled in this interval
.PARAMETER Disabled
Whether the interval is soft-deleted (disabled)
.PARAMETER DateCreated
Date when this interval was created
.PARAMETER DateModified
Date when this interval was last modified
.OUTPUTS

Interval<PSCustomObject>
#>

function Initialize-Interval {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StudyKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${IntervalId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IntervalName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IntervalDescription},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${IntervalSequence},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${IntervalGroupId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IntervalGroupName},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Timeline},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefinedUsingInterval},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WindowCalculationForm},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${WindowCalculationDate},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ActualDateForm},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${ActualDate},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DueDateWillBeIn},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NegativeSlack},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${PositiveSlack},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${EproGracePeriod},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Forms},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Disabled},
        [Parameter(Position = 19, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateCreated},
        [Parameter(Position = 20, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateModified}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Interval' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "intervalId" = ${IntervalId}
            "intervalName" = ${IntervalName}
            "intervalDescription" = ${IntervalDescription}
            "intervalSequence" = ${IntervalSequence}
            "intervalGroupId" = ${IntervalGroupId}
            "intervalGroupName" = ${IntervalGroupName}
            "timeline" = ${Timeline}
            "definedUsingInterval" = ${DefinedUsingInterval}
            "windowCalculationForm" = ${WindowCalculationForm}
            "windowCalculationDate" = ${WindowCalculationDate}
            "actualDateForm" = ${ActualDateForm}
            "actualDate" = ${ActualDate}
            "dueDateWillBeIn" = ${DueDateWillBeIn}
            "negativeSlack" = ${NegativeSlack}
            "positiveSlack" = ${PositiveSlack}
            "eproGracePeriod" = ${EproGracePeriod}
            "forms" = ${Forms}
            "disabled" = ${Disabled}
            "dateCreated" = ${DateCreated}
            "dateModified" = ${DateModified}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Interval<PSCustomObject>

.DESCRIPTION

Convert from JSON to Interval<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Interval<PSCustomObject>
#>
function ConvertFrom-JsonToInterval {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Interval' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Interval
        $AllProperties = ("studyKey", "intervalId", "intervalName", "intervalDescription", "intervalSequence", "intervalGroupId", "intervalGroupName", "timeline", "definedUsingInterval", "windowCalculationForm", "windowCalculationDate", "actualDateForm", "actualDate", "dueDateWillBeIn", "negativeSlack", "positiveSlack", "eproGracePeriod", "forms", "disabled", "dateCreated", "dateModified")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "studyKey"))) { #optional property not found
            $StudyKey = $null
        } else {
            $StudyKey = $JsonParameters.PSobject.Properties["studyKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "intervalId"))) { #optional property not found
            $IntervalId = $null
        } else {
            $IntervalId = $JsonParameters.PSobject.Properties["intervalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "intervalName"))) { #optional property not found
            $IntervalName = $null
        } else {
            $IntervalName = $JsonParameters.PSobject.Properties["intervalName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "intervalDescription"))) { #optional property not found
            $IntervalDescription = $null
        } else {
            $IntervalDescription = $JsonParameters.PSobject.Properties["intervalDescription"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "intervalSequence"))) { #optional property not found
            $IntervalSequence = $null
        } else {
            $IntervalSequence = $JsonParameters.PSobject.Properties["intervalSequence"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "intervalGroupId"))) { #optional property not found
            $IntervalGroupId = $null
        } else {
            $IntervalGroupId = $JsonParameters.PSobject.Properties["intervalGroupId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "intervalGroupName"))) { #optional property not found
            $IntervalGroupName = $null
        } else {
            $IntervalGroupName = $JsonParameters.PSobject.Properties["intervalGroupName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timeline"))) { #optional property not found
            $Timeline = $null
        } else {
            $Timeline = $JsonParameters.PSobject.Properties["timeline"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "definedUsingInterval"))) { #optional property not found
            $DefinedUsingInterval = $null
        } else {
            $DefinedUsingInterval = $JsonParameters.PSobject.Properties["definedUsingInterval"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "windowCalculationForm"))) { #optional property not found
            $WindowCalculationForm = $null
        } else {
            $WindowCalculationForm = $JsonParameters.PSobject.Properties["windowCalculationForm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "windowCalculationDate"))) { #optional property not found
            $WindowCalculationDate = $null
        } else {
            $WindowCalculationDate = $JsonParameters.PSobject.Properties["windowCalculationDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actualDateForm"))) { #optional property not found
            $ActualDateForm = $null
        } else {
            $ActualDateForm = $JsonParameters.PSobject.Properties["actualDateForm"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "actualDate"))) { #optional property not found
            $ActualDate = $null
        } else {
            $ActualDate = $JsonParameters.PSobject.Properties["actualDate"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dueDateWillBeIn"))) { #optional property not found
            $DueDateWillBeIn = $null
        } else {
            $DueDateWillBeIn = $JsonParameters.PSobject.Properties["dueDateWillBeIn"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "negativeSlack"))) { #optional property not found
            $NegativeSlack = $null
        } else {
            $NegativeSlack = $JsonParameters.PSobject.Properties["negativeSlack"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "positiveSlack"))) { #optional property not found
            $PositiveSlack = $null
        } else {
            $PositiveSlack = $JsonParameters.PSobject.Properties["positiveSlack"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "eproGracePeriod"))) { #optional property not found
            $EproGracePeriod = $null
        } else {
            $EproGracePeriod = $JsonParameters.PSobject.Properties["eproGracePeriod"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "forms"))) { #optional property not found
            $Forms = $null
        } else {
            $Forms = $JsonParameters.PSobject.Properties["forms"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "disabled"))) { #optional property not found
            $Disabled = $null
        } else {
            $Disabled = $JsonParameters.PSobject.Properties["disabled"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateModified"))) { #optional property not found
            $DateModified = $null
        } else {
            $DateModified = $JsonParameters.PSobject.Properties["dateModified"].value
        }

        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "intervalId" = ${IntervalId}
            "intervalName" = ${IntervalName}
            "intervalDescription" = ${IntervalDescription}
            "intervalSequence" = ${IntervalSequence}
            "intervalGroupId" = ${IntervalGroupId}
            "intervalGroupName" = ${IntervalGroupName}
            "timeline" = ${Timeline}
            "definedUsingInterval" = ${DefinedUsingInterval}
            "windowCalculationForm" = ${WindowCalculationForm}
            "windowCalculationDate" = ${WindowCalculationDate}
            "actualDateForm" = ${ActualDateForm}
            "actualDate" = ${ActualDate}
            "dueDateWillBeIn" = ${DueDateWillBeIn}
            "negativeSlack" = ${NegativeSlack}
            "positiveSlack" = ${PositiveSlack}
            "eproGracePeriod" = ${EproGracePeriod}
            "forms" = ${Forms}
            "disabled" = ${Disabled}
            "dateCreated" = ${DateCreated}
            "dateModified" = ${DateModified}
        }

        return $PSO
    }

}

