#
# Mednet EDC API
# The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
# Version: 1.3.6
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER JobId
Unique job identifier
.PARAMETER BatchId
Batch ID associated with the job (useful for linking with record creation requests)
.PARAMETER State
State of the job (e.g., completed, pending)
.PARAMETER DateCreated
Timestamp when the job was created
.PARAMETER DateStarted
Timestamp when the job started processing
.PARAMETER DateFinished
Timestamp when the job finished processing
.OUTPUTS

Job<PSCustomObject>
#>

function Initialize-Job {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${JobId},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${BatchId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${State},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateCreated},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateStarted},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateFinished}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Job' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "jobId" = ${JobId}
            "batchId" = ${BatchId}
            "state" = ${State}
            "dateCreated" = ${DateCreated}
            "dateStarted" = ${DateStarted}
            "dateFinished" = ${DateFinished}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Job<PSCustomObject>

.DESCRIPTION

Convert from JSON to Job<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Job<PSCustomObject>
#>
function ConvertFrom-JsonToJob {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Job' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Job
        $AllProperties = ("jobId", "batchId", "state", "dateCreated", "dateStarted", "dateFinished")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jobId"))) { #optional property not found
            $JobId = $null
        } else {
            $JobId = $JsonParameters.PSobject.Properties["jobId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "batchId"))) { #optional property not found
            $BatchId = $null
        } else {
            $BatchId = $JsonParameters.PSobject.Properties["batchId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "state"))) { #optional property not found
            $State = $null
        } else {
            $State = $JsonParameters.PSobject.Properties["state"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateStarted"))) { #optional property not found
            $DateStarted = $null
        } else {
            $DateStarted = $JsonParameters.PSobject.Properties["dateStarted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateFinished"))) { #optional property not found
            $DateFinished = $null
        } else {
            $DateFinished = $JsonParameters.PSobject.Properties["dateFinished"].value
        }

        $PSO = [PSCustomObject]@{
            "jobId" = ${JobId}
            "batchId" = ${BatchId}
            "state" = ${State}
            "dateCreated" = ${DateCreated}
            "dateStarted" = ${DateStarted}
            "dateFinished" = ${DateFinished}
        }

        return $PSO
    }

}

