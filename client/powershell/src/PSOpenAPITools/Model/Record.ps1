#
# Mednet EDC API
# The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
# Version: 1.3.6
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER StudyKey
Unique study key
.PARAMETER IntervalId
Interval ID (visit definition) that this record is associated with
.PARAMETER FormId
Form ID of the form this record instance belongs to
.PARAMETER FormKey
Form key of the form for this record instance
.PARAMETER SiteId
Site ID associated with the record
.PARAMETER RecordId
Unique record ID
.PARAMETER RecordOid
Client-assigned record OID
.PARAMETER RecordType
Type of record (e.g., SUBJECT for subject-related forms)
.PARAMETER RecordStatus
Current status of the record (e.g., Record Incomplete, Record Complete)
.PARAMETER Deleted
Whether the record is marked as deleted
.PARAMETER DateCreated
Date when this record was created
.PARAMETER DateModified
Date when this record was last modified
.PARAMETER SubjectId
Mednet subject ID that this record is associated with
.PARAMETER SubjectOid
Client-assigned subject OID for the subject this record is associated with
.PARAMETER SubjectKey
Subject display ID that this record is associated with
.PARAMETER VisitId
Visit instance ID that this record is associated with (if applicable)
.PARAMETER ParentRecordId
Record ID of the parent record if this record is a subrecord (if applicable)
.PARAMETER Keywords
List of keywords associated with the record
.PARAMETER RecordData
Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.
.OUTPUTS

Record<PSCustomObject>
#>

function Initialize-Record {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StudyKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${IntervalId},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${FormId},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FormKey},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SiteId},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${RecordId},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RecordOid},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RecordType},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${RecordStatus},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Deleted},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateCreated},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DateModified},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SubjectId},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubjectOid},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${SubjectKey},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${VisitId},
        [Parameter(Position = 16, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${ParentRecordId},
        [Parameter(Position = 17, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Keywords},
        [Parameter(Position = 18, ValueFromPipelineByPropertyName = $true)]
        [System.Collections.Hashtable]
        ${RecordData}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Record' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "intervalId" = ${IntervalId}
            "formId" = ${FormId}
            "formKey" = ${FormKey}
            "siteId" = ${SiteId}
            "recordId" = ${RecordId}
            "recordOid" = ${RecordOid}
            "recordType" = ${RecordType}
            "recordStatus" = ${RecordStatus}
            "deleted" = ${Deleted}
            "dateCreated" = ${DateCreated}
            "dateModified" = ${DateModified}
            "subjectId" = ${SubjectId}
            "subjectOid" = ${SubjectOid}
            "subjectKey" = ${SubjectKey}
            "visitId" = ${VisitId}
            "parentRecordId" = ${ParentRecordId}
            "keywords" = ${Keywords}
            "recordData" = ${RecordData}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Record<PSCustomObject>

.DESCRIPTION

Convert from JSON to Record<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Record<PSCustomObject>
#>
function ConvertFrom-JsonToRecord {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Record' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Record
        $AllProperties = ("studyKey", "intervalId", "formId", "formKey", "siteId", "recordId", "recordOid", "recordType", "recordStatus", "deleted", "dateCreated", "dateModified", "subjectId", "subjectOid", "subjectKey", "visitId", "parentRecordId", "keywords", "recordData")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "studyKey"))) { #optional property not found
            $StudyKey = $null
        } else {
            $StudyKey = $JsonParameters.PSobject.Properties["studyKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "intervalId"))) { #optional property not found
            $IntervalId = $null
        } else {
            $IntervalId = $JsonParameters.PSobject.Properties["intervalId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formId"))) { #optional property not found
            $FormId = $null
        } else {
            $FormId = $JsonParameters.PSobject.Properties["formId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "formKey"))) { #optional property not found
            $FormKey = $null
        } else {
            $FormKey = $JsonParameters.PSobject.Properties["formKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "siteId"))) { #optional property not found
            $SiteId = $null
        } else {
            $SiteId = $JsonParameters.PSobject.Properties["siteId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recordId"))) { #optional property not found
            $RecordId = $null
        } else {
            $RecordId = $JsonParameters.PSobject.Properties["recordId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recordOid"))) { #optional property not found
            $RecordOid = $null
        } else {
            $RecordOid = $JsonParameters.PSobject.Properties["recordOid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recordType"))) { #optional property not found
            $RecordType = $null
        } else {
            $RecordType = $JsonParameters.PSobject.Properties["recordType"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recordStatus"))) { #optional property not found
            $RecordStatus = $null
        } else {
            $RecordStatus = $JsonParameters.PSobject.Properties["recordStatus"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "deleted"))) { #optional property not found
            $Deleted = $null
        } else {
            $Deleted = $JsonParameters.PSobject.Properties["deleted"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateCreated"))) { #optional property not found
            $DateCreated = $null
        } else {
            $DateCreated = $JsonParameters.PSobject.Properties["dateCreated"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "dateModified"))) { #optional property not found
            $DateModified = $null
        } else {
            $DateModified = $JsonParameters.PSobject.Properties["dateModified"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectId"))) { #optional property not found
            $SubjectId = $null
        } else {
            $SubjectId = $JsonParameters.PSobject.Properties["subjectId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectOid"))) { #optional property not found
            $SubjectOid = $null
        } else {
            $SubjectOid = $JsonParameters.PSobject.Properties["subjectOid"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "subjectKey"))) { #optional property not found
            $SubjectKey = $null
        } else {
            $SubjectKey = $JsonParameters.PSobject.Properties["subjectKey"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "visitId"))) { #optional property not found
            $VisitId = $null
        } else {
            $VisitId = $JsonParameters.PSobject.Properties["visitId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "parentRecordId"))) { #optional property not found
            $ParentRecordId = $null
        } else {
            $ParentRecordId = $JsonParameters.PSobject.Properties["parentRecordId"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "keywords"))) { #optional property not found
            $Keywords = $null
        } else {
            $Keywords = $JsonParameters.PSobject.Properties["keywords"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "recordData"))) { #optional property not found
            $RecordData = $null
        } else {
            $RecordData = $JsonParameters.PSobject.Properties["recordData"].value
        }

        $PSO = [PSCustomObject]@{
            "studyKey" = ${StudyKey}
            "intervalId" = ${IntervalId}
            "formId" = ${FormId}
            "formKey" = ${FormKey}
            "siteId" = ${SiteId}
            "recordId" = ${RecordId}
            "recordOid" = ${RecordOid}
            "recordType" = ${RecordType}
            "recordStatus" = ${RecordStatus}
            "deleted" = ${Deleted}
            "dateCreated" = ${DateCreated}
            "dateModified" = ${DateModified}
            "subjectId" = ${SubjectId}
            "subjectOid" = ${SubjectOid}
            "subjectKey" = ${SubjectKey}
            "visitId" = ${VisitId}
            "parentRecordId" = ${ParentRecordId}
            "keywords" = ${Keywords}
            "recordData" = ${RecordData}
        }

        return $PSO
    }

}

