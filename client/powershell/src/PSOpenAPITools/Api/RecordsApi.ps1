#
# Mednet EDC API
# The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
# Version: 1.3.6
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

Add new record or update subject/record data

.DESCRIPTION

No description available.

.PARAMETER StudyKey
Study key identifying the study context for the request

.PARAMETER ComponentsSchemasRecordCreateRequestItem
An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update).

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RecordJobStatus
#>
function New-Records {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StudyKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [PSCustomObject[]]
        ${ComponentsSchemasRecordCreateRequestItem},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: New-Records' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        # HTTP header 'Content-Type'
        $LocalVarContentTypes = @('application/json')

        $LocalVarUri = '/studies/{studyKey}/records'
        if (!$StudyKey) {
            throw "Error! The required parameter `StudyKey` missing when calling createRecords."
        }
        $LocalVarUri = $LocalVarUri.replace('{studyKey}', [System.Web.HTTPUtility]::UrlEncode($StudyKey))

        if (!$ComponentsSchemasRecordCreateRequestItem) {
            throw "Error! The required parameter `ComponentsSchemasRecordCreateRequestItem` missing when calling createRecords."
        }

        $LocalVarBodyParameter = ConvertTo-Json @($ComponentsSchemasRecordCreateRequestItem) -Depth 100

        if ($Configuration["ApiKeyPrefix"] -and $Configuration["ApiKeyPrefix"]["x-api-key"]) {
            $apiKeyPrefix = $Configuration["ApiKeyPrefix"]["x-api-key"]
        } else {
            $apiKeyPrefix = ""
        }
        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["x-api-key"]) {
            $LocalVarHeaderParameters['x-api-key'] = $apiKeyPrefix + $Configuration["ApiKey"]["x-api-key"]
            Write-Verbose ("Using API key 'x-api-key' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKeyPrefix"] -and $Configuration["ApiKeyPrefix"]["x-imn-security-key"]) {
            $apiKeyPrefix = $Configuration["ApiKeyPrefix"]["x-imn-security-key"]
        } else {
            $apiKeyPrefix = ""
        }
        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["x-imn-security-key"]) {
            $LocalVarHeaderParameters['x-imn-security-key'] = $apiKeyPrefix + $Configuration["ApiKey"]["x-imn-security-key"]
            Write-Verbose ("Using API key 'x-imn-security-key' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'POST' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RecordJobStatus" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

<#
.SYNOPSIS

List records (eCRF instances) in a study

.DESCRIPTION

No description available.

.PARAMETER StudyKey
Study key identifying the study context for the request

.PARAMETER Page
Page index to retrieve (0-based)

.PARAMETER Size
Number of items to return per page (max 500)

.PARAMETER Sort
Sorting criteria in the format `property,ASC` or `property,DESC`. Can be repeated.

.PARAMETER Filter
Optional filter criteria to apply, in the format `attribute==value` with support for >, >=, <, <=, !=. Multiple criteria can be combined with `;` (AND) or `,` (OR).

.PARAMETER RecordDataFilter
Optional filter criteria to apply on recordData fields (question responses). Supports ==, !=, <, <=, >, >=, =~ (contains) and can combine multiple criteria with `;` (AND) or `,` (OR).

.PARAMETER WithHttpInfo

A switch when turned on will return a hash table of Response, StatusCode and Headers instead of just the Response

.OUTPUTS

RecordList
#>
function Invoke-ListRecords {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${StudyKey},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Page},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [System.Nullable[Int32]]
        ${Size},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Sort},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${Filter},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true, Mandatory = $false)]
        [String]
        ${RecordDataFilter},
        [Switch]
        $WithHttpInfo
    )

    Process {
        'Calling method: Invoke-ListRecords' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $LocalVarAccepts = @()
        $LocalVarContentTypes = @()
        $LocalVarQueryParameters = @{}
        $LocalVarHeaderParameters = @{}
        $LocalVarFormParameters = @{}
        $LocalVarPathParameters = @{}
        $LocalVarCookieParameters = @{}
        $LocalVarBodyParameter = $null

        $Configuration = Get-Configuration
        # HTTP header 'Accept' (if needed)
        $LocalVarAccepts = @('application/json')

        $LocalVarUri = '/studies/{studyKey}/records'
        if (!$StudyKey) {
            throw "Error! The required parameter `StudyKey` missing when calling listRecords."
        }
        $LocalVarUri = $LocalVarUri.replace('{studyKey}', [System.Web.HTTPUtility]::UrlEncode($StudyKey))

        if ($Page) {
            $LocalVarQueryParameters['page'] = $Page
        }

        if ($Size) {
            $LocalVarQueryParameters['size'] = $Size
        }

        if ($Sort) {
            $LocalVarQueryParameters['sort'] = $Sort
        }

        if ($Filter) {
            $LocalVarQueryParameters['filter'] = $Filter
        }

        if ($RecordDataFilter) {
            $LocalVarQueryParameters['recordDataFilter'] = $RecordDataFilter
        }

        if ($Configuration["ApiKeyPrefix"] -and $Configuration["ApiKeyPrefix"]["x-api-key"]) {
            $apiKeyPrefix = $Configuration["ApiKeyPrefix"]["x-api-key"]
        } else {
            $apiKeyPrefix = ""
        }
        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["x-api-key"]) {
            $LocalVarHeaderParameters['x-api-key'] = $apiKeyPrefix + $Configuration["ApiKey"]["x-api-key"]
            Write-Verbose ("Using API key 'x-api-key' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        if ($Configuration["ApiKeyPrefix"] -and $Configuration["ApiKeyPrefix"]["x-imn-security-key"]) {
            $apiKeyPrefix = $Configuration["ApiKeyPrefix"]["x-imn-security-key"]
        } else {
            $apiKeyPrefix = ""
        }
        if ($Configuration["ApiKey"] -and $Configuration["ApiKey"]["x-imn-security-key"]) {
            $LocalVarHeaderParameters['x-imn-security-key'] = $apiKeyPrefix + $Configuration["ApiKey"]["x-imn-security-key"]
            Write-Verbose ("Using API key 'x-imn-security-key' in the header for authentication in {0}" -f $MyInvocation.MyCommand)
        }

        $LocalVarResult = Invoke-ApiClient -Method 'GET' `
                                -Uri $LocalVarUri `
                                -Accepts $LocalVarAccepts `
                                -ContentTypes $LocalVarContentTypes `
                                -Body $LocalVarBodyParameter `
                                -HeaderParameters $LocalVarHeaderParameters `
                                -QueryParameters $LocalVarQueryParameters `
                                -FormParameters $LocalVarFormParameters `
                                -CookieParameters $LocalVarCookieParameters `
                                -ReturnType "RecordList" `
                                -IsBodyNullable $false

        if ($WithHttpInfo.IsPresent) {
            return $LocalVarResult
        } else {
            return $LocalVarResult["Response"]
        }
    }
}

