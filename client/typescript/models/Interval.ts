/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * OpenAPI spec version: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { ComponentsSchemasIntervalFormsItem } from '../models/ComponentsSchemasIntervalFormsItem';
import { HttpFile } from '../http/http';

export class Interval {
    /**
    * Unique study key
    */
    'studyKey'?: string;
    /**
    * Unique system identifier for the interval (visit definition)
    */
    'intervalId'?: number;
    /**
    * Name of the interval (visit) as defined in the study
    */
    'intervalName'?: string;
    /**
    * Description of the interval (visit)
    */
    'intervalDescription'?: string;
    /**
    * Sequence number of the interval in the schedule
    */
    'intervalSequence'?: number;
    /**
    * Identifier for the interval group (if intervals are grouped)
    */
    'intervalGroupId'?: number;
    /**
    * Name of the interval group
    */
    'intervalGroupName'?: string;
    /**
    * Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
    */
    'timeline'?: string;
    /**
    * Baseline interval used for calculating this intervalâ€™s dates
    */
    'definedUsingInterval'?: string;
    /**
    * Baseline form (name) from which the calculation date is taken
    */
    'windowCalculationForm'?: string;
    /**
    * Baseline field (variable name) from which the calculation date is taken
    */
    'windowCalculationDate'?: string;
    /**
    * Form used to capture the actual date for this interval
    */
    'actualDateForm'?: string;
    /**
    * Field (variable name) used to capture the actual date for this interval
    */
    'actualDate'?: string;
    /**
    * Number of days from the calculation date when the interval is due
    */
    'dueDateWillBeIn'?: number;
    /**
    * Number of days before the due date that are allowed (negative window)
    */
    'negativeSlack'?: number;
    /**
    * Number of days after the due date that are allowed (positive window)
    */
    'positiveSlack'?: number;
    /**
    * Number of days of grace period for ePRO completion after due date
    */
    'eproGracePeriod'?: number;
    /**
    * List of forms that are scheduled in this interval
    */
    'forms'?: Array<ComponentsSchemasIntervalFormsItem>;
    /**
    * Whether the interval is soft-deleted (disabled)
    */
    'disabled'?: boolean;
    /**
    * Date when this interval was created
    */
    'dateCreated'?: string;
    /**
    * Date when this interval was last modified
    */
    'dateModified'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "studyKey",
            "baseName": "studyKey",
            "type": "string",
            "format": ""
        },
        {
            "name": "intervalId",
            "baseName": "intervalId",
            "type": "number",
            "format": ""
        },
        {
            "name": "intervalName",
            "baseName": "intervalName",
            "type": "string",
            "format": ""
        },
        {
            "name": "intervalDescription",
            "baseName": "intervalDescription",
            "type": "string",
            "format": ""
        },
        {
            "name": "intervalSequence",
            "baseName": "intervalSequence",
            "type": "number",
            "format": ""
        },
        {
            "name": "intervalGroupId",
            "baseName": "intervalGroupId",
            "type": "number",
            "format": ""
        },
        {
            "name": "intervalGroupName",
            "baseName": "intervalGroupName",
            "type": "string",
            "format": ""
        },
        {
            "name": "timeline",
            "baseName": "timeline",
            "type": "string",
            "format": ""
        },
        {
            "name": "definedUsingInterval",
            "baseName": "definedUsingInterval",
            "type": "string",
            "format": ""
        },
        {
            "name": "windowCalculationForm",
            "baseName": "windowCalculationForm",
            "type": "string",
            "format": ""
        },
        {
            "name": "windowCalculationDate",
            "baseName": "windowCalculationDate",
            "type": "string",
            "format": ""
        },
        {
            "name": "actualDateForm",
            "baseName": "actualDateForm",
            "type": "string",
            "format": ""
        },
        {
            "name": "actualDate",
            "baseName": "actualDate",
            "type": "string",
            "format": ""
        },
        {
            "name": "dueDateWillBeIn",
            "baseName": "dueDateWillBeIn",
            "type": "number",
            "format": ""
        },
        {
            "name": "negativeSlack",
            "baseName": "negativeSlack",
            "type": "number",
            "format": ""
        },
        {
            "name": "positiveSlack",
            "baseName": "positiveSlack",
            "type": "number",
            "format": ""
        },
        {
            "name": "eproGracePeriod",
            "baseName": "eproGracePeriod",
            "type": "number",
            "format": ""
        },
        {
            "name": "forms",
            "baseName": "forms",
            "type": "Array<ComponentsSchemasIntervalFormsItem>",
            "format": ""
        },
        {
            "name": "disabled",
            "baseName": "disabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "dateCreated",
            "baseName": "dateCreated",
            "type": "string",
            "format": ""
        },
        {
            "name": "dateModified",
            "baseName": "dateModified",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Interval.attributeTypeMap;
    }

    public constructor() {
    }
}
