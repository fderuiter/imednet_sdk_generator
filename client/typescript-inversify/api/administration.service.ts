/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { InlineObject } from '../model/inlineObject';
import { InlineObject1 } from '../model/inlineObject1';
import { InlineObject2 } from '../model/inlineObject2';
import { InlineObject3 } from '../model/inlineObject3';
import { InlineObject5 } from '../model/inlineObject5';
import { UserList } from '../model/userList';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class AdministrationService {
    private basePath: string = 'https://edc.prod.imednetapi.com/api/v1/edc';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * List users and their roles in a study
     * 
     * @param studyKey Study key identifying the study context for the request
     * @param page Page index to retrieve (0-based)
     * @param size Number of items to return per page (max 500)
     * @param sort Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated.
     * @param includeInactive For user listing, whether to include inactive users
     
     */
    public listUsers(studyKey: string, page?: number, size?: number, sort?: string, includeInactive?: boolean, observe?: 'body', headers?: Headers): Observable<UserList>;
    public listUsers(studyKey: string, page?: number, size?: number, sort?: string, includeInactive?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<UserList>>;
    public listUsers(studyKey: string, page?: number, size?: number, sort?: string, includeInactive?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (studyKey === null || studyKey === undefined){
            throw new Error('Required parameter studyKey was null or undefined when calling listUsers.');
        }

        let queryParameters: string[] = [];
        if (page !== undefined) {
            queryParameters.push('page='+encodeURIComponent(String(page)));
        }
        if (size !== undefined) {
            queryParameters.push('size='+encodeURIComponent(String(size)));
        }
        if (sort !== undefined) {
            queryParameters.push('sort='+encodeURIComponent(String(sort)));
        }
        if (includeInactive !== undefined) {
            queryParameters.push('includeInactive='+encodeURIComponent(String(includeInactive)));
        }

        // authentication (apiKeyAuth) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['x-api-key']) {
            headers['x-api-key'] = this.APIConfiguration.apiKeys['x-api-key'];
        }
        // authentication (securityKeyAuth) required
        if (this.APIConfiguration.apiKeys && this.APIConfiguration.apiKeys['x-imn-security-key']) {
            headers['x-imn-security-key'] = this.APIConfiguration.apiKeys['x-imn-security-key'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<UserList>> = this.httpClient.get(`${this.basePath}/studies/${encodeURIComponent(String(studyKey))}/users?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <UserList>(httpResponse.response))
               );
        }
        return response;
    }

}
