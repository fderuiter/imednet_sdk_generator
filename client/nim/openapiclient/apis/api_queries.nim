#
# Mednet EDC API
# 
# The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
# The version of the OpenAPI document: 1.3.6
# 
# Generated by: https://openapi-generator.tech
#

import httpclient
import json
import logging
import marshal
import options
import strformat
import strutils
import tables
import typetraits
import uri

import ../models/model_query_list
import ../models/model_inline_object
import ../models/model_inline_object_1
import ../models/model_inline_object_2
import ../models/model_inline_object_3
import ../models/model_inline_object_5

const basepath = "https://edc.prod.imednetapi.com/api/v1/edc"

template constructResult[T](response: Response): untyped =
  if response.code in {Http200, Http201, Http202, Http204, Http206}:
    try:
      when name(stripGenericParams(T.typedesc).typedesc) == name(Table):
        (some(json.to(parseJson(response.body), T.typedesc)), response)
      else:
        (some(marshal.to[T](response.body)), response)
    except JsonParsingError:
      # The server returned a malformed response though the response code is 2XX
      # TODO: need better error handling
      error("JsonParsingError")
      (none(T.typedesc), response)
  else:
    (none(T.typedesc), response)


proc listQueries*(httpClient: HttpClient, studyKey: string, page: int, size: int, sort: string, filter: string): (Option[QueryList], Response) =
  ## List data queries in a study
  let url_encoded_query_params = encodeQuery([
    ("page", $page), # Page index to retrieve (0-based)
    ("size", $size), # Number of items to return per page (max 500)
    ("sort", $sort), # Sorting criteria in the format `property,ASC` or `property,DESC`. Can be repeated.
    ("filter", $filter), # Optional filter criteria to apply, in the format `attribute==value` with support for >, >=, <, <=, !=. Multiple criteria can be combined with `;` (AND) or `,` (OR).
  ])

  let response = httpClient.get(basepath & fmt"/studies/{studyKey}/queries" & "?" & url_encoded_query_params)
  constructResult[QueryList](response)

