note
 description:"[
		Mednet EDC API
 		The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
  		The version of the OpenAPI document: 1.3.6
 	    

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"
class INTERVAL




feature --Access

    study_key: detachable STRING_32
      -- Unique study key
    interval_id: INTEGER_32
      -- Unique system identifier for the interval (visit definition)
    interval_name: detachable STRING_32
      -- Name of the interval (visit) as defined in the study
    interval_description: detachable STRING_32
      -- Description of the interval (visit)
    interval_sequence: INTEGER_32
      -- Sequence number of the interval in the schedule
    interval_group_id: INTEGER_32
      -- Identifier for the interval group (if intervals are grouped)
    interval_group_name: detachable STRING_32
      -- Name of the interval group
    timeline: detachable STRING_32
      -- Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
    defined_using_interval: detachable STRING_32
      -- Baseline interval used for calculating this intervalâ€™s dates
    window_calculation_form: detachable STRING_32
      -- Baseline form (name) from which the calculation date is taken
    window_calculation_date: detachable STRING_32
      -- Baseline field (variable name) from which the calculation date is taken
    actual_date_form: detachable STRING_32
      -- Form used to capture the actual date for this interval
    actual_date: detachable STRING_32
      -- Field (variable name) used to capture the actual date for this interval
    due_date_will_be_in: INTEGER_32
      -- Number of days from the calculation date when the interval is due
    negative_slack: INTEGER_32
      -- Number of days before the due date that are allowed (negative window)
    positive_slack: INTEGER_32
      -- Number of days after the due date that are allowed (positive window)
    epro_grace_period: INTEGER_32
      -- Number of days of grace period for ePRO completion after due date
    forms: detachable LIST [COMPONENTS_SCHEMAS_INTERVAL_FORMS_ITEM]
      -- List of forms that are scheduled in this interval
    disabled: BOOLEAN
      -- Whether the interval is soft-deleted (disabled)
    date_created: detachable STRING_32
      -- Date when this interval was created
    date_modified: detachable STRING_32
      -- Date when this interval was last modified

feature -- Change Element

    set_study_key (a_name: like study_key)
        -- Set 'study_key' with 'a_name'.
      do
        study_key := a_name
      ensure
        study_key_set: study_key = a_name
      end

    set_interval_id (a_name: like interval_id)
        -- Set 'interval_id' with 'a_name'.
      do
        interval_id := a_name
      ensure
        interval_id_set: interval_id = a_name
      end

    set_interval_name (a_name: like interval_name)
        -- Set 'interval_name' with 'a_name'.
      do
        interval_name := a_name
      ensure
        interval_name_set: interval_name = a_name
      end

    set_interval_description (a_name: like interval_description)
        -- Set 'interval_description' with 'a_name'.
      do
        interval_description := a_name
      ensure
        interval_description_set: interval_description = a_name
      end

    set_interval_sequence (a_name: like interval_sequence)
        -- Set 'interval_sequence' with 'a_name'.
      do
        interval_sequence := a_name
      ensure
        interval_sequence_set: interval_sequence = a_name
      end

    set_interval_group_id (a_name: like interval_group_id)
        -- Set 'interval_group_id' with 'a_name'.
      do
        interval_group_id := a_name
      ensure
        interval_group_id_set: interval_group_id = a_name
      end

    set_interval_group_name (a_name: like interval_group_name)
        -- Set 'interval_group_name' with 'a_name'.
      do
        interval_group_name := a_name
      ensure
        interval_group_name_set: interval_group_name = a_name
      end

    set_timeline (a_name: like timeline)
        -- Set 'timeline' with 'a_name'.
      do
        timeline := a_name
      ensure
        timeline_set: timeline = a_name
      end

    set_defined_using_interval (a_name: like defined_using_interval)
        -- Set 'defined_using_interval' with 'a_name'.
      do
        defined_using_interval := a_name
      ensure
        defined_using_interval_set: defined_using_interval = a_name
      end

    set_window_calculation_form (a_name: like window_calculation_form)
        -- Set 'window_calculation_form' with 'a_name'.
      do
        window_calculation_form := a_name
      ensure
        window_calculation_form_set: window_calculation_form = a_name
      end

    set_window_calculation_date (a_name: like window_calculation_date)
        -- Set 'window_calculation_date' with 'a_name'.
      do
        window_calculation_date := a_name
      ensure
        window_calculation_date_set: window_calculation_date = a_name
      end

    set_actual_date_form (a_name: like actual_date_form)
        -- Set 'actual_date_form' with 'a_name'.
      do
        actual_date_form := a_name
      ensure
        actual_date_form_set: actual_date_form = a_name
      end

    set_actual_date (a_name: like actual_date)
        -- Set 'actual_date' with 'a_name'.
      do
        actual_date := a_name
      ensure
        actual_date_set: actual_date = a_name
      end

    set_due_date_will_be_in (a_name: like due_date_will_be_in)
        -- Set 'due_date_will_be_in' with 'a_name'.
      do
        due_date_will_be_in := a_name
      ensure
        due_date_will_be_in_set: due_date_will_be_in = a_name
      end

    set_negative_slack (a_name: like negative_slack)
        -- Set 'negative_slack' with 'a_name'.
      do
        negative_slack := a_name
      ensure
        negative_slack_set: negative_slack = a_name
      end

    set_positive_slack (a_name: like positive_slack)
        -- Set 'positive_slack' with 'a_name'.
      do
        positive_slack := a_name
      ensure
        positive_slack_set: positive_slack = a_name
      end

    set_epro_grace_period (a_name: like epro_grace_period)
        -- Set 'epro_grace_period' with 'a_name'.
      do
        epro_grace_period := a_name
      ensure
        epro_grace_period_set: epro_grace_period = a_name
      end

    set_forms (a_name: like forms)
        -- Set 'forms' with 'a_name'.
      do
        forms := a_name
      ensure
        forms_set: forms = a_name
      end

    set_disabled (a_name: like disabled)
        -- Set 'disabled' with 'a_name'.
      do
        disabled := a_name
      ensure
        disabled_set: disabled = a_name
      end

    set_date_created (a_name: like date_created)
        -- Set 'date_created' with 'a_name'.
      do
        date_created := a_name
      ensure
        date_created_set: date_created = a_name
      end

    set_date_modified (a_name: like date_modified)
        -- Set 'date_modified' with 'a_name'.
      do
        date_modified := a_name
      ensure
        date_modified_set: date_modified = a_name
      end


 feature -- Status Report

    output: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass INTERVAL%N")
        if attached study_key as l_study_key then
          Result.append ("%Nstudy_key:")
          Result.append (l_study_key.out)
          Result.append ("%N")
        end
        if attached interval_id as l_interval_id then
          Result.append ("%Ninterval_id:")
          Result.append (l_interval_id.out)
          Result.append ("%N")
        end
        if attached interval_name as l_interval_name then
          Result.append ("%Ninterval_name:")
          Result.append (l_interval_name.out)
          Result.append ("%N")
        end
        if attached interval_description as l_interval_description then
          Result.append ("%Ninterval_description:")
          Result.append (l_interval_description.out)
          Result.append ("%N")
        end
        if attached interval_sequence as l_interval_sequence then
          Result.append ("%Ninterval_sequence:")
          Result.append (l_interval_sequence.out)
          Result.append ("%N")
        end
        if attached interval_group_id as l_interval_group_id then
          Result.append ("%Ninterval_group_id:")
          Result.append (l_interval_group_id.out)
          Result.append ("%N")
        end
        if attached interval_group_name as l_interval_group_name then
          Result.append ("%Ninterval_group_name:")
          Result.append (l_interval_group_name.out)
          Result.append ("%N")
        end
        if attached timeline as l_timeline then
          Result.append ("%Ntimeline:")
          Result.append (l_timeline.out)
          Result.append ("%N")
        end
        if attached defined_using_interval as l_defined_using_interval then
          Result.append ("%Ndefined_using_interval:")
          Result.append (l_defined_using_interval.out)
          Result.append ("%N")
        end
        if attached window_calculation_form as l_window_calculation_form then
          Result.append ("%Nwindow_calculation_form:")
          Result.append (l_window_calculation_form.out)
          Result.append ("%N")
        end
        if attached window_calculation_date as l_window_calculation_date then
          Result.append ("%Nwindow_calculation_date:")
          Result.append (l_window_calculation_date.out)
          Result.append ("%N")
        end
        if attached actual_date_form as l_actual_date_form then
          Result.append ("%Nactual_date_form:")
          Result.append (l_actual_date_form.out)
          Result.append ("%N")
        end
        if attached actual_date as l_actual_date then
          Result.append ("%Nactual_date:")
          Result.append (l_actual_date.out)
          Result.append ("%N")
        end
        if attached due_date_will_be_in as l_due_date_will_be_in then
          Result.append ("%Ndue_date_will_be_in:")
          Result.append (l_due_date_will_be_in.out)
          Result.append ("%N")
        end
        if attached negative_slack as l_negative_slack then
          Result.append ("%Nnegative_slack:")
          Result.append (l_negative_slack.out)
          Result.append ("%N")
        end
        if attached positive_slack as l_positive_slack then
          Result.append ("%Npositive_slack:")
          Result.append (l_positive_slack.out)
          Result.append ("%N")
        end
        if attached epro_grace_period as l_epro_grace_period then
          Result.append ("%Nepro_grace_period:")
          Result.append (l_epro_grace_period.out)
          Result.append ("%N")
        end
        if attached forms as l_forms then
          across l_forms as ic loop
            Result.append ("%N forms:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end
        if attached disabled as l_disabled then
          Result.append ("%Ndisabled:")
          Result.append (l_disabled.out)
          Result.append ("%N")
        end
        if attached date_created as l_date_created then
          Result.append ("%Ndate_created:")
          Result.append (l_date_created.out)
          Result.append ("%N")
        end
        if attached date_modified as l_date_modified then
          Result.append ("%Ndate_modified:")
          Result.append (l_date_modified.out)
          Result.append ("%N")
        end
      end
end

