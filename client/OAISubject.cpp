/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubject::OAISubject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubject::OAISubject() {
    this->initializeModel();
}

OAISubject::~OAISubject() {}

void OAISubject::initializeModel() {

    m_study_key_isSet = false;
    m_study_key_isValid = false;

    m_subject_id_isSet = false;
    m_subject_id_isValid = false;

    m_subject_oid_isSet = false;
    m_subject_oid_isValid = false;

    m_subject_key_isSet = false;
    m_subject_key_isValid = false;

    m_subject_status_isSet = false;
    m_subject_status_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_site_name_isSet = false;
    m_site_name_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_enrollment_start_date_isSet = false;
    m_enrollment_start_date_isValid = false;

    m_date_created_isSet = false;
    m_date_created_isValid = false;

    m_date_modified_isSet = false;
    m_date_modified_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;
}

void OAISubject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubject::fromJsonObject(QJsonObject json) {

    m_study_key_isValid = ::OpenAPI::fromJsonValue(m_study_key, json[QString("studyKey")]);
    m_study_key_isSet = !json[QString("studyKey")].isNull() && m_study_key_isValid;

    m_subject_id_isValid = ::OpenAPI::fromJsonValue(m_subject_id, json[QString("subjectId")]);
    m_subject_id_isSet = !json[QString("subjectId")].isNull() && m_subject_id_isValid;

    m_subject_oid_isValid = ::OpenAPI::fromJsonValue(m_subject_oid, json[QString("subjectOid")]);
    m_subject_oid_isSet = !json[QString("subjectOid")].isNull() && m_subject_oid_isValid;

    m_subject_key_isValid = ::OpenAPI::fromJsonValue(m_subject_key, json[QString("subjectKey")]);
    m_subject_key_isSet = !json[QString("subjectKey")].isNull() && m_subject_key_isValid;

    m_subject_status_isValid = ::OpenAPI::fromJsonValue(m_subject_status, json[QString("subjectStatus")]);
    m_subject_status_isSet = !json[QString("subjectStatus")].isNull() && m_subject_status_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("siteId")]);
    m_site_id_isSet = !json[QString("siteId")].isNull() && m_site_id_isValid;

    m_site_name_isValid = ::OpenAPI::fromJsonValue(m_site_name, json[QString("siteName")]);
    m_site_name_isSet = !json[QString("siteName")].isNull() && m_site_name_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_enrollment_start_date_isValid = ::OpenAPI::fromJsonValue(m_enrollment_start_date, json[QString("enrollmentStartDate")]);
    m_enrollment_start_date_isSet = !json[QString("enrollmentStartDate")].isNull() && m_enrollment_start_date_isValid;

    m_date_created_isValid = ::OpenAPI::fromJsonValue(m_date_created, json[QString("dateCreated")]);
    m_date_created_isSet = !json[QString("dateCreated")].isNull() && m_date_created_isValid;

    m_date_modified_isValid = ::OpenAPI::fromJsonValue(m_date_modified, json[QString("dateModified")]);
    m_date_modified_isSet = !json[QString("dateModified")].isNull() && m_date_modified_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;
}

QString OAISubject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubject::asJsonObject() const {
    QJsonObject obj;
    if (m_study_key_isSet) {
        obj.insert(QString("studyKey"), ::OpenAPI::toJsonValue(m_study_key));
    }
    if (m_subject_id_isSet) {
        obj.insert(QString("subjectId"), ::OpenAPI::toJsonValue(m_subject_id));
    }
    if (m_subject_oid_isSet) {
        obj.insert(QString("subjectOid"), ::OpenAPI::toJsonValue(m_subject_oid));
    }
    if (m_subject_key_isSet) {
        obj.insert(QString("subjectKey"), ::OpenAPI::toJsonValue(m_subject_key));
    }
    if (m_subject_status_isSet) {
        obj.insert(QString("subjectStatus"), ::OpenAPI::toJsonValue(m_subject_status));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("siteId"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_site_name_isSet) {
        obj.insert(QString("siteName"), ::OpenAPI::toJsonValue(m_site_name));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_enrollment_start_date_isSet) {
        obj.insert(QString("enrollmentStartDate"), ::OpenAPI::toJsonValue(m_enrollment_start_date));
    }
    if (m_date_created_isSet) {
        obj.insert(QString("dateCreated"), ::OpenAPI::toJsonValue(m_date_created));
    }
    if (m_date_modified_isSet) {
        obj.insert(QString("dateModified"), ::OpenAPI::toJsonValue(m_date_modified));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    return obj;
}

QString OAISubject::getStudyKey() const {
    return m_study_key;
}
void OAISubject::setStudyKey(const QString &study_key) {
    m_study_key = study_key;
    m_study_key_isSet = true;
}

bool OAISubject::is_study_key_Set() const{
    return m_study_key_isSet;
}

bool OAISubject::is_study_key_Valid() const{
    return m_study_key_isValid;
}

qint32 OAISubject::getSubjectId() const {
    return m_subject_id;
}
void OAISubject::setSubjectId(const qint32 &subject_id) {
    m_subject_id = subject_id;
    m_subject_id_isSet = true;
}

bool OAISubject::is_subject_id_Set() const{
    return m_subject_id_isSet;
}

bool OAISubject::is_subject_id_Valid() const{
    return m_subject_id_isValid;
}

QString OAISubject::getSubjectOid() const {
    return m_subject_oid;
}
void OAISubject::setSubjectOid(const QString &subject_oid) {
    m_subject_oid = subject_oid;
    m_subject_oid_isSet = true;
}

bool OAISubject::is_subject_oid_Set() const{
    return m_subject_oid_isSet;
}

bool OAISubject::is_subject_oid_Valid() const{
    return m_subject_oid_isValid;
}

QString OAISubject::getSubjectKey() const {
    return m_subject_key;
}
void OAISubject::setSubjectKey(const QString &subject_key) {
    m_subject_key = subject_key;
    m_subject_key_isSet = true;
}

bool OAISubject::is_subject_key_Set() const{
    return m_subject_key_isSet;
}

bool OAISubject::is_subject_key_Valid() const{
    return m_subject_key_isValid;
}

QString OAISubject::getSubjectStatus() const {
    return m_subject_status;
}
void OAISubject::setSubjectStatus(const QString &subject_status) {
    m_subject_status = subject_status;
    m_subject_status_isSet = true;
}

bool OAISubject::is_subject_status_Set() const{
    return m_subject_status_isSet;
}

bool OAISubject::is_subject_status_Valid() const{
    return m_subject_status_isValid;
}

qint32 OAISubject::getSiteId() const {
    return m_site_id;
}
void OAISubject::setSiteId(const qint32 &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAISubject::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAISubject::is_site_id_Valid() const{
    return m_site_id_isValid;
}

QString OAISubject::getSiteName() const {
    return m_site_name;
}
void OAISubject::setSiteName(const QString &site_name) {
    m_site_name = site_name;
    m_site_name_isSet = true;
}

bool OAISubject::is_site_name_Set() const{
    return m_site_name_isSet;
}

bool OAISubject::is_site_name_Valid() const{
    return m_site_name_isValid;
}

bool OAISubject::isDeleted() const {
    return m_deleted;
}
void OAISubject::setDeleted(const bool &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAISubject::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAISubject::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAISubject::getEnrollmentStartDate() const {
    return m_enrollment_start_date;
}
void OAISubject::setEnrollmentStartDate(const QString &enrollment_start_date) {
    m_enrollment_start_date = enrollment_start_date;
    m_enrollment_start_date_isSet = true;
}

bool OAISubject::is_enrollment_start_date_Set() const{
    return m_enrollment_start_date_isSet;
}

bool OAISubject::is_enrollment_start_date_Valid() const{
    return m_enrollment_start_date_isValid;
}

QString OAISubject::getDateCreated() const {
    return m_date_created;
}
void OAISubject::setDateCreated(const QString &date_created) {
    m_date_created = date_created;
    m_date_created_isSet = true;
}

bool OAISubject::is_date_created_Set() const{
    return m_date_created_isSet;
}

bool OAISubject::is_date_created_Valid() const{
    return m_date_created_isValid;
}

QString OAISubject::getDateModified() const {
    return m_date_modified;
}
void OAISubject::setDateModified(const QString &date_modified) {
    m_date_modified = date_modified;
    m_date_modified_isSet = true;
}

bool OAISubject::is_date_modified_Set() const{
    return m_date_modified_isSet;
}

bool OAISubject::is_date_modified_Valid() const{
    return m_date_modified_isValid;
}

QList<OAIKeyword> OAISubject::getKeywords() const {
    return m_keywords;
}
void OAISubject::setKeywords(const QList<OAIKeyword> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAISubject::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAISubject::is_keywords_Valid() const{
    return m_keywords_isValid;
}

bool OAISubject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_study_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_oid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrollment_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_modified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubject::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
