/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services.\nThis specification documents all available endpoints in the latest version of the API.\n
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASCoding
 */
public class OASCoding {
    /**
     * Unique study key
     * @return studyKey
     */
    public String studyKey { get; set; }

    /**
     * Name of the site associated with the coded data
     * @return siteName
     */
    public String siteName { get; set; }

    /**
     * Site ID associated with the coded data
     * @return siteId
     */
    public Integer siteId { get; set; }

    /**
     * Subject ID associated with the coded data
     * @return subjectId
     */
    public Integer subjectId { get; set; }

    /**
     * Subject key (display ID) associated with the coded data
     * @return subjectKey
     */
    public String subjectKey { get; set; }

    /**
     * Form ID where the coded data originates
     * @return formId
     */
    public Integer formId { get; set; }

    /**
     * Name of the form where the coded data originates
     * @return formName
     */
    public String formName { get; set; }

    /**
     * Form key where the coded data originates
     * @return formKey
     */
    public String formKey { get; set; }

    /**
     * Revision number of the coding entry
     * @return revision
     */
    public Integer revision { get; set; }

    /**
     * Record ID associated with the coded data
     * @return recordId
     */
    public Integer recordId { get; set; }

    /**
     * Variable name (field) that was coded
     * @return variable
     */
    public String variable { get; set; }

    /**
     * Original value entered that required coding
     * @return value
     */
    public String value { get; set; }

    /**
     * Mednet coding ID
     * @return codingId
     */
    public Integer codingId { get; set; }

    /**
     * Standardized code assigned (e.g., dictionary term)
     * @return code
     */
    public String code { get; set; }

    /**
     * Name of the user who performed the coding
     * @return codedBy
     */
    public String codedBy { get; set; }

    /**
     * Reason for coding or any notes on changes
     * @return reason
     */
    public String reason { get; set; }

    /**
     * Name of the dictionary used (e.g., MedDRA)
     * @return dictionaryName
     */
    public String dictionaryName { get; set; }

    /**
     * Version of the dictionary used
     * @return dictionaryVersion
     */
    public String dictionaryVersion { get; set; }

    /**
     * Date when the coding was performed
     * @return dateCoded
     */
    public String dateCoded { get; set; }

    public static OASCoding getExample() {
        OASCoding coding = new OASCoding();
          coding.studyKey = '';
          coding.siteName = '';
          coding.siteId = 0;
          coding.subjectId = 0;
          coding.subjectKey = '';
          coding.formId = 0;
          coding.formName = '';
          coding.formKey = '';
          coding.revision = 0;
          coding.recordId = 0;
          coding.variable = '';
          coding.value = '';
          coding.codingId = 0;
          coding.code = '';
          coding.codedBy = '';
          coding.reason = '';
          coding.dictionaryName = '';
          coding.dictionaryVersion = '';
          coding.dateCoded = '';
        return coding;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASCoding) {           
            OASCoding coding = (OASCoding) obj;
            return this.studyKey == coding.studyKey
                && this.siteName == coding.siteName
                && this.siteId == coding.siteId
                && this.subjectId == coding.subjectId
                && this.subjectKey == coding.subjectKey
                && this.formId == coding.formId
                && this.formName == coding.formName
                && this.formKey == coding.formKey
                && this.revision == coding.revision
                && this.recordId == coding.recordId
                && this.variable == coding.variable
                && this.value == coding.value
                && this.codingId == coding.codingId
                && this.code == coding.code
                && this.codedBy == coding.codedBy
                && this.reason == coding.reason
                && this.dictionaryName == coding.dictionaryName
                && this.dictionaryVersion == coding.dictionaryVersion
                && this.dateCoded == coding.dateCoded;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (studyKey == null ? 0 : System.hashCode(studyKey));
        hashCode = (17 * hashCode) + (siteName == null ? 0 : System.hashCode(siteName));
        hashCode = (17 * hashCode) + (siteId == null ? 0 : System.hashCode(siteId));
        hashCode = (17 * hashCode) + (subjectId == null ? 0 : System.hashCode(subjectId));
        hashCode = (17 * hashCode) + (subjectKey == null ? 0 : System.hashCode(subjectKey));
        hashCode = (17 * hashCode) + (formId == null ? 0 : System.hashCode(formId));
        hashCode = (17 * hashCode) + (formName == null ? 0 : System.hashCode(formName));
        hashCode = (17 * hashCode) + (formKey == null ? 0 : System.hashCode(formKey));
        hashCode = (17 * hashCode) + (revision == null ? 0 : System.hashCode(revision));
        hashCode = (17 * hashCode) + (recordId == null ? 0 : System.hashCode(recordId));
        hashCode = (17 * hashCode) + (variable == null ? 0 : System.hashCode(variable));
        hashCode = (17 * hashCode) + (value == null ? 0 : System.hashCode(value));
        hashCode = (17 * hashCode) + (codingId == null ? 0 : System.hashCode(codingId));
        hashCode = (17 * hashCode) + (code == null ? 0 : System.hashCode(code));
        hashCode = (17 * hashCode) + (codedBy == null ? 0 : System.hashCode(codedBy));
        hashCode = (17 * hashCode) + (reason == null ? 0 : System.hashCode(reason));
        hashCode = (17 * hashCode) + (dictionaryName == null ? 0 : System.hashCode(dictionaryName));
        hashCode = (17 * hashCode) + (dictionaryVersion == null ? 0 : System.hashCode(dictionaryVersion));
        hashCode = (17 * hashCode) + (dateCoded == null ? 0 : System.hashCode(dateCoded));
        return hashCode;
    }
}

