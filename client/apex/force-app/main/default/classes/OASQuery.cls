/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services.\nThis specification documents all available endpoints in the latest version of the API.\n
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASQuery
 */
public class OASQuery {
    /**
     * Unique study key
     * @return studyKey
     */
    public String studyKey { get; set; }

    /**
     * Mednet subject ID associated with the query (if applicable)
     * @return subjectId
     */
    public Integer subjectId { get; set; }

    /**
     * Client-assigned subject OID (if applicable)
     * @return subjectOid
     */
    public String subjectOid { get; set; }

    /**
     * Category/type of the query (e.g., subject, record, question)
     * @return annotationType
     */
    public String annotationType { get; set; }

    /**
     * Unique system identifier for the query
     * @return annotationId
     */
    public Integer annotationId { get; set; }

    /**
     * System text identifier for the query type/location (subject, record, question)
     * @return type
     */
    public String type { get; set; }

    /**
     * Description of the query (e.g., reason or context)
     * @return description
     */
    public String description { get; set; }

    /**
     * Record ID associated with the query (if applicable)
     * @return recordId
     */
    public Integer recordId { get; set; }

    /**
     * Variable name (field) associated with the query (if applicable)
     * @return variable
     */
    public String variable { get; set; }

    /**
     * Subject display ID associated with the query (if applicable)
     * @return subjectKey
     */
    public String subjectKey { get; set; }

    /**
     * Date when the query was created
     * @return dateCreated
     */
    public String dateCreated { get; set; }

    /**
     * Date when the query was last modified
     * @return dateModified
     */
    public String dateModified { get; set; }

    /**
     * History of comments/actions on the query
     * @return queryComments
     */
    public List<OASQueryComment> queryComments { get; set; }

    public OASQuery() {
        queryComments = new List<OASQueryComment>();
    }

    public static OASQuery getExample() {
        OASQuery query = new OASQuery();
          query.studyKey = '';
          query.subjectId = 0;
          query.subjectOid = '';
          query.annotationType = '';
          query.annotationId = 0;
          query.type = '';
          query.description = '';
          query.recordId = 0;
          query.variable = '';
          query.subjectKey = '';
          query.dateCreated = '';
          query.dateModified = '';
          query.queryComments = new List<OASQueryComment>{OASQueryComment.getExample()};
        return query;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASQuery) {           
            OASQuery query = (OASQuery) obj;
            return this.studyKey == query.studyKey
                && this.subjectId == query.subjectId
                && this.subjectOid == query.subjectOid
                && this.annotationType == query.annotationType
                && this.annotationId == query.annotationId
                && this.type == query.type
                && this.description == query.description
                && this.recordId == query.recordId
                && this.variable == query.variable
                && this.subjectKey == query.subjectKey
                && this.dateCreated == query.dateCreated
                && this.dateModified == query.dateModified
                && this.queryComments == query.queryComments;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (studyKey == null ? 0 : System.hashCode(studyKey));
        hashCode = (17 * hashCode) + (subjectId == null ? 0 : System.hashCode(subjectId));
        hashCode = (17 * hashCode) + (subjectOid == null ? 0 : System.hashCode(subjectOid));
        hashCode = (17 * hashCode) + (annotationType == null ? 0 : System.hashCode(annotationType));
        hashCode = (17 * hashCode) + (annotationId == null ? 0 : System.hashCode(annotationId));
        hashCode = (17 * hashCode) + (type == null ? 0 : System.hashCode(type));
        hashCode = (17 * hashCode) + (description == null ? 0 : System.hashCode(description));
        hashCode = (17 * hashCode) + (recordId == null ? 0 : System.hashCode(recordId));
        hashCode = (17 * hashCode) + (variable == null ? 0 : System.hashCode(variable));
        hashCode = (17 * hashCode) + (subjectKey == null ? 0 : System.hashCode(subjectKey));
        hashCode = (17 * hashCode) + (dateCreated == null ? 0 : System.hashCode(dateCreated));
        hashCode = (17 * hashCode) + (dateModified == null ? 0 : System.hashCode(dateModified));
        hashCode = (17 * hashCode) + (queryComments == null ? 0 : System.hashCode(queryComments));
        return hashCode;
    }
}

