/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComponents_schemas_RecordCreateRequest_item.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComponents_schemas_RecordCreateRequest_item::OAIComponents_schemas_RecordCreateRequest_item(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComponents_schemas_RecordCreateRequest_item::OAIComponents_schemas_RecordCreateRequest_item() {
    this->initializeModel();
}

OAIComponents_schemas_RecordCreateRequest_item::~OAIComponents_schemas_RecordCreateRequest_item() {}

void OAIComponents_schemas_RecordCreateRequest_item::initializeModel() {

    m_form_key_isSet = false;
    m_form_key_isValid = false;

    m_form_id_isSet = false;
    m_form_id_isValid = false;

    m_site_name_isSet = false;
    m_site_name_isValid = false;

    m_site_id_isSet = false;
    m_site_id_isValid = false;

    m_subject_key_isSet = false;
    m_subject_key_isValid = false;

    m_subject_id_isSet = false;
    m_subject_id_isValid = false;

    m_subject_oid_isSet = false;
    m_subject_oid_isValid = false;

    m_interval_name_isSet = false;
    m_interval_name_isValid = false;

    m_interval_id_isSet = false;
    m_interval_id_isValid = false;

    m_record_id_isSet = false;
    m_record_id_isValid = false;

    m_record_oid_isSet = false;
    m_record_oid_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;
}

void OAIComponents_schemas_RecordCreateRequest_item::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComponents_schemas_RecordCreateRequest_item::fromJsonObject(QJsonObject json) {

    m_form_key_isValid = ::OpenAPI::fromJsonValue(m_form_key, json[QString("formKey")]);
    m_form_key_isSet = !json[QString("formKey")].isNull() && m_form_key_isValid;

    m_form_id_isValid = ::OpenAPI::fromJsonValue(m_form_id, json[QString("formId")]);
    m_form_id_isSet = !json[QString("formId")].isNull() && m_form_id_isValid;

    m_site_name_isValid = ::OpenAPI::fromJsonValue(m_site_name, json[QString("siteName")]);
    m_site_name_isSet = !json[QString("siteName")].isNull() && m_site_name_isValid;

    m_site_id_isValid = ::OpenAPI::fromJsonValue(m_site_id, json[QString("siteId")]);
    m_site_id_isSet = !json[QString("siteId")].isNull() && m_site_id_isValid;

    m_subject_key_isValid = ::OpenAPI::fromJsonValue(m_subject_key, json[QString("subjectKey")]);
    m_subject_key_isSet = !json[QString("subjectKey")].isNull() && m_subject_key_isValid;

    m_subject_id_isValid = ::OpenAPI::fromJsonValue(m_subject_id, json[QString("subjectId")]);
    m_subject_id_isSet = !json[QString("subjectId")].isNull() && m_subject_id_isValid;

    m_subject_oid_isValid = ::OpenAPI::fromJsonValue(m_subject_oid, json[QString("subjectOid")]);
    m_subject_oid_isSet = !json[QString("subjectOid")].isNull() && m_subject_oid_isValid;

    m_interval_name_isValid = ::OpenAPI::fromJsonValue(m_interval_name, json[QString("intervalName")]);
    m_interval_name_isSet = !json[QString("intervalName")].isNull() && m_interval_name_isValid;

    m_interval_id_isValid = ::OpenAPI::fromJsonValue(m_interval_id, json[QString("intervalId")]);
    m_interval_id_isSet = !json[QString("intervalId")].isNull() && m_interval_id_isValid;

    m_record_id_isValid = ::OpenAPI::fromJsonValue(m_record_id, json[QString("recordId")]);
    m_record_id_isSet = !json[QString("recordId")].isNull() && m_record_id_isValid;

    m_record_oid_isValid = ::OpenAPI::fromJsonValue(m_record_oid, json[QString("recordOid")]);
    m_record_oid_isSet = !json[QString("recordOid")].isNull() && m_record_oid_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;
}

QString OAIComponents_schemas_RecordCreateRequest_item::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComponents_schemas_RecordCreateRequest_item::asJsonObject() const {
    QJsonObject obj;
    if (m_form_key_isSet) {
        obj.insert(QString("formKey"), ::OpenAPI::toJsonValue(m_form_key));
    }
    if (m_form_id_isSet) {
        obj.insert(QString("formId"), ::OpenAPI::toJsonValue(m_form_id));
    }
    if (m_site_name_isSet) {
        obj.insert(QString("siteName"), ::OpenAPI::toJsonValue(m_site_name));
    }
    if (m_site_id_isSet) {
        obj.insert(QString("siteId"), ::OpenAPI::toJsonValue(m_site_id));
    }
    if (m_subject_key_isSet) {
        obj.insert(QString("subjectKey"), ::OpenAPI::toJsonValue(m_subject_key));
    }
    if (m_subject_id_isSet) {
        obj.insert(QString("subjectId"), ::OpenAPI::toJsonValue(m_subject_id));
    }
    if (m_subject_oid_isSet) {
        obj.insert(QString("subjectOid"), ::OpenAPI::toJsonValue(m_subject_oid));
    }
    if (m_interval_name_isSet) {
        obj.insert(QString("intervalName"), ::OpenAPI::toJsonValue(m_interval_name));
    }
    if (m_interval_id_isSet) {
        obj.insert(QString("intervalId"), ::OpenAPI::toJsonValue(m_interval_id));
    }
    if (m_record_id_isSet) {
        obj.insert(QString("recordId"), ::OpenAPI::toJsonValue(m_record_id));
    }
    if (m_record_oid_isSet) {
        obj.insert(QString("recordOid"), ::OpenAPI::toJsonValue(m_record_oid));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    return obj;
}

QString OAIComponents_schemas_RecordCreateRequest_item::getFormKey() const {
    return m_form_key;
}
void OAIComponents_schemas_RecordCreateRequest_item::setFormKey(const QString &form_key) {
    m_form_key = form_key;
    m_form_key_isSet = true;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_form_key_Set() const{
    return m_form_key_isSet;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_form_key_Valid() const{
    return m_form_key_isValid;
}

qint32 OAIComponents_schemas_RecordCreateRequest_item::getFormId() const {
    return m_form_id;
}
void OAIComponents_schemas_RecordCreateRequest_item::setFormId(const qint32 &form_id) {
    m_form_id = form_id;
    m_form_id_isSet = true;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_form_id_Set() const{
    return m_form_id_isSet;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_form_id_Valid() const{
    return m_form_id_isValid;
}

QString OAIComponents_schemas_RecordCreateRequest_item::getSiteName() const {
    return m_site_name;
}
void OAIComponents_schemas_RecordCreateRequest_item::setSiteName(const QString &site_name) {
    m_site_name = site_name;
    m_site_name_isSet = true;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_site_name_Set() const{
    return m_site_name_isSet;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_site_name_Valid() const{
    return m_site_name_isValid;
}

qint32 OAIComponents_schemas_RecordCreateRequest_item::getSiteId() const {
    return m_site_id;
}
void OAIComponents_schemas_RecordCreateRequest_item::setSiteId(const qint32 &site_id) {
    m_site_id = site_id;
    m_site_id_isSet = true;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_site_id_Set() const{
    return m_site_id_isSet;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_site_id_Valid() const{
    return m_site_id_isValid;
}

QString OAIComponents_schemas_RecordCreateRequest_item::getSubjectKey() const {
    return m_subject_key;
}
void OAIComponents_schemas_RecordCreateRequest_item::setSubjectKey(const QString &subject_key) {
    m_subject_key = subject_key;
    m_subject_key_isSet = true;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_subject_key_Set() const{
    return m_subject_key_isSet;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_subject_key_Valid() const{
    return m_subject_key_isValid;
}

qint32 OAIComponents_schemas_RecordCreateRequest_item::getSubjectId() const {
    return m_subject_id;
}
void OAIComponents_schemas_RecordCreateRequest_item::setSubjectId(const qint32 &subject_id) {
    m_subject_id = subject_id;
    m_subject_id_isSet = true;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_subject_id_Set() const{
    return m_subject_id_isSet;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_subject_id_Valid() const{
    return m_subject_id_isValid;
}

QString OAIComponents_schemas_RecordCreateRequest_item::getSubjectOid() const {
    return m_subject_oid;
}
void OAIComponents_schemas_RecordCreateRequest_item::setSubjectOid(const QString &subject_oid) {
    m_subject_oid = subject_oid;
    m_subject_oid_isSet = true;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_subject_oid_Set() const{
    return m_subject_oid_isSet;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_subject_oid_Valid() const{
    return m_subject_oid_isValid;
}

QString OAIComponents_schemas_RecordCreateRequest_item::getIntervalName() const {
    return m_interval_name;
}
void OAIComponents_schemas_RecordCreateRequest_item::setIntervalName(const QString &interval_name) {
    m_interval_name = interval_name;
    m_interval_name_isSet = true;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_interval_name_Set() const{
    return m_interval_name_isSet;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_interval_name_Valid() const{
    return m_interval_name_isValid;
}

qint32 OAIComponents_schemas_RecordCreateRequest_item::getIntervalId() const {
    return m_interval_id;
}
void OAIComponents_schemas_RecordCreateRequest_item::setIntervalId(const qint32 &interval_id) {
    m_interval_id = interval_id;
    m_interval_id_isSet = true;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_interval_id_Set() const{
    return m_interval_id_isSet;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_interval_id_Valid() const{
    return m_interval_id_isValid;
}

qint32 OAIComponents_schemas_RecordCreateRequest_item::getRecordId() const {
    return m_record_id;
}
void OAIComponents_schemas_RecordCreateRequest_item::setRecordId(const qint32 &record_id) {
    m_record_id = record_id;
    m_record_id_isSet = true;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_record_id_Set() const{
    return m_record_id_isSet;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_record_id_Valid() const{
    return m_record_id_isValid;
}

QString OAIComponents_schemas_RecordCreateRequest_item::getRecordOid() const {
    return m_record_oid;
}
void OAIComponents_schemas_RecordCreateRequest_item::setRecordOid(const QString &record_oid) {
    m_record_oid = record_oid;
    m_record_oid_isSet = true;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_record_oid_Set() const{
    return m_record_oid_isSet;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_record_oid_Valid() const{
    return m_record_oid_isValid;
}

QMap<QString, QJsonValue> OAIComponents_schemas_RecordCreateRequest_item::getData() const {
    return m_data;
}
void OAIComponents_schemas_RecordCreateRequest_item::setData(const QMap<QString, QJsonValue> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_data_Set() const{
    return m_data_isSet;
}

bool OAIComponents_schemas_RecordCreateRequest_item::is_data_Valid() const{
    return m_data_isValid;
}

bool OAIComponents_schemas_RecordCreateRequest_item::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_form_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_oid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_oid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComponents_schemas_RecordCreateRequest_item::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_form_key_isValid && m_data_isValid && true;
}

} // namespace OpenAPI
