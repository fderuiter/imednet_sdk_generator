/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as $ from 'jquery';
import * as models from '../model/models';
import { COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


export class RecordsApi {
    protected basePath = 'https://edc.prod.imednetapi.com/api/v1/edc';
    public defaultHeaders: Array<string> = [];
    public defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings = undefined;
    public configuration: Configuration = new Configuration();

    constructor(basePath?: string, configuration?: Configuration, defaultExtraJQueryAjaxSettings?: JQueryAjaxSettings) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
        if (defaultExtraJQueryAjaxSettings) {
            this.defaultExtraJQueryAjaxSettings = defaultExtraJQueryAjaxSettings;
        }
    }

    private extendObj<T1 extends object, T2 extends T1>(objA: T2, objB: T2): T1|T2 {
        for (let key in objB) {
            if (objB.hasOwnProperty(key)) {
                objA[key] = objB[key];
            }
        }
        return objA;
    }

    /**
     * 
     * @summary Add new record or update subject/record data
     * @param studyKey Study key identifying the study context for the request
     * @param modelsComponentsSchemasRecordCreateRequestItem An array of record objects defining the operation to perform (subject registration, record creation, or scheduled record update).
     */
    public createRecords(studyKey: string, modelsComponentsSchemasRecordCreateRequestItem: Array<models.ComponentsSchemasRecordCreateRequestItem>, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.RecordJobStatus;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/studies/{studyKey}/records'.replace('{' + 'studyKey' + '}', encodeURIComponent(String(studyKey)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'studyKey' is not null or undefined
        if (studyKey === null || studyKey === undefined) {
            throw new Error('Required parameter studyKey was null or undefined when calling createRecords.');
        }

        // verify required parameter 'modelsComponentsSchemasRecordCreateRequestItem' is not null or undefined
        if (modelsComponentsSchemasRecordCreateRequestItem === null || modelsComponentsSchemasRecordCreateRequestItem === undefined) {
            throw new Error('Required parameter modelsComponentsSchemasRecordCreateRequestItem was null or undefined when calling createRecords.');
        }


        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKey) {
            headerParams['x-api-key'] = this.configuration.apiKey;
        }

        // authentication (securityKeyAuth) required
        if (this.configuration.apiKey) {
            headerParams['x-imn-security-key'] = this.configuration.apiKey;
        }


        headerParams['Content-Type'] = 'application/json';

        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'POST',
            headers: headerParams,
            processData: false
        };

        requestOptions.data = JSON.stringify(modelsComponentsSchemasRecordCreateRequestItem);
        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.RecordJobStatus;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.RecordJobStatus, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

    /**
     * 
     * @summary List records (eCRF instances) in a study
     * @param studyKey Study key identifying the study context for the request
     * @param page Page index to retrieve (0-based)
     * @param size Number of items to return per page (max 500)
     * @param sort Sorting criteria in the format &#x60;property,ASC&#x60; or &#x60;property,DESC&#x60;. Can be repeated.
     * @param filter Optional filter criteria to apply, in the format &#x60;attribute&#x3D;&#x3D;value&#x60; with support for &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, !&#x3D;. Multiple criteria can be combined with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR).
     * @param recordDataFilter Optional filter criteria to apply on recordData fields (question responses). Supports &#x3D;&#x3D;, !&#x3D;, &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;~ (contains) and can combine multiple criteria with &#x60;;&#x60; (AND) or &#x60;,&#x60; (OR).
     */
    public listRecords(studyKey: string, page?: number, size?: number, sort?: string, filter?: string, recordDataFilter?: string, extraJQueryAjaxSettings?: JQueryAjaxSettings): JQuery.Promise<
    { response: JQueryXHR; body: models.RecordList;  },
    { response: JQueryXHR; errorThrown: string }
    > {
        let localVarPath = this.basePath + '/studies/{studyKey}/records'.replace('{' + 'studyKey' + '}', encodeURIComponent(String(studyKey)));

        let queryParameters: any = {};
        let headerParams: any = {};
        // verify required parameter 'studyKey' is not null or undefined
        if (studyKey === null || studyKey === undefined) {
            throw new Error('Required parameter studyKey was null or undefined when calling listRecords.');
        }

        if (page !== null && page !== undefined) {
            queryParameters['page'] = <string><any>page;
        }
        if (size !== null && size !== undefined) {
            queryParameters['size'] = <string><any>size;
        }
        if (sort !== null && sort !== undefined) {
            queryParameters['sort'] = <string><any>sort;
        }
        if (filter !== null && filter !== undefined) {
            queryParameters['filter'] = <string><any>filter;
        }
        if (recordDataFilter !== null && recordDataFilter !== undefined) {
            queryParameters['recordDataFilter'] = <string><any>recordDataFilter;
        }

        localVarPath = localVarPath + "?" + $.param(queryParameters);
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (apiKeyAuth) required
        if (this.configuration.apiKey) {
            headerParams['x-api-key'] = this.configuration.apiKey;
        }

        // authentication (securityKeyAuth) required
        if (this.configuration.apiKey) {
            headerParams['x-imn-security-key'] = this.configuration.apiKey;
        }


        let requestOptions: JQueryAjaxSettings = {
            url: localVarPath,
            type: 'GET',
            headers: headerParams,
            processData: false
        };

        if (headerParams['Content-Type']) {
            requestOptions.contentType = headerParams['Content-Type'];
        }

        if (extraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, extraJQueryAjaxSettings);
        }

        if (this.defaultExtraJQueryAjaxSettings) {
            requestOptions = (<any>Object).assign(requestOptions, this.defaultExtraJQueryAjaxSettings);
        }

        let dfd = $.Deferred<
            { response: JQueryXHR; body: models.RecordList;  },
            { response: JQueryXHR; errorThrown: string }
        >();
        $.ajax(requestOptions).then(
            (data: models.RecordList, textStatus: string, jqXHR: JQueryXHR) =>
                dfd.resolve({response: jqXHR, body: data}),
            (xhr: JQueryXHR, textStatus: string, errorThrown: string) =>
                dfd.reject({response: xhr, errorThrown: errorThrown})
        );
        return dfd.promise();
    }

}
