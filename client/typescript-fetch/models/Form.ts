/* tslint:disable */
/* eslint-disable */
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Form
 */
export interface Form {
    /**
     * Unique study key
     * @type {string}
     * @memberof Form
     */
    studyKey?: string;
    /**
     * Mednet Form ID
     * @type {number}
     * @memberof Form
     */
    formId?: number;
    /**
     * User-defined form key
     * @type {string}
     * @memberof Form
     */
    formKey?: string;
    /**
     * Name of the form (eCRF)
     * @type {string}
     * @memberof Form
     */
    formName?: string;
    /**
     * Type of the form (e.g., Subject or Site)
     * @type {string}
     * @memberof Form
     */
    formType?: string;
    /**
     * Number of modifications (revisions) of the form metadata
     * @type {number}
     * @memberof Form
     */
    revision?: number;
    /**
     * Whether the form has an embedded log
     * @type {boolean}
     * @memberof Form
     */
    embeddedLog?: boolean;
    /**
     * Whether the form enforces record ownership
     * @type {boolean}
     * @memberof Form
     */
    enforceOwnership?: boolean;
    /**
     * Whether the form requires a user agreement
     * @type {boolean}
     * @memberof Form
     */
    userAgreement?: boolean;
    /**
     * Whether the form is marked as a subject record report
     * @type {boolean}
     * @memberof Form
     */
    subjectRecordReport?: boolean;
    /**
     * Whether the form is included in unscheduled visits
     * @type {boolean}
     * @memberof Form
     */
    unscheduledVisit?: boolean;
    /**
     * Whether the form is included in Other Forms category
     * @type {boolean}
     * @memberof Form
     */
    otherForms?: boolean;
    /**
     * Whether the form is an ePRO (electronic patient reported outcome) form
     * @type {boolean}
     * @memberof Form
     */
    eproForm?: boolean;
    /**
     * Whether the form allows copying of data
     * @type {boolean}
     * @memberof Form
     */
    allowCopy?: boolean;
    /**
     * Whether the form is soft-deleted (disabled)
     * @type {boolean}
     * @memberof Form
     */
    disabled?: boolean;
    /**
     * Date when this form was created
     * @type {string}
     * @memberof Form
     */
    dateCreated?: string;
    /**
     * Date when this form was last modified
     * @type {string}
     * @memberof Form
     */
    dateModified?: string;
}

/**
 * Check if a given object implements the Form interface.
 */
export function instanceOfForm(value: object): value is Form {
    return true;
}

export function FormFromJSON(json: any): Form {
    return FormFromJSONTyped(json, false);
}

export function FormFromJSONTyped(json: any, ignoreDiscriminator: boolean): Form {
    if (json == null) {
        return json;
    }
    return {
        
        'studyKey': json['studyKey'] == null ? undefined : json['studyKey'],
        'formId': json['formId'] == null ? undefined : json['formId'],
        'formKey': json['formKey'] == null ? undefined : json['formKey'],
        'formName': json['formName'] == null ? undefined : json['formName'],
        'formType': json['formType'] == null ? undefined : json['formType'],
        'revision': json['revision'] == null ? undefined : json['revision'],
        'embeddedLog': json['embeddedLog'] == null ? undefined : json['embeddedLog'],
        'enforceOwnership': json['enforceOwnership'] == null ? undefined : json['enforceOwnership'],
        'userAgreement': json['userAgreement'] == null ? undefined : json['userAgreement'],
        'subjectRecordReport': json['subjectRecordReport'] == null ? undefined : json['subjectRecordReport'],
        'unscheduledVisit': json['unscheduledVisit'] == null ? undefined : json['unscheduledVisit'],
        'otherForms': json['otherForms'] == null ? undefined : json['otherForms'],
        'eproForm': json['eproForm'] == null ? undefined : json['eproForm'],
        'allowCopy': json['allowCopy'] == null ? undefined : json['allowCopy'],
        'disabled': json['disabled'] == null ? undefined : json['disabled'],
        'dateCreated': json['dateCreated'] == null ? undefined : json['dateCreated'],
        'dateModified': json['dateModified'] == null ? undefined : json['dateModified'],
    };
}

export function FormToJSON(json: any): Form {
    return FormToJSONTyped(json, false);
}

export function FormToJSONTyped(value?: Form | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'studyKey': value['studyKey'],
        'formId': value['formId'],
        'formKey': value['formKey'],
        'formName': value['formName'],
        'formType': value['formType'],
        'revision': value['revision'],
        'embeddedLog': value['embeddedLog'],
        'enforceOwnership': value['enforceOwnership'],
        'userAgreement': value['userAgreement'],
        'subjectRecordReport': value['subjectRecordReport'],
        'unscheduledVisit': value['unscheduledVisit'],
        'otherForms': value['otherForms'],
        'eproForm': value['eproForm'],
        'allowCopy': value['allowCopy'],
        'disabled': value['disabled'],
        'dateCreated': value['dateCreated'],
        'dateModified': value['dateModified'],
    };
}

