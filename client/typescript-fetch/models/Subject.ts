/* tslint:disable */
/* eslint-disable */
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Keyword } from './Keyword';
import {
    KeywordFromJSON,
    KeywordFromJSONTyped,
    KeywordToJSON,
    KeywordToJSONTyped,
} from './Keyword';

/**
 * 
 * @export
 * @interface Subject
 */
export interface Subject {
    /**
     * Unique study key
     * @type {string}
     * @memberof Subject
     */
    studyKey?: string;
    /**
     * Mednet subject ID (internal numeric ID)
     * @type {number}
     * @memberof Subject
     */
    subjectId?: number;
    /**
     * Client-assigned subject object identifier (OID)
     * @type {string}
     * @memberof Subject
     */
    subjectOid?: string;
    /**
     * Protocol-assigned subject identifier (display ID)
     * @type {string}
     * @memberof Subject
     */
    subjectKey?: string;
    /**
     * Current status of the subject (e.g., Enrolled)
     * @type {string}
     * @memberof Subject
     */
    subjectStatus?: string;
    /**
     * Mednet site ID the subject is associated with
     * @type {number}
     * @memberof Subject
     */
    siteId?: number;
    /**
     * Name of the site the subject is associated with
     * @type {string}
     * @memberof Subject
     */
    siteName?: string;
    /**
     * Whether the subject is marked as deleted
     * @type {boolean}
     * @memberof Subject
     */
    deleted?: boolean;
    /**
     * Subjectâ€™s enrollment start date
     * @type {string}
     * @memberof Subject
     */
    enrollmentStartDate?: string;
    /**
     * Date when this subject record was created
     * @type {string}
     * @memberof Subject
     */
    dateCreated?: string;
    /**
     * Date when this subject record was last modified
     * @type {string}
     * @memberof Subject
     */
    dateModified?: string;
    /**
     * List of keywords associated with the subject
     * @type {Array<Keyword>}
     * @memberof Subject
     */
    keywords?: Array<Keyword>;
}

/**
 * Check if a given object implements the Subject interface.
 */
export function instanceOfSubject(value: object): value is Subject {
    return true;
}

export function SubjectFromJSON(json: any): Subject {
    return SubjectFromJSONTyped(json, false);
}

export function SubjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): Subject {
    if (json == null) {
        return json;
    }
    return {
        
        'studyKey': json['studyKey'] == null ? undefined : json['studyKey'],
        'subjectId': json['subjectId'] == null ? undefined : json['subjectId'],
        'subjectOid': json['subjectOid'] == null ? undefined : json['subjectOid'],
        'subjectKey': json['subjectKey'] == null ? undefined : json['subjectKey'],
        'subjectStatus': json['subjectStatus'] == null ? undefined : json['subjectStatus'],
        'siteId': json['siteId'] == null ? undefined : json['siteId'],
        'siteName': json['siteName'] == null ? undefined : json['siteName'],
        'deleted': json['deleted'] == null ? undefined : json['deleted'],
        'enrollmentStartDate': json['enrollmentStartDate'] == null ? undefined : json['enrollmentStartDate'],
        'dateCreated': json['dateCreated'] == null ? undefined : json['dateCreated'],
        'dateModified': json['dateModified'] == null ? undefined : json['dateModified'],
        'keywords': json['keywords'] == null ? undefined : ((json['keywords'] as Array<any>).map(KeywordFromJSON)),
    };
}

export function SubjectToJSON(json: any): Subject {
    return SubjectToJSONTyped(json, false);
}

export function SubjectToJSONTyped(value?: Subject | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'studyKey': value['studyKey'],
        'subjectId': value['subjectId'],
        'subjectOid': value['subjectOid'],
        'subjectKey': value['subjectKey'],
        'subjectStatus': value['subjectStatus'],
        'siteId': value['siteId'],
        'siteName': value['siteName'],
        'deleted': value['deleted'],
        'enrollmentStartDate': value['enrollmentStartDate'],
        'dateCreated': value['dateCreated'],
        'dateModified': value['dateModified'],
        'keywords': value['keywords'] == null ? undefined : ((value['keywords'] as Array<any>).map(KeywordToJSON)),
    };
}

