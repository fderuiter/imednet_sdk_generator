/* tslint:disable */
/* eslint-disable */
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ComponentsSchemasMetadataError } from './ComponentsSchemasMetadataError';
import {
    ComponentsSchemasMetadataErrorFromJSON,
    ComponentsSchemasMetadataErrorFromJSONTyped,
    ComponentsSchemasMetadataErrorToJSON,
    ComponentsSchemasMetadataErrorToJSONTyped,
} from './ComponentsSchemasMetadataError';

/**
 * 
 * @export
 * @interface Metadata
 */
export interface Metadata {
    /**
     * HTTP status of the response (e.g., OK or ERROR)
     * @type {string}
     * @memberof Metadata
     */
    status?: string;
    /**
     * HTTP method of the request
     * @type {string}
     * @memberof Metadata
     */
    method?: string;
    /**
     * Requested URI path
     * @type {string}
     * @memberof Metadata
     */
    path?: string;
    /**
     * Timestamp when response was generated
     * @type {Date}
     * @memberof Metadata
     */
    timestamp?: Date;
    /**
     * 
     * @type {ComponentsSchemasMetadataError}
     * @memberof Metadata
     */
    error?: ComponentsSchemasMetadataError;
}

/**
 * Check if a given object implements the Metadata interface.
 */
export function instanceOfMetadata(value: object): value is Metadata {
    return true;
}

export function MetadataFromJSON(json: any): Metadata {
    return MetadataFromJSONTyped(json, false);
}

export function MetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): Metadata {
    if (json == null) {
        return json;
    }
    return {
        
        'status': json['status'] == null ? undefined : json['status'],
        'method': json['method'] == null ? undefined : json['method'],
        'path': json['path'] == null ? undefined : json['path'],
        'timestamp': json['timestamp'] == null ? undefined : (new Date(json['timestamp'])),
        'error': json['error'] == null ? undefined : ComponentsSchemasMetadataErrorFromJSON(json['error']),
    };
}

export function MetadataToJSON(json: any): Metadata {
    return MetadataToJSONTyped(json, false);
}

export function MetadataToJSONTyped(value?: Metadata | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'status': value['status'],
        'method': value['method'],
        'path': value['path'],
        'timestamp': value['timestamp'] == null ? undefined : ((value['timestamp']).toISOString()),
        'error': ComponentsSchemasMetadataErrorToJSON(value['error']),
    };
}

