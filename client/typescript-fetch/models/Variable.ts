/* tslint:disable */
/* eslint-disable */
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Variable
 */
export interface Variable {
    /**
     * Unique study key
     * @type {string}
     * @memberof Variable
     */
    studyKey?: string;
    /**
     * Mednet variable ID
     * @type {number}
     * @memberof Variable
     */
    variableId?: number;
    /**
     * Type of the variable (field type), e.g., RADIO, TEXT, etc.
     * @type {string}
     * @memberof Variable
     */
    variableType?: VariableVariableTypeEnum;
    /**
     * Name of the variable (question text or label)
     * @type {string}
     * @memberof Variable
     */
    variableName?: string;
    /**
     * Sequence of the variable on the form
     * @type {number}
     * @memberof Variable
     */
    sequence?: number;
    /**
     * Number of modifications of the variable (via form metadata revisions)
     * @type {number}
     * @memberof Variable
     */
    revision?: number;
    /**
     * Whether the variable is marked as disabled (deleted)
     * @type {boolean}
     * @memberof Variable
     */
    disabled?: boolean;
    /**
     * Date when this variable was created
     * @type {string}
     * @memberof Variable
     */
    dateCreated?: string;
    /**
     * Date when this variable was last modified
     * @type {string}
     * @memberof Variable
     */
    dateModified?: string;
    /**
     * ID of the form that this variable belongs to
     * @type {number}
     * @memberof Variable
     */
    formId?: number;
    /**
     * Client-assigned variable OID
     * @type {string}
     * @memberof Variable
     */
    variableOid?: string;
    /**
     * Whether the variable is marked as deleted
     * @type {boolean}
     * @memberof Variable
     */
    deleted?: boolean;
    /**
     * Form key of the form that this variable belongs to
     * @type {string}
     * @memberof Variable
     */
    formKey?: string;
    /**
     * Name of the form that this variable belongs to
     * @type {string}
     * @memberof Variable
     */
    formName?: string;
    /**
     * User-defined identifier (field name) for the variable
     * @type {string}
     * @memberof Variable
     */
    label?: string;
    /**
     * Whether the variable is flagged as blinded (hidden in certain contexts)
     * @type {boolean}
     * @memberof Variable
     */
    blinded?: boolean;
}


/**
 * @export
 */
export const VariableVariableTypeEnum = {
    Text: 'TEXT',
    Textarea: 'TEXTAREA',
    Radio: 'RADIO',
    Checkbox: 'CHECKBOX',
    Dropdown: 'DROPDOWN',
    Date: 'DATE',
    Number: 'NUMBER'
} as const;
export type VariableVariableTypeEnum = typeof VariableVariableTypeEnum[keyof typeof VariableVariableTypeEnum];


/**
 * Check if a given object implements the Variable interface.
 */
export function instanceOfVariable(value: object): value is Variable {
    return true;
}

export function VariableFromJSON(json: any): Variable {
    return VariableFromJSONTyped(json, false);
}

export function VariableFromJSONTyped(json: any, ignoreDiscriminator: boolean): Variable {
    if (json == null) {
        return json;
    }
    return {
        
        'studyKey': json['studyKey'] == null ? undefined : json['studyKey'],
        'variableId': json['variableId'] == null ? undefined : json['variableId'],
        'variableType': json['variableType'] == null ? undefined : json['variableType'],
        'variableName': json['variableName'] == null ? undefined : json['variableName'],
        'sequence': json['sequence'] == null ? undefined : json['sequence'],
        'revision': json['revision'] == null ? undefined : json['revision'],
        'disabled': json['disabled'] == null ? undefined : json['disabled'],
        'dateCreated': json['dateCreated'] == null ? undefined : json['dateCreated'],
        'dateModified': json['dateModified'] == null ? undefined : json['dateModified'],
        'formId': json['formId'] == null ? undefined : json['formId'],
        'variableOid': json['variableOid'] == null ? undefined : json['variableOid'],
        'deleted': json['deleted'] == null ? undefined : json['deleted'],
        'formKey': json['formKey'] == null ? undefined : json['formKey'],
        'formName': json['formName'] == null ? undefined : json['formName'],
        'label': json['label'] == null ? undefined : json['label'],
        'blinded': json['blinded'] == null ? undefined : json['blinded'],
    };
}

export function VariableToJSON(json: any): Variable {
    return VariableToJSONTyped(json, false);
}

export function VariableToJSONTyped(value?: Variable | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'studyKey': value['studyKey'],
        'variableId': value['variableId'],
        'variableType': value['variableType'],
        'variableName': value['variableName'],
        'sequence': value['sequence'],
        'revision': value['revision'],
        'disabled': value['disabled'],
        'dateCreated': value['dateCreated'],
        'dateModified': value['dateModified'],
        'formId': value['formId'],
        'variableOid': value['variableOid'],
        'deleted': value['deleted'],
        'formKey': value['formKey'],
        'formName': value['formName'],
        'label': value['label'],
        'blinded': value['blinded'],
    };
}

