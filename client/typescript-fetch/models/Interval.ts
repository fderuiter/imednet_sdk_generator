/* tslint:disable */
/* eslint-disable */
/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ComponentsSchemasIntervalFormsItem } from './ComponentsSchemasIntervalFormsItem';
import {
    ComponentsSchemasIntervalFormsItemFromJSON,
    ComponentsSchemasIntervalFormsItemFromJSONTyped,
    ComponentsSchemasIntervalFormsItemToJSON,
    ComponentsSchemasIntervalFormsItemToJSONTyped,
} from './ComponentsSchemasIntervalFormsItem';

/**
 * 
 * @export
 * @interface Interval
 */
export interface Interval {
    /**
     * Unique study key
     * @type {string}
     * @memberof Interval
     */
    studyKey?: string;
    /**
     * Unique system identifier for the interval (visit definition)
     * @type {number}
     * @memberof Interval
     */
    intervalId?: number;
    /**
     * Name of the interval (visit) as defined in the study
     * @type {string}
     * @memberof Interval
     */
    intervalName?: string;
    /**
     * Description of the interval (visit)
     * @type {string}
     * @memberof Interval
     */
    intervalDescription?: string;
    /**
     * Sequence number of the interval in the schedule
     * @type {number}
     * @memberof Interval
     */
    intervalSequence?: number;
    /**
     * Identifier for the interval group (if intervals are grouped)
     * @type {number}
     * @memberof Interval
     */
    intervalGroupId?: number;
    /**
     * Name of the interval group
     * @type {string}
     * @memberof Interval
     */
    intervalGroupName?: string;
    /**
     * Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
     * @type {string}
     * @memberof Interval
     */
    timeline?: string;
    /**
     * Baseline interval used for calculating this intervalâ€™s dates
     * @type {string}
     * @memberof Interval
     */
    definedUsingInterval?: string;
    /**
     * Baseline form (name) from which the calculation date is taken
     * @type {string}
     * @memberof Interval
     */
    windowCalculationForm?: string;
    /**
     * Baseline field (variable name) from which the calculation date is taken
     * @type {string}
     * @memberof Interval
     */
    windowCalculationDate?: string;
    /**
     * Form used to capture the actual date for this interval
     * @type {string}
     * @memberof Interval
     */
    actualDateForm?: string;
    /**
     * Field (variable name) used to capture the actual date for this interval
     * @type {string}
     * @memberof Interval
     */
    actualDate?: string;
    /**
     * Number of days from the calculation date when the interval is due
     * @type {number}
     * @memberof Interval
     */
    dueDateWillBeIn?: number;
    /**
     * Number of days before the due date that are allowed (negative window)
     * @type {number}
     * @memberof Interval
     */
    negativeSlack?: number;
    /**
     * Number of days after the due date that are allowed (positive window)
     * @type {number}
     * @memberof Interval
     */
    positiveSlack?: number;
    /**
     * Number of days of grace period for ePRO completion after due date
     * @type {number}
     * @memberof Interval
     */
    eproGracePeriod?: number;
    /**
     * List of forms that are scheduled in this interval
     * @type {Array<ComponentsSchemasIntervalFormsItem>}
     * @memberof Interval
     */
    forms?: Array<ComponentsSchemasIntervalFormsItem>;
    /**
     * Whether the interval is soft-deleted (disabled)
     * @type {boolean}
     * @memberof Interval
     */
    disabled?: boolean;
    /**
     * Date when this interval was created
     * @type {string}
     * @memberof Interval
     */
    dateCreated?: string;
    /**
     * Date when this interval was last modified
     * @type {string}
     * @memberof Interval
     */
    dateModified?: string;
}

/**
 * Check if a given object implements the Interval interface.
 */
export function instanceOfInterval(value: object): value is Interval {
    return true;
}

export function IntervalFromJSON(json: any): Interval {
    return IntervalFromJSONTyped(json, false);
}

export function IntervalFromJSONTyped(json: any, ignoreDiscriminator: boolean): Interval {
    if (json == null) {
        return json;
    }
    return {
        
        'studyKey': json['studyKey'] == null ? undefined : json['studyKey'],
        'intervalId': json['intervalId'] == null ? undefined : json['intervalId'],
        'intervalName': json['intervalName'] == null ? undefined : json['intervalName'],
        'intervalDescription': json['intervalDescription'] == null ? undefined : json['intervalDescription'],
        'intervalSequence': json['intervalSequence'] == null ? undefined : json['intervalSequence'],
        'intervalGroupId': json['intervalGroupId'] == null ? undefined : json['intervalGroupId'],
        'intervalGroupName': json['intervalGroupName'] == null ? undefined : json['intervalGroupName'],
        'timeline': json['timeline'] == null ? undefined : json['timeline'],
        'definedUsingInterval': json['definedUsingInterval'] == null ? undefined : json['definedUsingInterval'],
        'windowCalculationForm': json['windowCalculationForm'] == null ? undefined : json['windowCalculationForm'],
        'windowCalculationDate': json['windowCalculationDate'] == null ? undefined : json['windowCalculationDate'],
        'actualDateForm': json['actualDateForm'] == null ? undefined : json['actualDateForm'],
        'actualDate': json['actualDate'] == null ? undefined : json['actualDate'],
        'dueDateWillBeIn': json['dueDateWillBeIn'] == null ? undefined : json['dueDateWillBeIn'],
        'negativeSlack': json['negativeSlack'] == null ? undefined : json['negativeSlack'],
        'positiveSlack': json['positiveSlack'] == null ? undefined : json['positiveSlack'],
        'eproGracePeriod': json['eproGracePeriod'] == null ? undefined : json['eproGracePeriod'],
        'forms': json['forms'] == null ? undefined : ((json['forms'] as Array<any>).map(ComponentsSchemasIntervalFormsItemFromJSON)),
        'disabled': json['disabled'] == null ? undefined : json['disabled'],
        'dateCreated': json['dateCreated'] == null ? undefined : json['dateCreated'],
        'dateModified': json['dateModified'] == null ? undefined : json['dateModified'],
    };
}

export function IntervalToJSON(json: any): Interval {
    return IntervalToJSONTyped(json, false);
}

export function IntervalToJSONTyped(value?: Interval | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'studyKey': value['studyKey'],
        'intervalId': value['intervalId'],
        'intervalName': value['intervalName'],
        'intervalDescription': value['intervalDescription'],
        'intervalSequence': value['intervalSequence'],
        'intervalGroupId': value['intervalGroupId'],
        'intervalGroupName': value['intervalGroupName'],
        'timeline': value['timeline'],
        'definedUsingInterval': value['definedUsingInterval'],
        'windowCalculationForm': value['windowCalculationForm'],
        'windowCalculationDate': value['windowCalculationDate'],
        'actualDateForm': value['actualDateForm'],
        'actualDate': value['actualDate'],
        'dueDateWillBeIn': value['dueDateWillBeIn'],
        'negativeSlack': value['negativeSlack'],
        'positiveSlack': value['positiveSlack'],
        'eproGracePeriod': value['eproGracePeriod'],
        'forms': value['forms'] == null ? undefined : ((value['forms'] as Array<any>).map(ComponentsSchemasIntervalFormsItemToJSON)),
        'disabled': value['disabled'],
        'dateCreated': value['dateCreated'],
        'dateModified': value['dateModified'],
    };
}

