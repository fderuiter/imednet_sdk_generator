//
// JobsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class JobsAPI {

    /**
     Retrieve job status by batch ID
     
     - parameter studyKey: (path) Study key identifying the study context for the request 
     - parameter batchId: (path) Batch ID of the job to retrieve 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: Job
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getJobStatus(studyKey: String, batchId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) async throws(ErrorResponse) -> Job {
        return try await getJobStatusWithRequestBuilder(studyKey: studyKey, batchId: batchId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Retrieve job status by batch ID
     - GET /studies/{studyKey}/jobs/{batchId}
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyAuth
     - API Key:
       - type: apiKey x-imn-security-key (HEADER)
       - name: securityKeyAuth
     - parameter studyKey: (path) Study key identifying the study context for the request 
     - parameter batchId: (path) Batch ID of the job to retrieve 
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Job> 
     */
    open class func getJobStatusWithRequestBuilder(studyKey: String, batchId: String, apiConfiguration: OpenAPIClientAPIConfiguration = OpenAPIClientAPIConfiguration.shared) -> RequestBuilder<Job> {
        var localVariablePath = "/studies/{studyKey}/jobs/{batchId}"
        let studyKeyPreEscape = "\(APIHelper.mapValueToPathItem(studyKey))"
        let studyKeyPostEscape = studyKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{studyKey}", with: studyKeyPostEscape, options: .literal, range: nil)
        let batchIdPreEscape = "\(APIHelper.mapValueToPathItem(batchId))"
        let batchIdPostEscape = batchIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{batchId}", with: batchIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Job>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true, apiConfiguration: apiConfiguration)
    }
}
