//
// Role.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Role: Sendable, Codable, ParameterConvertible, Hashable {

    /** Timestamp when the role assignment was created (as [year, month, day, hour, minute, second, nanosecond]) */
    public var dateCreated: [Int]?
    /** Timestamp when the role assignment was last modified */
    public var dateModified: [Int]?
    /** Unique role ID (UUID) */
    public var roleId: String?
    /** Community ID or level associated with the role */
    public var communityId: Int?
    /** Name of the role */
    public var name: String?
    /** Description of the role */
    public var description: String?
    /** Role level or hierarchy */
    public var level: Int?
    /** Role type/category */
    public var type: String?
    /** Whether the role is inactive */
    public var inactive: Bool?

    public init(dateCreated: [Int]? = nil, dateModified: [Int]? = nil, roleId: String? = nil, communityId: Int? = nil, name: String? = nil, description: String? = nil, level: Int? = nil, type: String? = nil, inactive: Bool? = nil) {
        self.dateCreated = dateCreated
        self.dateModified = dateModified
        self.roleId = roleId
        self.communityId = communityId
        self.name = name
        self.description = description
        self.level = level
        self.type = type
        self.inactive = inactive
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dateCreated
        case dateModified
        case roleId
        case communityId
        case name
        case description
        case level
        case type
        case inactive
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateModified, forKey: .dateModified)
        try container.encodeIfPresent(roleId, forKey: .roleId)
        try container.encodeIfPresent(communityId, forKey: .communityId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(level, forKey: .level)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(inactive, forKey: .inactive)
    }
}

