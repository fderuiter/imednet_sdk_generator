//
// Variable.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Variable: Sendable, Codable, ParameterConvertible, Hashable {

    public enum VariableType: String, Sendable, Codable, CaseIterable {
        case text = "TEXT"
        case textarea = "TEXTAREA"
        case radio = "RADIO"
        case checkbox = "CHECKBOX"
        case dropdown = "DROPDOWN"
        case date = "DATE"
        case number = "NUMBER"
    }
    /** Unique study key */
    public var studyKey: String?
    /** Mednet variable ID */
    public var variableId: Int?
    /** Type of the variable (field type), e.g., RADIO, TEXT, etc. */
    public var variableType: VariableType?
    /** Name of the variable (question text or label) */
    public var variableName: String?
    /** Sequence of the variable on the form */
    public var sequence: Int?
    /** Number of modifications of the variable (via form metadata revisions) */
    public var revision: Int?
    /** Whether the variable is marked as disabled (deleted) */
    public var disabled: Bool?
    /** Date when this variable was created */
    public var dateCreated: String?
    /** Date when this variable was last modified */
    public var dateModified: String?
    /** ID of the form that this variable belongs to */
    public var formId: Int?
    /** Client-assigned variable OID */
    public var variableOid: String?
    /** Whether the variable is marked as deleted */
    public var deleted: Bool?
    /** Form key of the form that this variable belongs to */
    public var formKey: String?
    /** Name of the form that this variable belongs to */
    public var formName: String?
    /** User-defined identifier (field name) for the variable */
    public var label: String?
    /** Whether the variable is flagged as blinded (hidden in certain contexts) */
    public var blinded: Bool?

    public init(studyKey: String? = nil, variableId: Int? = nil, variableType: VariableType? = nil, variableName: String? = nil, sequence: Int? = nil, revision: Int? = nil, disabled: Bool? = nil, dateCreated: String? = nil, dateModified: String? = nil, formId: Int? = nil, variableOid: String? = nil, deleted: Bool? = nil, formKey: String? = nil, formName: String? = nil, label: String? = nil, blinded: Bool? = nil) {
        self.studyKey = studyKey
        self.variableId = variableId
        self.variableType = variableType
        self.variableName = variableName
        self.sequence = sequence
        self.revision = revision
        self.disabled = disabled
        self.dateCreated = dateCreated
        self.dateModified = dateModified
        self.formId = formId
        self.variableOid = variableOid
        self.deleted = deleted
        self.formKey = formKey
        self.formName = formName
        self.label = label
        self.blinded = blinded
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case studyKey
        case variableId
        case variableType
        case variableName
        case sequence
        case revision
        case disabled
        case dateCreated
        case dateModified
        case formId
        case variableOid
        case deleted
        case formKey
        case formName
        case label
        case blinded
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(studyKey, forKey: .studyKey)
        try container.encodeIfPresent(variableId, forKey: .variableId)
        try container.encodeIfPresent(variableType, forKey: .variableType)
        try container.encodeIfPresent(variableName, forKey: .variableName)
        try container.encodeIfPresent(sequence, forKey: .sequence)
        try container.encodeIfPresent(revision, forKey: .revision)
        try container.encodeIfPresent(disabled, forKey: .disabled)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
        try container.encodeIfPresent(dateModified, forKey: .dateModified)
        try container.encodeIfPresent(formId, forKey: .formId)
        try container.encodeIfPresent(variableOid, forKey: .variableOid)
        try container.encodeIfPresent(deleted, forKey: .deleted)
        try container.encodeIfPresent(formKey, forKey: .formKey)
        try container.encodeIfPresent(formName, forKey: .formName)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(blinded, forKey: .blinded)
    }
}

