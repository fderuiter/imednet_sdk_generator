//
// Coding.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Coding: Sendable, Codable, ParameterConvertible, Hashable {

    /** Unique study key */
    public var studyKey: String?
    /** Name of the site associated with the coded data */
    public var siteName: String?
    /** Site ID associated with the coded data */
    public var siteId: Int?
    /** Subject ID associated with the coded data */
    public var subjectId: Int?
    /** Subject key (display ID) associated with the coded data */
    public var subjectKey: String?
    /** Form ID where the coded data originates */
    public var formId: Int?
    /** Name of the form where the coded data originates */
    public var formName: String?
    /** Form key where the coded data originates */
    public var formKey: String?
    /** Revision number of the coding entry */
    public var revision: Int?
    /** Record ID associated with the coded data */
    public var recordId: Int?
    /** Variable name (field) that was coded */
    public var variable: String?
    /** Original value entered that required coding */
    public var value: String?
    /** Mednet coding ID */
    public var codingId: Int?
    /** Standardized code assigned (e.g., dictionary term) */
    public var code: String?
    /** Name of the user who performed the coding */
    public var codedBy: String?
    /** Reason for coding or any notes on changes */
    public var reason: String?
    /** Name of the dictionary used (e.g., MedDRA) */
    public var dictionaryName: String?
    /** Version of the dictionary used */
    public var dictionaryVersion: String?
    /** Date when the coding was performed */
    public var dateCoded: String?

    public init(studyKey: String? = nil, siteName: String? = nil, siteId: Int? = nil, subjectId: Int? = nil, subjectKey: String? = nil, formId: Int? = nil, formName: String? = nil, formKey: String? = nil, revision: Int? = nil, recordId: Int? = nil, variable: String? = nil, value: String? = nil, codingId: Int? = nil, code: String? = nil, codedBy: String? = nil, reason: String? = nil, dictionaryName: String? = nil, dictionaryVersion: String? = nil, dateCoded: String? = nil) {
        self.studyKey = studyKey
        self.siteName = siteName
        self.siteId = siteId
        self.subjectId = subjectId
        self.subjectKey = subjectKey
        self.formId = formId
        self.formName = formName
        self.formKey = formKey
        self.revision = revision
        self.recordId = recordId
        self.variable = variable
        self.value = value
        self.codingId = codingId
        self.code = code
        self.codedBy = codedBy
        self.reason = reason
        self.dictionaryName = dictionaryName
        self.dictionaryVersion = dictionaryVersion
        self.dateCoded = dateCoded
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case studyKey
        case siteName
        case siteId
        case subjectId
        case subjectKey
        case formId
        case formName
        case formKey
        case revision
        case recordId
        case variable
        case value
        case codingId
        case code
        case codedBy
        case reason
        case dictionaryName
        case dictionaryVersion
        case dateCoded
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(studyKey, forKey: .studyKey)
        try container.encodeIfPresent(siteName, forKey: .siteName)
        try container.encodeIfPresent(siteId, forKey: .siteId)
        try container.encodeIfPresent(subjectId, forKey: .subjectId)
        try container.encodeIfPresent(subjectKey, forKey: .subjectKey)
        try container.encodeIfPresent(formId, forKey: .formId)
        try container.encodeIfPresent(formName, forKey: .formName)
        try container.encodeIfPresent(formKey, forKey: .formKey)
        try container.encodeIfPresent(revision, forKey: .revision)
        try container.encodeIfPresent(recordId, forKey: .recordId)
        try container.encodeIfPresent(variable, forKey: .variable)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(codingId, forKey: .codingId)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(codedBy, forKey: .codedBy)
        try container.encodeIfPresent(reason, forKey: .reason)
        try container.encodeIfPresent(dictionaryName, forKey: .dictionaryName)
        try container.encodeIfPresent(dictionaryVersion, forKey: .dictionaryVersion)
        try container.encodeIfPresent(dateCoded, forKey: .dateCoded)
    }
}

