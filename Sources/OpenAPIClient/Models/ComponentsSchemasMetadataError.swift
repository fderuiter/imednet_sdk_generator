//
// ComponentsSchemasMetadataError.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

/** Error details if an error occurred */
public struct ComponentsSchemasMetadataError: Sendable, Codable, ParameterConvertible, Hashable {

    /** Error message describing the issue */
    public var message: String?

    public init(message: String? = nil) {
        self.message = message
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case message
    }

    public var additionalProperties: [String: JSONValue] = [:]

    public subscript(key: String) -> JSONValue? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            additionalProperties[key] = newValue
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(message, forKey: .message)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        message = try container.decodeIfPresent(String.self, forKey: .message)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("message")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        additionalProperties = try additionalPropertiesContainer.decodeMap(JSONValue.self, excludedKeys: nonAdditionalPropertyKeys)
    }
}

