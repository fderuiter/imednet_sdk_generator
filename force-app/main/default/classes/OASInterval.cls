/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services.\nThis specification documents all available endpoints in the latest version of the API.\n
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASInterval
 */
public class OASInterval {
    /**
     * Unique study key
     * @return studyKey
     */
    public String studyKey { get; set; }

    /**
     * Unique system identifier for the interval (visit definition)
     * @return intervalId
     */
    public Integer intervalId { get; set; }

    /**
     * Name of the interval (visit) as defined in the study
     * @return intervalName
     */
    public String intervalName { get; set; }

    /**
     * Description of the interval (visit)
     * @return intervalDescription
     */
    public String intervalDescription { get; set; }

    /**
     * Sequence number of the interval in the schedule
     * @return intervalSequence
     */
    public Integer intervalSequence { get; set; }

    /**
     * Identifier for the interval group (if intervals are grouped)
     * @return intervalGroupId
     */
    public Integer intervalGroupId { get; set; }

    /**
     * Name of the interval group
     * @return intervalGroupName
     */
    public String intervalGroupName { get; set; }

    /**
     * Type of interval visit window (e.g., None, Due Date, Start - End Date, Actual Date)
     * @return timeline
     */
    public String timeline { get; set; }

    /**
     * Baseline interval used for calculating this intervalâ€™s dates
     * @return definedUsingInterval
     */
    public String definedUsingInterval { get; set; }

    /**
     * Baseline form (name) from which the calculation date is taken
     * @return windowCalculationForm
     */
    public String windowCalculationForm { get; set; }

    /**
     * Baseline field (variable name) from which the calculation date is taken
     * @return windowCalculationDate
     */
    public String windowCalculationDate { get; set; }

    /**
     * Form used to capture the actual date for this interval
     * @return actualDateForm
     */
    public String actualDateForm { get; set; }

    /**
     * Field (variable name) used to capture the actual date for this interval
     * @return actualDate
     */
    public String actualDate { get; set; }

    /**
     * Number of days from the calculation date when the interval is due
     * @return dueDateWillBeIn
     */
    public Integer dueDateWillBeIn { get; set; }

    /**
     * Number of days before the due date that are allowed (negative window)
     * @return negativeSlack
     */
    public Integer negativeSlack { get; set; }

    /**
     * Number of days after the due date that are allowed (positive window)
     * @return positiveSlack
     */
    public Integer positiveSlack { get; set; }

    /**
     * Number of days of grace period for ePRO completion after due date
     * @return eproGracePeriod
     */
    public Integer eproGracePeriod { get; set; }

    /**
     * List of forms that are scheduled in this interval
     * @return forms
     */
    public List<OASComponentsSchemasIntervalFormsIte> forms { get; set; }

    /**
     * Whether the interval is soft-deleted (disabled)
     * @return disabled
     */
    public Boolean disabled { get; set; }

    /**
     * Date when this interval was created
     * @return dateCreated
     */
    public String dateCreated { get; set; }

    /**
     * Date when this interval was last modified
     * @return dateModified
     */
    public String dateModified { get; set; }

    public OASInterval() {
        forms = new List<OASComponentsSchemasIntervalFormsIte>();
    }

    public static OASInterval getExample() {
        OASInterval interval = new OASInterval();
          interval.studyKey = '';
          interval.intervalId = 0;
          interval.intervalName = '';
          interval.intervalDescription = '';
          interval.intervalSequence = 0;
          interval.intervalGroupId = 0;
          interval.intervalGroupName = '';
          interval.timeline = '';
          interval.definedUsingInterval = '';
          interval.windowCalculationForm = '';
          interval.windowCalculationDate = '';
          interval.actualDateForm = '';
          interval.actualDate = '';
          interval.dueDateWillBeIn = 0;
          interval.negativeSlack = 0;
          interval.positiveSlack = 0;
          interval.eproGracePeriod = 0;
          interval.forms = new List<OASComponentsSchemasIntervalFormsIte>{OASComponentsSchemasIntervalFormsIte.getExample()};
          interval.disabled = true;
          interval.dateCreated = '';
          interval.dateModified = '';
        return interval;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASInterval) {           
            OASInterval interval = (OASInterval) obj;
            return this.studyKey == interval.studyKey
                && this.intervalId == interval.intervalId
                && this.intervalName == interval.intervalName
                && this.intervalDescription == interval.intervalDescription
                && this.intervalSequence == interval.intervalSequence
                && this.intervalGroupId == interval.intervalGroupId
                && this.intervalGroupName == interval.intervalGroupName
                && this.timeline == interval.timeline
                && this.definedUsingInterval == interval.definedUsingInterval
                && this.windowCalculationForm == interval.windowCalculationForm
                && this.windowCalculationDate == interval.windowCalculationDate
                && this.actualDateForm == interval.actualDateForm
                && this.actualDate == interval.actualDate
                && this.dueDateWillBeIn == interval.dueDateWillBeIn
                && this.negativeSlack == interval.negativeSlack
                && this.positiveSlack == interval.positiveSlack
                && this.eproGracePeriod == interval.eproGracePeriod
                && this.forms == interval.forms
                && this.disabled == interval.disabled
                && this.dateCreated == interval.dateCreated
                && this.dateModified == interval.dateModified;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (studyKey == null ? 0 : System.hashCode(studyKey));
        hashCode = (17 * hashCode) + (intervalId == null ? 0 : System.hashCode(intervalId));
        hashCode = (17 * hashCode) + (intervalName == null ? 0 : System.hashCode(intervalName));
        hashCode = (17 * hashCode) + (intervalDescription == null ? 0 : System.hashCode(intervalDescription));
        hashCode = (17 * hashCode) + (intervalSequence == null ? 0 : System.hashCode(intervalSequence));
        hashCode = (17 * hashCode) + (intervalGroupId == null ? 0 : System.hashCode(intervalGroupId));
        hashCode = (17 * hashCode) + (intervalGroupName == null ? 0 : System.hashCode(intervalGroupName));
        hashCode = (17 * hashCode) + (timeline == null ? 0 : System.hashCode(timeline));
        hashCode = (17 * hashCode) + (definedUsingInterval == null ? 0 : System.hashCode(definedUsingInterval));
        hashCode = (17 * hashCode) + (windowCalculationForm == null ? 0 : System.hashCode(windowCalculationForm));
        hashCode = (17 * hashCode) + (windowCalculationDate == null ? 0 : System.hashCode(windowCalculationDate));
        hashCode = (17 * hashCode) + (actualDateForm == null ? 0 : System.hashCode(actualDateForm));
        hashCode = (17 * hashCode) + (actualDate == null ? 0 : System.hashCode(actualDate));
        hashCode = (17 * hashCode) + (dueDateWillBeIn == null ? 0 : System.hashCode(dueDateWillBeIn));
        hashCode = (17 * hashCode) + (negativeSlack == null ? 0 : System.hashCode(negativeSlack));
        hashCode = (17 * hashCode) + (positiveSlack == null ? 0 : System.hashCode(positiveSlack));
        hashCode = (17 * hashCode) + (eproGracePeriod == null ? 0 : System.hashCode(eproGracePeriod));
        hashCode = (17 * hashCode) + (forms == null ? 0 : System.hashCode(forms));
        hashCode = (17 * hashCode) + (disabled == null ? 0 : System.hashCode(disabled));
        hashCode = (17 * hashCode) + (dateCreated == null ? 0 : System.hashCode(dateCreated));
        hashCode = (17 * hashCode) + (dateModified == null ? 0 : System.hashCode(dateModified));
        return hashCode;
    }
}

