/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services.\nThis specification documents all available endpoints in the latest version of the API.\n
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASVariable
 */
public class OASVariable {
    /**
     * Unique study key
     * @return studyKey
     */
    public String studyKey { get; set; }

    /**
     * Mednet variable ID
     * @return variableId
     */
    public Integer variableId { get; set; }

    /**
     * Type of the variable (field type), e.g., RADIO, TEXT, etc.
     */
    public enum VariableTypeEnum {
        TEXT,
        TEXTAREA,
        RADIO,
        CHECKBOX,
        DROPDOWN,
        DATE,
        NUMBER
    }

    /**
     * Type of the variable (field type), e.g., RADIO, TEXT, etc.
     * @return variableType
     */
    public VariableTypeEnum variableType { get; set; }

    /**
     * Name of the variable (question text or label)
     * @return variableName
     */
    public String variableName { get; set; }

    /**
     * Sequence of the variable on the form
     * @return sequence
     */
    public Integer sequence { get; set; }

    /**
     * Number of modifications of the variable (via form metadata revisions)
     * @return revision
     */
    public Integer revision { get; set; }

    /**
     * Whether the variable is marked as disabled (deleted)
     * @return disabled
     */
    public Boolean disabled { get; set; }

    /**
     * Date when this variable was created
     * @return dateCreated
     */
    public String dateCreated { get; set; }

    /**
     * Date when this variable was last modified
     * @return dateModified
     */
    public String dateModified { get; set; }

    /**
     * ID of the form that this variable belongs to
     * @return formId
     */
    public Integer formId { get; set; }

    /**
     * Client-assigned variable OID
     * @return variableOid
     */
    public String variableOid { get; set; }

    /**
     * Whether the variable is marked as deleted
     * @return deleted
     */
    public Boolean deleted { get; set; }

    /**
     * Form key of the form that this variable belongs to
     * @return formKey
     */
    public String formKey { get; set; }

    /**
     * Name of the form that this variable belongs to
     * @return formName
     */
    public String formName { get; set; }

    /**
     * User-defined identifier (field name) for the variable
     * @return label
     */
    public String label { get; set; }

    /**
     * Whether the variable is flagged as blinded (hidden in certain contexts)
     * @return blinded
     */
    public Boolean blinded { get; set; }

    public static OASVariable getExample() {
        OASVariable variable = new OASVariable();
          variable.studyKey = '';
          variable.variableId = 0;
          variable.variableType = VariableTypeEnum.TEXT;
          variable.variableName = '';
          variable.sequence = 0;
          variable.revision = 0;
          variable.disabled = true;
          variable.dateCreated = '';
          variable.dateModified = '';
          variable.formId = 0;
          variable.variableOid = '';
          variable.deleted = true;
          variable.formKey = '';
          variable.formName = '';
          variable.label = '';
          variable.blinded = true;
        return variable;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASVariable) {           
            OASVariable variable = (OASVariable) obj;
            return this.studyKey == variable.studyKey
                && this.variableId == variable.variableId
                && this.variableType == variable.variableType
                && this.variableName == variable.variableName
                && this.sequence == variable.sequence
                && this.revision == variable.revision
                && this.disabled == variable.disabled
                && this.dateCreated == variable.dateCreated
                && this.dateModified == variable.dateModified
                && this.formId == variable.formId
                && this.variableOid == variable.variableOid
                && this.deleted == variable.deleted
                && this.formKey == variable.formKey
                && this.formName == variable.formName
                && this.label == variable.label
                && this.blinded == variable.blinded;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (studyKey == null ? 0 : System.hashCode(studyKey));
        hashCode = (17 * hashCode) + (variableId == null ? 0 : System.hashCode(variableId));
        hashCode = (17 * hashCode) + (variableType == null ? 0 : System.hashCode(variableType));
        hashCode = (17 * hashCode) + (variableName == null ? 0 : System.hashCode(variableName));
        hashCode = (17 * hashCode) + (sequence == null ? 0 : System.hashCode(sequence));
        hashCode = (17 * hashCode) + (revision == null ? 0 : System.hashCode(revision));
        hashCode = (17 * hashCode) + (disabled == null ? 0 : System.hashCode(disabled));
        hashCode = (17 * hashCode) + (dateCreated == null ? 0 : System.hashCode(dateCreated));
        hashCode = (17 * hashCode) + (dateModified == null ? 0 : System.hashCode(dateModified));
        hashCode = (17 * hashCode) + (formId == null ? 0 : System.hashCode(formId));
        hashCode = (17 * hashCode) + (variableOid == null ? 0 : System.hashCode(variableOid));
        hashCode = (17 * hashCode) + (deleted == null ? 0 : System.hashCode(deleted));
        hashCode = (17 * hashCode) + (formKey == null ? 0 : System.hashCode(formKey));
        hashCode = (17 * hashCode) + (formName == null ? 0 : System.hashCode(formName));
        hashCode = (17 * hashCode) + (label == null ? 0 : System.hashCode(label));
        hashCode = (17 * hashCode) + (blinded == null ? 0 : System.hashCode(blinded));
        return hashCode;
    }
}

