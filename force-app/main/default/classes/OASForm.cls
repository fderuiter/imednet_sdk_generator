/*
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services.\nThis specification documents all available endpoints in the latest version of the API.\n
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

/**
 * OASForm
 */
public class OASForm {
    /**
     * Unique study key
     * @return studyKey
     */
    public String studyKey { get; set; }

    /**
     * Mednet Form ID
     * @return formId
     */
    public Integer formId { get; set; }

    /**
     * User-defined form key
     * @return formKey
     */
    public String formKey { get; set; }

    /**
     * Name of the form (eCRF)
     * @return formName
     */
    public String formName { get; set; }

    /**
     * Type of the form (e.g., Subject or Site)
     * @return formType
     */
    public String formType { get; set; }

    /**
     * Number of modifications (revisions) of the form metadata
     * @return revision
     */
    public Integer revision { get; set; }

    /**
     * Whether the form has an embedded log
     * @return embeddedLog
     */
    public Boolean embeddedLog { get; set; }

    /**
     * Whether the form enforces record ownership
     * @return enforceOwnership
     */
    public Boolean enforceOwnership { get; set; }

    /**
     * Whether the form requires a user agreement
     * @return userAgreement
     */
    public Boolean userAgreement { get; set; }

    /**
     * Whether the form is marked as a subject record report
     * @return subjectRecordReport
     */
    public Boolean subjectRecordReport { get; set; }

    /**
     * Whether the form is included in unscheduled visits
     * @return unscheduledVisit
     */
    public Boolean unscheduledVisit { get; set; }

    /**
     * Whether the form is included in Other Forms category
     * @return otherForms
     */
    public Boolean otherForms { get; set; }

    /**
     * Whether the form is an ePRO (electronic patient reported outcome) form
     * @return eproForm
     */
    public Boolean eproForm { get; set; }

    /**
     * Whether the form allows copying of data
     * @return allowCopy
     */
    public Boolean allowCopy { get; set; }

    /**
     * Whether the form is soft-deleted (disabled)
     * @return disabled
     */
    public Boolean disabled { get; set; }

    /**
     * Date when this form was created
     * @return dateCreated
     */
    public String dateCreated { get; set; }

    /**
     * Date when this form was last modified
     * @return dateModified
     */
    public String dateModified { get; set; }

    public static OASForm getExample() {
        OASForm form = new OASForm();
          form.studyKey = '';
          form.formId = 0;
          form.formKey = '';
          form.formName = '';
          form.formType = '';
          form.revision = 0;
          form.embeddedLog = true;
          form.enforceOwnership = true;
          form.userAgreement = true;
          form.subjectRecordReport = true;
          form.unscheduledVisit = true;
          form.otherForms = true;
          form.eproForm = true;
          form.allowCopy = true;
          form.disabled = true;
          form.dateCreated = '';
          form.dateModified = '';
        return form;
    }

    public Boolean equals(Object obj) {
        if (obj instanceof OASForm) {           
            OASForm form = (OASForm) obj;
            return this.studyKey == form.studyKey
                && this.formId == form.formId
                && this.formKey == form.formKey
                && this.formName == form.formName
                && this.formType == form.formType
                && this.revision == form.revision
                && this.embeddedLog == form.embeddedLog
                && this.enforceOwnership == form.enforceOwnership
                && this.userAgreement == form.userAgreement
                && this.subjectRecordReport == form.subjectRecordReport
                && this.unscheduledVisit == form.unscheduledVisit
                && this.otherForms == form.otherForms
                && this.eproForm == form.eproForm
                && this.allowCopy == form.allowCopy
                && this.disabled == form.disabled
                && this.dateCreated == form.dateCreated
                && this.dateModified == form.dateModified;
        }
        return false;
    }

    public Integer hashCode() {
        Integer hashCode = 43;
        hashCode = (17 * hashCode) + (studyKey == null ? 0 : System.hashCode(studyKey));
        hashCode = (17 * hashCode) + (formId == null ? 0 : System.hashCode(formId));
        hashCode = (17 * hashCode) + (formKey == null ? 0 : System.hashCode(formKey));
        hashCode = (17 * hashCode) + (formName == null ? 0 : System.hashCode(formName));
        hashCode = (17 * hashCode) + (formType == null ? 0 : System.hashCode(formType));
        hashCode = (17 * hashCode) + (revision == null ? 0 : System.hashCode(revision));
        hashCode = (17 * hashCode) + (embeddedLog == null ? 0 : System.hashCode(embeddedLog));
        hashCode = (17 * hashCode) + (enforceOwnership == null ? 0 : System.hashCode(enforceOwnership));
        hashCode = (17 * hashCode) + (userAgreement == null ? 0 : System.hashCode(userAgreement));
        hashCode = (17 * hashCode) + (subjectRecordReport == null ? 0 : System.hashCode(subjectRecordReport));
        hashCode = (17 * hashCode) + (unscheduledVisit == null ? 0 : System.hashCode(unscheduledVisit));
        hashCode = (17 * hashCode) + (otherForms == null ? 0 : System.hashCode(otherForms));
        hashCode = (17 * hashCode) + (eproForm == null ? 0 : System.hashCode(eproForm));
        hashCode = (17 * hashCode) + (allowCopy == null ? 0 : System.hashCode(allowCopy));
        hashCode = (17 * hashCode) + (disabled == null ? 0 : System.hashCode(disabled));
        hashCode = (17 * hashCode) + (dateCreated == null ? 0 : System.hashCode(dateCreated));
        hashCode = (17 * hashCode) + (dateModified == null ? 0 : System.hashCode(dateModified));
        return hashCode;
    }
}

