/**
 * Mednet EDC API
 * The Mednet EDC (Electronic Data Capture) REST API provides a single-point of access for reading data stored across iMednet data services. This specification documents all available endpoints in the latest version of the API. 
 *
 * The version of the OpenAPI document: 1.3.6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { Keyword } from './keyword';

export class Record {
    /**
    * Unique study key
    */
    'studyKey'?: string;
    /**
    * Interval ID (visit definition) that this record is associated with
    */
    'intervalId'?: number;
    /**
    * Form ID of the form this record instance belongs to
    */
    'formId'?: number;
    /**
    * Form key of the form for this record instance
    */
    'formKey'?: string;
    /**
    * Site ID associated with the record
    */
    'siteId'?: number;
    /**
    * Unique record ID
    */
    'recordId'?: number;
    /**
    * Client-assigned record OID
    */
    'recordOid'?: string;
    /**
    * Type of record (e.g., SUBJECT for subject-related forms)
    */
    'recordType'?: string;
    /**
    * Current status of the record (e.g., Record Incomplete, Record Complete)
    */
    'recordStatus'?: string;
    /**
    * Whether the record is marked as deleted
    */
    'deleted'?: boolean;
    /**
    * Date when this record was created
    */
    'dateCreated'?: string;
    /**
    * Date when this record was last modified
    */
    'dateModified'?: string;
    /**
    * Mednet subject ID that this record is associated with
    */
    'subjectId'?: number;
    /**
    * Client-assigned subject OID for the subject this record is associated with
    */
    'subjectOid'?: string;
    /**
    * Subject display ID that this record is associated with
    */
    'subjectKey'?: string;
    /**
    * Visit instance ID that this record is associated with (if applicable)
    */
    'visitId'?: number;
    /**
    * Record ID of the parent record if this record is a subrecord (if applicable)
    */
    'parentRecordId'?: number;
    /**
    * List of keywords associated with the record
    */
    'keywords'?: Array<Keyword>;
    /**
    * Data fields and values captured in this record. The structure is dynamic, with keys corresponding to variable names.
    */
    'recordData'?: { [key: string]: any; };

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "studyKey",
            "baseName": "studyKey",
            "type": "string"
        },
        {
            "name": "intervalId",
            "baseName": "intervalId",
            "type": "number"
        },
        {
            "name": "formId",
            "baseName": "formId",
            "type": "number"
        },
        {
            "name": "formKey",
            "baseName": "formKey",
            "type": "string"
        },
        {
            "name": "siteId",
            "baseName": "siteId",
            "type": "number"
        },
        {
            "name": "recordId",
            "baseName": "recordId",
            "type": "number"
        },
        {
            "name": "recordOid",
            "baseName": "recordOid",
            "type": "string"
        },
        {
            "name": "recordType",
            "baseName": "recordType",
            "type": "string"
        },
        {
            "name": "recordStatus",
            "baseName": "recordStatus",
            "type": "string"
        },
        {
            "name": "deleted",
            "baseName": "deleted",
            "type": "boolean"
        },
        {
            "name": "dateCreated",
            "baseName": "dateCreated",
            "type": "string"
        },
        {
            "name": "dateModified",
            "baseName": "dateModified",
            "type": "string"
        },
        {
            "name": "subjectId",
            "baseName": "subjectId",
            "type": "number"
        },
        {
            "name": "subjectOid",
            "baseName": "subjectOid",
            "type": "string"
        },
        {
            "name": "subjectKey",
            "baseName": "subjectKey",
            "type": "string"
        },
        {
            "name": "visitId",
            "baseName": "visitId",
            "type": "number"
        },
        {
            "name": "parentRecordId",
            "baseName": "parentRecordId",
            "type": "number"
        },
        {
            "name": "keywords",
            "baseName": "keywords",
            "type": "Array<Keyword>"
        },
        {
            "name": "recordData",
            "baseName": "recordData",
            "type": "{ [key: string]: any; }"
        }    ];

    static getAttributeTypeMap() {
        return Record.attributeTypeMap;
    }
}

