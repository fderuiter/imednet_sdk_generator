//
// User.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct User: Codable, JSONEncodable, Hashable {

    /** Unique user ID (UUID) */
    public var userId: String?
    /** User login name */
    public var login: String?
    /** User first name */
    public var firstName: String?
    /** User last name */
    public var lastName: String?
    /** User email address */
    public var email: String?
    /** Whether the user is active in the given study */
    public var userActiveInStudy: Bool?
    /** Roles that the user has in the study */
    public var roles: [Role]?

    public init(userId: String? = nil, login: String? = nil, firstName: String? = nil, lastName: String? = nil, email: String? = nil, userActiveInStudy: Bool? = nil, roles: [Role]? = nil) {
        self.userId = userId
        self.login = login
        self.firstName = firstName
        self.lastName = lastName
        self.email = email
        self.userActiveInStudy = userActiveInStudy
        self.roles = roles
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case userId
        case login
        case firstName
        case lastName
        case email
        case userActiveInStudy
        case roles
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(login, forKey: .login)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(userActiveInStudy, forKey: .userActiveInStudy)
        try container.encodeIfPresent(roles, forKey: .roles)
    }
}

