//
// RecordRevision.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RecordRevision: Codable, JSONEncodable, Hashable {

    /** Unique study key */
    public var studyKey: String?
    /** Unique system identifier for the record revision */
    public var recordRevisionId: Int?
    /** Unique system identifier of the related record */
    public var recordId: Int?
    /** Client-assigned record OID (if any) */
    public var recordOid: String?
    /** Revision number of the record (version of the record status) */
    public var recordRevision: Int?
    /** Revision number of the data within the record */
    public var dataRevision: Int?
    /** Status of the record at this revision (user-defined status label) */
    public var recordStatus: String?
    /** Mednet subject ID related to the record */
    public var subjectId: Int?
    /** Client-assigned subject OID related to the record */
    public var subjectOid: String?
    /** Subject display ID related to the record */
    public var subjectKey: String?
    /** Site ID related to the record */
    public var siteId: Int?
    /** Form key of the form that the record belongs to */
    public var formKey: String?
    /** Interval ID (visit definition) related to the record */
    public var intervalId: Int?
    /** Role name of the user who saved the record revision */
    public var role: String?
    /** Username of the user who saved the record revision */
    public var user: String?
    /** Reason for change, if provided (for audit trail) */
    public var reasonForChange: String?
    /** Whether the record was deleted in this revision */
    public var deleted: Bool?
    /** Date when this record revision was created */
    public var dateCreated: String?

    public init(studyKey: String? = nil, recordRevisionId: Int? = nil, recordId: Int? = nil, recordOid: String? = nil, recordRevision: Int? = nil, dataRevision: Int? = nil, recordStatus: String? = nil, subjectId: Int? = nil, subjectOid: String? = nil, subjectKey: String? = nil, siteId: Int? = nil, formKey: String? = nil, intervalId: Int? = nil, role: String? = nil, user: String? = nil, reasonForChange: String? = nil, deleted: Bool? = nil, dateCreated: String? = nil) {
        self.studyKey = studyKey
        self.recordRevisionId = recordRevisionId
        self.recordId = recordId
        self.recordOid = recordOid
        self.recordRevision = recordRevision
        self.dataRevision = dataRevision
        self.recordStatus = recordStatus
        self.subjectId = subjectId
        self.subjectOid = subjectOid
        self.subjectKey = subjectKey
        self.siteId = siteId
        self.formKey = formKey
        self.intervalId = intervalId
        self.role = role
        self.user = user
        self.reasonForChange = reasonForChange
        self.deleted = deleted
        self.dateCreated = dateCreated
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case studyKey
        case recordRevisionId
        case recordId
        case recordOid
        case recordRevision
        case dataRevision
        case recordStatus
        case subjectId
        case subjectOid
        case subjectKey
        case siteId
        case formKey
        case intervalId
        case role
        case user
        case reasonForChange
        case deleted
        case dateCreated
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(studyKey, forKey: .studyKey)
        try container.encodeIfPresent(recordRevisionId, forKey: .recordRevisionId)
        try container.encodeIfPresent(recordId, forKey: .recordId)
        try container.encodeIfPresent(recordOid, forKey: .recordOid)
        try container.encodeIfPresent(recordRevision, forKey: .recordRevision)
        try container.encodeIfPresent(dataRevision, forKey: .dataRevision)
        try container.encodeIfPresent(recordStatus, forKey: .recordStatus)
        try container.encodeIfPresent(subjectId, forKey: .subjectId)
        try container.encodeIfPresent(subjectOid, forKey: .subjectOid)
        try container.encodeIfPresent(subjectKey, forKey: .subjectKey)
        try container.encodeIfPresent(siteId, forKey: .siteId)
        try container.encodeIfPresent(formKey, forKey: .formKey)
        try container.encodeIfPresent(intervalId, forKey: .intervalId)
        try container.encodeIfPresent(role, forKey: .role)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(reasonForChange, forKey: .reasonForChange)
        try container.encodeIfPresent(deleted, forKey: .deleted)
        try container.encodeIfPresent(dateCreated, forKey: .dateCreated)
    }
}

