//
// QueryComment.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct QueryComment: Codable, JSONEncodable, Hashable {

    /** Sequence number of the comment/action in the query history */
    public var sequence: Int?
    /** Status of the query after this comment (e.g., Open, Closed) */
    public var annotationStatus: String?
    /** Username of the user who made the comment or action */
    public var user: String?
    /** Text of the comment */
    public var comment: String?
    /** Whether the query was marked closed at this step */
    public var closed: Bool?
    /** Date of the comment or action */
    public var date: String?

    public init(sequence: Int? = nil, annotationStatus: String? = nil, user: String? = nil, comment: String? = nil, closed: Bool? = nil, date: String? = nil) {
        self.sequence = sequence
        self.annotationStatus = annotationStatus
        self.user = user
        self.comment = comment
        self.closed = closed
        self.date = date
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sequence
        case annotationStatus
        case user
        case comment
        case closed
        case date
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(sequence, forKey: .sequence)
        try container.encodeIfPresent(annotationStatus, forKey: .annotationStatus)
        try container.encodeIfPresent(user, forKey: .user)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(closed, forKey: .closed)
        try container.encodeIfPresent(date, forKey: .date)
    }
}

